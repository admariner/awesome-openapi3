luckymarmot/API-Flow: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B55:6823:A6519E:151A319:6500FB50.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
googleapis/gnostic: >
  [![Build
  Status](https://travis-ci.org/googleapis/gnostic.svg?branch=master)](https://travis-ci.org/googleapis/gnostic)


  # ⨁ gnostic


  This repository contains a Go command line tool which converts JSON and YAML

  [OpenAPI](https://github.com/OAI/OpenAPI-Specification) descriptions to and

  from equivalent Protocol Buffer representations.


  [Protocol Buffers](https://developers.google.com/protocol-buffers/) provide a

  language-neutral, platform-neutral, extensible mechanism for serializing

  structured data. **gnostic**'s Protocol Buffer models for the OpenAPI

  Specification can be used to generate code that includes data structures with

  explicit fields for the elements of an OpenAPI description. This makes it

  possible for developers to work with OpenAPI descriptions in type-safe ways,

  which is particularly useful in strongly-typed languages like Go and

  [Dart](https://dart.dev/).


  **gnostic** reads OpenAPI descriptions into these generated data structures,

  reports errors, resolves internal dependencies, and writes the results in a

  binary form that can be used in any language that is supported by the Protocol

  Buffer tools. A plugin interface simplifies integration with API tools written

  in a variety of different languages, and when necessary, Protocol Buffer

  OpenAPI descriptions can be reexported as JSON or YAML.


  **gnostic** compilation code and OpenAPI Protocol Buffer models are

  automatically generated from an

  [OpenAPI JSON
  Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json).

  Source code for the generator is in the [generate-gnostic](generate-gnostic)

  directory.


  ## Disclaimer


  Feedback and contributions are welcome! Until there is a 1.0 release, please

  consider this prerelease software and work in progress. To ensure stable

  builds, we request that dependent projects always refer to tagged releases of

  **gnostic**.


  ## Requirements


  **gnostic** can be run in any environment that supports
  [Go](http://golang.org)

  and the

  [Protocol Buffer Compiler](https://github.com/protocolbuffers/protobuf).


  ## Installation and Getting Started


  The following instructions are for installing **gnostic** using

  [Go modules](https://blog.golang.org/using-go-modules), supported by Go 1.11

  and later.


  1.  Get this package by downloading it with `git clone`.

          git clone https://github.com/googleapis/gnostic
          cd gnostic

  2.  Verify that you have a local installation of `protoc`. You can get protoc
      [here](https://github.com/protocolbuffers/protobuf).

  3.  Build **gnostic** with `make`. This uses
      [go generate](https://blog.golang.org/generate) to build support code
      including code generated by `protoc` and the Go protoc plugin, which is
      automatically downloaded from
      [github.com/golang/protobuf](https://github.com/golang/protobuf) by the
      [COMPILE-PROTOS.sh](COMPILE-PROTOS.sh) script. This also builds all plugins
      and associated tools in this repo.

  4.  Verify **gnostic** with `make test`. These tests are run by **gnostic**'s
      continuous integration, so you should expect them to pass for all release
      versions.

  5.  Run **gnostic**. This sample invocation creates a file in the current
      directory named `petstore.pb` that contains a binary Protocol Buffer
      description of a sample API.

              gnostic --pb-out=. examples/v2.0/json/petstore.json

  6.  You can also compile files that you specify with a URL. Here's another way
      to compile the previous example. This time we're creating `petstore.text`,
      which contains a textual representation of the Protocol Buffer description.
      This is mainly for use in testing and debugging.

              gnostic --text-out=petstore.text https://raw.githubusercontent.com/googleapis/gnostic/master/examples/v2.0/json/petstore.json

  7.  For a sample application, see apps/report. This reads a binary Protocol
      Buffer encoding created by **gnostic**.

          go install ./apps/report ## automatically installed by the top-level Makefile
          report petstore.pb

  8.  **gnostic** also supports plugins. **gnostic**'s plugin interface is
      modeled on `protoc`'s
      [plugin.proto](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto)
      and is described in [plugins/plugin.proto](plugins/plugin.proto). Several
      plugins are implemented in the `plugins` directory. Others, like
      [gnostic-grpc](https://github.com/googleapis/gnostic-grpc) and
      [gnostic-go-generator](https://github.com/googleapis/gnostic-go-generator),
      are published in their own repositories. One such plugin is
      [gnostic-vocabulary](plugins/gnostic-vocabulary), which produces a summary
      of the word usage in an APIs interfaces. You can run `gnostic-vocabulary`
      with the following:

              gnostic examples/v2.0/json/petstore.json --vocabulary_out=.

      This will produce files named `vocabulary.pb` and `vocabulary.json` in
      `examples/v2.0/json`. For the format of `vocabulary.pb`, see
      [metrics/vocabulary.proto](metrics/vocabulary.proto).

  9.  [Optional] A large part of **gnostic** is automatically-generated by the
      [generate-gnostic](generate-gnostic) tool. This uses JSON schemas to
      generate Protocol Buffer language files that describe supported API
      specification formats and Go-language files of code that will read JSON or
      YAML API descriptions into the generated protocol buffer models.
      Pre-generated versions of these files are checked into the
      [openapiv2](openapiv2), [openapiv3](openapiv3), and [discovery](discovery)
      directories. You can regenerate this code with the following:

          go install ./generate-gnostic
          generate-gnostic --v2
          generate-gnostic --v3
          generate-gnostic --discovery

  ## Copyright


  Copyright 2017-2020, Google LLC.


  ## License


  Released under the Apache 2.0 license.
Mermade/swagger2openapi: >
  # OAS-Kit


  This is the mono-repo for the following related projects


  * [swagger2openapi](packages/swagger2openapi/README.md)

  * [oas-validator](packages/oas-validator/README.md)

  * [oas-linter](packages/oas-linter/README.md)

  * [oas-resolver](packages/oas-resolver/README.md)

  * [oas-schema-walker](packages/oas-schema-walker/README.md)

  * [oas-kit-common](packages/oas-kit-common/README.md)

  * [reftools](packages/reftools/README.md)


  ## Documentation


  * [Main site](https://mermade.github.io/oas-kit)


  ## Online converter/validator


  * [OpenAPI-webconverter](https://mermade.org.uk/openapi-converter)


  ## Supported Node.js versions


  Any LTS version from 8 onwards.


  ## Development


  * clone the repository

  * `npm i` in the top level directory

  * `lerna bootstrap` or `npx lerna bootstrap`


  Please try and keep commits related to a single package or piece of
  functionality. PR in the usual way.


  ## Supporting development


  * [APIs.guru open-collective](https://opencollective.com/openapi-directory)

  * [Linode VPS referral
  link](https://www.linode.com/?r=5734be467cc501b23267cf66d451bc339042ddfa)
oasis-tcs/odata-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B67:055A:AB11E1:15B4DEA:6500FB65.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
xuzhg/OData.OpenAPI: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E55D:62AF:A22CA3:1490BE4:6500FBA7.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
mission-liao/pyswagger: >+
  pyswagger

  =========


  [![Build
  Status](https://travis-ci.org/mission-liao/pyswagger.svg?branch=master)](https://travis-ci.org/mission-liao/pyswagger)

  [![Coverage
  Status](https://coveralls.io/repos/mission-liao/pyswagger/badge.svg?branch=master&style=flat)](https://coveralls.io/r/mission-liao/pyswagger?branch=master)


  A python client for [Swagger](https://helloreverb.com/developers/swagger)
  enabled REST API. It wouldn't be easier to

  try Swagger REST API by [Swagger-UI](https://github.com/wordnik/swagger-ui).
  However, when it's time to **unittest**

  your API, the first option you find would be
  [Swagger-codegen](https://github.com/wordnik/swagger-codegen), but the better
  option is us.


  This project is developed after
  [swagger-py](https://github.com/digium/swagger-py), which is a nicely
  implemented one, and inspired many aspects of this project. Another project is
  [flex](https://github.com/pipermerriam/flex), which focuses on parameter
  validation, try it if you can handle other parts by yourselves. For other
  projects related to Swagger tools in python, check
  [here](https://github.com/swagger-api/swagger-spec#python).


  **pyswagger** is much easier to use (compared to swagger-codegen, you don't
  need to prepare a scala environment) and tries hard to **fully supports**
  [Swagger Spec](https://helloreverb.com/developers/swagger) in all aspects.


  - [NEWs: upcoming support for OpenAPI 3.0](docs/md/news.md)

  - [Features](README.md#features)

  - [Tutorial](README.md#tutorial)

  - [Quick Start](README.md#quick-start)

  - [Installation](README.md#installation)

  - [Reference](README.md#reference)

  - [Contributors](README.md#contributors)

  - [Contribution Guideline](README.md#contribution-guildeline)

  - [FAQ](docs/md/faq.md)

  - [Changes](CHANGES.md)


  ---------


  ## Features

  - convert Swagger Document from older version to newer one. (ex. convert from
  1.2 to 2.0)

  - support Swagger **1.2**, **2.0** on python ~~2.6~~, **2.7**, **3.3**,
  **3.5**, **3.6**

  - support YAML via [Pretty-YAML](https://github.com/mk-fg/pretty-yaml)

  - support $ref to **External Document**, multiple swagger.json will be
  organized into a group of App. And external document with self-describing
  resource is also supported (refer to
  [issue](https://github.com/swagger-api/swagger-spec/issues/219)).

  - type safe, input/output are converted to python types according to [Data
  Type](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#43-data-types)
  described in Swagger. You don't need to touch any json schema when using
  pyswagger. Limitations like **minimum/maximum** or **enum** are also checked.
  **Model inheritance** also supported.

  - provide function **App.validate** to check validity of the loaded API
  definition according to spec.

  - builtin client implementation based on various http clients in python. For
  usage of these clients, please refer to `pyswagger.tests.contrib.client` for
  details
    - [requests](https://github.com/kennethreitz/requests)
    - [tornado.httpclient.AsyncHTTPClient](http://tornado.readthedocs.org/en/latest/httpclient.html)
    - [flask.testing.FlaskClient](http://flask.pocoo.org/docs/0.10/api/#flask.testing.FlaskClient)
    - [webapp2](http://webapp2.readthedocs.io/en/latest/guide/testing.html)
  - not implemented parts, fire me a bug if you need it
    - [ ] Swagger 2.0
      - [ ] Schema.pattern
      - [ ] Scheme.patternProperties
      - [ ] Schema.readonly
      - [ ] Schema.allowEmptyValue
      - [ ] A scanner to validate schema
    - [ ] A WebSocket client
    - [ ] dump extension field

  ---------


  ## Tutorial


  - [Initialization](docs/md/tutorial/init.md)

  - [Making a Request](docs/md/tutorial/request.md)

  - [Access the Response](docs/md/tutorial/response.md)

  - [Testing a Local Server](docs/md/tutorial/local.md)

  - [Converting Document into another version](docs/md/tutorial/converter.md)

  - [Exntending Primitive Factory for user-defined
  primitives](docs/md/tutorial/extend_prim.md)

  - [Rendering Random Requests for BlackBox Testing](docs/md/tutorial/render.md)

  - [Operation MIME Support](docs/md/tutorial/mime.md)

  - [Test with Invalid Input](docs/md/tutorial/invalid.md)

  - [Load Spec from a Restricted
  Service](docs/md/tutorial/restricted_service.md)

  - [Customized Headers](docs/md/tutorial/customized_headers.md)


  ---------


  ## Quick Start


  Before running this script, please make sure
  [requests](https://github.com/kennethreitz/requests) is installed on your
  environment.


  ```python

  from pyswagger import App, Security

  from pyswagger.contrib.client.requests import Client

  from pyswagger.utils import jp_compose


  # load Swagger resource file into App object

  app = App._create_('http://petstore.swagger.io/v2/swagger.json')


  auth = Security(app)

  auth.update_with('api_key', '12312312312312312313q') # api key

  auth.update_with('petstore_auth', '12334546556521123fsfss') # oauth2


  # init swagger client

  client = Client(auth)


  # a dict is enough for representing a Model in Swagger

  pet_Tom=dict(id=1, name='Tom', photoUrls=['http://test']) 

  # a request to create a new pet

  client.request(app.op['addPet'](body=pet_Tom))


  # - access an Operation object via App.op when operationId is defined

  # - a request to get the pet back

  req, resp = app.op['getPetById'](petId=1)

  # prefer json as response

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  assert pet.name == 'Tom'


  # new ways to get Operation object corresponding to 'getPetById'.

  # 'jp_compose' stands for JSON-Pointer composition

  req, resp = app.resolve(jp_compose('/pet/{petId}',
  base='#/paths')).get(petId=1)

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  ```


  ---------


  ## Installation

  We support pip installtion.

  ```bash

  pip install pyswagger

  ```


  Additional dependencies must be prepared before firing a request. If you are
  going to access a remote/local web server, you must install
  [requests](https://github.com/kennethreitz/requests) first.

  ```bash

  pip install requests

  ```


  If you want to test a local tornado server, please make sure tornado is ready
  on your environment

  ``` bash

  pip install tornado

  ```


  We also provide native client for flask app, but to use it, flask is also
  required

  ``` bash

  pip install flask

  ```



  ---------


  ## Reference

  All exported API are described in following sections. ![A diagram about
  relations between
  components](https://docs.google.com/drawings/d/1DZiJgl4i9L038UJJp3kpwkWRvcNQktf5h-e4m96_C-k/pub?w=849&h=530)


  - [App](docs/md/ref/app.md)

  - [SwaggerClient](docs/md/ref/client.md)

  - [Security](docs/md/ref/security.md)


  ---------


  ## Contributors

  - [Marcin Goliński](https://github.com/mjgolinski)

  - [Andrey Mikhailov](https://github.com/zlovred)

  - [Telepenin Nikolay](https://github.com/prefer)

  - [WangJiannan](https://github.com/WangJiannan)


  ---------


  ## Contribution Guildeline


  #### report an issue:

  - issues can be reported
  [here](https://github.com/mission-liao/pyswagger/issues)

  - include swagger.json if possible

  - turn on logging and report with messages on console

  ```python

  import logging

  logger = logging.getLogger('pyswagger')


  formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s -
  %(message)s')


  console = logging.StreamHandler()

  console.setLevel(logging.DEBUG)

  console.setFormatter(formatter)


  logger.addHandler(console)

  logger.setLevel(logging.DEBUG)


  ... your stuff


  ```


  - describe expected behavior, or more specific, the input/output


  #### submit a PR

  - test included

  - only PR to `develop` would be accepted


  env preparation

  ```bash

  pip install -r requirement-dev.txt

  ```


  unit testing

  ```bash

  python -m pytest -s -v --cov=pyswagger --cov-config=.coveragerc
  pyswagger/tests

  ```

koumoul-dev/openapi-viewer: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B76:17CB:7830C5:F55D8B:6500FB4B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
contentjet/openapi-ui: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2738:6329:7A2A95:F95F1E:6500FB27.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
sourcey/spectacle: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A9F:0B2D:1E914D:3EA7D5:6500FB81.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Rebilly/ReDoc: >
  <div align="center">
    <img alt="ReDoc logo" src="https://raw.githubusercontent.com/Redocly/redoc/master/docs/images/redoc-logo.png" width="400px" />

    **OpenAPI/Swagger-generated API Reference Documentation**

    [![Build Status](https://travis-ci.org/Redocly/redoc.svg?branch=master)](https://travis-ci.org/Redocly/redoc) [![Coverage Status](https://coveralls.io/repos/Redocly/redoc/badge.svg?branch=master&service=github)](https://coveralls.io/github/Redocly/redoc?branch=master) [![dependencies Status](https://david-dm.org/Redocly/redoc/status.svg)](https://david-dm.org/Redocly/redoc) [![devDependencies Status](https://david-dm.org/Redocly/redoc/dev-status.svg)](https://david-dm.org/Redocly/redoc#info=devDependencies) [![npm](http://img.shields.io/npm/v/redoc.svg)](https://www.npmjs.com/package/redoc) [![License](https://img.shields.io/npm/l/redoc.svg)](https://github.com/Redocly/redoc/blob/master/LICENSE)

    [![bundle size](http://img.badgesize.io/https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js?compression=gzip&max=300000)](https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js) [![npm](https://img.shields.io/npm/dm/redoc.svg)](https://www.npmjs.com/package/redoc) [![](https://data.jsdelivr.com/v1/package/npm/redoc/badge)](https://www.jsdelivr.com/package/npm/redoc) [![Docker Build Status](https://img.shields.io/docker/build/redocly/redoc.svg)](https://hub.docker.com/r/redocly/redoc/)


  </div>


  **This is README for `2.0` version of ReDoc (React based). README for `1.x`
  version is on the branch [v1.x](https://github.com/Redocly/redoc/tree/v1.x)**



  ![ReDoc
  demo](https://raw.githubusercontent.com/Redocly/redoc/master/demo/redoc-demo.png)


  ## [Live demo](http://redocly.github.io/redoc/)


  [<img alt="Deploy to Github" src="http://i.imgur.com/YZmaqk3.png"
  height="60px">](https://github.com/Rebilly/generator-openapi-repo#generator-openapi-repo--)
  [<img alt="ReDoc as a service" src="http://i.imgur.com/edqdCv6.png"
  height="60px">](https://redoc.ly) [<img alt="Customization services"
  src="http://i.imgur.com/c4sUF7M.png"
  height="60px">](https://redoc.ly/#services)


  ## Features

  - Extremely easy deployment

  - [redoc-cli](https://github.com/Redocly/redoc/blob/master/cli/README.md) with
  ability to bundle your docs into **zero-dependency** HTML file

  - Server Side Rendering ready

  - The widest OpenAPI v2.0 features support (yes, it supports even
  `discriminator`) <br>

  ![](docs/images/discriminator-demo.gif)

  - OpenAPI 3.0 support

  - Neat **interactive** documentation for nested objects <br>

  ![](docs/images/nested-demo.gif)

  - Code samples support (via vendor extension) <br>

  ![](docs/images/code-samples-demo.gif)

  - Responsive three-panel design with menu/scrolling synchronization

  - Integrate API Introduction into side menu - ReDoc takes advantage of
  markdown headings from OpenAPI description field. It pulls them into side menu
  and also supports deep linking.

  - High-level grouping in side-menu via
  [`x-tagGroups`](docs/redoc-vendor-extensions.md#x-tagGroups) vendor extension

  - Simple integration with `create-react-app`
  ([sample](https://github.com/APIs-guru/create-react-app-redoc))

  - Branding/customizations via [`theme` option](#redoc-options-object)


  ## Roadmap
    - [x] ~~[OpenAPI v3.0 support](https://github.com/Redocly/redoc/issues/312)~~
    - [x] ~~performance optimizations~~
    - [x] ~~better navigation (menu improvements + search)~~
    - [x] ~~React rewrite~~
    - [x] ~~docs pre-rendering (performance and SEO)~~
    - [ ] ability to simple branding/styling
    - [ ] built-in API Console

  ## Releases

  **Important:** all the 2.x releases are deployed to npm and can be used via
  jsdeliver:

  - particular release, e.g. `v2.0.0-alpha.15`:
  https://cdn.jsdelivr.net/npm/redoc@2.0.0-alpha.17/bundles/redoc.standalone.js

  - `next` release:
  https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js


  Additionally, all the 1.x releases are hosted on our GitHub Pages-based CDN
  **(deprecated)**:

  - particular release, e.g. `v1.2.0`:
  https://rebilly.github.io/ReDoc/releases/v1.2.0/redoc.min.js

  - `v1.x.x` release:
  https://rebilly.github.io/ReDoc/releases/v1.x.x/redoc.min.js

  - `latest` release:
  https://rebilly.github.io/ReDoc/releases/latest/redoc.min.js - it will point
  to latest 1.x.x release since 2.x releases are not hosted on this CDN but on
  unpkg.


  ## Version Guidance

  | ReDoc Release | OpenAPI Specification |

  |:--------------|:----------------------|

  | 2.0.0-alpha.x | 3.0, 2.0              |

  | 1.19.x        | 2.0                   |

  | 1.18.x        | 2.0                   |

  | 1.17.x        | 2.0                   |


  ## Some Real-life usages

  - [Rebilly](https://rebilly.github.io/RebillyAPI)

  - [Docker Engine](https://docs.docker.com/engine/api/v1.25/)

  - [Zuora](https://www.zuora.com/developer/api-reference/)

  - [Shopify Draft Orders](https://help.shopify.com/api/draft-orders)

  - [Discourse](http://docs.discourse.org)

  - [APIs.guru](https://apis.guru/api-doc/)

  - [FastAPI](https://github.com/tiangolo/fastapi)


  ## Deployment


  ### TL;DR


  ```html

  <!DOCTYPE html>

  <html>
    <head>
      <title>ReDoc</title>
      <!-- needed for adaptive design -->
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">

      <!--
      ReDoc doesn't change outer page styles
      -->
      <style>
        body {
          margin: 0;
          padding: 0;
        }
      </style>
    </head>
    <body>
      <redoc spec-url='http://petstore.swagger.io/v2/swagger.json'></redoc>
      <script src="https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js"> </script>
    </body>
  </html>

  ```

  That's all folks!


  **IMPORTANT NOTE:** if you work with untrusted user spec, use `untrusted-spec`
  [option](#redoc-options-object) to prevent XSS security risks.


  ### 1. Install ReDoc (skip this step for CDN)

  Install using [yarn](https://yarnpkg.com):

      yarn add redoc

  or using [npm](https://docs.npmjs.com/getting-started/what-is-npm):

      npm install redoc --save

  ### 2. Reference redoc script in HTML

  For **CDN**:

  ```html

  <script src="https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js">
  </script>

  ```


  For npm:

  ```html

  <script src="node_modules/redoc/bundles/redoc.standalone.js"> </script>

  ```


  ### 3. Add `<redoc>` element to your page

  ```html

  <redoc spec-url="url/to/your/spec"></redoc>

  ```


  ### 4. Enjoy :smile:



  ## Usage as a React component


  Install peer dependencies required by ReDoc if you don't have them installed
  already:

      npm i react react-dom mobx@^4.2.0 styled-components

  Import `RedocStandalone` component from 'redoc' module:


  ```js

  import { RedocStandalone } from 'redoc';

  ```


  and use it somewhere in your component:


  ```js

  <RedocStandalone specUrl="url/to/your/spec"/>

  ```


  or


  ```js

  <RedocStandalone spec={/* spec as an object */}/>

  ```


  Also you can pass options:


  ```js

  <RedocStandalone
    specUrl="http://rebilly.github.io/RebillyAPI/openapi.json"
    options={{
      nativeScrollbars: true,
      theme: { colors: { primary: { main: '#dd5522' } } },
    }}
  />

  ```


  Here are detailed [options docs](#redoc-options-object).


  You can also specify `onLoaded` callback which will be called each time Redoc
  has been fully rendered or when error occurs (with an error as the first
  argument). *NOTE*: It may be called multiply times if you change component
  properties


  ```js

  <RedocStandalone
    specUrl="http://rebilly.github.io/RebillyAPI/openapi.json"
    onLoaded={error => {
      if (!error) {
        console.log('Yay!');
      }
    }}
  />

  ```


  [**IE11 Support Notes**](docs/usage-with-ie11.md)


  ## The Docker way


  ReDoc is available as pre-built Docker image in official [Docker Hub
  repository](https://hub.docker.com/r/redocly/redoc/). You may simply pull &
  run it:

      docker pull redocly/redoc
      docker run -p 8080:80 redocly/redoc

  Also you may rewrite some predefined environment variables defined in
  [Dockerfile](./config/docker/Dockerfile). By default ReDoc starts with demo
  Petstore spec located at `http://petstore.swagger.io/v2/swagger.json`, but you
  may change this URL using environment variable `SPEC_URL`:

      docker run -p 8080:80 -e SPEC_URL=https://api.example.com/openapi.json redocly/redoc

  ## ReDoc CLI


  [See here](https://github.com/Redocly/redoc/blob/master/cli/README.md)


  ## Configuration


  ### Security Definition location

  You can inject Security Definitions widget into any place of your
  specification `description`. Check out details
  [here](docs/security-definitions-injection.md).


  ### Swagger vendor extensions

  ReDoc makes use of the following [vendor
  extensions](https://swagger.io/specification/#specificationExtensions):

  * [`x-logo`](docs/redoc-vendor-extensions.md#x-logo) - is used to specify API
  logo

  * [`x-traitTag`](docs/redoc-vendor-extensions.md#x-traitTag) - useful for
  handling out common things like Pagination, Rate-Limits, etc

  * [`x-code-samples`](docs/redoc-vendor-extensions.md#x-code-samples) - specify
  operation code samples

  * [`x-examples`](docs/redoc-vendor-extensions.md#x-examples) - specify JSON
  example for requests

  * [`x-nullable`](docs/redoc-vendor-extensions.md#nullable) - mark schema param
  as a nullable

  * [`x-displayName`](docs/redoc-vendor-extensions.md#x-displayname) - specify
  human-friendly names for the menu categories

  * [`x-tagGroups`](docs/redoc-vendor-extensions.md#x-tagGroups) - group tags by
  categories in the side menu

  * [`x-servers`](docs/redoc-vendor-extensions.md#x-servers) - ability to
  specify different servers for API (backported from OpenAPI 3.0)

  *
  [`x-ignoredHeaderParameters`](docs/redoc-vendor-extensions.md#x-ignoredHeaderParameters)
  - ability to specify header parameter names to ignore


  ### `<redoc>` options object

  You can use all of the following options with standalone version on <redoc>
  tag by kebab-casing them, e.g. `scrollYOffset` becomes `scroll-y-offset` and
  `expandResponses` becomes `expand-responses`.


  * `untrustedSpec` - if set, the spec is considered untrusted and all
  HTML/markdown is sanitized to prevent XSS. **Disabled by default** for
  performance reasons. **Enable this option if you work with untrusted user
  data!**

  * `scrollYOffset` - If set, specifies a vertical scroll-offset. This is often
  useful when there are fixed positioned elements at the top of the page, such
  as navbars, headers etc;

  `scrollYOffset` can be specified in various ways:
    * **number**: A fixed number of pixels to be used as offset;
    * **selector**: selector of the element to be used for specifying the offset. The distance from the top of the page to the element's bottom will be used as offset;
    * **function**: A getter function. Must return a number representing the offset (in pixels);
  * `suppressWarnings` - if set, warnings are not rendered at the top of
  documentation (they still are logged to the console).

  * `lazyRendering` - _Not implemented yet_ ~~if set, enables lazy rendering
  mode in ReDoc. This mode is useful for APIs with big number of operations
  (e.g. > 50). In this mode ReDoc shows initial screen ASAP and then renders the
  rest operations asynchronously while showing progress bar on the top. Check
  out the [demo](\\redocly.github.io/redoc) for the example.~~

  * `hideHostname` - if set, the protocol and hostname is not shown in the
  operation definition.

  * `expandResponses` - specify which responses to expand by default by response
  codes. Values should be passed as comma-separated list without spaces e.g.
  `expandResponses="200,201"`. Special value `"all"` expands all responses by
  default. Be careful: this option can slow-down documentation rendering time.

  * `requiredPropsFirst` - show required properties first ordered in the same
  order as in `required` array.

  * `sortPropsAlphabetically` - sort properties alphabetically

  * `showExtensions` - show vendor extensions ("x-" fields). Extensions used by
  ReDoc are ignored. Can be boolean or an array of `string` with names of
  extensions to display

  * `noAutoAuth` - do not inject Authentication section automatically

  * `pathInMiddlePanel` - show path link and HTTP verb in the middle panel
  instead of the right one

  * `hideLoading` - do not show loading animation. Useful for small docs

  * `nativeScrollbars` - use native scrollbar for sidemenu instead of
  perfect-scroll (scrolling performance optimization for big specs)

  * `hideDownloadButton` - do not show "Download" spec button. **THIS DOESN'T
  MAKE YOUR SPEC PRIVATE**, it just hides the button.

  * `disableSearch` - disable search indexing and search box

  * `onlyRequiredInSamples` - shows only required fields in request samples.

  * `theme` - ReDoc theme. Not documented yet. For details check source code:
  [theme.ts](https://github.com/Redocly/redoc/blob/master/src/theme.ts)


  ## Advanced usage of standalone version

  Instead of adding `spec-url` attribute to the `<redoc>` element you can
  initialize ReDoc via globally exposed `Redoc` object:

  ```js

  Redoc.init(specOrSpecUrl, options, element, callback?)

  ```


  - `specOrSpecUrl` is either JSON object with specification or an URL to the
  spec in `JSON` or `YAML` format

  - `options` [options object](#redoc-options-object)

  - `element` DOM element to put ReDoc into

  - `callback` (optional) - callback to be called after Redoc has been fully
  rendered. It is also called also on errors with error as the first argument


  ```js

  Redoc.init('http://petstore.swagger.io/v2/swagger.json', {
    scrollYOffset: 50
  }, document.getElementById('redoc-container'))

  ```


  -----------

  ## Development

  see [CONTRIBUTING.md](.github/CONTRIBUTING.md)
mermade/widdershins: >
  # widdershins

  OpenAPI / Swagger / AsyncAPI / Semoasa definition to
  [Slate](https://github.com/lord/slate) /

  [Shins](https://github.com/mermade/shins) compatible markdown


  ![Build](https://img.shields.io/travis/Mermade/widdershins/master.svg)
  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://APIs.guru)
  [![Tested on Mermade
  OpenAPIs](https://img.shields.io/badge/Additional%20Specs-419-brightgreen.svg)](https://github.com/mermade/OpenAPI_specifications)

  [![Known
  Vulnerabilities](https://snyk.io/test/npm/widdershins/badge.svg)](https://snyk.io/test/npm/widdershins)


  <img src="http://mermade.github.io/widdershins/logo.png" width="247px"
  height="250px" />


  ### Widdershins *adverb*:

  * In a direction contrary to the sun's course;

  * anticlockwise;

  * helping you produce static documentation from your OpenAPI 3.0 / Swagger 2.0
  / AsyncAPI 1.x / Semoasa 0.1.0 definition


  ![Widdershins
  screenshot](https://mermade.github.io/widdershins/screenshot.png)


  ### News


  * Version 4.0 changes:
    * Now uses Promises not callbacks
    * Option to output html directly, and to ReSpec format
    * Unified JavaScript and Node.js code-samples, PHP added
    * `restrictions` column (`readOnly`/`writeOnly`) added to schema templates
    * Numerous bug fixes
  * As of v3.0.0 Widdershins no longer expands the definition of OpenAPI body
  parameters / requestBodies by default, unless they have an inline schema. You
  can restore the old behaviour by using the `--expandBody` option.

  * You may limit the depth of schema examples using the `--maxDepth` option.
  The default is 10.

  * To omit schemas entirely, please copy and customise the `main.dot` template.

  * As of v3.1.0 Widdershins includes a generated `Authorization` header in
  OpenAPI code samples. If you wish to omit this, see
  [here](/templates/openapi3/README.md).


  ### To install


  * Clone the git repository, and `npm i` to install dependencies, or

  * `npm install [-g] widdershins` to install globally


  ### Getting started


  Widdershins is generally used as a stage in an API documentation pipeline. The
  pipeline begins with an API definition in OpenAPI 3.x, OpenAPI 2.0 (fka
  Swagger), API Blueprint, AsyncAPI or Semoasa format. Widdershins converts this
  description into markdown suitable for use by a **renderer**, such as
  [Slate](https://github.com/lord/slate),
  [Shins](https://github.com/mermade/shins) or html suitable for use with
  [ReSpec](https://github.com/w3c/respec).


  If you need to create your input API definition, [this list of available
  editors](https://apis.guru/awesome-openapi3/category.html#editors) may be
  useful.


  More in-depth documentation is [available
  here](https://mermade.github.io/widdershins).


  ### Examples


  ```

  node widdershins --search false --language_tabs 'ruby:Ruby' 'python:Python'
  --summary defs/petstore3.json -o petstore3.md

  ```


  ### Options


  | CLI parameter name | JavaScript parameter name | Type | Default value |
  Description |

  | --- | --- | --- | --- | --- |

  | --customApiKeyValue | options.customApiKeyValue | `string` | `ApiKey` | Set
  a custom API key value to use as the API key in generated code examples. |

  | --expandBody | options.expandBody | `boolean` | `false` | If a method's
  requestBody parameter refers to a schema by reference (not with a inline
  schema), by default, Widdershins shows only a reference to this parameter. Set
  this option to true to expand the schema and show all properties in the
  request body. |

  | --headings | options.headings | `integer` | 2 | Set the value of the
  `headingLevel` parameter in the header so Shins knows how many heading levels
  to show in the table of contents. Currently supported only by Shins, not by
  Slate, which lacks this feature. |

  | --omitBody | options.omitBody | `boolean` | `false` | By default,
  Widdershins includes the body parameter as a row in the parameters table
  before the rows that represent the fields in the body. Set this parameter to
  omit that body parameter row. |

  | --omitHeader | options.omitHeader | `boolean` | `false` | Omit the header /
  YAML front-matter in the generated Markdown file. |

  | --resolve | options.resolve | `boolean` | `false` | Resolve external $refs,
  using the `source` parameter or the input file as the base location. |

  | --shallowSchemas | options.shallowSchemas | `boolean` | `false` | When
  referring to a schema with a $ref, don't show the full contents of the schema.
  |

  | N/A | options.source | `string` | None | The absolute location or URL of the
  source file to use as the base to resolve relative references ($refs) from;
  required if options.resolve is set to true. For CLI commands, Widdershins uses
  the input file as the base for the $refs. |

  | --summary | options.tocSummary | `boolean` | `false` | Use the operation
  summary as the TOC entry instead of the ID. |

  | --useBodyName | options.useBodyName | `boolean` | Use original param name
  for OpenAPI 2.0 body parameter. |

  | -v, --verbose | options.verbose | `boolean` | `false` | Increase verbosity.
  |

  | -h, --help | options.help | `boolean` | `false` | Show help. |

  | --version | options.version | `boolean` | `false` | Show version number. |

  | -c, --code | options.codeSamples | `boolean` | `false` | Omit generated code
  samples. |

  | --httpsnippet | options.httpsnippet | `boolean` | `false` | Use httpsnippet
  to generate code samples. |

  | -d, --discovery | options.discovery | `boolean` | `false` | Include
  schema.org WebAPI discovery data. |

  | -e, --environment | N/A | `string` | None | File to load config options
  from. |

  | -i, --includes | options.includes | `string` | None | List of files to put
  in the `include` header of the output Markdown. Processors such as Shins can
  then import the contents of these files. |

  | -l, --lang | options.lang | `boolean` | `false` | Generate the list of
  languages for code samples based on the languages used in the source file's
  `x-code-samples` examples. |

  | --language_tabs | options.language_tabs | `string` | (Differs for each input
  type) | List of language tabs for code samples using language[:label[:client]]
  format, such as `javascript:JavaScript:request`. |

  | -m, --maxDepth | options.maxDepth | `integer` | 10 | Maximum depth to show
  for schema examples. |

  | -o, --outfile | N/A | `string` | None | File to write the output markdown
  to. If left blank, Widdershins sends the output to stdout. |

  | -r, --raw | options.raw | `boolean` | `false` | Output raw schemas instead
  of example values. |

  | -s, --search | options.search | `boolean` | `true` | Set the value of the
  `search` parameter in the header so Markdown processors like Shins include
  search or not in their output. |

  | -t, --theme | options.theme | `string` | darkula | Syntax-highlighter theme
  to use. |

  | -u, --user_templates | options.user_templates | `string` | None | Directory
  to load override templates from. |

  | -x, --experimental | options.experimental | `boolean` |  | For backwards
  compatibility only; ignored. |

  | -y, --yaml | options.yaml | `boolean` | `false` | Display JSON schemas in
  YAML format. |

  |  | options.templateCallback | `function` | None | A `function` that is
  called before and after each template (JavaScript code only). |

  |  | options.toc_footers | `object` | A map of `url`s and `description`s to be
  added to the ToC footers array (JavaScript code only). |


  In Node.JS code, create an options object and pass it to the Widdershins
  `convert` function, as in this example:


  ```javascript

  const converter = require('widdershins');

  let options = {}; // defaults shown

  options.codeSamples = true;

  options.httpsnippet = false;

  //options.language_tabs = [];

  //options.language_clients = [];

  //options.loadedFrom = sourceUrl; // only needed if input document is relative

  //options.user_templates = './user_templates';

  options.templateCallback = function(templateName,stage,data) { return data };

  options.theme = 'darkula';

  options.search = true;

  options.sample = true; // set false by --raw

  options.discovery = false;

  options.includes = [];

  options.shallowSchemas = false;

  options.tocSummary = false;

  options.headings = 2;

  options.yaml = false;

  //options.resolve = false;

  //options.source = sourceUrl; // if resolve is true, must be set to full path
  or URL of the input document

  converter.convert(apiObj,options)

  .then(str => {
    // str contains the converted markdown
  })

  .catch(err => {
    console.error(err);
  });

  ```


  To only include a subset of the pre-defined language-tabs, or to rename their
  display-names, you can override the `options.language_tabs`:


  ```javascript

  options.language_tabs = [{ 'go': 'Go' }, { 'http': 'HTTP' }, { 'javascript':
  'JavaScript' }, { 'javascript--node': 'Node.JS' }, { 'python': 'Python' }, {
  'ruby': 'Ruby' }];

  ```


  The `--environment` option specifies a JSON or YAML-formatted `options`
  object, for example:


  ```json

  {
    "language_tabs": [{ "go": "Go" }, { "http": "HTTP" }, { "javascript": "JavaScript" }, { "javascript--node": "Node.JS" }, { "python": "Python" }, { "ruby": "Ruby" }],
    "verbose": true,
    "tagGroups": [
      {
        "title": "Companies",
        "tags": ["companies"]
      },
      {
        "title": "Billing",
        "tags": ["invoice-create", "invoice-close", "invoice-delete"]
      }
    ]
  }

  ```


  You can also use the environment file to group OAS/Swagger tagged paths
  together to create a more elegant table of contents, and overall page
  structure.


  If you need to support a version of Slate \<v1.5.0 (or a renderer which also
  doesn't support display-names for language-tabs, such as `node-slate`,
  `slate-node` or `whiteboard`), you can use the `--environment` option with the
  included `whiteboard_env.json` file to simply achieve this.


  If you are using the `httpsnippet` option to generate code samples, you can
  specify the client library used to perform the requests for each language by
  overriding the `options.language_clients`:


  ```javascript

  options.language_clients = [{ 'shell': 'curl' }, { 'node': 'request' }, {
  'java': 'unirest' }];

  ```


  If the language name differs between the markdown name required to syntax
  highlight and the httpsnippet required target, both can be specified in the
  form `markdown--target`.


  To see the list of languages and clients supported by httpsnippet, [click
  here](https://github.com/Kong/httpsnippet/tree/master/src/targets).


  The `loadedFrom` option is only needed where the OpenAPI / Swagger definition
  does not specify a host, and (as per the OpenAPI
  [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields))
  the API endpoint is deemed to be based on the source URL

  the definition was loaded from.


  To see the list of highlight-js syntax highlighting themes, [click
  here](https://highlightjs.org/static/demo/).


  Schema.org WebAPI discovery data is included if the `discovery` option above
  is set `true`. See the W3C [WebAPI Discovery Community
  Group](https://www.w3.org/community/web-api-discovery/) for more information.


  ## Language tabs


  Widdershins supports the `x-code-samples`
  [vendor-extension](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md#operation-object-vendor-extensions)
  to completely customise your documentation. Alternatively, you can edit the
  default code-samples in the `templates` sub-directory, or override them using
  the `user_templates` option to specify a directory containing your templates.


  Widdershins supports the use of multiple language tabs with the same language
  (i.e. plain Javascript and Node.Js). To use this support you must be using
  Slate (or one of its ports compatible with) version 1.5.0 or higher.
  [Shins](https://github.com/mermade/shins) versions track Slate version
  numbers.


  ## Templates


  By default, Widdershins uses the templates in its `templates/` folder to
  generate the Markdown output. To customize the templates, copy some or all of
  them to a folder and pass their location to the `user_templates` parameter.


  The templates include `.dot` templates and `.def` partials. To override a
  `.dot` template, you must copy it and the child `.def` partials that the
  template references. Similarly, to override a `.def` partial, you must also
  copy the parent `.dot` template. For OpenAPI 3, the primary template is
  `main.dot` and its main child partials are `parameters.def`, `responses.def`,
  and `callbacks.def`.


  This means that it is usually easiest to copy all `.dot` and `.def` files to
  your user templates directory so you don't skip a template or partial. To
  bring in changes from Widdershins updates, you can use a visual `diff` tool
  which can run across two directories, such as [Meld](http://meldmerge.org/) or
  [WinMerge](http://winmerge.org).


  ### Template syntax


  Templates are compiled with [doT.js](https://github.com/olado/doT#readme).


  Templates have access to a `data` object with a range of properties based on
  the document context. For information about the parameters, see the README
  file for the appropriate templates:


  * [Swagger 2.0 / OpenAPI 3.0.x template
  parameters](/templates/openapi3/README.md)

  * [AsyncAPI 1.x template parameters](/templates/asyncapi1/README.md)

  * [Semoasa 0.1.0 template parameters](/templates/semoasa/README.md)


  To print the value of a parameter or variable in a template, use the code
  `{{=parameterName}}`. For example, to print the title of an OpenAPI 3 spec
  (from its `info.title` field), use the code `{{=data.api.info.title}}`.


  To loop through values in an array, use the code `{{~ arrayName
  :tempVariable}}` to start the loop and the code `{{~}}` to close the loop. For
  example, the OpenAPI 3 partial `parameters.def` uses this code to create a
  table of the parameters in an operation:

  ```

  |Name|In|Type|Required|Description|

  |---|---|---|---|---|

  {{~ data.parameters
  :p}}|{{=p.name}}|{{=p.in}}|{{=p.safeType}}|{{=p.required}}|{{=p.shortDesc ||
  'none'}}|

  {{~}}

  ```


  For if/then logic, use the code `{{? booleanExpression}}` to start the code
  block and the code `{{?}}` to close the block. For example, the OpenAPI 3
  `main.dot` template calls the `security.def` partial to show information about
  the security schemes if the OpenAPI spec includes a `securitySchemes` section:

  ```

  {{? data.api.components && data.api.components.securitySchemes }}

  {{#def.security}}

  {{?}}

  ```


  You can run arbitrary JavaScript within a template by inserting a code block
  within curly braces. For example, this code creates a variable and references
  it with normal doT.js syntax later in the template:

  ```

  {{ {

  let message = "Hello!";

  } }}


  {{=message}}

  ```


  ### Template callbacks


  The `templateCallback` parameter points to a function that Widdershins calls
  before and after each template runs. The callback function receives a `data`
  object that contains the spec that Widdershins is processing; the function
  must return this object. You can use callback functions only if you are
  calling Widdershins from JavaScript code, not from the command line.


  Widdershins passes these variables to the callback function:

  - `templateName`: The name of the template, such as `main`.

  - `stage`: Whether Widdershins is calling the callback function before (`pre`)
  or after (`post`) the template.

  - `data`: An object that contains the data that Widdershins is processing. You
  can mutate the `data` object in any way you see fit, but the function must
  return it whether it changes it or not. Content that you put in the
  `data.append` property is appended to the current output stream.


  For example, this JavaScript code prints the name of the template and the
  processing stage in the output Markdown:

  ```javascript

  'use strict';


  const converter = require('widdershins');

  const fs = require('fs');


  let options = {};

  options.templateCallback = myCallBackFunction;


  function myCallBackFunction(templateName, stage, data) {
    let statusString = "Template name: " + templateName + "\n";
    statusString += "Stage: " + stage + "\n";
    data.append = statusString;
    return data;
  }


  const apiObj = JSON.parse(fs.readFileSync('defs/petstore3.json'));


  converter.convert(apiObj, options)

  .then(str => {
    fs.writeFileSync('petstore3Output.md', str, 'utf8');
  });

  ```


  ## Tests


  To run a test-suite:


  ```

  node testRunner {path-to-APIs}

  ```


  The test harness currently expects `.yaml` or `.json` files and has been
  tested against


  * [APIs.guru](https://github.com/APIs-guru/OpenAPI-directory)

  * [Mermade OpenAPI definitions
  collection](https://github.com/mermade/OpenAPI-definitions)


  ### Comparison between this and other OpenAPI / Swagger to Slate tools


  [Blog
  posting](https://dev.to/mikeralphson/comparison-of-various-openapiswagger-to-slate-conversion-tools)
  by the author of Widdershins.


  ### Acknowledgements


  * [@latgeek](https://github.com/LatGeek) for the logo.

  * [@vfernandestoptal](https://github.com/vfernandestoptal) for the httpsnippet
  support.


  ### Widdershins in the wild


  Please feel free to add a link to your API documentation here.


  * [GOV.UK Content API
  v1.0.0](https://content-api.publishing.service.gov.uk/reference.html)

  * [GOV UK Digital Marketplace API
  v1.0.0](https://alphagov.github.io/digitalmarketplace-api-docs/#digital-marketplace-api-v1-0-0)

  * [Capital One API](https://www.capitalone.co.uk/developer/api/)

  * [Cognite Data API](http://doc.cognitedata.com/)

  * [SpeckleWorks API](https://speckleworks.github.io/SpeckleSpecs)

  * [Bank by API](https://tbicr.github.io/bank-api/bank-api.html)

  * [Open EO
  API](https://open-eo.github.io/openeo-api-poc/apireference/index.html)

  * [Split Payments API](http://docs.split.cash/)

  * [LeApp daemon API](https://leapp-to.github.io/shins/index.html)

  * [Shutterstock API](https://api-reference.shutterstock.com/)

  * [Shotstack Video Editing API](https://shotstack.io/docs/api/index.html)


  ### Widdershins and Shins


  * `Widdershins` works well with Slate, but for a solely Node.js-based
  experience, why not try the [Shins](https://github.com/mermade/shins) port?
Rebilly/generator-openapi-repo: "# create-openapi-repo\n\n[![NPM version][npm-image]][npm-url] [![Dependency Status][daviddm-image]][daviddm-url]\n\n> Generate an organized multi-file OpenAPI repository.\n\n<center>\n\n<img src=\"./logo.png\" width=\"500px\"/>\n\n</center>\n\n## Who?\nYou! Hello.  Do you need to write or contribute to an OpenAPI definition?  If so, read on...\n\n## What?\nWe recommend a docs-like-code approach to OpenAPI definitions:\n- Write it using your favorite text-editor or IDE (we love VSCode).\n- Organize it into multiple files and folders to make it easy to navigate.\n- Store it using source control (such as GitHub).\n- Continuously validate it using our free [openapi-cli tool](https://github.com/redocly/openapi-cli) or our free continuous validation service (coming soon).\n- Bundle it (for a smaller footprint to use in other tools or for tools that do not support a multi-file format).\n\n## Why?\nThere are a few advantages in hosting your API definition on GitHub:\n - Community engagement (PR's and issues -- if you have a public repo)\n - Advertisment in the GitHub community\n - Hosting on GitHub pages (perfect uptime, CDN, Jekyll, custom domains with CNAME)\n - Revision history, branching, CI\n - Review and approval workflows using Pull Requests\n - Fast on-boarding time (developers and tech writers know how to use GitHub :smile:)\n - Fully compatible with Redocly API Reference too\n\n There are also some advantages to a multi-file YAML format OpenAPI definition:\n - Reuse schema objects to keep things DRY (don't repeat yourself) \n - Smaller diffs compared to JSON (especially for markdown descriptions)\n - Easier to navigate\n - Easier to edit with confidence\n\n## Features\nThis generator helps to create a GitHub repo with the following features:\n - Split a big (or small) OpenAPI definition into smaller files organized into folders\n - Bundle it into a single file for deployment\n - Continuous integration/deployment on Travis or Redocly Workflows\n - Code samples as separate files\n - Automate deployment of your OpenAPI definition and docs\n - OpenAPI definition is validated after each commit\n - Live editing in your editor of choice :heart_eyes:\n\n## Structure\n\nYou will have a structure similar to this:\n```\n    ├── .redocly.yaml\n    ├── LICENSE\n    ├── README.md\n    ├── docs\n    │\_\_ ├── favicon.png\n    │\_\_ └── index.html\n    ├── openapi\n    │\_\_ ├── README.md\n    │\_\_ ├── code_samples\n    │\_\_ │\_\_ ├── C#\n    │\_\_ │\_\_ │\_\_ └── echo\n    │\_\_ │\_\_ │\_\_     └── post.cs\n    │\_\_ │\_\_ ├── PHP\n    │\_\_ │\_\_ │\_\_ └── echo\n    │\_\_ │\_\_ │\_\_     └── post.php\n    │\_\_ │\_\_ └── README.md\n    │\_\_ ├── components\n    │\_\_ │\_\_ └── README.md\n    │\_\_ └── paths\n    │\_\_     └── README.md\n    └── package.json\n```\n\nHowever, you can adjust it to any structure you prefer.\n\nThe `openapi` folder is where your OpenAPI definition will live.  Inside there, and the sub-folders, there are `README.md` files to help guide you further. This is also where your entrypoint `openapi.yaml` will live.\n\nThe `components` folder is where you will organize sub-folders such as `schema` to define your schema.\n\nThe `paths` folder is where you will organize your paths. There will be a 'README.md' file in there with suggestions for how to organize it into specially named files (or folders) that use an `@` in place of a `/` (because files cannot have a `/` character in them).  You will also be able to use path parameters by wrapping them in curly braces `{example}`.\n\nThe `.redocly.yaml` file is a universal configuration for various Redocly tools including the lint tool and reference doc engine.\n\n## Commands\n\nThe generated repository includes installing a dependency for our `openapi-cli` tool which supports commands such as `validate`, `bundle`, and more.  There are scripted shortcuts defined in the repository's `package.json`.  \n\n\n## Examples of generated repositories\n- https://github.com/Rebilly/RebillyAPI\n- https://github.com/thingful/openapi-spec\n- https://github.com/TwineHealth/TwineDeveloperDocs\n\n## How to generate your repository\n\nWe assume you already have [node.js](https://nodejs.org/) installed.\n\n- Install `create-openapi-repo` globally:\n```bash\nnpm install -g create-openapi-repo\n```\nor use [`npx`](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b):\n\nWe'll use `npx` in this example.  However, remove `npx` if you installed it globally.\n\n```bash\nnpx create-openapi-repo\n```\n\nYou will be presented with some questions. You can create a new definition or use an existing definition to initialize your project.\n\nPlease note, if you do start a new one, remember to [create a GitHub repo](https://help.github.com/articles/create-a-repo/#create-a-new-repository-on-github) where your OpenAPI definition will live.\n\nIf you use the prior version of this generated repository, please read the following upgrade instructions.\n\n#### Upgrading from a prior version\n\nMigrate your repository from a previous structure of OpenAPI repo to this newer structure with our migration tool. \n\nRun this in the root folder of your repo.\n\n```bash\nnpx create-openapi-repo --migrate-2-3\n```\n\nNote: the migration tool does not migrate plugins automatically. You would need to manually add them to the `transformers` folder. \n\n## Support\n\nThank you for wanting to support us. Here are some ideas how to support us:\n\n* Star us\n* Tell a friend or colleague about us (or Tweet about us)\n* Write an article about it (and let us know) -- open an issue to let us know, with the link.\n* Consider our commercial products if are looking for automation to ease the docs-like code workflow, hosting along with conveniences like custom domains, access controls and previews, API reference documentation, or a full developer portal:  https://redoc.ly\n\n[npm-image]: https://badge.fury.io/js/generator-openapi-repo.svg\n[npm-url]: https://npmjs.org/package/generator-openapi-repo\n[daviddm-image]: https://david-dm.org/Rebilly/generator-openapi-repo.svg?theme=shields.io\n[daviddm-url]: https://david-dm.org/Rebilly/generator-openapi-repo\n"
temando/open-api-renderer: >
  # Lincoln


  <img src='assets/lincoln-logo-white.png' alt='Lincoln' height="96" width="96"
  />


  [![NPM](https://img.shields.io/npm/v/react-lincoln.svg)](https://npmjs.org/packages/react-lincoln/)

  [![Travis
  CI](https://img.shields.io/travis/temando/open-api-renderer.svg)](https://travis-ci.org/temando/open-api-renderer)

  [![MIT
  License](https://img.shields.io/github/license/temando/open-api-renderer.svg)](https://en.wikipedia.org/wiki/MIT_License)

  [![JavaScript Style
  Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)


  Meet Lincoln, a [React](https://facebook.github.io/react/) component for
  rendering [OpenAPI](https://www.openapis.org) documents. The project is
  tracking against [v3.0.0](docs/open-api-v3-support.md) of the OpenAPI
  specification.


  Lincoln aims to support evergreen browsers, such as Chrome, Firefox, Safari
  and IE11+. It is responsive and should be usable on most modern devices.


  [Demo](https://temando.github.io/open-api-renderer/demo/?url=https://temando.github.io/open-api-renderer/petstore-open-api-v3.0.0-RC2.json)


  ## Installation


  ```sh

  npm install --save react react-dom react-lincoln

  ```


  ## Usage


  To use Lincoln in your React project:


  ```js

  import React from 'react'

  import ReactDOM from 'react-dom'

  import Lincoln from 'react-lincoln'


  ReactDOM.render(
    <Lincoln definitionUrl='https://temando.github.io/open-api-renderer/petstore-open-api-v3.0.0-RC2.json' />,
    document.body
  )

  ```


  Alternatively, you can pass the contents of the definition directly to
  Lincoln:


  ```js

  import React from 'react'

  import ReactDOM from 'react-dom'

  import Lincoln from 'react-lincoln'

  import definition from './myApi.yml'


  ReactDOM.render(<Lincoln definition={definition} />, document.body)

  ```


  ## Configuration


  The following configuration options are available:


  | property                        | required | type    |
  description                                                                                                                                                                                                                        
  |

  | ------------------------------- | -------- | ------- |
  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  |

  | `definitionUrl` or `definition` | ✔        | string  | CORS-enabled URL to,
  or contents of, OpenAPI v3 document to render. Supports JSON or
  YAML.                                                                                                                                         
  |

  | `navSort`                       |          | enum    | This property applies
  when your definition uses `tags`. Valid values are `alpha` which sorts by HTTP
  method, then path or `false`, which will display paths as defined. Defaults to
  `false`.                                        |

  | `validate`                      |          | boolean | If `true`, uses
  [Mermade](https://openapi-converter.herokuapp.com/) to validate definition.
  Defaults to
  `false`.                                                                                                                   
  |

  | `initialSchemaTreeDepth`        |          | number  | The initial opened
  tree depth for schema visualiser when first rendered. This is useful when the
  schema's actual contents is a couple of levels deep, and you want to expand
  the tree to the contents automatically. Defaults to 0. |

  | `navigationMethodDisplayType`   |          | string  | Regulates how the
  navigation items are rendered - path only, summary only, or both. The possible
  values are `summary` (default), `path`, or `all`. In case of any other value
  only the summary is rendered.                         |


  ## Philosophy


  While this project is currently focused on visualising OpenAPI V3
  specifications, it is architected in such a way that the React components deal
  with a `UIReadySchema`, which is a generic specification (admittedly heavily
  based on OpenAPI V3).


  The dream is that this renderer could visualise other formats by introducing
  new parsers which transform documents into the common `UIReadySchema` format.
  This approach allows us to build something sustainable and scalable, where the
  community can help contribute new parsers (among other things!) as required.


  The project is definitely in its infancy and we are not ready for that yet,
  but we hope by sharing this vision early, others can help make it a reality.
  For contributing information, see [CONTRIBUTING.md](CONTRIBUTING.md).


  ## Credit


  - The [ReDoc](https://github.com/Rebilly/ReDoc) project inspired Lincoln. If
  you're looking for an alternative renderer, give ReDoc a try!

  - [swagger2openapi](https://github.com/mermade/swagger2openapi) which Lincoln
  uses to validate definitions.


  ## Maintainers


  Lincoln is an open source project from [Temando](http://temando.com/)'s
  Developer Experience team. Temando connects carriers with retailers and
  retailers to people. The Temando Platform combines shipping experiences,
  multi-carrier connectivity and lightning fast fulfillment in one solution. If
  this sounds like fun, [work with us](http://temando.com/en/about/careers)!
RepreZen/KaiZen-OpenAPI-Editor: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273B:6C7D:2390AF:48B5EC:6500FB05.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
swagger-api/swagger-editor: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AB2:7919:A50FD3:14F5DC8:6500FB8A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
apicurio/apicurio-studio: >
  [![CircleCI](https://circleci.com/gh/Apicurio/apicurio-studio.svg?style=svg)](https://circleci.com/gh/Apicurio/apicurio-studio)


  # The apicurio-studio project (Open Source API Design Studio)


  ## Summary


  This is the official Git repository for the apicurio studio project: 
  http://www.apicur.io/


  The apicurio studio project is a standalone API design studio that can be used
  to create

  new or edit existing API designs (using the OpenAPI specification).


  ## Get the code


  The easiest way to get started with the code is to [create your own
  fork](http://help.github.com/forking/)

  of this repository, and then clone your fork:

  ```bash
    $ git clone git@github.com:<you>/apicurio-studio.git
    $ cd apicurio-studio
    $ git remote add upstream git://github.com/apicurio/apicurio-studio.git
  ```

  At any time, you can pull changes from the upstream and merge them onto your
  master:

  ```bash
    $ git checkout master               # switches to the 'master' branch
    $ git pull upstream master          # fetches all 'upstream' changes and merges 'upstream/master' onto your 'master' branch
    $ git push origin                   # pushes all the updates to your fork, which should be in-sync with 'upstream'
  ```

  The general idea is to keep your 'master' branch in-sync with the
  'upstream/master'.


  ## Building apicurio-studio


  ### Requirements

  - Maven 3.x

  - Java 8+


  The following command compiles all the code, installs the JARs into your local
  Maven repository, and runs all of the unit tests:

  ```bash
    $ mvn clean install
  ```

  ## Quickstart (i.e. How To Run It)


  The fastest way to get started using Apicurio Studio is to use the
  quickstart.  The Apicurio quickstart is produced as part 

  of the full maven build - you can find it in `distro/quickstart/target` as a
  ZIP file.  To start up the quickstart, use the 

  following commands from the top-level of the repository:


  ```bash
    $ rm -rf ./distro/quickstart/target/apicurio-studio-*-SNAPSHOT
    $ unzip distro/quickstart/target/apicurio-studio-*-quickstart.zip -d distro/quickstart/target
    $ ./distro/quickstart/target/apicurio-studio-*-SNAPSHOT/bin/standalone.sh -c standalone-apicurio.xml
  ```


  This will start Wildfly on your local machine and you can access the UI at
  [http://localhost:8080](http://localhost:8080).


  ## Contribute fixes and features


  Apicurio Studio is open source, and we welcome anybody who wants to
  participate and contribute!


  Please follow [Setting your development
  environment](https://apicurio-studio.readme.io/docs/setting-up-a-development-environment)
  guide to setup your local machine for development.  The guide assumes the use
  of the Eclipse IDE for Java

  development (backend) but is not required - developers should be able to adapt
  the instructions to their particular

  environment.


  If you want to fix a bug or make any changes, please [log an issue in
  GitHub](https://github.com/apicurio/apicurio-studio/issues) describing the bug

  or new feature. Then we highly recommend making the changes on a topic branch
  named with the JIRA issue number. For example, this command creates

  a branch for the APISTUDIO-1234 issue:

  ```bash
    $ git checkout -b apicurio-studio-1234
  ```

  After you're happy with your changes and a full build (with unit tests) runs
  successfully, commit your

  changes on your topic branch. Then it's time to check for and pull any recent
  changes that were made in

  the official repository:

  ```bash
    $ git checkout master               # switches to the 'master' branch
    $ git pull upstream master          # fetches all 'upstream' changes and merges 'upstream/master' onto your 'master' branch
    $ git checkout apicurio-studio-1234   # switches to your topic branch
    $ git rebase master                 # reapplies your changes on top of the latest in master
                                        # (i.e., the latest from master will be the new base for your changes)
  ```

  If the pull grabbed a lot of changes, you should rerun your build to make sure
  your changes are still good.

  You can then either [create patches](http://progit.org/book/ch5-2.html) (one
  file per commit, saved in `~/apicurio-studio-1234`) with

  ```bash
    $ git format-patch -M -o ~/apicurio-studio-1234 orgin/master
  ```

  and upload them to the JIRA issue, or you can push your topic branch and its
  changes into your public fork repository

  ```bash
    $ git push origin apicurio-studio-1234         # pushes your topic branch into your public fork of apicurio-studio
  ```

  and [generate a pull-request](http://help.github.com/pull-requests/) for your
  changes.


  We prefer pull-requests, because we can review the proposed changes, comment
  on them,

  discuss them with you, and likely merge the changes right into the official
  repository.


  Please try to create one commit per feature or fix, generally the easiest way
  to do this is via [git
  squash](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits).

  This makes reverting changes easier, and avoids needlessly polluting the
  repository history with checkpoint commits.


  ## Code Formatting


  When you are hacking on some apicurio-studio code, we'd really appreciate it
  if you followed the

  apicurio-studio coding standards.  If you're using Eclipse, you can find a
  code formatter config

  file here:

  ```

  tools/src/eclipse/apicurio-eclipse-formatter.xml

  ```

  You should be able to import that guy straight into Eclipse by going to

  *Window->Preferences :: Java/Code Style/Formatter*
apiacademy/rapido-web: "# rápido-web\r\n\r\nRapido is an API design tool that facilitates the _sketching_ phase of design.  At a minimum, a sketch should be:\r\n\r\n* easy to create\r\n* easy to dispose\r\n* easy to translate into a prototype\r\n\r\nSketching allows a designer to perform many iterations of an early design if the cost of creation is very low.  This promotes experimentation and ideation.  Early iterations are important for API design as it is difficult to change an API once it is released and being used.\r\n\r\n## Rapido Design Principles\r\n\r\n1.  Rapid design - a user should be able to create a complete API sketch within five minutes\r\n2.  Safe Disposability - users should feel safe when starting a design over (through archiving and peristence of previous designs )\r\n3.  Unidirectional - Rapido sketches can be exported to later lifecycle stages, but designs cannot be imported.  \r\n\r\n## Development Setup\r\n\r\nRapido requires NodeJS and npm and a [backend Rapido](http://github.com/apiacademy/rapido-backend) implementation.\r\n\r\nTo install:\r\n`npm install`\r\n\r\nTo start:\r\n`npm start`\r\n\r\nTo test with Chrome:\r\n'npm test'\r\n"
mermade/openapi-gui: >+
  OpenAPI-GUI

  ===========


  OpenAPI-GUI is a GUI for creating and editing OpenAPI version 3.0.x JSON/YAML
  definitions. In its current form it is most useful as a tool for starting off
  and editing simple OpenAPI definitions. Imported OpenAPI 2.0 definitions are
  automatically converted to v3.0.


  ![Screenshot](https://github.com/Mermade/openapi-gui/blob/master/img/screenshot.png?raw=true)


  For the previous Swagger / OpenAPI 2.0-only version see
  [here](https://mikeralphson.github.io/openapi-gui). This version is currently
  **unmaintained** apart from security fixes.


  This project was initially a fork of [Daryl Kuhn's
  IODoctor](https://github.com/darrylkuhn/iodoctor/tree/angular-port), which in
  turn was inspired by [IODoctor by Brandon
  West](https://github.com/brandonmwest/iodoctor) which was written in Ruby. The
  complete history of the project is maintained on GitHub.


  Description

  -----------

  ### How It Works


  Select an existing OpenAPI 2.0 or 3.0.x definition to upload, or create a new
  definition and start adding Paths, Operations, and Parameters. When an
  existing definition is used, it is parsed and forms for editing each Path,
  Operation and Parameter will be created.


  You can load an existing definition by appending a `?url=` query parameter to
  the initial start page.


  Click an item from the menu on the left to begin editing. View the JSON/YAML
  output at any time by selecting one of the "Export" tabs. When finished,
  download the output to save it locally or copy it your clipboard. OpenAPI-GUI
  only stores one definition at a time, and this is in your browser's
  local-storage. Make sure you save your JSON/YAML output locally.


  Before performing a destructive action, OpenAPI-GUI saves the current state of
  the definition. At all other times you must remember to select Save manually.


  ### Technology


  OpenAPI-GUI runs entirely client-side using a number of Javascript frameworks
  including [Vue.JS](https://vuejs.org/), [jQuery](https://jquery.com/) and
  [Bulma](http://bulma.io/) for CSS.


  To get the app up and running just browse to [the live version on GitHub
  pages](https://mermade.github.io/openapi-gui), deploy a clone to GitHub pages,
  deploy to Heroku using the button below, or clone the repo and point a browser
  at `index.html` or host it yourself - couldn't be simpler. More [technical
  information here](docs/technical.md).


  You only need to `npm install` the Node.js modules if you wish to use the
  `openapi-gui` embedded web server (i.e. not if you are running your own
  web-server), otherwise they are only there for PaaS deployments.


  [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)


  #### CLI options


  ```

  -d, --definition    serve the given OAS definition

  -l, --launch        start a web-browser pointing to the GUI

  -p, --port          specify the port to run on, defaults to $PORT or 3000

  -w, --write         enable writing back to the source definition

  ```


  #### Running with Docker


  If you don't have a local Node development environment, or if you would prefer
  to run OpenAPI-GUI in a Docker container, you can do in with a few simple
  steps:


  1. Clone the repository.

  2. Run `docker build -t mermade/openapi-gui .` to build the Docker image
  (`mermade/openapi-gui`)

  3. Run `docker run --name openapi-gui -p 8080:3000 -d mermade/openapi-gui` to
  run the server on port 8080.

  4. Navigate to `http://localhost:8080` in your favorite browser.

  5. When you're done, shut down the server by running `docker stop openapi-gui
  && docker rm openapi-gui`


  Or you can pull the pre-built Docker image:


  * `docker pull mermade/openapi-gui`


  ### Limitations


  * OpenAPI-GUI will de-reference shared parameters.

  * The definition must be self-contained with no external `$ref`s. **This is
  likely to be resolved (ho-ho) soon**.

  * Editing a response / example / body schema will dereference it.

  * OpenAPI-GUI will not always preserve vendor-extensions, e.g. if a parameter
  is deleted and recreated.

  * OpenAPI-GUI will not preserve comments from definitions imported in YAML
  format.


  TODO

  ----


  * See the [TODO list](/docs/TODO.md) and the current status of [OpenAPI 3.0
  specification support](docs/openapi3-support.md).

stoplightio/prism: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AB4:9AE9:A0A6CB:1465D58:6500FB85.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Szasza/express-gateway-plugin-openapi3-mock-server: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273D:6C7D:239DBE:48D092:6500FB0D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
swagger-api/swagger-node: >
  # Archived


  This GitHub repository has been archived. 

  The npmjs package `swagger` may be re-used at a later date for a different
  project.

  https://swagger.io/ may have similar or alternative functionality if you
  depend(ed) on this project.



  [![Build
  Status](https://travis-ci.org/swagger-api/swagger-node.svg?branch=master)](https://travis-ci.org/swagger-api/swagger-node) 

  [![NPM
  version](https://badge.fury.io/js/swagger.png)](http://badge.fury.io/js/swagger)

  [![Dependency
  Status](https://david-dm.org/swagger-api/swagger-node/status.svg)](https://david-dm.org/swagger-api/swagger-node)

  [![devDependency
  Status](https://david-dm.org/swagger-api/swagger-node/dev-status.svg)](https://david-dm.org/swagger-api/swagger-node#info=devDependencies)



  The `swagger` module provides tools for designing and building
  Swagger-compliant APIs entirely in Node.js. It integrates with popular Node.js
  servers, including Express, Hapi, Restify, and Sails, as well as any
  Connect-based middleware. With `swagger`, you can specify, build, and test
  your API from the very beginning, on your laptop. It allows you to change and
  iterate your design without rewriting the logic of your implementation.


  ![alt text](./docs/images/overview2.png)



  Remember, one great thing about this approach is that all of the Swagger
  validation logic is handled for you, and all of the routing logic is managed
  through the Swagger configuration. You don't have to code (or recode!) any of
  that stuff yourself.


  # Your swagger API in five steps


  ## 1. Install the swagger module


  Install using npm. For complete instructions, see the
  [install](./docs/install.md) page.


  ```bash

  $ npm install -g swagger

  ```


  ## 2. Create a new swagger project


  Use the [CLI](./docs/cli.md) to create and manage projects. Learn more on the
  [quick start](./docs/quick-start.md) page.


  ```bash

  $ swagger project create hello-world

  ```


  ## 3. Design your API in the Swagger Editor


  The interactive, browser-based [Swagger Editor](http://editor.swagger.io/) is
  built in. It provides Swagger 2.0 validation and endpoint routing, generates
  docs on the fly, and consumes easy-to-read YAML.


  ```bash

  $ swagger project edit

  ```


  ![screenshot of project editor](./docs/images/project-editor.png)


  ## 4. Write controller code in Node.js


  Code your API's business logic in Node.js.


  ```js

  function hello(req, res) {
      var name = req.swagger.params.name.value || 'stranger';
      var hello = util.format('Hello, %s!', name);
      res.json({ "message": hello });
  }

  ```


  If you look at the Swagger file in the editor (shown in step 3 above), the
  `x-swagger-router-controller` element (line 17 in the editor screenshot)
  specifies the name of the controller file associated with the `/hello` path.
  For example:


  ```yaml
      paths:
          /hello:
              x-swagger-router-controller: hello_world
  ```


  Controller source code is always placed in `./api/controllers`. So, the
  controller source file for this project is `./api/controllers/hello_world.js`.


  The `operationId` element specifies which controller function to call. In this
  case (line 19), it is a function called `hello`. Learn
  [more](./docs/controllers.md).


  ## 5. Run the server


  Run the project server.


  ```bash

  $ swagger project start

  ```


  ## Now, call the API!


  It just works!


  ```bash

  $ curl http://127.0.0.1:10010/hello?name=Scott

  { "message": "Hello, Scott!" }

  ```


  # <a name="installation"></a>Installing the swagger module


  See the [Installing swagger](./docs/install.md) for details.


  # <a name="using"></a>Using the swagger module


  Go to the [swagger module doc page](./docs/README.md). It includes all the
  information you need to get started.


  # <a name="about"></a>About this project


  This initiative grew out of Apigee-127, an API design-first development
  framework using Swagger.

  Apigee donated the code to create the swagger-node project in 2015.

   >Copyright 2016 Apigee Corporation

   >Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   >http://www.apache.org/licenses/LICENSE-2.0

   >Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

  ---

  <img src="http://swagger.io/wp-content/uploads/2016/02/logo.jpg"/>
modern-project/modern-ruby: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B57:03EB:9C74FF:13DF700:6500FB5C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
go-swagger/go-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B66:4DCD:7DFDA7:100AF46:6500FB3F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
swagger-api/swagger-inflector: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0ABD:574C:220FC2:45ADA8:6500FB8B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
networknt/light-rest-4j: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B7E:33D2:1DFB21:3D977A:6500FB62.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
apioo/fusio: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  271C:63DC:80118B:104C83B:6500FB19.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
smartrecruiters/openapi-first: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AA2:3B7D:9C055A:13CF908:6500FB7E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
swagger-api/swagger-core: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AB1:6729:AA1A35:158DBCA:6500FB8A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
swagger-api/swagger-parser: >
  # Swagger Parser <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  **NOTE:** If you're looking for `swagger-parser` 1.X and OpenAPI 2.0, please
  refer to [v1 branch](https://github.com/swagger-api/swagger-parser/tree/v1)


  **NOTE:** Since version 2.1.0 Swagger Parser supports OpenAPI 3.1; see [this
  page](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---OpenAPI-3.1)
  for details


  ![Build Master - Java 11, 14 and
  17](https://github.com/swagger-api/swagger-parser/workflows/Build%20Test%20Deploy%20master/badge.svg?branch=master)


  # Table of contents

    - [Overview](#overview)
    - [Table of Contents](#table-of-contents)
    - [Usage](#usage)
    - [Adding to your project](#adding-to-your-project)
      - [Prerequisites](#prerequisites)
    - [Authentication](#authentication)  
    - [Options](#options)
      - [Resolve](#1-resolve)
      - [ResolveFully](#2-resolvefully)
      - [Flatten](#3-flatten)
      - [ResolveCombinators](#4-resolvecombinators)
    - [Extensions](#extensions)
    - [OpenAPI 3.1 Support](#openapi-31-support)
    - [License](#license)
     
  ## Overview 


  This is the Swagger Parser project, which parses OpenAPI definitions in JSON
  or YAML format into
  [swagger-core](https://github.com/swagger-api/swagger-core) representation as
  [Java
  POJO](https://github.com/swagger-api/swagger-core/blob/master/modules/swagger-models/src/main/java/io/swagger/v3/oas/models/OpenAPI.java#L36),
  returning any validation warnings/errors.  


  It also provides a simple framework to add additional converters from
  different formats into the Swagger objects, making the entire toolchain
  available.



  ### Usage

  Using the Swagger Parser is simple.  Once included in your project, you can
  read a OpenAPI Specification from any location:


  ```java

  import io.swagger.parser.OpenAPIParser;

  import io.swagger.v3.parser.OpenAPIV3Parser;

  import io.swagger.v3.parser.core.models.SwaggerParseResult;

  import io.swagger.v3.oas.models.OpenAPI;


  // ... your code

    // parse a swagger description from the petstore and get the result
    SwaggerParseResult result = new OpenAPIParser().readLocation("https://petstore3.swagger.io/api/v3/openapi.json", null, null);
    
    // or from a file
    //   SwaggerParseResult result = new OpenAPIParser().readLocation("./path/to/openapi.yaml", null, null);
    
    // the parsed POJO
    OpenAPI openAPI = result.getOpenAPI();
    
    if (result.getMessages() != null) result.getMessages().forEach(System.err::println); // validation errors and warnings
    
    if (openAPI != null) {
      ...
    }
    
  ```


  or from a string:


  ```java

  import io.swagger.parser.OpenAPIParser;

  import io.swagger.v3.parser.OpenAPIV3Parser;

  import io.swagger.v3.parser.core.models.SwaggerParseResult;

  import io.swagger.v3.oas.models.OpenAPI;


  // ... your code

    // parse a swagger description from the petstore and get the result
    SwaggerParseResult result = new OpenAPIParser().readContents("https://petstore3.swagger.io/api/v3/openapi.json", null, null);
    
    // or from a file
    //   SwaggerParseResult result = new OpenAPIParser().readContents("./path/to/openapi.yaml", null, null);
    
    // the parsed POJO
    OpenAPI openAPI = result.getOpenAPI();
    
    if (result.getMessages() != null) result.getMessages().forEach(System.err::println); // validation errors and warnings
    
    if (openAPI != null) {
      ...
    }
    
  ```


  If you are providing a Swagger/OpenAPI 2.0 document to the parser , e.g.:


  ```java

  SwaggerParseResult result = new
  OpenAPIParser().readContents("./path/to/swagger.yaml", null, null);

  ```


  the Swagger/OpenAPI 2.0 document will be first converted into a comparable
  OpenAPI 3.0 one.


  You can also directly use `OpenAPIV3Parser` which only handles OpenAPI 3.0
  documents, and provides a convenience method to get directly the parsed
  `OpenAPI object:


  ```java

  import io.swagger.v3.parser.OpenAPIV3Parser;

  import io.swagger.v3.oas.models.OpenAPI;


  // ... your code

    // read a swagger description from the petstore
      
    OpenAPI openAPI = new OpenAPIV3Parser().read("https://petstore3.swagger.io/api/v3/openapi.json");
    
  ```


  ### Adding to your project

  You can include this library from Sonatype OSS for SNAPSHOTS, or Maven central
  for releases.  In your dependencies:


  ```xml

  <dependency>
    <groupId>io.swagger.parser.v3</groupId>
    <artifactId>swagger-parser</artifactId>
    <version>2.1.16</version>
  </dependency>

  ```


  #### Prerequisites

  You need the following installed and available in your $PATH:


  * Java 11

  * [Apache maven 3.x](http://maven.apache.org/)


  After cloning the project, you can build it from source with this command:


  ```

  mvn package

  ```


  ### Authentication


  If your OpenAPI definition is protected, you can pass headers in the request:

  ```java

  import io.swagger.v3.parser.core.models.AuthorizationValue;


  // ... your code

    // build a authorization value
    AuthorizationValue mySpecialHeader = new AuthorizationValue()
      .keyName("x-special-access")  //  the name of the authorization to pass
      .value("i-am-special")        //  the value of the authorization
      .type("header");              //  the location, as either `header` or `query`

    // or in a single constructor
    AuthorizationValue apiKey = new AuthorizationValue("api_key", "special-key", "header");
    OpenAPI openAPI = new OpenAPIV3Parser().readWithInfo(
      "https://petstore3.swagger.io/api/v3/openapi.json",
      Arrays.asList(mySpecialHeader, apiKey)
    );
  ```


  #### Dealing with self-signed SSL certificates

  If you're dealing with self-signed SSL certificates, or those signed by
  GoDaddy, you'll need to disable SSL Trust 

  Manager.  That's done by setting a system environment variable as such:


  ```

  export TRUST_ALL=true

  ```


  And then the Swagger Parser will _ignore_ invalid certificates.  Of course
  this is generally a bad idea, but if you're 

  working inside a firewall or really know what you're doing, well, there's your
  rope.


  #### Dealing with Let's Encrypt

  Depending on the version of Java that you use, certificates signed by the
  [Let's Encrypt](https://letsencrypt.org) certificate authority _may not work_
  by default.  If you are using any version of Java prior to 1.8u101, you most
  likely _must_ install an additional CA in your

  JVM.  Also note that 1.8u101 may _not_ be sufficient on it's own.  Some users
  have reported that certain operating systems are 

  not accepting Let's Encrypt signed certificates.


  Your options include:


  * Accepting all certificates per above

  * Installing the certificate manually in your JVM using the keystore using the
  `keytool` command

  * Configuring the JVM on startup to load your certificate


  But... this is all standard SSL configuration stuff and is well documented
  across the web.



  ### Options

  Parser uses options as a way to customize the behavior while parsing:


  #### 1. resolve:


  ```java

  ParseOptions parseOptions = new ParseOptions();

  parseOptions.setResolve(true); 

  final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
  parseOptions);

  ```



  - When remote or relative references are found in the parsed document, parser
  will attempt to:


  1. resolve the reference in the remote or relative location 

  1. parse the resolved reference

  1. add the resolved "component" (e.g. parameter, schema, response, etc.) to
  the resolved `OpenAPI` POJO components section

  1. replace the remote/relative reference with a local reference,  e.g. :
  `#/components/schemas/NameOfRemoteSchema`. 


  This applies to schemas, parameters, responses, pretty much everything
  containing a ref.


  #### 2. resolveFully:


  ```java

  ParseOptions parseOptions = new ParseOptions();

  parseOptions.setResolve(true); // implicit

  parseOptions.setResolveFully(true);

  final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
  parseOptions);

  ```


  - In some scenarios, after references are resolved (with `resolve`, see
  above), you might need to have all local references removed replacing the
  reference with the content of the referenced element. This is for example used
  in [Swagger Inflector](https://github.com/swagger-api/swagger-inflector). Be
  aware that the result could be more heavy/long due to duplication
      
  Original document:


  `a.yaml` 

  ```

  openapi: 3.0.1

  paths:
    "/newPerson":
      post:
        summary: Create new person
        description: Create new person
        responses:
          '200':
            description: ok
            content:
              "*/*":
                schema:
                  "$ref": "./ref-without-component/b.yaml#/components/schemas/CustomerType"
  ```

  `b.yaml`

  ```

  openapi: 3.0.1

  components:
    schemas:
      CustomerType:
        type: string
        example: Example value
  ```


  Serialized result after parsing with option `resolveFully(true)`


  `a.yaml`

  ```

  openapi: 3.0.1

  servers:

  - url: /

  paths:
    /newPerson:
      post:
        summary: Create new person
        description: Create new person
        responses:
          200:
            description: ok
            content:
              '*/*':
                schema:
                  type: string
                  example: Example value
  components:
    schemas:
      CustomerType:
        type: string
        example: Example value
  ```


  #### 3. flatten: 


  ```java

  ParseOptions parseOptions = new ParseOptions();

  parseOptions.setFlatten(true); 

  final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
  parseOptions);

  ```



  This is kind of the opposite of resolveFully, limited to defined schemas.


  In some scenarios, you might need to have all schemas defined inline (e.g. a
  response schema) moved to the `components/schemas` section and replaced with a
  reference to the newly added schema within `components/schemas`. This is for
  example used in [Swagger
  Codegen](https://github.com/swagger-api/swagger-codegen).


  Original document:


  `flatten.yaml`


  ```

  openapi: 3.0.0

  info:
    version: 1.0.0
    title: Swagger Petstore
    license:
      name: MIT
  paths:
    /pets:
      get:
        summary: List all pets
        operationId: listPets
        responses:
          '200':
            description: An paged array of pets
            headers:
              x-next:
                description: A link to the next page of responses
                schema:
                  type: string
            content:
              application/json:
                schema:
                   type: object
                   properties:
                      id:
                        type: integer
                        format: int64
                      name:
                        type: string
                      tag:
                        type: string
  ```


  Serialized result after parsing with option `flatten(true)`


  ```

  openapi: 3.0.0

  info:
    title: Swagger Petstore
    license:
      name: MIT
    version: 1.0.0
  servers:

  - url: /

  paths:
    /pets:
      get:
        tags:
        - pets
        summary: List all pets
        responses:
          200:
            description: An paged array of pets
            headers:
              x-next:
                description: A link to the next page of responses
                style: simple
                explode: false
                schema:
                  type: string
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/inline_response_200'
  components:
    schemas:
      inline_response_200:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          tag:
            type: string
  ```


  #### 4. resolveCombinators: 


  ```java

  ParseOptions parseOptions = new ParseOptions();

  parseOptions.setResolve(true); // implicit

  parseOptions.setResolveFully(true);

  parseOptions.setResolveCombinators(false); // default is true 

  final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
  parseOptions);

  ```


  This option (only available with `resolveFully = true`) allows to customize
  behaviour related to `allOf/anyOf/oneOf` (composed schemas)  processing. With
  option set to `true` (default), composed schemas are transformed into "non
  composed" ones, by having all properties merged into a single resulting schema
  (see example below).

  If option is set to `false`, the resulting schema will instead maintain its
  "composed" nature, keeping properties within e.g. the `allOf` members.


  Please see examples below:


  **Unresolved yaml**


  ```

  openapi: 3.0.1

  servers:

  - url: http://petstore.swagger.io/api


  info:
    description: 'This is a sample server Petstore'
    version: 1.0.0
    title: testing source file
    termsOfService: http://swagger.io/terms/

  paths:
    "/withInvalidComposedModel":
      post:
        operationId: withInvalidComposedModel
        requestBody:
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ExtendedAddress"
          required: false
        responses:
          '200':
            description: success!
  components:
    schemas:
      ExtendedAddress:
        type: object
        allOf:
          - $ref: '#/components/schemas/Address'
          - type: object
            required:
            - gps
            properties:
              gps:
                type: string
      Address:
        required:
        - street
        type: object
        properties:
          street:
            type: string
            example: 12345 El Monte Road
          city:
            type: string
            example: Los Altos Hills
          state:
            type: string
            example: CA
          zip:
            type: string
            example: '94022'
  ```


  **resolvedCombinator = true (default) - Test case**


  ```

  @Test
      public void resolveAllOfWithoutAggregatingParameters(@Injectable final List<AuthorizationValue> auths) {
          ParseOptions options = new ParseOptions();
          options.setResolveFully(true);
          options.setResolveCombinators(true);

          // Testing components/schemas
          OpenAPI openAPI = new OpenAPIV3Parser().readLocation("src/test/resources/composed.yaml",auths,options).getOpenAPI();
          
          ComposedSchema allOf = (ComposedSchema) openAPI.getComponents().getSchemas().get("ExtendedAddress");
          assertEquals(allOf.getAllOf().size(), 2);

          assertTrue(allOf.getAllOf().get(0).get$ref() != null);
          assertTrue(allOf.getAllOf().get(1).getProperties().containsKey("gps"));


          // Testing path item
          ObjectSchema schema = (ObjectSchema) openAPI.getPaths().get("/withInvalidComposedModel").getPost().getRequestBody().getContent().get("application/json").getSchema();

          assertEquals(schema.getProperties().size(), 5);
          assertTrue(schema.getProperties().containsKey("street"));
          assertTrue(schema.getProperties().containsKey("gps"));

      }
  ```


  **resolvedCombinator = true (default) - Resolved Yaml**


  ```

  openapi: 3.0.1

  info:
    title: testing source file
    description: This is a sample server Petstore
    termsOfService: http://swagger.io/terms/
    version: 1.0.0
  servers:

  - url: http://petstore.swagger.io/api

  paths:
    /withInvalidComposedModel:
      post:
        operationId: withInvalidComposedModel
        requestBody:
          content:
            application/json:
              schema:
                required:
                - gps
                - street
                type: object
                properties:
                  street:
                    type: string
                    example: 12345 El Monte Road
                  city:
                    type: string
                    example: Los Altos Hills
                  state:
                    type: string
                    example: CA
                  zip:
                    type: string
                    example: "94022"
                  gps:
                    type: string
          required: false
        responses:
          200:
            description: success!
  components:
    schemas:
      ExtendedAddress:
        type: object
        allOf:
        - $ref: '#/components/schemas/Address'
        - required:
          - gps
          type: object
          properties:
            gps:
              type: string
      Address:
        required:
        - street
        type: object
        properties:
          street:
            type: string
            example: 12345 El Monte Road
          city:
            type: string
            example: Los Altos Hills
          state:
            type: string
            example: CA
          zip:
            type: string
            example: "94022"
   ```
   
   **resolvedCombinator = false - Test case**
   
   ```
   @Test
      public void resolveAllOfWithoutAggregatingParameters(@Injectable final List<AuthorizationValue> auths) {
          ParseOptions options = new ParseOptions();
          options.setResolveFully(true);
          options.setResolveCombinators(false);

          // Testing components/schemas
          OpenAPI openAPI = new OpenAPIV3Parser().readLocation("src/test/resources/composed.yaml",auths,options).getOpenAPI();
         
          ComposedSchema allOf = (ComposedSchema) openAPI.getComponents().getSchemas().get("ExtendedAddress");
          assertEquals(allOf.getAllOf().size(), 2);
          assertTrue(allOf.getAllOf().get(0).getProperties().containsKey("street"));
          assertTrue(allOf.getAllOf().get(1).getProperties().containsKey("gps"));

          // Testing path item
          ComposedSchema schema = (ComposedSchema) openAPI.getPaths().get("/withInvalidComposedModel").getPost().getRequestBody().getContent().get("application/json").getSchema();
          // In fact the schema resolved previously is the same of /withInvalidComposedModel
          assertEquals(schema, allOf);
          assertEquals(schema.getAllOf().size(), 2);
          assertTrue(schema.getAllOf().get(0).getProperties().containsKey("street"));
          assertTrue(schema.getAllOf().get(1).getProperties().containsKey("gps"));

      }
    ```
    
    **resolvedCombinator = false - Resolved Yaml**
    
    ```
  openapi: 3.0.1

  info:
    title: testing source file
    description: This is a sample server Petstore
    termsOfService: http://swagger.io/terms/
    version: 1.0.0
  servers:

  - url: http://petstore.swagger.io/api

  paths:
    /withInvalidComposedModel:
      post:
        operationId: withInvalidComposedModel
        requestBody:
          content:
            application/json:
              schema:
                type: object
                allOf:
                - required:
                  - street
                  type: object
                  properties:
                    street:
                      type: string
                      example: 12345 El Monte Road
                    city:
                      type: string
                      example: Los Altos Hills
                    state:
                      type: string
                      example: CA
                    zip:
                      type: string
                      example: "94022"
                - required:
                  - gps
                  type: object
                  properties:
                    gps:
                      type: string
          required: false
        responses:
          200:
            description: success!
  components:
    schemas:
      ExtendedAddress:
        type: object
        allOf:
        - required:
          - street
          type: object
          properties:
            street:
              type: string
              example: 12345 El Monte Road
            city:
              type: string
              example: Los Altos Hills
            state:
              type: string
              example: CA
            zip:
              type: string
              example: "94022"
        - required:
          - gps
          type: object
          properties:
            gps:
              type: string
      Address:
        required:
        - street
        type: object
        properties:
          street:
            type: string
            example: 12345 El Monte Road
          city:
            type: string
            example: Los Altos Hills
          state:
            type: string
            example: CA
          zip:
            type: string
            example: "94022"
  ```


  ### Extensions

  This project has a core artifact--`swagger-parser`, which uses Java Service
  Provider Interface (SPI) so additional extensions can be added. 


  To build your own extension, you simply need to create a
  `src/main/resources/META-INF/services/io.swagger.v3.parser.core.extensions.SwaggerParserExtension`
  file with the full classname of your implementation.  Your class must also
  implement the `io.swagger.v3.parser.core.extensions.SwaggerParserExtension`
  interface.  Then, including your library with the `swagger-parser` module will
  cause it to be triggered automatically.


  ### OpenAPI 3.1 support


  Since version 2.1.0 Swagger Parser supports OpenAPI 3.1; see [this
  page](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---OpenAPI-3.1)
  for details


  ## Security contact


  Please disclose any security-related issues or vulnerabilities by emailing
  [security@swagger.io](mailto:security@swagger.io), instead of using the public
  issue tracker.
BigstickCarpet/swagger-cli: >
  Swagger/OpenAPI CLI

  ============================


  [![Cross-Platform
  Compatibility](https://apitools.dev/img/badges/os-badges.svg)](https://github.com/APIDevTools/swagger-cli/blob/master/.github/workflows/CI-CD.yaml)

  [![Build
  Status](https://github.com/APIDevTools/swagger-cli/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-cli/blob/master/.github/workflows/CI-CD.yaml)


  [![Dependencies](https://david-dm.org/APIDevTools/swagger-cli.svg)](https://david-dm.org/APIDevTools/swagger-cli)

  [![Coverage
  Status](https://coveralls.io/repos/github/APIDevTools/swagger-cli/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-cli?branch=master)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-cli.svg)](https://www.npmjs.com/package/@apidevtools/swagger-cli)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-cli.svg)](LICENSE)

  [![Buy us a
  tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-cli)




  Features

  --------------------------

  - Validate Swagger/OpenAPI files in **JSON or YAML** format

  - Supports multi-file API definitions via `$ref` pointers

  - Bundle multiple Swagger/OpenAPI files into one combined file




  Related Projects

  --------------------------

  - [Swagger Parser](https://github.com/APIDevTools/swagger-parser)

  - [Swagger Express
  Middleware](https://github.com/APIDevTools/swagger-express-middleware)




  Installation

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/):


  ```bash

  npm install -g @apidevtools/swagger-cli

  ```




  Usage

  --------------------------


  ```

  swagger-cli <command> [options] <file>


  Commands:
      validate                Validates an API definition in Swagger 2.0 or OpenAPI 3.0 format

      bundle                  Bundles a multi-file API definition into a single file

  Options:
      -h, --help              Show help for any command
      -v, --version           Output the CLI version number
      -d, --debug [filter]    Show debug output, optionally filtered (e.g. "*", "swagger:*", etc.)
  ```



  ### Validate an API


  The `swagger-cli validate` command will validate your Swagger/OpenAPI
  definition against the [Swagger 2.0
  schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json)
  or [OpenAPI 3.0
  Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.json). 
  It also performs additional validations against the
  [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md),
  which will catch some things that aren't covered by the schema, such as
  duplicate parameters, invalid MIME types, etc.


  The command will exit with a non-zero code if the API is invalid.


  ```

  swagger-cli validate [options] <file>


  Options:
      --no-schema             Do NOT validate against the Swagger/OpenAPI JSON schema

      --no-spec               Do NOT validate against the Swagger/OpenAPI specification
  ```


  #### Git pre-commit hook


  There is a useful Python tool called [pre-commit](https://pre-commit.com/)
  that can be used to execute a wide suite of pre-commit checks. The
  `swagger-cli validate` command can be integrated as part of a git pre-commit
  hook by adding the following configuration to the `repos` entry of an existing
  `.pre-commit-config.yaml` file.


  ```

  -   repo: https://github.com/APIDevTools/swagger-cli
      rev: v2.2.1
      hooks:
      - id: swagger-validation
        args: ["validate", "<path to root swagger>"]
  ```


  The intention is to point to single root swagger that references multiple
  swagger definitions. The above hook will execute the `swagger-cli validation`
  against the root swagger anytime that a file matching the pattern
  `.*swagger.*\.(json|yaml|yml)` is modified. Any failures in this validation
  will prevent the git commit from being processed.


  ### Combine Multiple Files


  The Swagger and OpenAPI specs allows you to split your API definition across
  multiple files using [`$ref`
  pointers](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#reference-object)
  to reference each file. You can use the `swagger-cli bundle` command to
  combine all of those referenced files into a single file, which is useful for
  distribution or interoperation with other tools.


  By default, the `swagger-cli bundle` command tries to keep the output file
  size as small as possible, by only embedding each referenced file _once_.  If
  the same file is referenced multiple times, then any subsequent references are
  simply modified to point to the _single_ inlined copy of the file.  If you
  want to produce a bundled file without _any_ `$ref` pointers, then add the
  `--dereference` option.  This will result in a larger file size, since
  multiple references to the same file will result in that file being embedded
  multiple times.


  If you don't specify the `--output-file` option, then the bundled API will be
  written to stdout, which means you can pipe it to other commands.


  The result of this method by default is written as JSON. It can be changed to
  YAML with the `--type` option, by passing the `yaml` value.


  ```

  swagger-cli bundle [options] <file>


  Options:
      -o, --outfile <file>        The output file

      -r, --dereference           Fully dereference all $ref pointers

      -f, --format <spaces>       Formats the output using the given number of spaces
                                  (the default is 2 spaces)

      -t, --type <filetype>       Defines the output file type. The valid values are: json, yaml
                                  (the default is JSON)

      -w, --wrap <column>         Set the line length for YAML strings
                                  (the default is no wrapping)
  ```




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [File an
  issue](https://github.com/APIDevTools/swagger-cli/issues) on GitHub and
  [submit a pull request](https://github.com/APIDevTools/swagger-cli/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-cli.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`




  License

  --------------------------

  Swagger CLI is 100% free and open-source, under the [MIT license](LICENSE).
  Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in
  production, then we ask that you [**buy the world a
  tree**](https://plant.treeware.earth/APIDevTools/swagger-cli) to thank us for
  our work. By contributing to the Treeware forest you’ll be creating employment
  for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![Travis
  CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
RepreZen/KaiZen-OpenApi-Parser: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272A:93AA:A5D19B:150B3E3:6500FB06.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
networknt/openapi-parser: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A80:0720:AAB141:15A074C:6500FB62.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
metadevpro/openapi3-ts: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B69:451B:AAD74D:15AB76A:6500FB54.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Apicurio/oai-ts-core: >

  # Deprecated Repository


  Please note that this library has deprecated in favor of
  [apicurio-data-models](https://github.com/Apicurio/apicurio-data-models). 
  Please report all bugs and contribute all pull requests there.
kevindew/openapi3_parser: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6E:1B72:768346:F21A5F:6500FB48.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
getkin/kin-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2705:2749:78B80B:F5F975:6500FB3D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
adwhit/openapi3-rust: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2709:62D3:74D3EE:EE8E7A:6500FB13.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
wework/speccy: >
  # speccy


  [![CircleCI](https://circleci.com/gh/wework/speccy.svg?style=svg)](https://circleci.com/gh/wework/speccy)

  [![Coverage
  Status](https://coveralls.io/repos/github/wework/speccy/badge.svg)](https://coveralls.io/github/wework/speccy)

  [![Known
  Vulnerabilities](https://snyk.io/test/npm/speccy/badge.svg)](https://snyk.io/test/npm/speccy)


  Make sure your OpenAPI 3.0 specifications are more than just valid, make sure
  they're useful!


  Taking off from where [Mike Ralphson] started with linting in
  [swagger2openapi], Speccy aims to become the [rubocop] or [eslint] of OpenAPI.


  ## Requirements


  - **NodeJS:** v8 - v10


  ## OpenAPI Specification


  Currently tracking
  [v3.0.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)


  If you want to run speccy on OpenAPI (f.k.a Swagger) v2.0 specs, run it
  through [swagger2openapi] first and speccy can give advice on the output.


  ## Setup


  You can install this node module via NPM or Yarn.


  ```sh

  $ npm install speccy -g

  # or

  $ yarn global add speccy

  ```


  Alternatively, you can use it with Docker (see "Using Docker" below.)


  ## Usage


  ```

  Usage: speccy <command>



  Options:


  -V, --version              output the version number

  -c, --config [configFile]  config file (containing JSON/YAML). See README for
  potential values.

  -h, --help                 output usage information



  Commands:


  lint [options] <file-or-url>     ensure specs are not just valid OpenAPI, but
  lint against specified rules

  resolve [options] <file-or-url>  pull in external $ref files to create one
  mega-file

  serve [options] <file-or-url>    view specifications in beautiful human
  readable documentation

  ```


  ### Lint Command


  The goal here is to sniff your files for potentially bad things. "Bad" is
  subjective, but you'll see validation errors, along with special rules for
  making your APIs better..


  ```

  Usage: lint [options] <file-or-url>


  ensure specs are not just valid OpenAPI, but lint against specified rules


  Options:

    -q, --quiet             reduce verbosity
    -r, --rules [ruleFile]  provide multiple rules files
    -s, --skip [ruleName]   provide multiple rules to skip
    -j, --json-schema       treat $ref like JSON Schema and convert to OpenAPI Schema Objects
    -v, --verbose           set verbosity (use multiple times to increase level)
    -h, --help              output usage information
  ```


  You'll see output such as:


  ```

  #/info  R: info-contact  D: info object should contain contact object


  expected Object {
    version: '5.0',
    title: 'Foo API'
  } to have property contact

  ```


  There are going to be different things people are interested in, so the
  [default rules][rules-default] suggest things we think everyone should do;
  adding descriptions to parameters and operations, and having some sort of
  contact info.


  There are [strict rules][rules-strict] which demand more contact details,
  "real" domains, a license, and requires tags have a description!


  ### Resolve Command


  Resolving `$ref` is the art of taking multiple files and squashing them all
  down into one big OpenAPI file. By default it will output to stdout, but you
  can pass `-o` with a file name to write the file locally.


  ```

  Usage: resolve [options] <file-or-url>


  pull in external $ref files to create one mega-file


  Options:

    -o, --output <file>  file to output to
    -q, --quiet          reduce verbosity
    -j, --json-schema    treat $ref like JSON Schema and convert to OpenAPI Schema Objects
    -v, --verbose        set verbosity (use multiple times to increase level)
    -h, --help           output usage information
  ```


  Starting with the fantastic resolver logic form swagger2openapi, speccy has
  one of the most robust

  resolvers out there. It avoid cyclical dependencies (when A has a property
  that `$ref`s A, which in turn destroys your CPU), and all sorts of other
  things.


  Thanks to the `--json-schema` switch, you can have an OpenAPI file which
  `$ref`s JSON Schema files (not just OpenAPI-flavoured JSON Schema), then
  resolve them all into one real OpenAPI file, thanks to
  [wework/json-schema-to-openapi-schema].


  ### Serve Command


  Using [ReDoc], speccy can offer a preview of your specifications, in
  human-readable format.

  In the future we'll have speccy outlining improvements right in here, but one
  thing at a time.


  ```

  Usage: serve [options] <file-or-url>


  view specifications in beautiful human readable documentation


  Options:

    -p, --port [value]  port on which the server will listen (default: 5000)
    -q, --quiet         reduce verbosity
    -j, --json-schema   treat $ref like JSON Schema and convert to OpenAPI Schema Objects
    -v, --verbose       set verbosity (use multiple times to increase level)
    -h, --help          output usage information
  ```


  ### Config File


  To avoid needing to send command line options and switches every time, a
  config file can be used. Create

  a `speccy.yaml` in the root of your project.


  Example:

  ```yaml

  # Convert JSON Schema-proper to OpenAPI-flavoured Schema Objects

  jsonSchema: true

  # Keep the noise down

  quiet: true

  # Output a lot of information about what is happening (wont work if you have
  quiet on)

  # Default stdout = 1

  verbose: 2

  # Rules specific to the lint command

  lint:
    # rules files to load
    rules:
    - strict
    - ./some/local/rules.yaml
    - https://example.org/my-rules.yaml
    # rules to skip
    skip:
    - info-contact
  # Rules specific to the resolve command

  resolve:
    output: foo.yaml
  # Rules specific to the serve command

  serve:
    port: 8001
  ```


  ### Calling Speccy from Code


  Not just a command line tool, speccy can be used to normalize machine-readable
  specifications.


  The loader object will return a promise that resolves to an object containing

  the specification.  For example:


  ``` javascript

  const loader = require('speccy/lib/loader');


  const options = {
    resolve: true,   // Resolve external references
    jsonSchema: true // Treat $ref like JSON Schema and convert to OpenAPI Schema Objects
  };


  loader
    .loadSpec('path/to/my/spec', options)            // Load the spec...
    .then(spec => console.log(JSON.stringify(spec))); // ...and print it out.
  ```


  If `options.resolve` is truthy, speccy will resolve _external_ references.


  ### Using Docker


  To use Speccy without installing any node/npm specific dependencies, you can
  run it via docker:


  ``` shell

  docker run wework/speccy lint
  https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml

  ```


  You can work with local files by mounting your spec and any config files to
  the `/project` directory when you run the container:


  ```

  docker run \
    -v openapi.yaml:/project/openapi.yaml \
    wework/speccy lint openapi.yaml
  ```


  Also, if you want to use a specific version, you can reference tags, so
  `docker run wework/speccy` could be `docker run wework/speccy:0`, 

  `docker run wework/speccy:0.8` or `docker run wework/speccy:0.8.7`. These
  versions follow semantic versioning.


  ### Using with lint-staged


  To lint your specifications before committing them you can use
  [lint-staged](https://github.com/okonet/lint-staged) to run speccy before each
  commit. Just install lint-staged and husky as `devDependencies` and add the
  following to your `package.json`:


  ```

  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },

  "lint-staged": {
    "*.{yml, yaml}": ["speccy lint openapi.yml", "git add"]
  }

  ```

  You can of course adjust the file filter and the speccy command to fit your
  setup.


  ## Tests


  To run the test-suite:


  ```shell

  npm test

  ```


  ## Contributing


  Contributions are always welcome, no matter how large or small. Before
  contributing, please read the [code of conduct](CODE_OF_CONDUCT.md).


  ## Credits


  - [Mike Ralphson] for providing the initial linter/validator from
  [swagger2openapi]

  - [Roman Gotsiy] for the excellent [ReDoc]

  - [Kenta Mori] for providing the serve logic from [redocup]

  - [All Contributors][link-contributors]


  ## License


  [MIT](LICENSE) except the `openapi-3.0.json` schema, which is taken from the
  [OpenAPI-Specification](https://github.com/OAI/OpenAPI-Specification/blob/49e784d7b7800da8732103aa3ac56bc7ccde5cfb/schemas/v3.0/schema.yaml)
  and the alternative `gnostic-3.0.json` schema, which is originally from
  [Google
  Gnostic](https://github.com/googleapis/gnostic/blob/master/OpenAPIv3/openapi-3.0.json).
  Both of these are licensed under the
  [Apache-2](http://www.apache.org/licenses/LICENSE-2.0) license.


  [Kenta Mori]: https://github.com/zoncoen/

  [Mike Ralphson]: https://twitter.com/PermittedSoc/

  [ReDoc]: https://github.com/Rebilly/ReDoc

  [Roman Gotsiy]: https://github.com/RomanGotsiy

  [eslint]: https://eslint.org/

  [link-contributors]: https://github.com/wework/speccy/graphs/contributors

  [redocup]: https://github.com/zoncoen/redocup/

  [rubocop]: https://github.com/bbatsov/rubocop

  [rules-default]: http://speccy.io/rules/1-rulesets#set-default

  [rules-strict]: http://speccy.io/rules/1-rulesets#set-strict

  [swagger2openapi]: https://github.com/Mermade/swagger2openapi/

  [wework/json-schema-to-openapi-schema]:
  https://github.com/wework/json-schema-to-openapi-schema
apioo/psx-api: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  270D:2701:7782F0:F43BBA:6500FB19.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
p1c2u/openapi-spec-validator: >
  **********************

  OpenAPI Spec validator

  **********************


  .. image::
  https://img.shields.io/docker/v/p1c2u/openapi-spec-validator.svg?color=%23086DD7&label=docker%20hub&sort=semver
       :target: https://hub.docker.com/r/p1c2u/openapi-spec-validator
  .. image:: https://img.shields.io/pypi/v/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator
  .. image::
  https://travis-ci.org/python-openapi/openapi-spec-validator.svg?branch=master
       :target: https://travis-ci.org/python-openapi/openapi-spec-validator
  .. image::
  https://img.shields.io/codecov/c/github/python-openapi/openapi-spec-validator/master.svg?style=flat
       :target: https://codecov.io/github/python-openapi/openapi-spec-validator?branch=master
  .. image:: https://img.shields.io/pypi/pyversions/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator
  .. image:: https://img.shields.io/pypi/format/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator
  .. image:: https://img.shields.io/pypi/status/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator

  About

  #####


  OpenAPI Spec Validator is a Python library that validates OpenAPI Specs

  against the `OpenAPI 2.0 (aka Swagger)

  <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md>`__,

  `OpenAPI 3.0
  <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md>`__

  and `OpenAPI 3.1
  <https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md>`__

  specification. The validator aims to check for full compliance with the
  Specification.



  Documentation

  #############


  Check documentation to see more details about the features. All documentation
  is in the "docs" directory and online at
  `openapi-spec-validator.readthedocs.io
  <https://openapi-spec-validator.readthedocs.io>`__



  Installation

  ############


  .. code-block:: console

      pip install openapi-spec-validator

  Alternatively you can download the code and install from the repository:


  .. code-block:: bash

     pip install -e git+https://github.com/python-openapi/openapi-spec-validator.git#egg=openapi_spec_validator


  Usage

  #####


  CLI (Command Line Interface)

  ****************************


  Straight forward way:


  .. code-block:: bash

      openapi-spec-validator openapi.yaml

  pipes way:


  .. code-block:: bash

      cat openapi.yaml | openapi-spec-validator -

  docker way:


  .. code-block:: bash

      docker run -v path/to/openapi.yaml:/openapi.yaml --rm p1c2u/openapi-spec-validator /openapi.yaml

  or more pythonic way:


  .. code-block:: bash

      python -m openapi_spec_validator openapi.yaml

  For more details, read about `CLI (Command Line Interface)
  <https://openapi-spec-validator.readthedocs.io/en/latest/cli.html>`__.


  Python package

  **************


  .. code:: python

      from openapi_spec_validator import validate_spec
      from openapi_spec_validator.readers import read_from_filename

      spec_dict, spec_url = read_from_filename('openapi.yaml')

      # If no exception is raised by validate_spec(), the spec is valid.
      validate_spec(spec_dict)

      validate_spec({'openapi': '3.1.0'})

      Traceback (most recent call last):
          ...
      OpenAPIValidationError: 'info' is a required property

  For more details, read about `Python package
  <https://openapi-spec-validator.readthedocs.io/en/latest/python.html>`__.


  Related projects

  ################


  * `openapi-core <https://github.com/python-openapi/openapi-core>`__
     Python library that adds client-side and server-side support for the OpenAPI v3.0 and OpenAPI v3.1 specification.
  * `openapi-schema-validator
  <https://github.com/python-openapi/openapi-schema-validator>`__
     Python library that validates schema against the OpenAPI Schema Specification v3.0 and OpenAPI Schema Specification v3.1.

  License

  #######


  Copyright (c) 2017-2023, Artur Maciag, All rights reserved. Apache v2
Microsoft/OpenAPI.NET: "![Category overview screenshot](docs/images/oainet.png \"Microsoft + OpenAPI = Love\")\r\n\r\n# OpenAPI.NET \r\n\r\n|Package|Nuget|\r\n|--|--|\r\n|Models and Writers|[![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.svg)](https://www.nuget.org/packages/Microsoft.OpenApi/) |\r\n|Readers | [![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.Readers.svg)](https://www.nuget.org/packages/Microsoft.OpenApi.Readers/) |\r\n\r\n\r\nThe **OpenAPI.NET** SDK contains a useful object model for OpenAPI documents in .NET along with common serializers to extract raw OpenAPI JSON and YAML documents from the model.\r\n\r\n**See more information on the OpenAPI specification and its history here: <a href=\"https://www.openapis.org\">Open API Initiative</a>**\r\n\r\nProject Objectives \r\n\r\n- Provide a single shared object model in .NET for OpenAPI descriptions.\r\n- Include the most primitive Reader for ingesting OpenAPI JSON and YAML documents in both V2 and V3 formats.\r\n- Provide OpenAPI description writers for both V2 and V3 specification formats.\r\n- Enable developers to create Readers that translate different data formats into OpenAPI descriptions. \r\n\r\n# Installation\r\n\r\n- Install core Nuget package `Microsoft.OpenApi`\r\n- Install readers Nuget package `Microsoft.OpenApi.Readers`\r\n\r\n# Processors\r\nThe OpenAPI.NET project holds the base object model for representing OpenAPI documents as .NET objects. Some developers have found the need to write processors that convert other data formats into this OpenAPI.NET object model. We'd like to curate that list of processors in this section of the readme. \r\n\r\nThe base JSON and YAML processors are built into this project. Below is the list of the other supported processor projects.\r\n\r\n- [**C# Comment / Annotation Processor**](https://github.com/Microsoft/OpenAPI.NET.CSharpAnnotations) : Converts standard .NET annotations ( /// comments ) emitted from your build (MSBuild.exe) into OpenAPI.NET document object. \r\n\r\n- [**OData CSDL Processor**](https://github.com/Microsoft/OpenAPI.NET.OData) : Converts the XML representation of the Entity Data Model (EDM) describing an OData Service into OpenAPI.NET document object. \r\n\r\n# Example Usage\r\n\r\nCreating an OpenAPI Document\r\n\r\n```C#\r\nvar document = new OpenApiDocument\r\n{\r\n    Info = new OpenApiInfo\r\n    {\r\n        Version = \"1.0.0\",\r\n        Title = \"Swagger Petstore (Simple)\",\r\n    },\r\n    Servers = new List<OpenApiServer>\r\n    {\r\n        new OpenApiServer { Url = \"http://petstore.swagger.io/api\" }\r\n    },\r\n    Paths = new OpenApiPaths\r\n    {\r\n        [\"/pets\"] = new OpenApiPathItem\r\n        {\r\n            Operations = new Dictionary<OperationType, OpenApiOperation>\r\n            {\r\n                [OperationType.Get] = new OpenApiOperation\r\n                {\r\n                    Description = \"Returns all pets from the system that the user has access to\",\r\n                    Responses = new OpenApiResponses\r\n                    {\r\n                        [\"200\"] = new OpenApiResponse\r\n                        {\r\n                            Description = \"OK\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nReading and writing a OpenAPI description\r\n\r\n```C#\r\nvar httpClient = new HttpClient\r\n{\r\n    BaseAddress = new Uri(\"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/\")\r\n};\r\n\r\nvar stream = await httpClient.GetStreamAsync(\"master/examples/v3.0/petstore.yaml\");\r\n\r\n// Read V3 as YAML\r\nvar openApiDocument = new OpenApiStreamReader().Read(stream, out var diagnostic);\r\n\r\n// Write V2 as JSON\r\nvar outputString = openApiDocument.Serialize(OpenApiSpecVersion.OpenApi2_0, OpenApiFormat.Json);\r\n\r\n```\r\n\r\n# Build Status\r\n\r\n|**master**|\r\n|--|\r\n|[![Build status](https://ci.appveyor.com/api/projects/status/9l6hly3vjeu0tmtx/branch/master?svg=true)](https://ci.appveyor.com/project/MicrosoftOpenAPINETAdmin/openapi-net-54e7i/branch/master)|\r\n\r\n# Contributing\r\n\r\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n\r\nTo provide feedback and ask questions you can use Stack Overflow with the [OpenAPI.NET](https://stackoverflow.com/questions/tagged/openapi.net) tag or use the OpenAPI.NET Slack channel which you can join by registering for the HTTP APIs team at http://slack.httpapis.com.\r\n"
swagger-api/swagger-codegen: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AAF:451B:AB133B:15B3219:6500FB89.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fmvilas/swagger-node-codegen: >
  <h1>THIS PACKAGE IS NOT MAINTAINED ANYMORE. IF YOU WANT TO MAINTAIN IT DROP ME
  A LINE AT fran.mendez[at]hey.com.</h1>


  <p align="center"><img src="logo.png"></p>

  <p align="center">
    <strong>OpenAPI Node.js<br>Code Generator</strong>
  </p>

  <br><br>

  Use your API OpenAPI 3.x/Swagger 2 definition to generate Node.js
  ES7-compliant code for your API.


  The generated code features:


  * ES7

  * ESLint

  * YAML config file

  * Express

  * No transpiling


  ## Install


  To use it from the CLI:


  ```bash

  npm install -g swagger-node-codegen

  ```


  To use it as a module in your project:


  ```bash

  npm install --save swagger-node-codegen

  ```


  ## Requirements


  * Node.js v7.6+


  ## Usage


  ### From the command-line interface (CLI)


  ```bash
    Usage: snc [options] <swaggerFile>


    Options:

      -V, --version                  output the version number
      -o, --output <outputDir>       directory where to put the generated files (defaults to current directory)
      -t, --templates <templateDir>  directory where templates are located (defaults to internal nodejs templates)
      -h, --help                     output usage information
  ```


  #### Examples


  The shortest possible syntax:

  ```bash

  snc swagger.yaml

  ```


  Specify where to put the generated code:

  ```bash

  snc swagger.yaml -o ./my-api

  ```


  ### As a module in your project


  ```js

  const path = require('path');

  const codegen = require('swagger-node-codegen');

  const swagger = require('./swagger.json');


  codegen.generate({
    swagger,
    target_dir: path.resolve(__dirname, './my-api')
  }).then(() => {
    console.log('Done!');
  }).catch(err => {
    console.error(`Something went wrong: ${err.message}`);
  });

  ```


  The `swagger` parameter can be either JSON or a path pointing to a JSON or
  YAML file.


  ```js

  const path = require('path');

  const codegen = require('swagger-node-codegen');


  codegen.generate({
    swagger: path.resolve(__dirname, './swagger.yml'),
    target_dir: path.resolve(__dirname, './my-api')
  }).then(() => {
    console.log('Done!');
  }).catch(err => {
    console.error(`Something went wrong: ${err.message}`);
  });

  ```

  #### Using async/await


  The function `codegen.generate` returns a Promise, so it means you can use
  async/await:


  ```js

  const path = require('path');

  const codegen = require('swagger-node-codegen');


  try {
    await codegen.generate({
      swagger: path.resolve(__dirname, './swagger.yml'),
      target_dir: path.resolve(__dirname, './my-api')
    });
    console.log('Done!');
  } catch (err) {
    console.error(`Something went wrong: ${err.message}`);
  }

  ```


  ## API Documentation


  ### Modules


  <dl>

  <dt><a href="#module_codegen">codegen</a></dt>

  <dd><p>This module generates a code skeleton for an API using
  OpenAPI/Swagger.</p>

  </dd>

  <dt><a href="#codegen.module_generate">generate</a> ⇒
  <code>Promise</code></dt>

  <dd><p>Generates a code skeleton for an API given an OpenAPI/Swagger file.</p>

  </dd>

  </dl>


  <a name="module_codegen"></a>


  ### codegen

  This module generates a code skeleton for an API using OpenAPI/Swagger.


  <a name="codegen.module_generate"></a>


  #### generate ⇒ <code>Promise</code>

  Generates a code skeleton for an API given an OpenAPI/Swagger file.



  | Param | Type | Description |

  | --- | --- | --- |

  | config | <code>Object</code> | Configuration options |

  | config.swagger | <code>Object</code> \| <code>String</code> |
  OpenAPI/Swagger JSON or a string pointing to an OpenAPI/Swagger file. |

  | config.target_dir | <code>String</code> | Path to the directory where the
  files will be generated. |

  | config.templates| <code>String</code> | Path to the directory where custom
  templates are (optional). |



  ## Templates

  You can create your own [templates](./templates/README.md).


  ## Authors


  * Fran Méndez ([@fmvilas](http://twitter.com/fmvilas))

  * Richard Klose ([@richardklose](http://github.com/richardklose))
janephp/open-api: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5E:1B72:767EDC:F2116A:6500FB44.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
dtzar/openapi-auto-test: >-
  {"message":"Not
  Found","documentation_url":"https://docs.github.com/rest/repos/contents#get-a-repository-readme"}
apiaryio/dredd: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2715:5F4E:7CB278:FE484B:6500FB16.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
quen2404/openapi-diff: >
  # OpenAPI-diff 


  Compare two OpenAPI specifications (3.x) and render the difference to HTML
  plaintext, or Markdown files.


  [![Test](https://github.com/OpenAPITools/openapi-diff/workflows/Test/badge.svg)](https://github.com/OpenAPITools/openapi-diff/actions?query=branch%3Amaster+workflow%3ATest+)


  # Requirements


  * Java 8


  # Feature


  * Supports OpenAPI spec v3.0.

  * Depth comparison of parameters, responses, endpoint, http method
  (GET,POST,PUT,DELETE...)

  * Supports swagger api Authorization

  * Render difference of property with Expression Language

  * HTML & Markdown render


  # Maven


  Available on [Maven
  Central](https://search.maven.org/artifact/com.github.joschi.openapi-diff/core)


  ```xml

  <dependency>
    <groupId>com.github.joschi.openapi-diff</groupId>
    <artifactId>core</artifactId>
    <version>${openapi-diff-version}</version>
  </dependency>

  ```


  # Docker


  Available on [Docker Hub](https://hub.docker.com/r/joschi/openapi-diff/) as
  `joschi/openapi-diff`.


  ```bash

  # docker run joschi/openapi-diff:latest

  usage: openapi-diff <old> <new>
      --debug                     Print debugging information
      --error                     Print error information
      --fail-on-changed           Fail if API changed but is backward
                                  compatible
      --fail-on-incompatible      Fail only if API changes broke backward
                                  compatibility
   -h,--help                      print this message
      --header <property=value>   use given header for authorisation
      --html <file>               export diff as html in given file
      --info                      Print additional information
   -l,--log <level>               use given level for log (TRACE, DEBUG,
                                  INFO, WARN, ERROR, OFF). Default: ERROR
      --markdown <file>           export diff as markdown in given file
      --off                       No information printed
      --query <property=value>    use query param for authorisation
      --state                     Only output diff state: no_changes,
                                  incompatible, compatible
      --text <file>               export diff as text in given file
      --trace                     be extra verbose
      --version                   print the version information and exit
      --warn                      Print warning information
  ```



  ## Build the image


  This is only required if you want to try new changes in the Dockerfile of this
  project.


  ```bash

  docker build -t local-openapi-diff .

  ```


  You can replace the local image name `local-openapi-diff` by any name of your
  choice.


  ## Run an instance


  In this example the `$(pwd)/core/src/test/resources` directory is mounted in
  the `/specs` directory of the container

  in readonly mode (`ro`).


  ```bash

  docker run -t \
    -v $(pwd)/core/src/test/resources:/specs:ro \
    joschi/openapi-diff /specs/path_1.yaml /specs/path_2.yaml
  ```


  The remote name `joschi/openapi-diff` can be replaced with
  `local-openapi-diff` or the name you gave to your local image.


  # Usage


  openapi-diff can read OpenAPI specs from JSON files or HTTP URLs.


  ## Command Line


  ```bash

  $ openapi-diff --help

  usage: openapi-diff <old> <new>
      --debug                     Print debugging information
      --error                     Print error information
   -h,--help                      print this message
      --header <property=value>   use given header for authorisation
      --html <file>               export diff as html in given file
      --info                      Print additional information
   -l,--log <level>               use given level for log (TRACE, DEBUG,
                                  INFO, WARN, ERROR, OFF). Default: ERROR
      --markdown <file>           export diff as markdown in given file
      --off                       No information printed
      --query <property=value>    use query param for authorisation
      --state                     Only output diff state: no_changes,
                                  incompatible, compatible
      --fail-on-incompatible      Fail only if API changes broke backward compatibility
      --fail-on-changed           Fail if API changed but is backward compatible
      --trace                     be extra verbose
      --version                   print the version information and exit
      --warn                      Print warning information
  ```


  ## Direct Invocation


  ```java

  public class Main {
      public static final String OPENAPI_DOC1 = "petstore_v3_1.json";
      public static final String OPENAPI_DOC2 = "petstore_v2_2.yaml";
          
      public static void main(String[] args) {
          ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);

          //...
      }
  }

  ```


  ### Render difference

  ---

  #### HTML


  ```java

  String html = new HtmlRender("Changelog",
          "http://deepoove.com/swagger-diff/stylesheets/demo.css")
                  .render(diff);

  try {
      FileWriter fw = new FileWriter(
              "testNewApi.html");
      fw.write(html);
      fw.close();

  } catch (IOException e) {
      e.printStackTrace();
  }

  ```


  #### Markdown


  ```java

  String render = new MarkdownRender().render(diff);

  try {
      FileWriter fw = new FileWriter(
              "testDiff.md");
      fw.write(render);
      fw.close();
      
  } catch (IOException e) {
      e.printStackTrace();
  }

  ```


  ### Extensions


  This project uses Java Service Provider Inteface (SPI) so additional
  extensions can be added. 


  To build your own extension, you simply need to create a
  `src/main/resources/META-INF/services/com.qdesrame.openapi.diff.core.compare.ExtensionDiff`
  file with the full classname of your implementation.  Your class must also
  implement the `com.qdesrame.openapi.diff.core.compare.ExtensionDiff`
  interface.  Then, including your library with the `openapi-diff` module will
  cause it to be triggered automatically.


  # Examples


  ### CLI Output


  ```text

  ==========================================================================

  ==                            API CHANGE LOG                            ==

  ==========================================================================
                               Swagger Petstore                             
  --------------------------------------------------------------------------

  --                              What's New                              --

  --------------------------------------------------------------------------

  - GET    /pet/{petId}


  --------------------------------------------------------------------------

  --                            What's Deleted                            --

  --------------------------------------------------------------------------

  - POST   /pet/{petId}


  --------------------------------------------------------------------------

  --                          What's Deprecated                           --

  --------------------------------------------------------------------------

  - GET    /user/logout


  --------------------------------------------------------------------------

  --                            What's Changed                            --

  --------------------------------------------------------------------------

  - PUT    /pet
    Request:
          - Deleted application/xml
          - Changed application/json
            Schema: Backward compatible
  - POST   /pet
    Parameter:
      - Add tags in query
    Request:
          - Changed application/xml
            Schema: Backward compatible
          - Changed application/json
            Schema: Backward compatible
  - GET    /pet/findByStatus
    Parameter:
      - Deprecated status in query
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - GET    /pet/findByTags
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - DELETE /pet/{petId}
    Parameter:
      - Add newHeaderParam in header
  - POST   /pet/{petId}/uploadImage
    Parameter:
      - Changed petId in path
  - POST   /user
    Request:
          - Changed application/json
            Schema: Backward compatible
  - POST   /user/createWithArray
    Request:
          - Changed application/json
            Schema: Backward compatible
  - POST   /user/createWithList
    Request:
          - Changed application/json
            Schema: Backward compatible
  - GET    /user/login
    Parameter:
      - Delete password in query
  - GET    /user/logout

  - GET    /user/{username}
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - PUT    /user/{username}
    Request:
          - Changed application/json
            Schema: Backward compatible
  --------------------------------------------------------------------------

  --                                Result                                --

  --------------------------------------------------------------------------
                   API changes broke backward compatibility                 
  --------------------------------------------------------------------------

  ```


  ### Markdown


  ```markdown

  ### What's New

  ---

  * `GET` /pet/{petId} Find pet by ID


  ### What's Deleted

  ---

  * `POST` /pet/{petId} Updates a pet in the store with form data


  ### What's Deprecated

  ---

  * `GET` /user/logout Logs out current logged in user session


  ### What's Changed

  ---

  * `PUT` /pet Update an existing pet  
      Request

          Deleted request body : [application/xml]
          Changed response : [application/json]
  * `POST` /pet Add a new pet to the store  
      Parameter

          Add tags //add new query param demo
      Request

          Changed response : [application/xml]
          Changed response : [application/json]
  * `GET` /pet/findByStatus Finds Pets by status  
      Parameter

      Return Type

          Changed response : [200] //successful operation
  * `GET` /pet/findByTags Finds Pets by tags  
      Return Type

          Changed response : [200] //successful operation
  * `DELETE` /pet/{petId} Deletes a pet  
      Parameter

          Add newHeaderParam
  * `POST` /pet/{petId}/uploadImage uploads an image for pet  
      Parameter

          petId Notes ID of pet to update change into ID of pet to update, default false
  * `POST` /user Create user  
      Request

          Changed response : [application/json]
  * `POST` /user/createWithArray Creates list of users with given input array  
      Request

          Changed response : [application/json]
  * `POST` /user/createWithList Creates list of users with given input array  
      Request

          Changed response : [application/json]
  * `GET` /user/login Logs user into the system  
      Parameter

          Delete password //The password for login in clear text
  * `GET` /user/logout Logs out current logged in user session  

  * `PUT` /user/{username} Updated user  
      Request

          Changed response : [application/json]
  * `GET` /user/{username} Get user by user name  
      Return Type

          Changed response : [200] //successful operation
  ```


  # License


  openapi-diff is released under the Apache License 2.0.


  # Thanks


  * Adarsh Sharma / [adarshsharma](https://github.com/adarshsharma)

  * Quentin Desramé / [quen2404](https://github.com/quen2404)

  * [Sayi](https://github.com/Sayi) for his project
  [swagger-diff](https://github.com/Sayi/swagger-diff) 
    which was a source of inspiration for this tool
Mermade/openapi-filter: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2729:52BF:A66BEC:151C9EC:6500FAF9.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Mermade/openapi-extract: >
  # openapi-extract


  ![ci](https://github.com/Mermade/openapi-extract/workflows/ci/badge.svg)


  Extract paths, operations, parameters, schemas etc from OpenAPI/Swagger
  definitions.


  Works with OpenAPI/Swagger 2.0 and 3.x definitions.


  ```

  Usage: openapi-extract [options] {infile} [{outfile}]


  Options:
    -h, --help             Show help                                     [boolean]
    --version              Show version number                           [boolean]
    --openai               make the definition OpenAI compliant          [boolean]
    --server               include server information                    [boolean]
    --shard                shard the input to an output directory         [string]
    -p, --path             the path to extract                            [string]
    -o, --operationid      the operationIds to extract                     [array]
    -m, --method           the method to extract for the given path       [string]
    -i, --info             copy full info object, otherwise minimal      [boolean]
    -d, --removeDocs       remove all externalDocs properties            [boolean]
    -r, --removeExamples   remove all example/examples properties        [boolean]
    -x, --removeExtensions remove all x- extension properties            [boolean]
    -s, --security         include security information                  [boolean]
    -v, --verbose          increase verbosity                            [boolean]
  ```


  or


  ```javascript

  const openapiExtractor = require('openapi-extract');

  const options = {};

  // options.path = '...';

  // options.method = '...';

  // options.operationid = ['...'];

  const res = openapiExtractor.extract(obj, options);


  const map = openapiExtractor.shard(obj, options);

  ```


  The `options` object takes the same values as the CLI, for these keys and
  default values:


  *   path = ''

  *   method = ''

  *   info = false

  *   openai = false

  *   removeDocs = false

  *   removeExamples = false

  *   removeExtensions = false

  *   server = false

  *   security = false

  *   operationid = []


  ## OpenAI compliant mode


  This option turns on the following rules:


  1. The `description` properties must have a maximum length of 300 characters
webonix/swagger-docs-cfml: >
  swagger-docs-cfml

  =================


  create swagger docs from CFML (Railo) ReST components


  this is a *Work in Progress - updating to Swagger 2.0*


  This app will scan for ReST CFCs in given path and will dynamically create a
  swagger doc for each resource found


  Get Swagger UI

  --------------

  [https://github.com/wordnik/swagger-ui](https://github.com/wordnik/swagger-ui)


  Instructions

  ------------

  * I put swagger-docs-cfm in subdirectory called 'docs' (within the swagger
  directory)

  * Create Rewrite rule - ^/swagger/docs/(.+)$ /swagger/docs/index.cfm?path=/$1

  * Set path to your ReST components in Application.cfc setupApp()

  * Set swagger['basePath'] in index.cfm. and other swagger["info"] properties

  * Launch Swagger UI, eg http://localhost/swagger

  * Enter docs URL eg http://localhost/swagger/docs

  * Hopefully you can browser and try for ReST API


  Suggestions

  -----------

  I have just started messing around with swagger and knocked this a quickly.
  Please let me know if you have any suggestions


  To do

  -----

  * Add Basic Authentication

  * config for baseURL and info properties
silas/swagger-framework: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A92:7A58:A01F92:143C634:6500FB7C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
batdevis/swagger_engine: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2726:28DF:74D7DA:EE80BE:6500FB1C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
signalfx/swagger-angular-client: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A9C:574C:21F809:457D88:6500FB78.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
richhollis/swagger-docs: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A8B:4841:ADAA5A:1601040:6500FB73.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
EiffelWebFramework/swagger: |
  Swagger
  =======

  This is a Swagger protocol implementation in Eiffel.

  Note: This is a work in progress, and the API could change in a future.

  ## Authors

  + [@oligot](https://github.com/oligot)
  + [@weilers](https://github.com/weilers)
  + B. Marchal
SmartBear/swagger4j: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2734:13B9:AE3B3:166414:6500FB0B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
ROAMSYS/swaggerapi: >
  # Swagger Java Client


  * [Configuration](#configuration)

  * [Register the Swagger API components](#register-the-swagger-api-components)
      * [Start Up listener](#start-up-listener)
      * [Servlet for API calls](#servlet-for-api-calls)
  * [Example API declaration](#example-api-declaration)
      * [API class annotation](#api-class-annotation)
      * [API method annotations](#api-method-annotations)
      * [Method parameters](#method-parameters)
  * [License](#license)


  ## Configuration


  Create a class that extends the **SwaggerAPIListener** class. Here you can do
  all your configuration using the instance of SwaggerAPIConfig. Use the
  **registerModel** method to add your API services.

  ````java

  public class SwaggerListener extends SwaggerAPIListener {
      
      @Override
      public void initialize(final SwaggerAPIConfig config) {
          config.allowCrossOriginAccess();
          config.setAPIVersion("0.1.0");
          config.setBasePath("http://example.roamsys.lan:8080/api/");
          config.setSwaggerVersion("1.1");
          config.setDefaultContentType(SwaggerAPIConfig.CONTENT_TYPE_JSON_UTF8);
          config.registerModel(new TestModel());
      }
  }

  ````

  ## Register the Swagger API components


  ### Start Up listener

  Register the start up listener class you've created in your **web.xml**. This
  will initiate the Swagger API services at the start up of your application.

  ````xml

  <web-app ...>
    ...
    <listener>
      ...
      <listener-class>com.roamsys.example.gwt.server.swagger.SwaggerListener</listener-class>
    </listener>
  </web-app>

  ````


  ### Servlet for API calls

  Edit your **web.xml** and add the Swagger API servlet. Thats all.

  ````xml

  <web-app ...>
    ...
    <servlet>
      <servlet-name>SwaggerAPI</servlet-name>
      <servlet-class>com.roamsys.swagger.SwaggerAPIServlet</servlet-class>
    </servlet>
    <servlet-mapping>
      <servlet-name>SwaggerAPI</servlet-name>
      <url-pattern>/api/*</url-pattern>
    </servlet-mapping>
  </web-app>

  ````


  ## Example API declaration

  ````java

  @SwaggerModel (path = "/metadata")

  public class MetadataAPI implements SwaggerAPIModel {

      @SwaggerApi (
        notes = "Returns a list of all documents",
        method = HTTPMethod.GET,
        path = "/all",
        summary = "Get document list")
      public void all(final SwaggerAPIContext context) throws IOException {
          context.getResponse().getWriter().println("[ { \"name\" : \"document 1\", \"hash\" : \"abc\"}, { \"name\": \"another document\", \"hash\" : \"rrr\"} ]");
      }

      @SwaggerApi (
        notes = "Returns detailed information a specific document",
        method = HTTPMethod.GET,
        path = "/details/{hash}",
        summary = "Get document details")
      public void allForTypeAndFormat(final SwaggerAPIContext context,
              @SwaggerParameter (
                name = "hash",
                description = "The document hash",
                required = true,
                paramType = ParamType.PATH,
                dataType = DataType.STRING
              ) final String hash) {
          if (hash.equals("abc")) {
              context.getResponse().getWriter().println("{ \"name\" : \"document 1\", \"hash\" : \"abc\", , \"size\" : 1232, , \"extension\" : \"odt\"}");
          } else if (hash.equals("rrr")) {
              context.getResponse().getWriter().println("{ \"name\" : \"another document\", \"hash\" : \"rrr\", , \"size\" : 3532, , \"extension\" : \"zip\"}");
          }
      }
  }

  ````

  ### API class annotation


  Each class defining an API has to be annotated with @SwaggerModel(path =
  "pathToAPIs"). All APIs defined in the class will have that path as prefix. 

  The following example defines two APIs. Both APIs will be available thru the
  base path of your application followed by */metadata*.


  ### API method annotations


  To make an method available as public API annotate it with @SwaggerApi and
  provide the usual Swagger specifications:


  * **notes** - A description for the API

  * **method** - The HTTP method GET, PUT, POST, DELETE

  * **path** - The URL pattern containing placeholders for parameters

  * **summary** - A short description or name for the API


  ### Method parameters


  The parameters used in the URL must annotated with the @SwaggerParameter
  annotation, which uses the following properties:


  * **name** - The name of the parameter, should be the same as the method
  argument

  * **description** - A short description for the parameter

  * **required** - Set this to *true* for mandatory parameters, optional
  parameters should be placed at the end of the URL, if paramType is PATH

  * **paramType** - The type/kind of the parameter
       * *PATH* - For parameters placed in a REST-full URL seperated by slashes
       * *QUERY* - For parameters in a query string append to the URL
       * *BODY* - For parameters in a the body (the data) of a PUT or POST request
       * *HEADER* - For parameters in the request header
       * *FORM* - For parameters in a request body encoded with *multipart/form-data*
  * **dataType** - The data type of the parameter
       * *STRING*
       * *INTEGER*
       * *LONG* 
       * *BOOLEAN*
       * *DATE*
       * *DATETIME*

  ## Documentation support


  The support for Swagger UI has been changed since Release 5:

  * Former versions support the Swagger UI version 1.x (aka resource.json).

  * The current version now supports Swagger UI version 2.0 which is also known
  as *OpenAPI* framework.


  The following URL may be used for getting the OpenAPI specification based on
  the annotation information defined on class and method level:

  `https://<host>/<base path>/swagger.json`


  The API key has to be specified as URL parameter 'api_key' or as header field
  'X-Api-Key'. 


  ## License


  The MIT License (MIT)


  Copyright (c) 2014 Roamsys S.A.


  Permission is hereby granted, free of charge, to any person obtaining a copy

  of this software and associated documentation files (the "Software"), to deal

  in the Software without restriction, including without limitation the rights

  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell

  copies of the Software, and to permit persons to whom the Software is

  furnished to do so, subject to the following conditions:


  The above copyright notice and this permission notice shall be included in all

  copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

  SOFTWARE.
ryankennedy/swagger-jaxrs-doclet: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A90:6129:AA4F39:1597AA0:6500FB75.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
signalfx/swagger-node-client: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A85:7EBD:A73AB3:1534B9F:6500FB7B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
springfox/springfox-grails-integration: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AAF:451B:AB07F9:15B1B67:6500FB83.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
rantav/flask-restful-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A96:0E33:21CAC7:4532BD:6500FB73.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
emicklei/go-restful: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2705:2749:78AC29:F5E0DB:6500FB31.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
springfox/springfox-grails-demo: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A93:5E42:9E10C2:1410F1E:6500FB82.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
gong023/swagger-assert: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273E:28DF:74F963:EEC61E:6500FB3F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
worldline/swagger-jack: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E565:451B:AB375A:15B7B2F:6500FBA3.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Luracast/Restler: >
  ![Restler](public/examples/resources/restler.svg) Luracast Restler

  ==================================================================

  [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Luracast/Restler)

  [![Latest Stable
  Version](https://poser.pugx.org/luracast/restler/v/stable.png)](https://packagist.org/packages/luracast/restler)

  [![Total
  Downloads](https://poser.pugx.org/luracast/restler/downloads.png)](https://packagist.org/packages/luracast/restler)

  [![Latest Unstable
  Version](https://poser.pugx.org/luracast/restler/v/unstable.png)](https://packagist.org/packages/luracast/restler)

  [![License](https://poser.pugx.org/luracast/restler/license.png)](https://packagist.org/packages/luracast/restler)


  ### Version 5


  > upgraded from version 3 RC6 for latest PHP support


  Restler is a simple and effective multi-format Web API Server written in PHP.


  Just deal with your business logic in php, restler will take care of the REST!


  ### Restler - *Better APIs by Design*


  * [Developer Home](https://luracast.com/products/restler/)

  * [Documentation](https://restler5.luracast.com/) with live examples

  * Updates on [Facebook](https://www.facebook.com/Luracast) and
  [Twitter](https://twitter.com/Luracast)

  * [Features](#features)

  * [Installation](#installation)

  * [Quick Start Guide](#quick-start-guide)

  * [Change Log](#change-log)


  Features

  --------


  * No Learning Curve

  * Light weight

  * Flexible

  * Highly Customizable

  * Many Examples that can be tried on your localhost to get started

  * Supports HTTP request methods HEAD, GET, POST, PUT, DELETE, OPTIONS and
  PATCH via header or request parameter (method)

  * Supports both RESTful and Pragmatic REST API Design

  * Clients can use X-HTTP-Method-Override header, supports Cross Origin
  Resource Sharing and JSONP

  * Two-way format(media type) conversion both send and receive
      * Pluggable content Formatter framework and api
      * Comes with JSON, XML, Yaml, Amf, and Plist(both XML and Binary) format support
  * Pluggable Authentication schemes
      * OAuth 2 Server
  * Pluggable Filters to effectively manage API usage
      * API Rate Limiting Filter
  * Routing
      * Manual Routing (Annotation)
          * Using `@url GET my/custom/url/{param}` PHPDoc comments
      * Auto Routing (Reflection)
          * URL to Method mapping
          * URL part to Method parameter mapping
          * Query parameters to Method parameter mapping
          * Request body to Method parameter mapping
  * Cache built-in
      * Client Side Caching support
      * Proxy Caching support
  * API Features
      * Always supports URLEncoded format for simplified input (POST vars)
      * Automatic parameter validation and type conversion
      * API versioning support by URL and/or vendor specific MIME
      * API documentation and discovery using [Restler API Explorer](https://github.com/Luracast/Restler-API-Explorer)
      * Throttling and Performance tuning
  * Management
      * Behavior Driven API testing using [Behat](http://behat.org/) and [Guzzle](https://github.com/guzzle/guzzle)
      * Command line Project Management using [Respect/Foundation](https://github.com/Respect/Foundation)
      * Dependency Management using [Composer](http://getcomposer.org/)
      * Source code distributed under LGPL

  Git Repository and the Branches

  -------------------------------


  1. Most stable and recent version is at the `master` branch, previous versions
  are in the version branches such
     as `v4`, `v3`, `v2`, and `v1`.

  2. Version branch with the current version such as `v5` is used for building
  up the next release. It's documentation may
     not be updated frequently and thus reserved for the daring ones.

  3. Feature branches such as `features/html` and `features/router` are purely
  for experimentation purpose to try out a
     feature. They may be merged when ready.

  Test Drive

  ----------


  Install this repository to try out the examples.


  > Make sure PHP 5.4 or above is available on your server. We recommended using
  the latest version for better performance.


  ### 1. Install Composer


  Restler uses [Composer](http://getcomposer.org/) to manage its dependencies.
  First, download a copy of `composer.phar`.

  It can be kept in your project folder or ideally in `usr/local/bin` to use it
  globally for all your projects. If you are

  on Windows, you can use the composer

  [windows installer](https://getcomposer.org/Composer-Setup.exe) instead.


  ### 2. Install Restler


  #### Option 1. Using composer create-project


  You may install Restler by running the create project command in your
  terminal. Replace {projectName} with your actual

  project name. It will create a folder with that name and install Restler.


  ```console

  php composer.phar create-project luracast/restler {projectName}

  ```


  > **Note:-**

  >

  > 1. If you do not want the additional formats and BDD tools you can include
       >    `--no-dev` to enforce exclusion of dev packages.
  >

  > 2. If you want to try the bleading edge v3 branch or any of the feature
       >    branches include `3.x-dev` or `dev-features/html` in the above command

  #### Option 2. Downloading from GitHub


  After installing Composer, download the [latest version]() of the Restler
  framework and extract its contents into a

  directory on your server. Next, in the root of your Restler project, run the
  `php composer.phar install`

  (or `composer install`) command to install all the framework's dependencies.
  This process requires Git to be installed

  on the server to successfully complete the installation.


  If you want to update the Restler framework, you may issue the

  `php composer.phar update` command.


  > **Note:-** If you are not allowed to install composer and git on your
  server, you

  > can install and run them on your development machine. The resulting files
  and

  > folders can be uploaded and used on the server.


  ### 3. Configure


  Ideally public folder should be mapped as your web root, It is optional, but
  recommended avoiding exposing unneeded

  files and folders.


  ### 4. Try it out


  Try the live examples in your localhost. 

  > You may launch the PHP's built-in server with `composer serve` command.


  ### 5. Run some test


  Update the base_url specified in `behat.yml` and then try the following
  command


  ```console


  vendor/bin/behat


  ```

  > alternatively you can run `composer test`


  This will test the examples against the behaviors expected, for example


  ```gherkin


  Feature: Testing CRUD Example

    Scenario: Creating new Author with JSON
      Given that I want to make a new "Author"
      And his "name" is "Chris"
      And his "email" is "chris@world.com"
      And the request is sent as JSON
      When I request "/examples/_007_crud/authors"
      Then the response status code should be 200
      And the response should be JSON
      And the response has a "id" property

  ```


  All set, Happy RESTling! :)


  Quick Start Guide

  -----------------


  We have two options to create your own restler api server

   1. Most convenient option is using application templates such as [Restler Application](https://github.com/Luracast/Restler-Framework) 
      which has integrations with many packages to help us with the business logic as well. 
      If you choose this option, select a branch in that repository and proceed with 
      the instructions available there.
      
   2. Create a project from scratch so that you have full control over every aspect of your application. 
      If you choose this option, follow along with the steps below.
      - create a folder to hold your project and open it in the terminal.
      - run `composer init` and follow along to create `composer.json`
      - when it is asking for dependencies, type `restler/framework` and `^5` for the version constraint.
      - alternatively, you can leave it blank and create the composer.json first and then run `composer require restler/framework:^5`
      
  > we are using `restler/framework` instead of `luracast/restler` to reduce the
  space required for the package. 

  > It is coming from https://github.com/Luracast/Restler-Framework it contains
  only the contents of src folder here.
      
  > Even when you are building from scratch, checking out the application
  templates will help with folder structure 

  > decisions and finding other useful packages.


  ### 1. Write API


  Create your **API classes** with all needed public and protected methods


  ### 2. Open the Gateway


  Create the **gateway (public/index.php)** as follows


  ```php

  <?php

  require_once __DIR__.'/../vendor/autoload.php';


  use Luracast\Restler\Restler;


  $r = new Restler();

  $r->addAPIClass('YourApiClassNameHere'); // repeat for more

  $r->handle(); //serve the response

  ```


  ### 3. Prettify URLs


  **Enable URL Rewriting**


  Make sure all the requests go to index.php by enabling URL Rewriting for your
  website


  For example:-


  If you are on Apache, you can use an .htaccess file such as


  ```apache

  DirectoryIndex index.php

  <IfModule mod_rewrite.c>
      RewriteEngine On
      RewriteRule ^$ index.php [QSA,L]
      RewriteCond %{REQUEST_FILENAME} !-f
      RewriteCond %{REQUEST_FILENAME} !-d
      RewriteRule ^(.*)$ index.php [QSA,L]
  </IfModule>

  <IfModule mod_php5.c>
      php_flag display_errors On
  </IfModule>

  ```


  > **Note:-** This requires `AllowOverride` to be set to `All` instead of
  `None`

  > in the `httpd.conf` file, and might require some tweaking on some server

  > configurations. Refer to
  [mod_rewrite](http://httpd.apache.org/docs/current/mod/mod_rewrite.html)

  > documentation for more info.


  If you are on Nginx, you have to make sure you set the `server_name` and pass
  the PHP scripts to fast cgi (PHP-FPM)

  listening on 127.0.0.1:9000


  ```

  server {
      listen        80;
      server_name   api.luracast.com; //change it to match your server name

      //... other stuff

      location ~ \.php$ {
          root           /var/www/html;
          fastcgi_pass   127.0.0.1:9000;
          fastcgi_index  index.php;
          fastcgi_param  SCRIPT_FILENAME  /var/www/html/$fastcgi_script_name;
          include        fastcgi_params;
      }

      //... other stuff
  }

  ```


  > **Note:-** This requires PHP, PHP-FPM to be properly installed and
  configured.

  > Refer to [PHP FastCGI](http://wiki.nginx.org/PHPFcgiExample) example for
  more

  > info.


  ### 4. Customise


  **Fine tune to suit your needs**


  ```php

  <?php

  require_once __DIR__.'/../vendor/autoload.php';

  use Luracast\Restler\Restler;

  use Luracast\Restler\Defaults;

  //set the defaults to match your requirements

  Defaults::$throttle = 20; //time in milliseconds for bandwidth throttling

  //setup restler

  $r = new Restler();

  $r->addAPIClass('YourApiClassNameHere'); // repeat for more

  $r->addAPIClass('Explorer'); //from restler framework for API Explorer

  $r->addFilterClass('RateLimit'); //Add Filters as needed

  $r->handle(); //serve the response

  ```


  Explore the api and try it out by openings `explorer/index.html` from the web
  root on your browser


  Happy Exploring! :)


  > **Note:-** Using eAccelerator can make restler to fail as it removes the

  > comments. More info can be found
  [here](http://wildlyinaccurate.com/eaccelerator-and-doctrine-2)


  ### 5. Annotate


  Restler supports annotations in the form of PHPDoc comments for API fine
  tuning


  They are documented in detail under [Annotations](ANNOTATIONS.md)


  ### 6. Authorize


  In order to protect your api, authenticate and allow valid users


  ```php

  <?php

  require_once '../restler.php';

  use Luracast\Restler\Restler;

  $r = new Restler();

  $r->addAPIClass('YourApiClassNameHere'); // repeat for more

  $r->addAuthenticationClass('CustomAuth'); //Add Authentication classes as
  needed

  $r->handle(); //serve the response

  ```


  ### 7. Start Production


  By default Restler runs in debug mode more fine tuned for API developer, by
  showing detailed error messages and

  prettifying the api result to human readbale form


  By turning on production mode you will gain some performance boost as it will
  cache the routes (comment parsing happens

  only once instead of every api call), few other files and avoid giving out
  debug information


  ```php

  <?php

  require_once '../restler.php';

  use Luracast\Restler\Restler;


  //setup restler


  $r = new Restler(true); //turn on production mode by passing true.

  //If you are using file based cache (the default) make sure cache folder is

  //writable. when you make changes to your code make sure you delete the

  // routes.php inside the cache folder

  //...

  ```

  >*Note:-* When production mode is set to `true` it always uses the cache and
  does not detect 

  > changes and new routes if any. Your continuous integration pipeline or your
  git hook should delete 

  > this file during the deployment process. Alternatively you can pass second
  parameter to restler

  > constructor to refresh the cache when changes need to be applied.


  Change Log

  ----------


  ### Restler 5


  * Semantic versioning to move forward

  * Support for PHP 8

  * Corrects the source path to be outside the vendor directory

  * Adds php development server support with `composer serve` command.

  * Ability to run the tests with `composer test` command after running the
  server 
    with `composer serve` in another window.

  ### Restler 3.0 RC6


  #### What's new


  * Adds PassThrough class to serve files outside your web root, including
  secure downloads

  * Adds Explorer class (v1 swagger 1.2 spec, and v2 swagger 2.0 spec) as a
  potential 
    replacement to Resources class (swagger 1.1 spec)
      * Explorer comes bundled with the html, css, and assets. So that you need not manually download and configure it
      * Explorer combines the parameters that are expected in the request body to create a unique model for swagger
      * Since Restler Explorer comes bundled, you can map to it to your url of choice. 
        For example `$restler->addAPIClass("Luracast/Restler/Explorer", 'swagger')` maps it to `/swagger`.
      * Explorer metadata can be easily customized with ExplorerInfo class

  #### Improvements


  * Routes class improved to provide a findAll method to list all the routes for
  a specific version of the API excluding
    the specified paths and http methods.
  * The magic properties utilized by routes when found, ignoring actual
  properties. 
    This is useful for Dynamic Model classes such as Eloquent.
  * Routes now allow `@required` and `@properties` to be arrays when the
  parameter is an object. 
    This helps us to pick and choose the properties for each api method differently.
    Example `{@properties property1,property2,property3}` `{@required property1,property2}` makes an api to only look for
    3 properties and 2 of them are required.

  * Optimized the Nav class. It now makes use of `Routes::findAll()`, along with
  Explorer class

  * Restler class has setBaseUrls method to set acceptable base urls that can be
  set using `$_SERVER['HTTP_HOST']`.
    Read [this article](http://shiflett.org/blog/2006/mar/server-name-versus-http-host) to understand why. This is useful
    in the following cases when
      * PHP has trouble detecting the port correctly
      * multiple domains are pointing to the same server

  * Restler class now allows overriding the status code by setting
  `$this->restler->responseCode` from the api method.

  * Improved Forms class to send the embedded properties to emmet template. For
  example


  ```

  /**
   * {@id form1}
   *
   * @param string $name
   * @param int $age
  */

  ```

    Generates the following form

      <form role="form" id="form1" method="POST" ...

    because the emmet template has id in it (see below)

      form[role=form id=$id# name=$name# method=$method# action=$action# enctype=$enctype#]

  * Forms class uses embedded properties with `@param` comments to set html
  attributes (for example id, accept etc) easily

  * FormStyles improved.

  * Validator is now initialized by scope so that we can set its properties with
  `@class` comment. **Example:
    -**  `@class Validator {@holdException}` makes the validator to hold the exceptions instead of throwing
  * Improved Form validation with error messages for individual fields.

  * Forms example updated to show validation errors with bootstrap based themes.

  * CommentParser is now able to parse `@property`, `@property-read`,
  `@property-write` to support documenting the dynamic
    properties.
  * CommentParser supports short array syntax such as `string[]`, `DateTime[]`

  * Scope adds support for external DI Container of your choice with
  `Scope::$resolver` property.

  * Renamed `String` class to `Text` for PHP 7 support (String is a reserved
  keyword in php7)

  * Flash now implements ArrayAccess so that we can access flash variables just
  like an array

  * **composer.json**: removed many dependencies from require-dev. Will prompt
  the developers to install them individually
    when they need them.
  * newrelic support added.

  * Memcache support added.
signalfx/swagger-cli-client: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A9D:13B9:B5189:1745F1:6500FB79.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
concentricsky/django-tastypie-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2735:5055:7AF44F:FAAC5D:6500FB26.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fliptoo/swagger-express: >
  {swagger-express}

  =========


  [Swagger](https://developers.helloreverb.com/swagger/) is a specification and
  complete framework 

  implementation for describing, producing, consuming, and visualizing RESTful
  web services.

  View [demo](http://petstore.swagger.wordnik.com/).


  __{swagger-express}__ is a simple and clean solution to integrate swagger with
  express.


  ## Installation

      $ npm install -g swagger-express

  ## Quick Start


  Configure {swagger-express} as express middleware.



  `apiVersion`      -> Your api version.


  `swaggerVersion`  -> Swagger version.


  `swaggerUI`       -> Where is your swagger-ui?


  `swaggerURL`      -> Path to use for swagger ui web interface.


  `swaggerJSON`     -> Path to use for swagger ui JSON.


  `basePath`        -> The basePath for swagger.js


  `info`            -> [Metadata][info] about the API


  `apis`            -> Define your api array.


  `middleware`      -> Function before response.


  ```

  var swagger = require('swagger-express');


  app.configure(function(){
    ...
    app.use(swagger.init(app, {
      apiVersion: '1.0',
      swaggerVersion: '1.0',
      swaggerURL: '/swagger',
      swaggerJSON: '/api-docs.json',
      swaggerUI: './public/swagger/',
      basePath: 'http://localhost:3000',
      info: {
        title: 'swagger-express sample app',
        description: 'Swagger + Express = {swagger-express}'
      },
      apis: ['./api.js', './api.yml'],
      middleware: function(req, res){}
    }));
    app.use(app.router);
    ...
  });

  ```


  [info]:
  https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#513-info-object


  ## Read from jsdoc


  Example 'api.js'


  ```js


  /**
   * @swagger
   * resourcePath: /api
   * description: All about API
   */

  /**
   * @swagger
   * path: /login
   * operations:
   *   -  httpMethod: POST
   *      summary: Login with username and password
   *      notes: Returns a user based on username
   *      responseClass: User
   *      nickname: login
   *      consumes: 
   *        - text/html
   *      parameters:
   *        - name: username
   *          description: Your username
   *          paramType: query
   *          required: true
   *          dataType: string
   *        - name: password
   *          description: Your password
   *          paramType: query
   *          required: true
   *          dataType: string
   */
  exports.login = function (req, res) {
    var user = {};
    user.username = req.param('username');
    user.password = req.param('password');
    res.json(user);
  }


  /**
   * @swagger
   * models:
   *   User:
   *     id: User
   *     properties:
   *       username:
   *         type: String
   *       password:
   *         type: String    
   */
  ```


  ## Read from yaml file


  Example 'api.yml'


  ```yml

  resourcePath: /api

  description: All about API

  apis: 


  - path: /login
    operations:

    - httpMethod: POST
      summary: Login with username and password
      notes: Returns a user based on username
      responseClass: User
      nickname: login
      consumes: 
        - text/html
      parameters:

      - name: username
        dataType: string
        paramType: query
        required: true
        description: Your username

      - name: password
        dataType: string
        paramType: query
        required: true
        description: Your password

  models:
      User:
        id: User
        properties:
          username:
            type: String
          password:
            type: String    
  ```


  ## Read from jsdoc


  Example 'api.coffee'


  ```coffee


  ###
   * @swagger
   * resourcePath: /api
   * description: All about API
  ###


  ###
   * @swagger
   * path: /login
   * operations:
   *   -  httpMethod: POST
   *      summary: Login with username and password
   *      notes: Returns a user based on username
   *      responseClass: User
   *      nickname: login
   *      consumes:
   *        - text/html
   *      parameters:
   *        - name: username
   *          description: Your username
   *          paramType: query
   *          required: true
   *          dataType: string
   *        - name: password
   *          description: Your password
   *          paramType: query
   *          required: true
   *          dataType: string
  ###


  ###
   * @swagger
   * models:
   *   User:
   *     id: User
   *     properties:
   *       username:
   *         type: String
   *       password:
   *         type: String
  ###

  ```



  ## Examples


  Clone the {swagger-express} repo, then install the dev dependencies:

      $ git clone git://github.com/fliptoo/swagger-express.git --depth 1
      $ cd swagger-express
      $ npm install

  and run the example:

      $ cd example
      $ node app.js
      
  # Credits


  - [Express](https://github.com/visionmedia/express)

  - [swagger-jack](https://github.com/feugy/swagger-jack)


  ## License


  (The MIT License)


  Copyright (c) 2013 Fliptoo &lt;fliptoo.studio@gmail.com&gt;


  Permission is hereby granted, free of charge, to any person obtaining

  a copy of this software and associated documentation files (the

  'Software'), to deal in the Software without restriction, including

  without limitation the rights to use, copy, modify, merge, publish,

  distribute, sublicense, and/or sell copies of the Software, and to

  permit persons to whom the Software is furnished to do so, subject to

  the following conditions:


  The above copyright notice and this permission notice shall be

  included in all copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,

  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.

  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY

  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,

  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE

  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
KevM/fubumvc-swagger: "FubuMVC Swagger\r\n===============\r\n\r\nThis project helps your [FubuMVC](https://github.com/DarthFubuMVC/fubumvc) web application\r\n generate API documentation via [Swagger](http://swagger.wordnik.com/).\r\n \r\n[![swagger demo](https://github.com/KevM/fubumvc-swagger/raw/gh-pages/images/hellofubuswagger.png)](http://fubuswagger.apphb.com/)\r\n\r\nSee our [Hello Swagger](http://fubuswagger.apphb.com/) live demo.\r\n\r\n### How do I get it? ###\r\n\r\nWe have a [nuget package](https://nuget.org/packages/FubuMVC.Swagger) available.\r\n\r\n```PM> Install-Package FubuMVC.Swagger```\r\n\r\n#### Building Swagger\r\n\r\nTo build just run rake grabbing the albacore gem if you don't already have it. \r\n\r\n```rb\r\ngem install albacore\r\nrake\r\n```\r\n\r\n### How do I put this in my peanut butter?\r\n\r\n**Note:** This should all be simplified when I find the time to figure out Fubu Bottles. \r\n\r\nYour API documented should support content negitiation and be grouped under the route **/api**. Take a look at the [HelloSwagger](https://github.com/KevM/fubumvc-swagger/tree/master/src/HelloSwagger) for examples. \r\n\r\n#### Checklist\r\n\r\nAdd a reference to this project. Why not [use nuget](https://nuget.org/packages/FubuMVC.Swagger)!\r\n\r\nAdd the following to your FubuRegistry:\r\n\r\n```cs\r\nApplyConvention<SwaggerConvention>();\r\nServices(s=> s.AddService<IActionGrouper, APIRouteGrouper>());\r\n```\r\n\r\nCopy the swagger-ui directory into your **/content** direcotry.\r\n\r\nLaunch your web app and take a look at the **/api** to see if it is working.\r\n\r\n### What does this convention do?\r\n\r\nThree routes will be added to your application:\r\n\r\n```html\r\nGET /api\r\n```\r\nThis route serves up the Swagger-UI page currently embedded into FubuSwagger. _This part needs work._\r\n\r\n```html\r\nGET /api/resources.json\r\n```\r\nSwagger UI does some resource discovery and uses the output of this route to find all of the API groups in your project. \r\n\r\n```html\r\nGET /api/{GroupKey}.json\r\n```\r\nDetails of each API group present in your app. \r\n\r\nPointing a Swagger UI web site at ```http://localhost:port/api/``` should render pretty API documentation for your web application.\r\n\r\n### Why do I not see documentation for my actions?\r\n\r\nMake sure the actions you wish to document are enabled for \"Conneg\"\r\n\r\nIn this example I have two marker interfaces which are used to mark input models on actions which will be APIs. \r\n\r\n```cs\r\ngraph.Behaviors\r\n .Where(x => x.InputType().CanBeCastTo<IApi>() || x.InputType().CanBeCastTo<IUnauthenticatedApi>())\r\n .Each(x => x.MakeAsymmetricJson());\r\n```\r\n\r\nThis example will force the result of these actions to be JSON. Note: This configuration is working around a bug in FubuMVC where normal browser usage will return XML for Conneg enabled endpoints. :( \r\n\r\nBetter yet take a look at the [HelloSwagger](https://github.com/KevM/fubumvc-swagger/tree/master/src/HelloSwagger) demo application and see how it is wired up and organized.\r\n\r\n### How do I add more detail to my APIs\r\n\r\nYou can use data annotations to mark up your input models and their properties.\r\n\r\n```cs\r\n[Description(\"Workflow object history\")]\r\npublic class HistoryRequest : IApi \r\n{\r\n    [Required, Description(\"Type of workflow object. Typically this is 'case'.\")]\r\n    [AllowableValues(\"case\", \"subcase\", \"solution\", \"<any workflow object name>\")]\r\n    public string Type { get; set; }\r\n    [Required, Description(\"Id of the workflow object.\")]\r\n    public string Id { get; set; }\r\n\r\n    [Description(\"Limit the amout of history returned the given number of days. When this parameter is not specified. All history items will be returned.\")]\r\n\tpublic int DaysOfHistory { get; set; }\r\n}\r\n```"
ServiceStack/ServiceStack: "Follow [@ServiceStack](https://twitter.com/servicestack) or [view the docs](https://docs.servicestack.net), use [StackOverflow](http://stackoverflow.com/questions/ask) or the [Customer Forums](https://forums.servicestack.net/) for support.\n\n> View the [Release Notes](https://docs.servicestack.net/release-notes-history) for latest features or see [servicestack.net/features](https://servicestack.net/features) for an overview.\n\n### Simple, Fast, Versatile and full-featured Services Framework\n\nServiceStack is a simple, fast, versatile and highly-productive full-featured [Web](http://razor.servicestack.net) and \n[Web Services](https://docs.servicestack.net/web-services.html) Framework that's \nthoughtfully-architected to [reduce artificial complexity](https://docs.servicestack.net/why-not-odata.html#why-not-complexity) and promote \n[remote services best-practices](https://docs.servicestack.net/advantages-of-message-based-web-services.html) \nwith a [message-based design](https://docs.servicestack.net/what-is-a-message-based-web-service.html) \nthat allows for maximum re-use that can leverage an integrated \n[Service Gateway](https://docs.servicestack.net/service-gateway.html) \nfor the creation of loosely-coupled \n[Modularized Service](https://docs.servicestack.net/modularizing-services.html) Architectures.\nServiceStack Services are consumable via an array of built-in fast data formats (inc. \n[JSON](https://github.com/ServiceStack/ServiceStack.Text), \nXML, \n[CSV](https://docs.servicestack.net/csv-format.html), \n[JSV](https://docs.servicestack.net/json-jsv-and-xml.html), \n[ProtoBuf](https://docs.servicestack.net/protobuf-format.html), \n[Wire](https://docs.servicestack.net/wire-format.html) and \n[MsgPack](https://docs.servicestack.net/messagepack-format.html)) \nas well as XSD/WSDL for [SOAP endpoints](https://docs.servicestack.net/soap-support.html) and \n[Rabbit MQ](https://docs.servicestack.net/rabbit-mq.html), \n[Redis MQ](https://docs.servicestack.net/messaging-and-redis.html) and\n[Amazon SQS](https://github.com/ServiceStack/ServiceStack.Aws#sqsmqserver) MQ hosts. \n\nIts design and simplicity focus offers an unparalleled suite of productivity features that can be declaratively enabled \nwithout code, from creating fully queryable Web API's with just a single Typed Request DTO with\n[Auto Query](https://docs.servicestack.net/autoquery.html) supporting \n[every major RDBMS](https://github.com/ServiceStack/ServiceStack.OrmLite#8-flavours-of-ormlite-is-on-nuget) \nto the built-in support for\n[Auto Batched Requests](https://docs.servicestack.net/auto-batched-requests.html) \nor effortlessly enabling rich [HTTP Caching](https://docs.servicestack.net/http-caching.html) and\n[Encrypted Messaging](https://docs.servicestack.net/encrypted-messaging.html) \nfor all your existing services via [Plugins](https://docs.servicestack.net/plugins.html).\n\nYour same Services also serve as the Controller in ServiceStack's [Smart Razor Views](http://razor.servicestack.net/)\nreducing the effort to serve both \n[Web and Single Page Apps](https://github.com/ServiceStackApps/LiveDemos) as well as \n[Rich Desktop and Mobile Clients](https://github.com/ServiceStackApps/HelloMobile) that are able to deliver instant interactive \nexperiences using ServiceStack's real-time [Server Events](https://docs.servicestack.net/server-events.html).\n\nServiceStack Services also maximize productivity for consumers providing an \n[instant end-to-end typed API without code-gen](https://docs.servicestack.net/csharp-client.html) enabling\nthe most productive development experience for developing .NET to .NET Web Services.\n\n### [Generate Instant Typed APIs from within all Major IDEs!](https://docs.servicestack.net/add-servicestack-reference.html)\n\nServiceStack now integrates with all Major IDE's used for creating the best native experiences on the most popular platforms \nto enable a highly productive dev workflow for consuming Web Services, making ServiceStack the ideal back-end choice for powering \nrich, native iPhone and iPad Apps on iOS with Swift, Mobile and Tablet Apps on the Android platform with Java, OSX Desktop Applications \nas well as targeting the most popular .NET PCL platforms including Xamarin.iOS, Xamarin.Android, Windows Store, WPF, WinForms and Silverlight: \n\n<img src=\"https://raw.githubusercontent.com/ServiceStack/Assets/master/img/wikis/ide-ss-plugin-logos.png\" align=\"right\" />\n\n#### [VS.NET integration with ServiceStackVS](https://visualstudiogallery.msdn.microsoft.com/5bd40817-0986-444d-a77d-482e43a48da7)\n\nProviding instant Native Typed API's for \n[C#](https://docs.servicestack.net/csharp-add-servicestack-reference.html), \n[TypeScript](https://docs.servicestack.net/typescript-add-servicestack-reference.html),\n[F#](https://docs.servicestack.net/fsharp-add-servicestack-reference.html) and \n[VB.NET](https://docs.servicestack.net/vbnet-add-servicestack-reference.html) \ndirectly in Visual Studio for the \n[most popular .NET platforms](https://github.com/ServiceStackApps/HelloMobile) including iOS and Android using \n[Xamarin.iOS](https://github.com/ServiceStackApps/HelloMobile#xamarinios-client) and \n[Xamarin.Android](https://github.com/ServiceStackApps/HelloMobile#xamarinandroid-client) on Windows.\n\n#### [Xamarin Studio integration with ServiceStackXS](https://docs.servicestack.net/csharp-add-servicestack-reference.html#xamarin-studio)\n\nProviding [C# Native Types](https://docs.servicestack.net/csharp-add-servicestack-reference.html) \nsupport for developing iOS and Android mobile Apps using \n[Xamarin.iOS](https://github.com/ServiceStackApps/HelloMobile#xamarinios-client) and \n[Xamarin.Android](https://github.com/ServiceStackApps/HelloMobile#xamarinandroid-client) with \n[Xamarin Studio](https://www.xamarin.com/studio) on OSX. The **ServiceStackXS** plugin also provides a rich web service \ndevelopment experience developing Client applications with \n[Mono Develop on Linux](https://docs.servicestack.net/csharp-add-servicestack-reference.html#xamarin-studio-for-linux)\n\n#### [Xcode integration with ServiceStackXC Plugin](https://docs.servicestack.net/swift-add-servicestack-reference.html)\n\nProviding [an instant Native Typed API in Swift](https://docs.servicestack.net/swift-add-servicestack-reference.html) \nincluding generic Service Clients enabling a highly-productive workflow and effortless consumption of Web Services from \nnative iOS and OSX Applications - directly from within Xcode!\n\n#### [Android Studio integration with ServiceStackIDEA](https://docs.servicestack.net/java-add-servicestack-reference.html)\n\nProviding [an instant Native Typed API in Java](https://docs.servicestack.net/java-add-servicestack-reference.html) \nand [Kotlin](https://docs.servicestack.net/kotlin-add-servicestack-reference.html)\nincluding idiomatic Java Generic Service Clients supporting Sync and Async Requests by leveraging Android's AsyncTasks to enable the creation of services-rich and responsive native Java or Kotlin Mobile Apps on the Android platform - directly from within Android Studio!\n\n#### [IntelliJ integration with ServiceStackIDEA](https://docs.servicestack.net/java-add-servicestack-reference.html#install-servicestack-idea-from-the-plugin-repository)\n\nThe ServiceStack IDEA plugin is installable directly from IntelliJ's Plugin repository and enables seamless integration with IntelliJ Java Maven projects for generating a Typed API to quickly and effortlessly consume remote ServiceStack Web Services from pure cross-platform Java or Kotlin Clients.\n\n#### [Eclipse integration with ServiceStackEclipse](https://github.com/ServiceStack/ServiceStack.Java/tree/master/src/ServiceStackEclipse#eclipse-integration-with-servicestack)\n\nThe unmatched productivity offered by [Java Add ServiceStack Reference](https://docs.servicestack.net/java-add-servicestack-reference.html) is also available in the \n[ServiceStackEclipse IDE Plugin](https://github.com/ServiceStack/ServiceStack.Java/tree/master/src/ServiceStackEclipse#eclipse-integration-with-servicestack) that's installable \nfrom the [Eclipse MarketPlace](https://marketplace.eclipse.org/content/servicestackeclipse) to provide deep integration of Add ServiceStack Reference with Eclipse Java Maven Projects\nenabling Java Developers to effortlessly Add and Update the references of their evolving remote ServiceStack Web Services.\n\n#### [servicestack-cli - Simple command-line utilities for ServiceStack](https://docs.servicestack.net/add-servicestack-reference.html#simple-command-line-utilities-for-servicestack)\n\nIn addition to our growing list of supported IDE's, the [servicestack-cli](https://github.com/ServiceStack/servicestack-cli)\ncross-platform command-line npm scripts makes it easy for build servers, automated tasks and command-line runners of your \nfavorite text editors to easily Add and Update ServiceStack References!\n\n## Simple Customer Database REST Services Example\n\nThis example is also available as a [stand-alone integration test](https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.Endpoints.Tests/CustomerRestExample.cs):\n\n```csharp\n//Web Service Host Configuration\npublic class AppHost : AppSelfHostBase\n{\n    public AppHost() \n        : base(\"Customer REST Example\", typeof(CustomerService).Assembly) {}\n\n    public override void Configure(Container container)\n    {\n        //Register which RDBMS provider to use\n        container.Register<IDbConnectionFactory>(c => \n            new OrmLiteConnectionFactory(\":memory:\", SqliteDialect.Provider));\n\n        using (var db = container.Resolve<IDbConnectionFactory>().Open())\n        {\n            //Create the Customer POCO table if it doesn't already exist\n            db.CreateTableIfNotExists<Customer>();\n        }\n    }\n}\n\n//Web Service DTO's\n[Route(\"/customers\", \"GET\")]\npublic class GetCustomers : IReturn<GetCustomersResponse> {}\n\npublic class GetCustomersResponse\n{\n    public List<Customer> Results { get; set; } \n}\n\n[Route(\"/customers/{Id}\", \"GET\")]\npublic class GetCustomer : IReturn<Customer>\n{\n    public int Id { get; set; }\n}\n\n[Route(\"/customers\", \"POST\")]\npublic class CreateCustomer : IReturn<Customer>\n{\n    public string Name { get; set; }\n}\n\n[Route(\"/customers/{Id}\", \"PUT\")]\npublic class UpdateCustomer : IReturn<Customer>\n{\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n}\n\n[Route(\"/customers/{Id}\", \"DELETE\")]\npublic class DeleteCustomer : IReturnVoid\n{\n    public int Id { get; set; }\n}\n\n// POCO DB Model\npublic class Customer\n{\n    [AutoIncrement]\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n}\n\n//Web Services Implementation\npublic class CustomerService : Service\n{\n    public object Get(GetCustomers request)\n    {\n        return new GetCustomersResponse { Results = Db.Select<Customer>() };\n    }\n\n    public object Get(GetCustomer request)\n    {\n        return Db.SingleById<Customer>(request.Id);\n    }\n\n    public object Post(CreateCustomer request)\n    {\n        var customer = new Customer { Name = request.Name };\n        Db.Save(customer);\n        return customer;\n    }\n\n    public object Put(UpdateCustomer request)\n    {\n        var customer = Db.SingleById<Customer>(request.Id);\n        if (customer == null)\n            throw HttpError.NotFound(\"Customer '{0}' does not exist\".Fmt(request.Id));\n\n        customer.Name = request.Name;\n        Db.Update(customer);\n\n        return customer;\n    }\n\n    public void Delete(DeleteCustomer request)\n    {\n        Db.DeleteById<Customer>(request.Id);\n    }\n}\n\n```\n\n### [Calling the above REST Service from any C#/.NET Client](https://docs.servicestack.net/csharp-add-servicestack-reference.html)\n\n> No code-gen required, can re-use above Server DTOs:\n\n```csharp\nvar client = new JsonServiceClient(BaseUri);\n\n//GET /customers\nvar all = client.Get(new GetCustomers());                         // Count = 0\n\n//POST /customers\nvar customer = client.Post(new CreateCustomer { Name = \"Foo\" });\n\n//GET /customer/1\ncustomer = client.Get(new GetCustomer { Id = customer.Id });      // Name = Foo\n\n//GET /customers\nall = client.Get(new GetCustomers());                             // Count = 1\n\n//PUT /customers/1\ncustomer = client.Put(\n    new UpdateCustomer { Id = customer.Id, Name = \"Bar\" });       // Name = Bar\n\n//DELETE /customers/1\nclient.Delete(new DeleteCustomer { Id = customer.Id });\n\n//GET /customers\nall = client.Get(new GetCustomers());                             // Count = 0\n```\n\nSame code also works with [Android, iOS, Xamarin.Forms, UWP and WPF clients](https://github.com/ServiceStackApps/HelloMobile).\n\n> [F#](https://docs.servicestack.net/fsharp-add-servicestack-reference.html) and \n[VB.NET](https://docs.servicestack.net/vbnet-add-servicestack-reference.html) can re-use same \n[.NET Service Clients](https://docs.servicestack.net/csharp-client.html) and DTO's\n\n### [Calling from TypeScript](https://docs.servicestack.net/typescript-add-servicestack-reference.html#ideal-typed-message-based-api)\n\n```ts\nconst client = new JsonServiceClient(baseUrl);\nconst { results } = await client.get(new GetCustomers());\n```\n\n### [Calling from Swift](https://docs.servicestack.net/swift-add-servicestack-reference.html#jsonserviceclientswift)\n\n```swift\nlet client = JsonServiceClient(baseUrl: BaseUri)\n\nclient.getAsync(GetCustomers())\n    .then {\n        let results = $0.results;\n    }\n```\n\n### [Calling from Java](https://docs.servicestack.net/java-add-servicestack-reference.html#jsonserviceclient-usage)\n\n```java\nJsonServiceClient client = new JsonServiceClient(BaseUri);\n\nGetCustomersResponse response = client.get(new GetCustomers());\nList<Customer> results = response.results; \n```\n\n### [Calling from Kotlin](https://docs.servicestack.net/kotlin-add-servicestack-reference.html#jsonserviceclient-usage)\n\n```kotlin\nval client = JsonServiceClient(BaseUri)\n\nval response = client.get(GetCustomers())\nval results = response.results\n```\n\n### [Calling from Dart](https://docs.servicestack.net/dart-add-servicestack-reference)\n\n```dart\nvar client = new JsonServiceClient(BaseUri);\n\nvar response = await client.get(GetCustomers());\nvar results = client.results;\n```\n\n### [Calling from jQuery using TypeScript Definitions](https://docs.servicestack.net/typescript-add-servicestack-reference.html#typescript-interface-definitions)\n\n```js\n$.getJSON($.ss.createUrl(\"/customers\", request), request, (r: GetCustomersResponse) => {\n    var results = r.results;\n});\n```\n\nUsing TypeScript Definitions with Angular HTTP Client:\n\n```ts\nthis.http.get<GetCustomersResponse>(createUrl('/customers', request)).subscribe(r => {\n    this.results = r.results;\n});\n```\n\n### Calling from jQuery\n\n```js\n$.getJSON(baseUri + \"/customers\", function(r) {\n\tvar results = r.results;\n});\n```\n\nThat's all the application code required to create and consume a simple database-enabled REST Web Service!\n\n## Getting Started\n\n * [Start with the **Getting Started** section](https://docs.servicestack.net/create-your-first-webservice.html)\n * [Example Apps and Demos](https://github.com/ServiceStackApps/LiveDemos)\n * [Community resources](https://docs.servicestack.net/community-resources.html)\n\n### [Release Notes](https://servicestack.net/release-notes)\n\n## Download\n\nIf you have [NuGet](http://www.nuget.org/) installed, the easiest way to get started is to: \n\n### [Install ServiceStack via NuGet](https://servicestack.net/download).\n\n_Latest v4+ on NuGet is a [commercial release](https://servicestack.net/pricing) with [free quotas](https://servicestack.net/download#free-quotas)._\n\n### [Docs and Downloads for older v3 BSD releases](https://github.com/ServiceStackV3/ServiceStackV3)\n\n### [Live Demos](https://github.com/ServiceStackApps/LiveDemos)\n\n**The [Definitive list of Example Projects, Use-Cases, Demos, Starter Templates](https://github.com/ServiceStackApps/LiveDemos)**\n    \n## Copying\n\nSince September 2013, ServiceStack source code is available under GNU Affero General Public License/FOSS License Exception, see license.txt in the source. \nAlternative commercial licensing is also available, see https://servicestack.net/pricing for details.\n\n## Contributing\n\nContributors need to approve the [Contributor License Agreement](https://docs.google.com/forms/d/16Op0fmKaqYtxGL4sg7w_g-cXXyCoWjzppgkuqzOeKyk/viewform) before any code will be reviewed, see the [Contributing docs](https://docs.servicestack.net/contributing.html) for more details. All contributions must include tests verifying the desired behavior.\n\n## OSS Libraries used\n\nServiceStack includes source code of the great libraries below for some of its core functionality. \nEach library is released under its respective licence:\n\n  - [Mono](https://github.com/mono/mono) [(MIT License)](https://github.com/mono/mono/blob/master/LICENSE)\n  - [Funq IOC](http://funq.codeplex.com) [(MS-PL License)](https://opensource.org/licenses/MS-PL)\n  - [Fluent Validation](https://github.com/JeremySkinner/FluentValidation) [(Apache License 2.0)](https://github.com/JeremySkinner/FluentValidation/blob/master/License.txt)\n  - [Mini Profiler](https://github.com/MiniProfiler/dotnet) [(MIT License)](https://github.com/MiniProfiler/dotnet/blob/master/LICENSE.txt)\n  - [Dapper](https://github.com/StackExchange/Dapper) [(Apache License 2.0)](http://www.apache.org/licenses/LICENSE-2.0)\n  - [TweetStation's OAuth library](https://github.com/migueldeicaza/TweetStation) [(MIT License)](https://github.com/migueldeicaza/TweetStation/blob/master/LICENSE)\n  - [MarkdownSharp](https://code.google.com/archive/p/markdownsharp) [(MIT License)](https://opensource.org/licenses/mit-license.php)\n  - [MarkdownDeep](https://github.com/toptensoftware/markdowndeep) [(Apache License 2.0)](http://www.toptensoftware.com/markdowndeep/license)\n  - [HtmlCompressor](https://code.google.com/archive/p/htmlcompressor) [(Apache License 2.0)](http://www.apache.org/licenses/LICENSE-2.0)\n  - [JSMin](https://github.com/douglascrockford/JSMin/blob/master/jsmin.c) [(Apache License 2.0)](http://www.apache.org/licenses/LICENSE-2.0)\n  - [RecyclableMemoryStream](https://github.com/Microsoft/Microsoft.IO.RecyclableMemoryStream) [(MIT License)](https://github.com/Microsoft/Microsoft.IO.RecyclableMemoryStream/blob/master/LICENSE)\n  - [ASP.NET MVC](https://github.com/aspnet/Mvc) [(Apache License 2.0)](https://github.com/aspnet/Mvc/blob/release/2.2/LICENSE.txt)\n  - [CoreFX](https://github.com/dotnet/corefx) [(MIT License)](https://github.com/dotnet/corefx/blob/master/LICENSE.TXT)\n  - [Nito.AsyncEx](https://github.com/StephenCleary/AsyncEx) [(MIT License)](https://github.com/StephenCleary/AsyncEx/blob/master/LICENSE)\n\n## Find out More\n\nFollow [@ServiceStack](https://twitter.com/ServiceStack) and \n[+ServiceStack](https://plus.google.com/u/0/communities/112445368900682590445) for project updates.\n\n-----\n\n## Core Team\n\n - [mythz](https://github.com/mythz) (Demis Bellot)\n - [layoric](https://github.com/layoric) (Darren Reid) / [@layoric](https://twitter.com/layoric)\n - [xplicit](https://github.com/xplicit) (Sergey Zhukov) / [@quantumcalc](https://twitter.com/quantumcalc)\n - [desunit](https://github.com/desunit) (Sergey Bogdanov) / [@desunit](https://twitter.com/desunit)\n - [arxisos](https://github.com/arxisos) (Steffen Müller) / [@arxisos](https://twitter.com/arxisos)\n\n## Contributors \n\nA big thanks to GitHub and all of ServiceStack's contributors:\n\n - [bman654](https://github.com/bman654) (Brandon Wallace)\n - [iristyle](https://github.com/iristyle) (Ethan Brown)\n - [superlogical](https://github.com/superlogical) (Jake Scott)\n - [itamar82](https://github.com/itamar82)\n - [chadwackerman](https://github.com/chadwackerman)\n - [derfsplat](https://github.com/derfsplat)\n - [johnacarruthers](https://github.com/johnacarruthers) (John Carruthers)\n - [mvitorino](https://github.com/mvitorino) (Miguel Vitorino)\n - [bsiegel](https://github.com/bsiegel) (Brandon Siegel)\n - [mdavid](https://github.com/mdavid) (M. David Peterson)\n - [lhaussknecht](https://github.com/lhaussknecht) (Louis Haussknecht)\n - [grendello](https://github.com/grendello) (Marek Habersack)\n - [SteveDunn](https://github.com/SteveDunn) (Steve Dunn)\n - [kcherenkov](https://github.com/kcherenkov) (Konstantin Cherenkov)\n - [timryan](https://github.com/timryan) (Tim Ryan)\n - [letssellsomebananas](https://github.com/letssellsomebananas) (Tymek Majewski)\n - [danbarua](https://github.com/danbarua) (Dan Barua)\n - [JonCanning](https://github.com/JonCanning) (Jon Canning)\n - [paegun](https://github.com/paegun) (James Gorlick)\n - [pvasek](https://github.com/pvasek) (pvasek)\n - [derfsplat](https://github.com/derfsplat) (derfsplat)\n - [justinrolston](https://github.com/justinrolston) (Justin Rolston)\n - [danmiser](https://github.com/danmiser) (Dan Miser)\n - [danatkinson](https://github.com/danatkinson) (Dan Atkinson)\n - [brainless83](https://github.com/brainless83) (Thomas Grassauer)\n - [angelcolmenares](https://github.com/angelcolmenares) (angel colmenares)\n - [dbeattie71](https://github.com/dbeattie71) (Derek Beattie)\n - [danielwertheim](https://github.com/danielwertheim) (Daniel Wertheim)\n - [greghroberts](https://github.com/greghroberts) (Gregh Roberts)\n - [int03](https://github.com/int03) (Selim Selçuk)\n - [andidog](https://github.com/AndiDog) (AndiDog)\n - [chuckb](https://github.com/chuckb) (chuckb)\n - [niemyjski](https://github.com/niemyjski) (Blake Niemyjski)\n - [mj1856](https://github.com/mj1856) (Matt Johnson)\n - [matthieugd](https://github.com/matthieugd) (Matthieu)\n - [tomaszkubacki](https://github.com/tomaszkubacki) (Tomasz Kubacki)\n - [e11137](https://github.com/e11137) (Rogelio Canedo)\n - [davidroth](https://github.com/davidroth) (David Roth)\n - [meebey](https://github.com/meebey) (Mirco Bauer)\n - [codedemonuk](https://github.com/codedemonuk) (Pervez Choudhury)\n - [jrosskopf](https://github.com/jrosskopf) (Joachim Rosskopf)\n - [friism](https://github.com/friism) (Michael Friis)\n - [mp3125](https://github.com/mp3125)\n - [aurimas86](https://github.com/aurimas86)\n - [parnham](https://github.com/parnham) (Dan Parnham)\n - [yeurch](https://github.com/yeurch) (Richard Fawcett)\n - [damianh](https://github.com/damianh) (Damian Hickey)\n - [freeman](https://github.com/freeman) (Michel Rasschaert)\n - [kvervo](https://github.com/kvervo) (Kvervo)\n - [pauldbau](https://github.com/pauldbau) (Paul Du Bois)\n - [justinpihony](https://github.com/JustinPihony) (Justin Pihony) \n - [bokmadsen](https://github.com/bokmadsen) (Bo Kingo Damgaard)\n - [dragan](https://github.com/dragan) (Dale Ragan)\n - [sneal](https://github.com/sneal) (Shawn Neal)\n - [johnsheehan](https://github.com/johnsheehan) (John Sheehan)\n - [jschlicht](https://github.com/jschlicht) (Jared Schlicht)\n - [kumarnitin](https://github.com/kumarnitin) (Nitin Kumar)\n - [davidchristiansen](https://github.com/davidchristiansen) (David Christiansen)  \n - [paulecoyote](https://github.com/paulecoyote) (Paul Evans)\n - [kongo2002](https://github.com/kongo2002) (Gregor Uhlenheuer)\n - [brannonking](https://github.com/brannonking) (Brannon King)\n - [alexandrerocco](https://github.com/alexandrerocco) (Alexandre Rocco)\n - [cbarbara](https://github.com/cbarbara)\n - [assaframan](https://github.com/assaframan) (Assaf Raman)\n - [csakshaug](https://github.com/csakshaug) (Christian Sakshaug)\n - [johnman](https://github.com/johnman)\n - [jarroda](https://github.com/jarroda)\n - [ssboisen](https://github.com/ssboisen) (Simon Skov Boisen)\n - [paulduran](https://github.com/paulduran) (Paul Duran)\n - [pruiz](https://github.com/pruiz) (Pablo Ruiz García)\n - [fantasticjamieburns](https://github.com/fantasticjamieburns)\n - [pseabury](https://github.com/pseabury)\n - [kevingessner](https://github.com/kevingessner) (Kevin Gessner)\n - [iskomorokh](https://github.com/iskomorokh) (Igor Skomorokh)\n - [royjacobs](https://github.com/royjacobs) (Roy Jacobs)\n - [robertmircea](https://github.com/robertmircea) (Robert Mircea)\n - [markswiatek](https://github.com/markswiatek) (Mark Swiatek)\n - [flq](https://github.com/flq) (Frank Quednau)\n - [ashd](https://github.com/ashd) (Ash D)\n - [thanhhh](https://github.com/thanhhh)\n - [algra](https://github.com/algra) (Alexey Gravanov)\n - [jimschubert](https://github.com/jimschubert) (Jim Schubert)\n - [gkathire](https://github.com/gkathire)\n - [mikaelwaltersson](https://github.com/mikaelwaltersson) (Mikael Waltersson)\n - [asunar](https://github.com/asunar) (Alper)\n - [chucksavage](https://github.com/chucksavage) (Chuck Savage)\n - [sashagit](https://github.com/sashagit) (Sasha)\n - [froyke](https://github.com/froyke) (Froyke)\n - [dbhobbs](https://github.com/dbhobbs) (Daniel Hobbs)\n - [bculberson](https://github.com/bculberson) (Brad Culberson)\n - [awr](https://github.com/awr) (Andrew)\n - [pingvinen](https://github.com/pingvinen) (Patrick)\n - [citndev](https://github.com/CITnDev) (Sebastien Curutchet)\n - [cyberprune](https://github.com/cyberprune)\n - [jorbor](https://github.com/jorbor) (Jordan Hayashi)\n - [bojanv55](https://github.com/bojanv55)\n - [i-e-b](https://github.com/i-e-b) (Iain Ballard)\n - [pietervp](https://github.com/pietervp) (Pieter Van Parys)\n - [franklinwise](https://github.com/franklinwise)\n - [ckasabula](https://github.com/ckasabula) (Chuck Kasabula)\n - [dortzur](https://github.com/dortzur) (Dor Tzur)\n - [allenarthurgay](https://github.com/allenarthurgay) (Allen Gay)\n - [viceberg](https://github.com/vIceBerg) \n - [vansha](https://github.com/vansha) (Ivan Korneliuk)\n - [aaronlerch](https://github.com/aaronlerch) (Aaron Lerch)\n - [glikoz](https://github.com/glikoz)\n - [danielcrenna](https://github.com/danielcrenna) (Daniel Crenna)\n - [stevegraygh](https://github.com/stevegraygh) (Steve Graygh)\n - [jrmitch120](https://github.com/jrmitch120) (Jeff Mitchell)\n - [manuelnelson](https://github.com/manuelnelson) (Manuel Nelson)\n - [babcca](https://github.com/babcca) (Petr Babicka)\n - [jgeurts](https://github.com/jgeurts) (Jim Geurts)\n - [driis](https://github.com/driis) (Dennis Riis)\n - [gshackles](https://github.com/gshackles) (Greg Shackles)\n - [jsonmez](https://github.com/jsonmez) (John Sonmez)\n - [dchurchland](https://github.com/dchurchland) (David Churchland)\n - [softwx](https://github.com/softwx) (Steve Hatchett)\n - [ggeurts](https://github.com/ggeurts) (Gerke Geurts)\n - [andrewrissing](https://github.com/AndrewRissing) (Andrew Rissing)\n - [jjavery](https://github.com/jjavery) (James Javery)\n - [suremaker](https://github.com/suremaker) (Wojtek)\n - [cheesebaron](https://github.com/cheesebaron) (Tomasz Cielecki)\n - [mikkelfish](https://github.com/mikkelfish) (Mikkel Fishman)\n - [johngibb](https://github.com/johngibb) (John Gibb)\n - [stabbylambda](https://github.com/stabbylambda) (David Stone)\n - [mikepugh](https://github.com/mikepugh) (Mike Pugh)\n - [permalmberg](https://github.com/permalmberg) (Per Malmberg)\n - [adamralph](https://github.com/adamralph) (Adam Ralph)\n - [shamsulamry](https://github.com/shamsulamry) (Shamsul Amry)\n - [peterlazzarino](https://github.com/peterlazzarino) (Peter Lazzarino)\n - [kevin-montrose](https://github.com/kevin-montrose) (Kevin Montrose)\n - [msarchet](https://github.com/msarchet) (Michael Sarchet)\n - [jeffgabhart](https://github.com/jeffgabhart) (Jeff Gabhart)\n - [pkudinov](https://github.com/pkudinov) (Pavel Kudinov)\n - [permalmberg](https://github.com/permalmberg) (Per Malmberg)\n - [namman](https://github.com/namman) (Nick Miller)\n - [leon-andria](https://github.com/leon-andria) (Leon Andria)\n - [kkolstad](https://github.com/kkolstad) (Kenneth Kolstad)\n - [electricshaman](https://github.com/electricshaman) (Jeff Smith)\n - [ecgan](https://github.com/ecgan) (Gan Eng Chin)\n - [its-tyson](https://github.com/its-tyson) (Tyson Stolarski)\n - [tischlda](https://github.com/tischlda) (David Tischler)\n - [connectassist](https://github.com/connectassist) (Carl Healy)\n - [starteleport](https://github.com/starteleport)\n - [jfoshee](https://github.com/jfoshee) (Jacob Foshee)\n - [nardin](https://github.com/nardin) (Mamaev Michail)\n - [cliffstill](https://github.com/cliffstill)\n - [somya](https://github.com/somya) (Somya Jain)\n - [thinkbeforecoding](https://github.com/thinkbeforecoding) (Jérémie Chassaing)\n - [paksys](https://github.com/paksys) (Khalil Ahmad)\n - [mcguinness](https://github.com/mcguinness) (Karl McGuinness)\n - [jpasichnyk](https://github.com/jpasichnyk) (Jesse Pasichnyk)\n - [waynebrantley](https://github.com/waynebrantley) (Wayne Brantley)\n - [dcartoon](https://github.com/dcartoon) (Dan Cartoon)\n - [alexvodovoz](https://github.com/alexvodovoz) (Alex Vodovoz)\n - [jluchiji](https://github.com/jluchiji) (Denis Luchkin-Zhou)\n - [grexican](https://github.com/grexican)\n - [akoslukacs](https://github.com/akoslukacs) (Ákos Lukács)\n - [medianick](https://github.com/medianick) (Nick Jones)\n - [arhoads76](https://github.com/arhoads76)\n - [dylanvdmerwe](https://github.com/dylanvdmerwe) (Dylan v.d Merwe)\n - [mattiasw2](https://github.com/mattiasw2) (Mattias)\n - [paultyng](https://github.com/paultyng) (Paul Tyng)\n - [h2oman](https://github.com/h2oman) (Jason Waterman)\n - [anewton](https://github.com/anewton) (Allen Newton)\n - [sami1971](https://github.com/sami1971)\n - [russellchadwick](https://github.com/russellchadwick) (Russell Chadwick)\n - [cyberzed](https://github.com/cyberzed) (Stefan Daugaard Poulsen)\n - [filipw](https://github.com/filipw) (Filip Wojcieszyn)\n - [ghuntley](https://github.com/ghuntley) (Geoffrey Huntley)\n - [baramuse](https://github.com/baramuse)\n - [pdegenhardt](https://github.com/pdegenhardt) (Phil Degenhardt)\n - [captncraig](https://github.com/captncraig) (Craig Peterson)\n - [abattery](https://github.com/abattery) (Jae sung Chung)\n - [biliktamas79](https://github.com/biliktamas79)\n - [garuma](https://github.com/garuma) (Jérémie Laval)\n - [dsimunic](https://github.com/dsimunic)\n - [adamfowleruk](https://github.com/adamfowleruk) (Adam Fowler)\n - [bfriesen](https://github.com/bfriesen) (Brian Friesen)\n - [roryf](https://github.com/roryf) (Rory Fitzpatrick)\n - [stefandevo](https://github.com/stefandevo)\n - [gdassac](https://github.com/gdassac)\n - [metal10k](https://github.com/metal10k)\n - [cmelgarejo](https://github.com/cmelgarejo)\n - [skaman](https://github.com/skaman)\n - [rossipedia](https://github.com/rossipedia) (Bryan J. Ross)\n - [wimatihomer](https://github.com/wimatihomer) (Wim Pool)\n - [sword-breaker](https://github.com/sword-breaker)\n - [adebisi-fa](https://github.com/adebisi-fa) (Adebisi Foluso A.)\n - [mbischoff](https://github.com/mbischoff) (M. Bischoff)\n - [ivanfioravanti](https://github.com/ivanfioravanti) (Ivan Fioravanti)\n - [inhibition](https://github.com/inhibition) (Keith Hassen)\n - [joshearl](https://github.com/joshearl) (Josh Earl)\n - [friism](https://github.com/friism) (Michael Friis)\n - [corkupine](https://github.com/corkupine)\n - [bchavez](https://github.com/bchavez) (Brian Chavez)\n - [nhhagen](https://github.com/nhhagen) (Niels Henrik Hagen)\n - [daggmano](https://github.com/daggmano) (Darren Oster)\n - [chappoo](https://github.com/chappoo) (Steve Chapman)\n - [julrichkieffer](https://github.com/julrichkieffer) (Julrich Kieffer)\n - [adamclarsen](https://github.com/adamclarsen) (Adam Larsen)\n - [joero74](https://github.com/joero74) (Joerg Rosenkranz)\n - [ddotlic](https://github.com/ddotlic) (Drazen Dotlic)\n - [chrismcv](https://github.com/chrismcv) (Chris McVittie)\n - [marcioalthmann](https://github.com/marcioalthmann) (Márcio Fábio Althmann)\n - [mmertsock](https://github.com/mmertsock) (Mike Mertsock)\n - [johnkamau](https://github.com/johnkamau) (John Kamau)\n - [uhaciogullari](https://github.com/uhaciogullari) (Ufuk Hacıoğulları)\n - [davybrion](https://github.com/davybrion) (Davy Brion)\n - [aleshi](https://github.com/aleshi) (Alexander Shiryaev)\n - [alexandryz](https://github.com/alexandryz) (Alexandr Zaozerskiy)\n - [mistobaan](https://github.com/mistobaan) (Fabrizio Milo)\n - [niemyjski](https://github.com/niemyjski) (Blake Niemyjski)\n - [alexandernyquist](https://github.com/alexandernyquist) (Alexander Nyquist)\n - [mcduck76](https://github.com/mcduck76)\n - [kojoru](https://github.com/kojoru)\n - [jeremy-bridges](https://github.com/jeremy-bridges) (Jeremy Bridges)\n - [andreabalducci](https://github.com/andreabalducci) (Andrea Balducci)\n - [robertthegrey](https://github.com/RobertTheGrey) (Robert Greyling)\n - [robertbeal](https://github.com/robertbeal) (Robert Beal)\n - [improvedk](https://github.com/improvedk) (Mark Rasmussen)\n - [foresterh](https://github.com/foresterh) (Jamie Houston)\n - [peterkahl](https://github.com/peterkahl) (Peter Kahl)\n - [helgel](https://github.com/helgel)\n - [anthonycarl](https://github.com/anthonycarl) (Anthony Carl)\n - [mrjul](https://github.com/mrjul) (Julien Lebosquain)\n - [pwhe23](https://github.com/pwhe23) (Paul Wheeler)\n - [aleksd](https://github.com/aleksd)\n - [miketrebilcock](https://github.com/miketrebilcock) (Mike Trebilcock)\n - [markwoodhall](https://github.com/markwoodhall) (Mark Woodhall)\n - [theonlylawislove](https://github.com/theonlylawislove) (Paul Knopf)\n - [callumvass](https://github.com/callumvass) (Callum Vass)\n - [bpruitt-goddard](https://github.com/bpruitt-goddard)\n - [gregpakes](https://github.com/gregpakes) (Greg Pakes)\n - [caspiancanuck](https://github.com/caspiancanuck) (Caspian Canuck)\n - [merwer](https://github.com/merwer)\n - [pavelsavara](https://github.com/pavelsavara) (Pavel Savara)\n - [markwalls](https://github.com/markwalls) (Mark Walls)\n - [prasannavl](https://github.com/prasannavl) (Prasanna Loganathar)\n - [wilfrem](https://github.com/wilfrem)\n - [emiba](https://github.com/emiba)\n - [lucky-ly](https://github.com/lucky-ly) (Dmitry Svechnikov)\n - [hhandoko](https://github.com/hhandoko) (Herdy Handoko)\n - [datawingsoftware](https://github.com/datawingsoftware)\n - [tal952](https://github.com/tal952)\n - [bretternst](https://github.com/bretternst)\n - [kevinhoward](https://github.com/kevinhoward) (Kevin Howard)\n - [mattbutton](https://github.com/mattbutton) (Matt Button)\n - [torbenrahbekkoch](https://github.com/torbenrahbekkoch) (Torben Rahbek Koch)\n - [pilotmartin](https://github.com/pilotmartin) (Pilot Martin)\n - [catlion](https://github.com/catlion)\n - [tstade](https://github.com/tstade) (Toft Stade)\n - [niltz](https://github.com/niltz) (Jeff Sawatzky)\n - [nhalm](https://github.com/nhalm)\n - [fhurta](https://github.com/fhurta) (Filip Hurta)\n - [discobanan](https://github.com/discobanan)\n - [x-cray](https://github.com/x-cray)\n - [jeremistadler](https://github.com/jeremistadler) (Jeremi Stadler)\n - [bangbite](https://github.com/bangbite)\n - [felipesabino](https://github.com/felipesabino) (Felipe Sabino)\n - [xelom](https://github.com/xelom) (Arıl Bozoluk)\n - [shiweichuan](https://github.com/shiweichuan) (Weichuan Shi)\n - [kojoru](https://github.com/kojoru) (Konstantin Yakushev)\n - [eddiegroves](https://github.com/eddiegroves) (Eddie Groves)\n - [fetters5](https://github.com/fetters5)\n - [rcollette](https://github.com/rcollette) (Richard Collette)\n - [urihendler](https://github.com/urihendler) (Uri Hendler)\n - [laurencee](https://github.com/laurencee) (Laurence Evans)\n - [m-andrew-albright](https://github.com/m-andrew-albright) (Andrew Albright)\n - [lee337](https://github.com/lee337) (Lee Venkatsamy)\n - [kaza](https://github.com/kaza)\n - [mishfit](https://github.com/mishfit)\n - [rfvgyhn](https://github.com/rfvgyhn) (Chris)\n - [augustoproiete](https://github.com/augustoproiete) (C. Augusto Proiete)\n - [sjuxax](https://github.com/sjuxax) (Jeff Cook)\n - [madaleno](https://github.com/madaleno) (Luis Madaleno)\n - [yavosh](https://github.com/yavosh) (Yavor Shahpasov)\n - [fvoncina](https://github.com/fvoncina) (Facundo Voncina)\n - [devrios](https://github.com/devrios) (Dev Rios)\n - [bfkelsey](https://github.com/bfkelsey) (Ben Kelsey)\n - [maksimenko](https://github.com/maksimenko)\n - [dixon](https://github.com/dixon) (Jarrod Dixon)\n - [kal](https://github.com/kal) (Kal Ahmed)\n - [mhanney](https://github.com/mhanney) (Michael Hanney)\n - [bcms](https://github.com/bcms)\n - [mgravell](https://github.com/mgravell) (Marc Gravell)\n - [lafama](https://github.com/lafama) (Denis Ndwiga)\n - [jamesgroat](https://github.com/jamesgroat) (James Groat)\n - [jamesearl](https://github.com/jamesearl) (James Cunningham)\n - [remkoboschker](https://github.com/remkoboschker) (Remko Boschker)\n - [shelakel](https://github.com/shelakel)\n - [schmidt4brains](https://github.com/schmidt4brains) (Doug Schmidt)\n - [joplaal](https://github.com/joplaal)\n - [aifdsc](https://github.com/aifdsc) (Stephan Desmoulin)\n - [nicklarsen](https://github.com/nicklarsen) (NickLarsen)\n - [connectassist](https://github.com/connectassist) (Carl Healy)\n - [et1975](https://github.com/et1975) (Eugene Tolmachev)\n - [barambani](https://github.com/barambani)\n - [nhalm](https://github.com/et1975)\n\n\n***\n\n## Similar open source projects\n\nSimilar Open source .NET projects for developing or accessing web services include:\n\n * [Nancy Fx](http://nancyfx.org) - A Sinatra-inspired lightweight Web Framework for .NET:\n * [Fubu MVC](https://fubumvc.github.io/) - A \"Front Controller\" pattern-style MVC framework designed for use in web applications built on ASP.NET:\n * [Rest Sharp](http://restsharp.org) - An open source REST client for .NET\n"
rahulsom/swaggydoc: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A87:3390:A909AF:1573182:6500FB69.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
glennjones/hapi-swagger: >
  # hapi-swagger


  This is a [OpenAPI (aka Swagger)](https://openapis.org/) plug-in for
  [Hapi](https://hapi.dev/) When installed it will self document the API
  interface

  in a project.


  [![Maintainers
  Wanted](https://img.shields.io/badge/maintainers-wanted-red.svg?style=for-the-badge)](https://github.com/hapi-swagger/hapi-swagger/issues/718)

  ![GitHub Workflow
  Status](https://img.shields.io/github/actions/workflow/status/hapi-swagger/hapi-swagger/node.js.yml?style=for-the-badge)

  [![npm
  downloads](https://img.shields.io/npm/dm/hapi-swagger.svg?style=for-the-badge)](https://www.npmjs.com/package/hapi-swagger)

  [![MIT
  license](http://img.shields.io/badge/license-MIT-blue.svg?style=for-the-badge)](https://raw.github.com/hapi-swagger/hapi-swagger/master/license.txt)


  ## Compatibility


  | Version | [Hapi](https://github.com/hapijs/hapi) |
  [Joi](https://github.com/sideway/joi) | Node   | Release
  Notes                                                   |

  | ------- | -------------------------------------- |
  ------------------------------------- | ------ |
  --------------------------------------------------------------- |

  | `16.x`  | `>=20.0.0 @hapi/hapi`                  | `>=17.0.0
  joi`                        | `>=14` |
  [#795](https://github.com/hapi-swagger/hapi-swagger/issues/795) |

  | `15.x`  | `>=20.0.0 @hapi/hapi`                  | `>=17.0.0
  joi`                        | `>=14` |
  [#782](https://github.com/hapi-swagger/hapi-swagger/issues/782) |

  | `14.x`  | `>=19.0.0 @hapi/hapi`                  | `>=17.0.0
  joi`                        | `>=12` |
  [#680](https://github.com/hapi-swagger/hapi-swagger/issues/680) |

  | `13.x`  | `>=19.0.0 @hapi/hapi`                  | `>=17.0.0
  @hapi/joi`                  | `>=12` |
  [#660](https://github.com/hapi-swagger/hapi-swagger/issues/660) |

  | `12.x`  | `>=19.0.0 @hapi/hapi`                  | `>=17.0.0
  @hapi/joi`                  | `>=12` |
  [#644](https://github.com/hapi-swagger/hapi-swagger/issues/644) |

  | `11.x`  | `>=18.4.0 @hapi/hapi`                  | `>=16.0.0
  @hapi/joi`                  | `>=8`  |
  [#631](https://github.com/hapi-swagger/hapi-swagger/issues/631) |

  | `10.x`  | `>=18.3.1 @hapi/hapi`                  | `>=14.0.0
  @hapi/joi`                  | `>=8`  |
  [#587](https://github.com/hapi-swagger/hapi-swagger/issues/587) |

  | `9.x`   | `>=17 hapi`                            |
  `<14.0.0`                             | `>=8`  |
  [#487](https://github.com/hapi-swagger/hapi-swagger/issues/487) |

  | `7.x`   | `<17 hapi`                             |
  ???                                   | ???    |
  [#325](https://github.com/hapi-swagger/hapi-swagger/issues/325) |


  ## Installation


  You can add the module to your Hapi using npm:


  ```bash

  > npm install hapi-swagger --save

  ```


  **hapi-swagger** no longer bundles `joi` to fix
  [#648](https://github.com/hapi-swagger/hapi-swagger/issues/648). Install
  **hapi-swagger** with peer dependencies using:


  ```bash

  npx install-peerdeps hapi-swagger

  ```


  If you want to view the documentation from your API you will also need to
  install the `inert` and `vision` plugs-ins which support templates and static

  content serving.


  ```bash

  > npm install @hapi/inert --save

  > npm install @hapi/vision --save

  ```


  ## Documentation


  -   [Options Reference](optionsreference.md)

  -   [Usage Guide](usageguide.md)


  ## Quick start


  In your Hapi apps please check the main JavaScript file and add the following
  code to already created a Hapi `server` object.

  You will also add the routes for you API as describe on [hapi
  website](https://hapi.dev/).


  ```Javascript

  const Hapi = require('@hapi/hapi');

  const Inert = require('@hapi/inert');

  const Vision = require('@hapi/vision');

  const HapiSwagger = require('hapi-swagger');

  const Pack = require('./package');


  (async () => {
      const server = Hapi.server({
          port: 3000,
          host: 'localhost'
      });

      const swaggerOptions = {
          info: {
                  title: 'Test API Documentation',
                  version: Pack.version,
              },
          };

      await server.register([
          Inert,
          Vision,
          {
              plugin: HapiSwagger,
              options: swaggerOptions
          }
      ]);

      try {
          await server.start();
          console.log('Server running at:', server.info.uri);
      } catch(err) {
          console.log(err);
      }

      server.route(Routes);
  })();

  ```


  ### Tagging your API routes


  As a project may be a mixture of web pages and API endpoints you need to tag
  the routes you wish Swagger to

  document. Simply add the `tags: ['api']` property to the route object for any
  endpoint you want documenting.


  You can even specify more tags and then later generate tag-specific
  documentation. If you specify

  `tags: ['api', 'foo']`, you can later use `/documentation?tags=foo` to load
  the documentation on the

  HTML page (see next section).


  ```Javascript

  {
      method: 'GET',
      path: '/todo/{id}/',
      options: {
          handler: handlers.getToDo,
          description: 'Get todo',
          notes: 'Returns a todo item by the id passed in the path',
          tags: ['api'], // ADD THIS TAG
          validate: {
              params: Joi.object({
                  id : Joi.number()
                          .required()
                          .description('the id for the todo item'),
              })
          }
      },
  }

  ```


  Once you have tagged your routes start the application. **The plugin adds a
  page into your site with the route `/documentation`**,

  so the the full URL for the above options would be
  `http://localhost:3000/documentation`.


  ### Typescript


  **hapi-swagger** exports its own typescript definition file that can be used
  when registering the plugin with **Hapi**. See example below:


  #### Install Typescript Definition Files


  ```sh

  npm i @types/hapi__hapi @types/hapi__inert @types/hapi__joi
  @types/hapi__vision @types/node hapi-swagger --save-dev

  ```


  #### Register Plugin with Typescript


  ```typescript

  import * as Hapi from '@hapi/hapi';

  import * as HapiSwagger from 'hapi-swagger';


  // code omitted for brevity


  const swaggerOptions: HapiSwagger.RegisterOptions = {
      info: {
          title: 'Test API Documentation'
      }
  };


  const plugins: Array<Hapi.ServerRegisterPluginObject<any>> = [
      {
          plugin: Inert
      },
      {
          plugin: Vision
      },
      {
          plugin: HapiSwagger,
          options: swaggerOptions
      }
  ];


  await server.register(plugins);

  ```


  ## Contributing


  Read the [contributing guidelines](./.github/CONTRIBUTING.md) for details.


  ## Thanks


  I would like to thank all that have contributed to the project over the last
  couple of years. This is a hard project to maintain, getting Hapi to work with
  Swagger is like putting a round plug in a square hole. Without the help of
  others it would not be possible.
stemey/gform-admin: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AA2:3B7D:9C0F39:13D0D1F:6500FB84.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
mac-/ratify: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B59:2FC5:9FC847:14493D0:6500FB51.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
marcgibbons/django-rest-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B60:2DE3:203279:41F85D:6500FB53.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
signalfx/swagger-client-generator: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A9E:0E33:21D0FF:453FAE:6500FB7A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
solso/source2swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AA8:3390:A92167:15762B0:6500FB80.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
myfreeweb/octohipster: >
  Current [semantic](http://semver.org/) version:


  ```clojure

  [octohipster "0.2.1-SNAPSHOT"]

  ```


  # octohipster [![Build
  Status](https://travis-ci.org/myfreeweb/octohipster.png?branch=master)](https://travis-ci.org/myfreeweb/octohipster)
  [![unlicense](https://img.shields.io/badge/un-license-green.svg?style=flat)](http://unlicense.org)


  Octohipster is


  - a REST library/toolkit/microframework for Clojure

  - that allows you to build HTTP APIs

  - in a declarative
  [Webmachine](https://github.com/basho/webmachine/wiki/Overview)-like style,
  using [Liberator](https://github.com/clojure-liberator/liberator)

  - powered by [Ring](https://github.com/ring-clojure/ring); you can add [rate
  limiting](https://github.com/myfreeweb/ring-ratelimit),
  [authentication](https://github.com/cemerick/friend),
  [metrics](http://metrics-clojure.readthedocs.org/en/latest/ring.html), [URL
  rewriting](https://github.com/ebaxt/ring-rewrite) and more with just
  middleware


  It allows you to make APIs that


  - support hypermedia ([HAL+JSON](http://stateless.co/hal_specification.html),
  [Collection+JSON](http://amundsen.com/media-types/collection/) and
  Link/Link-Template HTTP headers; works with
  [Frenetic](http://dlindahl.github.com/frenetic/))

  - support multiple output formats (JSON, EDN, YAML and any custom format)

  - have [Swagger](https://github.com/wordnik/swagger-core/wiki) documentation 

  - use [JSON Schema](http://json-schema.org) for validation *and* documentation

  - have pagination


  ## Concepts


  - a **resource** is a single endpoint that accepts requests and returns
  responses

  - a **group** is a collection of resources with a single URL prefix (eg. a
  group /things contains resources /things/ and /things/{id}) and zero or more
  shared properties (usually the schema)

  - a **documenter** is a function that returns a resource which documents
  regular resources (Swagger, HAL root, etc)

  - a **mixin** is a function that is applied to multiple resources to give them
  shared behavior (eg. collection or entry behavior)

  - a **response handler** is a function that is used to encode response data to
  a particular content-type (JSON, EDN, YAML, etc.)

  - a **params handler** is a function that is used to decode incoming data from
  a particular content-type (JSON, EDN, YAML, etc.)


  ## Usage


  ```clojure

  (ns example
    (:use [octohipster core routes mixins pagination]
          [octohipster.documenters swagger schema]
          org.httpkit.server)
    (:import org.bson.types.ObjectId)
    (:require [monger.core :as mg]
              [monger.query :as mq]
              [monger.collection :as mc]
              monger.json))

  (mg/connect!)

  (mg/set-db! (mg/get-db "octohipster-example"))


  ;;;; The "model"

  ;;;;  tip: make it a separate namespace, eg. app.models.contact

  (def contact-schema
    {:id "Contact"
     :type "object"
     :properties {:name {:type "string"}
                  :phone {:type "integer"}}
     :required [:name]})

  (defn contacts-count [] (mc/count "contacts"))

  (defn contacts-all []
    (mq/with-collection "contacts"
      (mq/find {})
      (mq/skip *skip*)
      (mq/limit *limit*)))
  (defn contacts-find-by-id [x] (mc/find-map-by-id "contacts" (ObjectId. x)))

  (defn contacts-insert! [x]
    (let [id (ObjectId.)]
      (mc/insert "contacts" (assoc x :_id id))
      (mc/find-map-by-id "contacts" id)))
  (defn contacts-update! [x old] (mc/update "contacts" old x :multi false))

  (defn contacts-delete! [x] (mc/remove "contacts" x))


  ;;;; The resources

  ;; with shared pieces of documentation

  (def name-param
    {:name "name", :dataType "string", :paramType "path", :required "true", :description "The name of the contact", :allowMultiple false})

  (def body-param
    {:dataType "Contact", :paramType "body", :required true, :allowMultiple false})

  (defresource contact-collection
    :desc "Operations with multiple contacts"
    :mixins [collection-resource]
    :clinks {:item ::contact-item}
    :data-key :contacts
    :exists? (fn [ctx] {:contacts (contacts-all)})
    :post! (fn [ctx] {:item (-> ctx :request :non-query-params contacts-insert!)})
    :count (fn [req] (contacts-count))
    :doc {:get {:nickname "getContacts", :summary "Get all contacts"}
          :post {:nickname "createContact", :summary "Create a contact"}})

  (defresource contact-item
    :desc "Operations with individual contacts"
    :url "/{_id}"
    :mixins [item-resource]
    :clinks {:collection ::contact-collection}
    :data-key :contact
    :exists? (fn [ctx]
               (if-let [doc (-> ctx :request :route-params :_id contacts-find-by-id)]
                 {:contact doc}))
    :put! (fn [ctx]
            (-> ctx :request :non-query-params (contacts-update! (:contact ctx)))
            {:contact (-> ctx :request :route-params :_id contacts-find-by-id)})
    :delete! (fn [ctx]
               (-> ctx :contact contacts-delete!)
               {:contact nil})
    :doc {:get {:nickname "getContact", :summary "Get a contact", :parameters [name-param]}
          :put {:nickname "updateContact", :summary "Overwrite a contact", :parameters [name-param body-param]}
          :delete {:nickname "deleteContact", :summary "Delete a contact", :parameters [name-param]}})

  ;;;; The group

  (defgroup contact-group
    :url "/contacts"
    :add-to-resources {:schema contact-schema}  ; instead of typing the same for all resources in the group
    :resources [contact-collection contact-item])

  ;;;; The handler

  (defroutes site
    :groups [contact-group]
    :documenters [schema-doc schema-root-doc swagger-doc swagger-root-doc])

  (defn -main [] (run-server site {:port 8080}))

  ```


  Also, [API Documentation](http://myfreeweb.github.com/octohipster) is
  available.


  ## Contributing


  By participating in this project you agree to follow the [Contributor Code of
  Conduct](http://contributor-covenant.org/version/1/1/0/).


  Please take over the whole project!  

  I don't use Clojure a lot nowadays.  

  Talk to me: <greg@unrelenting.technology>.


  ## License


  This is free and unencumbered software released into the public domain.  

  For more information, please refer to the `UNLICENSE` file or
  [unlicense.org](http://unlicense.org).
gettyimages/spray-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B4B:4E5C:76A3C8:F257B1:6500FB3E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
skrusty/dotswaggen: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A94:5F2B:A9A2EA:157F1B2:6500FB7D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
yvasiyarov/swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E565:451B:AB3F37:15B8B11:6500FBAA.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
SerenaFeng/tornado-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272C:6823:A5FB08:150F182:6500FB09.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
siemens/restapidoc: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B68:9AE9:A0928B:1463414:6500FB77.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
josephpconley/swagger2postman: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273E:28DF:74FFC2:EED34D:6500FB46.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
wonderlic/swagger-validation: "# Validation for swagger-node-express\n\n[![Build Status](https://img.shields.io/travis/wonderlic/swagger-validation/master.svg)](https://travis-ci.org/wonderlic/swagger-validation)\n[![NPM version](https://badge.fury.io/js/swagger-validation.svg)](http://badge.fury.io/js/swagger-validation)\n[![Code Climate](https://codeclimate.com/github/wonderlic/swagger-validation/badges/gpa.svg)](https://codeclimate.com/github/wonderlic/swagger-validation)\n\nDocumentUp available here: [http://documentup.com/wonderlic/swagger-validation](http://documentup.com/wonderlic/swagger-validation)\n\n## Quick Description\n\n#### Validating a request\nThis module validates a request from a swagger-node-express application using the existing swagger-node-express objects,\nparameters, and models following the [swagger specification 1.2](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md). \nIt returns an array of JavaScript Error objects if there are any validation errors. For now,\nit only uses the message property of the Error object which, using lo-dash or Underscore.js, can be got easily via \n\n```javascript\nvar errors = _.pluck(_.pluck([VALIDATION RETURN], 'error'), 'message');)\n```\n\n#### Validating an object\nWhile the main intention of this module is to validate the request passed into express via swagger-node-express,\nthere are use cases where an object must be validated outside of a request (for example, if an object passed into a\nrequest is also used in other methods that do their own validation or during unit testing). To support this\nfunctionality, as of version 1.3.0, if the req object passed into the validate function does not have one of the\nexpected paramType properties (query, path, body, form, or header) then validation will be done against\nthe req object itself. Therefore, this can be used to validate that an object matches the swagger specification outside\nof a request. Validating an object follows all the same rules outlined under *[Validating a request](#validating-a-request)*,\nbut ignores the paramType on the Swagger spec as it already has the object / value to validate.\n\nAdditionally, as of version 1.4.0, passing in a model name instead of the swagger specification will validate the object\ndirectly instead of looking at the request. However, this functionality only works with objects. Any non-object passed\nin will return an error instead of being validated.\n\nAs an example:\n\n```javascript\n    var validate = require('swagger-validation');\n    var models = require(\"./models.js\");\n    var ret = validate('[MODEL NAME HERE]', obj, models);\n```\n\n## Installation\n\nUsing NPM, include the `swagger-validation` module in your `package.json` dependencies.\n\n```json\n{\n\t...\n\t\"dependencies\": {\n\t\t\"swagger-validation\": \"~1.4\",\n\t\t...\n\t}\n\t...\n}\n```\n\n## Adding validation to swagger-node-express\n\nThere are few different ways to use this module within swagger-node-express depending on what you are trying to accomplish.\n\n### Use the middleware component of Swagger \n\nThe benefit of this is that, by default, all methods will have their request validated \nagainst the parameters specified automatically. \n\n```javascript\n\n// add this to the swagger definition, usually defined in the app.js\nswagger.addMiddleware(function(req, res, spec, models) {\n  var ret = validate(spec, req, models);\n  if(ret.length) {\n    var errors = _.pluck(_.pluck(ret, 'error'), 'message');\n    var message = 'validation failure - ' + errors.join();\n    return { 'code' : 400, 'message': message };\n  }\n});\n\n```\n\n**(NOTE: As of 8-7-2014, this is still a pull request of swagger and has not been approved. As such,\nthis implementation WILL change if / when it gets pulled into swagger-node-express).**\n\n### Validate each method individually \n\nFor the following method (using the swagger-application \"test application\" inside swagger-node-express)\n\n```javascript\nexports.findById = {\n  'spec': {\n    description : \"Operations about pets\",  \n    path : \"/pet/{petId}\",\n    method: \"GET\",\n    summary : \"Find pet by ID\",\n    notes : \"Returns a pet based on ID\",\n    type : \"Pet\",\n    nickname : \"getPetById\",\n    produces : [\"application/json\"],\n    parameters : [param.path(\"petId\", \"ID of pet that needs to be fetched\", \"string\")],\n    responseMessages : [swe.invalid('id'), swe.notFound('pet')]\n  },\n  'action': function (req,res) {\n    if (!req.params.petId) {\n      throw swe.invalid('id'); }\n    var id = parseInt(req.params.petId);\n    var pet = petData.getPetById(id);\n\n    if(pet) res.send(JSON.stringify(pet));\n    else throw swe.notFound('pet',res);\n  }\n};\n```\n\nchange it to \n\n```javascript\nexports.findById = {\n  'spec': {\n    description : \"Operations about pets\",  \n    path : \"/pet/{petId}\",\n    method: \"GET\",\n    summary : \"Find pet by ID\",\n    notes : \"Returns a pet based on ID\",\n    type : \"Pet\",\n    nickname : \"getPetById\",\n    produces : [\"application/json\"],\n    parameters : [param.path(\"petId\", \"ID of pet that needs to be fetched\", \"string\")],\n    responseMessages : [swe.invalid('id'), swe.notFound('pet')]\n  },\n  'action': function (req,res) {\n    \n    var validate = require('swagger-validation');\n    var models = require(\"./models.js\");\n    var _ = require('lodash');\n    // models are only needed if this is intended to validate an object\n    var ret = validate(exports.findById.spec, req, models); \n    if(ret.length) {\n      var errors = _.pluck(_.pluck(ret, 'error'), 'message');\n      res.send(JSON.stringify({\n        'message': 'validation failure - ' + errors.join(),\n        'code': 400\n      }), 400);\n      return;\n    }\n  \n    if (!req.params.petId) {\n      throw swe.invalid('id'); }\n    var id = parseInt(req.params.petId);\n    var pet = petData.getPetById(id);\n\n    if(pet) res.send(JSON.stringify(pet));\n    else throw swe.notFound('pet',res);\n  }\n};\n```\n\nor, for a little cleaner approach:\n\n```javascript\nexports.findById = {\n  'spec': {\n    description : \"Operations about pets\",\n    path : \"/pet/{petId}\",\n    method: \"GET\",\n    summary : \"Find pet by ID\",\n    notes : \"Returns a pet based on ID\",\n    type : \"Pet\",\n    nickname : \"getPetById\",\n    produces : [\"application/json\"],\n    parameters : [param.path(\"petId\", \"ID of pet that needs to be fetched\", \"string\")],\n    responseMessages : [swe.invalid('id'), swe.notFound('pet')]\n  },\n  'action': function (req,res) {\n    validateReq(req, res, exports.findById.spec, function() {\n      if (!req.params.petId) {\n        throw swe.invalid('id'); }\n      var id = parseInt(req.params.petId);\n      var pet = petData.getPetById(id);\n\n      if(pet) res.send(JSON.stringify(pet));\n      else throw swe.notFound('pet',res);\n    });\n  }\n};\n\n// put this somewhere else, either in the same file or put it in a \n// separate module using the standard module.exports Node convention\nvar validate = require('swagger-validation');\nvar _ = require('lodash');\nvar models = require(\"./models.js\");\n\nfunction validateReq(req, res, spec, func) {\n  var ret = validate(spec, req, models);\n  if(ret.length) {\n    var errors = _.pluck(_.pluck(ret, 'error'), 'message');\n    res.send(JSON.stringify({\n      'message': 'validation failure - ' + errors.join(),\n      'code': 400\n    }), 400);\n    return;\n  }\n\n  func();\n}\n\n```\n\n### Modify swagger-node-express directly\n\nWhile this would have the same benefit as the first one that, by default, all methods \nwill have their request validated against the parameters specified automatically, this is **non-standard** and **can lead to unintended consequences**. \nThis **will** be deprecated / removed once the pull request specified above gets pulled in.\n\n```javascript\n\n    // /swagger-node-express/lib/swagger.js\n    // lines 418 - 420 currently have\n    else {\n      callback(req, res, next);\n    }\n\n    // change it to \n    else {\n      var validate = require('swagger-validation');\n      var ret = validate(spec, req, self.allModels);\n      if(ret.length) {\n        var errors = _.pluck(_.pluck(ret, 'error'), 'message');\n        res.send(JSON.stringify({\n          'message': 'validation failure - ' + errors.join(),\n          'code': 400\n        }), 400);\n        return;\n      }\n    \n      callback(req, res, next);\n    }\n        \n```\n\n## Functionality outside of Swagger specification\n\nSwagger-validation adheres to the official swagger specification, but does provide non-standard\nfunctionality to allow additional validation / ease that the official swagger specification doesn't support.\n\n### String pattern matching (RegExp)\n\nIt is possible to validate string types using a RegExp pattern defined on your swagger object. For the following example:\n\n```javascript\nexports.findByName = {\n  spec: {\n    description : \"Find pet by name\",  \n    path : \"/pet/{petName}\",\n    method: \"GET\",\n    type : \"Pet\",\n    produces : [\"application/json\"],\n    parameters : [{\n      id: \"petName\",\n      description: \"petName\",\n      type: \"string\",\n      pattern: \"^dr*\"\n    }]\n  }\n};\n```\n\nSwagger-validation will now enforce that all names sent to the /pet/{petName} route start with `\"dr\"`.\n`pattern` will accept any regex string.  An invalid regex string will report an error.\n\n### Date pattern matching (moment.js format)\n\nMuch like the string pattern matching mentioned above, swagger objects with a type of `string` and a format of\n`date` or `date-time` also accept a `pattern` property. However, instead of a RegExp string, they accept a\n[moment.js format string](http://momentjs.com/docs/#/displaying/format/). By default, it uses `moment.ISO_8601()`,\nwhich should match any ISO 8601 compatible date. If you want to be more explicit, you can specify your own\nformat using the `pattern` property.\n\n### Value manipulation\n\nIn addition to validating the request / object, swagger-validation will replace the value on the request / object\naccording to the following chart:\n\n| Input Type | Swagger Type | Swagger Format | Output | \n| ----- | ----- | ----- | ----- |\n| string integer/long e.g. `\"123\"` | `integer` | `int32` or `int64` | integer/long e.g. `123` |\n| string hex e.g. `\"0x123\"` | `integer` | `int32` or `int64` | integer/long e.g. `291` |\n| string float/double e.g. `\"123.01\"` | `number` | `float` or `double`| float/double e.g. `123.01` |\n| string boolean e.g. `\"true\"` | `boolean` | | boolean e.g. `true` |\n| string date e.g. `\"2014-08-10\"` | `string` | `date` | Date object e.g. `new Date(\"2014-08-10\")`** |\n| string date e.g. `\"2014-08-10T12:00:01\"` | `string` | `date-time` | Date object e.g. `new Date(\"2014-08-10T12:00:01\")`** |\n\n** The date conversions are done using the [moment.js](//momentjs.com/) library. \nBy default, it uses the `moment.ISO_8601()` format for parsing dates, but can be overridden by changing the `pattern` property\n\nIn addition, if a defaultValue is specified for the param and the value is null, undefined, or an empty string,\nswagger-validation will replace the value on the req with the defaultValue for that parameter.\n\n#### NOTE\nAs JavaScript doesn't pass method parameters by reference for non object / array values (such as strings or numbers),\npassing in a value type cannot convert the value. Therefore, passing in a value type without an object will not\nconvert the value. This only applies when passing in the value itself NOT when the value is part of the request.\nIf the value is on the request, regardless of type, it will still convert the value and update the request.\n\n### Validation object\n\nSwagger-validation adds another object to the swagger.spec definition called validation that looks like this\n\n```javascript\nvalidation = {\n  enabled : [true / false],\n  replaceValues : [true / false]\n};\n```\n\nand can be used like \n\n```javascript\nexports.findByName = {\n  spec: {\n    description : \"Find pet by name\",  \n    path : \"/pet/{petName}\",\n    method: \"GET\",\n    type : \"Pet\",\n    validation = {\n      replaceValues : false\n    },\n    produces : [\"application/json\"],\n    parameters : [{\n      id: \"petName\",\n      description: \"petName\",\n      type: \"string\",\n      pattern: \"/^dr*/i\"\n    }]\n  }\n};\n```\n\nThe `enabled` property turns on / off swagger-validation holistically for the particular spec. <br/>\nThe `replaceValues` property turns on / off the functionality to manipulate values on the req (detailed in the previous section). <br/>\nBoth of these values default to true (so validation is enabled as well as it will replace the values on the req).\n\n## Types of validation\n\n| Type | Format | Description |\n| ----- | ------ | ----- |\n| `array` | | This checks that each value inside the array corresponds to the type that was specified. It doesn't check that the array contains 'empty' values, even if the array parameter is required as spec doesn't have a way to say all values inside the array are required. <br/><br/> While the spec says `uniqueItems` marks the array to be treated like a set instead of an array (and not that this is invalid if it isn't unique), it does have the potential to lead to an unintentional and unintended loss of data, so this throws a validation error that what you are passing isn't unique over just allowing the non-unique data to be lost. As such, if all the items passed their validation, check for uniqueness. This only validates uniqueness after all the items in the array are validated. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `boolean` | | This only handles native boolean types or converting from `true` / `false` strings, as the concept is not uniform for other types (ie, if it's a number, should it be 0 = false and 1 = true or should any non-zero number be true). However, this only handles strings that are the string representation in JavaScript of their boolean counterparts, so True, TRUE, etc. will not validate. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `integer` | | This allows all forms of a number (so 2, 2.0, 2e0, 0x2). As a hex value COULD be the hex representation of an actual integer (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `integer` | `int32` | This allows all forms of a number (so 2, 2.0, 2e0, 0x2) and allows numbers between -9007199254740991 and +9007199254740991 (both inclusive). As a hex value COULD be the hex representation of an actual integer (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `integer` | `int64` | This allows all forms of a number (so 2, 2.0, 2e0, 0x2) and allows numbers between `Number.MIN_VALUE` (exclusive) and `Number.MAX_VALUE` (inclusive). As a hex value COULD be the hex representation of an actual number (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> This does have issues with edge case validation (such as Number.MAX_VALUE + 1) as, per [IEEE-754 2008 §4.3.1 spec](http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4610935), JavaScript does rounding during addition, so essentially, Number.MAX_VALUE + 1 will equal Number.MAX_VALUE not Number.Infinity. There isn't anything we can do about this as it is correct, per spec, but it isn't intuitive. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `file` | | This has no type validation, but it is valid. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `number` | | This allows all forms of a number (so 2, 2.0, 2.2, 2e0, 0x2) and allows numbers between `Number.MIN_VALUE` and `Number.MAX_VALUE` (both inclusive). As a hex value COULD be the hex representation of an actual number (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> This does have issues with edge case validation (such as Number.MAX_VALUE + 1) as, per [IEEE-754 2008 §4.3.1 spec](http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4610935), JavaScript does rounding during addition, so essentially, Number.MAX_VALUE + 1 will equal Number.MAX_VALUE not Number.Infinity. There isn't anything we can do about this as it is correct, per spec, but it isn't intuitive. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `number` | `float` | This allows all forms of a number (so 2, 2.0, 2.2, 2e0, 0x2) and allows numbers between `Number.MIN_VALUE` and `Number.MAX_VALUE` (both inclusive). As a hex value COULD be the hex representation of an actual number (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> This does have issues with edge case validation (such as Number.MAX_VALUE + 1) as, per [IEEE-754 2008 §4.3.1 spec](http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4610935), JavaScript does rounding during addition, so essentially, Number.MAX_VALUE + 1 will equal Number.MAX_VALUE not Number.Infinity. There isn't anything we can do about this as it is correct, per spec, but it isn't intuitive. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `number` | `double` | This allows all forms of a number (so 2, 2.0, 2.2, 2e0, 0x2) and allows numbers between `Number.MIN_VALUE` and `Number.MAX_VALUE` (both inclusive). As a hex value COULD be the hex representation of an actual number (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> This does have issues with edge case validation (such as Number.MAX_VALUE + 1) as, per [IEEE-754 2008 §4.3.1 spec](http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4610935), JavaScript does rounding during addition, so essentially, Number.MAX_VALUE + 1 will equal Number.MAX_VALUE not Number.Infinity. There isn't anything we can do about this as it is correct, per spec, but it isn't intuitive. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `object` | | This checks that the value is a valid Object by iterating through each property on the associated model and calling out to the respective validation method to validate that property. After validating the properties on this object's model, it will recursively look to see if any other models have this model in their subType array. If so, it will validate those properties as well. It will continue to do this until no more types are found in the subType array. <br/><br/>If the parameter is simply object (not a reference to a model), this will only validate that the type is an object and not check any properties of the object.<br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `string` | | If an enum is defined this ensures that the value is inside the enum list (which is case-sensitive). <br/><br/>If a pattern is defined this also ensures that the value adheres to it.<br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `string` | `byte` | This has no type validation, but it is valid. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `string` | `date` | There is no definitive definition in the swagger spec as to what constitutes a valid date or date-time (more than likely due to the varied formats a date could have). Therefore, swagger-validation will accept a 'pattern' property on the Swagger Property/Parameter Objects, which is a moment.js format string, that specifies the explicit format expected for the date format. If no pattern property is detected, moment.ISO_8601 will be used by default. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `string` | `date-time` | There is no definitive definition in the swagger spec as to what constitutes a valid date or date-time (more than likely due to the varied formats a date could have). Therefore, swagger-validation will accept a 'pattern' property on the Swagger Property/Parameter Objects, which is a moment.js format string, that specifies the explicit format expected for the date format. If no pattern property is detected, moment.ISO_8601 will be used by default. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n\n## Documentation\n\nFull documentation of how all code works in swagger-validation is available in both markdown and HTML format (using jsdoc).\nTo create it, run the default Gulp task (cli - gulp default).\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014 Wonderlic, Inc. <SoftwareDevelopment@wonderlic.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
signalfx/swagger-validate: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AA1:9AE9:A09727:1463D80:6500FB7B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
DarthFubuMVC/fubumvc: "# Building FubuMVC\r\n\r\nThe FubuMVC codebase still uses Rake for build automation, but as of September 2015, you don't **have** to use Rake to develop with FubuMVC if you don't want to. You **will need \r\nto have Node.js or Io.js and npm installed** in order to build the client side assets for FubuMVC's diagnostics package before working with the C# code.\r\n\r\n## With Rake\r\n\r\nAssuming you have Ruby 2.1+ installed on your computer, go to a command line and type...\r\n\r\n1. bundle install\r\n1. rake\r\n\r\n\r\n## Visual Studio.Net Only\r\n\r\nThere is a small command file called `build.cmd` that can be executed once to bring down nuget and npm dependencies and build the client side assets that FubuMVC \r\nneeds for its embedded. diagnostics. Run this command at least once before opening Visual Studio.Net.\r\n\r\nFrom there, open the solution file at `src/FubuMVC.sln` and go to town.\r\n\r\n\r\n# Working with Storyteller\r\n\r\n* `rake open_st` -- Opens the Storyteller test suite in the Storyteller client for interactive editing and execution\r\n* `rake storyteller` -- Runs all the Storyteller specifications\r\n\r\n# Working with Diagnostics\r\n\r\nOpen the diagnostics harness application to the browser with the command `rake diagnostics`. This command will start webpack in a new window against the client side\r\nattributes in the `javascript` folder in \"watched\" mode. This command also compiles and starts the `DiagnosticsHarness` application in a NOWIN server before opening a browser\r\nwindow to the newly launched application. The browser will auto-refresh whenever a new version of the webpack `bundle.js` file is saved. You will have to stop and restart\r\nthe FubuMVC application to see any changes to the server side.\r\n \r\n\r\n"
kenshoo/swagger-validator: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6F:8148:756D60:F0023F:6500FB47.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
nelmio/NelmioApiDocBundle: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B68:9AE9:A076BE:145FB32:6500FB60.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
astaxie/beego: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2723:303E:7CA432:FE391B:6500FB1B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
signalfx/swagger-ajax-client: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A88:5F2B:A99D12:157E5D3:6500FB78.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
swagger-api/swagger-ui: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0ABA:17A3:9E8C05:1425E15:6500FB8D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
wkennedy/swagger4spring-web: >
  swagger4spring-web

  ==================


  Please note: This project is no longer actively supported. 


  Supports Swagger 1.3 as of version 0.3.0!


  This project aims at providing Swagger support to your Spring-Web based
  application.  It will attempt to document your API based on existing
  Spring-Web annotations if no Swagger annotations exist.  If Swagger
  annotations do exist, it will utilize those in conjunction with the Spring-Web
  annotations.


  ##How-To


  To include swagger4spring-web in your project, you need to include the jar in
  your project.  If you use Maven, please include the following dependency:

          <dependency>
              <groupId>com.knappsack</groupId>
              <artifactId>swagger4spring-web</artifactId>
              <version>0.3.5</version>
          </dependency>

  Java 8+ users, please compile your source using the javac "-parameters"
  argument.  This ensures that your parameter names display correctly in your
  API documentation.


  In order to use swagger4spring-web in your project, you need to declare an
  ApiDocumentationController bean in your

  servlet context.  For example:

          <beans:bean id="documentationController" class="com.knappsack.swagger4springweb.controller.ApiDocumentationController"
                  p:basePath="http://localhost:8080/yourapp"
                  p:baseControllerPackage="com.knappsack.swagger4springweb.controllers.api"
                  p:baseModelPackage="com.knappsack.swagger4springweb.models"
                  p:apiVersion="v1" />

  * basePath - optional - the base URL of your web application, for example
  http://localhost/swagger4spring-web-example

  * baseControllerPackage - optional - this is the package you want
  swagger4spring-web to scan to look for classes annotated with @Controller.  If
  this is not set, all your packages are scanned.

  * baseModelPackage - optional - this is the package you want to scan if all
  your model objects are in a specific directory.  These classes will be added
  to your documentation schema.  If no package is specified only certain return
  types and parameters are added to the documentation schema.

  * additionalControllerPackage - optional - if you have more packages with
  controllers outside of the baseControllerPackage, specify them here.

  * additionalModelPackage - optional - if you have packages outside of the
  baseModelPackage that you want to scan for models, specify them here.

  * apiVersion - required - this is the version of your API

  * apiInfo - optional - if you have information you wish to provide, such as
  license and terms of service, set this.


  If you are using version 0.3.0 or above, you'll also need to add the following
  to the appropriate Spring context file in your application:

      <mvc:annotation-driven>
          <mvc:message-converters>
              <beans:bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                  <beans:property name="objectMapper">
                      <beans:bean class="com.knappsack.swagger4springweb.util.ScalaObjectMapper"/>
                  </beans:property>
              </beans:bean>
          </mvc:message-converters>
      </mvc:annotation-driven>

  Once the ApiDocumentationController is wired, you may call go to your base
  path + /api/resourceList (ex:
  http://localhost/swagger4spring-web-example/api/resourceList) in order to
  retrieve an inventory of your APIs.  For an example JSP see this
  [page](https://github.com/wkennedy/swagger4spring-web-example/blob/master/src/main/webapp/WEB-INF/views/documentation.jsp).


  #####Alternative Implementation


  If you wish to use a different request mapping then you may extend create a
  new controller that extends ApiDocumentationController.  For example if you
  want the URL to be /documentation/resourceList instead of /api/resourceList
  you can create a controller like this:

      @Controller
      @RequestMapping(value = "/documentation")
      public class ExampleDocumentationController extends ApiDocumentationController {

          public ExampleDocumentationController() {
              setBaseControllerPackage("com.knappsack.swagger4springweb.controllers.api");
              setBaseModelPackage("com.knappsack.swagger4springweb.models");
              setApiVersion("v1");
          }

         @RequestMapping(value = "/", method = RequestMethod.GET)
         public String documentation() {
              return "documentation";
          }
      }

  In this case you don't have to create the controller bean in your servlet
  context if you are using component scanning and your new controller is set to
  be picked up in the scan.


  To see a working example, please take a look at
  [swagger4spring-web-example](https://github.com/wkennedy/swagger4spring-web-example/
  "swagger4spring-web-example").


  ##Annotation Support

  The following Spring-Web annotations are supported:


  * @Controller

  * @RestController

  * @RequestMapping

  * @ResponseBody

  * @RequestBody

  * @PathVariable

  * @RequestParam

  * @ApiExclude - This annotation is unique to swagger4spring-web.  It allows
  you to specify a controller or method for which you do not want to generate
  Swagger documentation.


  The following Swagger annotations are supported:


  * @Api

  * @ApiResponse

  * @ApiResponses

  * @ApiOperation

  * @ApiParam

  * @ApiModel

  * @ApiModelProperty


  ##External Links

  [Swagger Home](http://developers.helloreverb.com/swagger/ "Swagger Home")


  [Swagger Wiki](https://github.com/wordnik/swagger-core/wiki "Swagger Wiki")


  ##Change Log

  https://github.com/wkennedy/swagger4spring-web/wiki/Change-Log


  ##License

  Copyright (c) 2014 Will Kennedy


  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:


  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
sun-opsys/api-doc: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A94:5F2B:A9B61C:15818F0:6500FB88.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
abelsilva/swaggerwcf: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2703:7B1E:7A51C3:F9C6C7:6500FB11.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fleekjs/fleek-parser: >-
  {"message":"Not
  Found","documentation_url":"https://docs.github.com/rest/repos/contents#get-a-repository-readme"}
pipermerriam/flex: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273D:6C7D:242578:49E46D:6500FB70.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
yahehe/Nancy.Swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E568:574C:223635:45FBC2:6500FBA8.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
penx/openapi-mock: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A91:03EB:9C88D4:13E1FCD:6500FB6F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
apigee/undefined: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2706:8116:80F89A:106C3C4:6500FB18.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
xerions/phoenix_swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E544:52BF:A73EF5:15378FD:6500FBA6.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
apiaryio/fury-adapter-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2717:4C8C:82BF35:10A2340:6500FB17.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fleekjs/fleek-response: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272E:4E5C:769BAA:F246FC:6500FB35.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
marcelojaloto/SwagDoc: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5D:0720:AAA026:159E44E:6500FB52.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
senchalabs/connect: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A94:5F2B:A99AF6:157E187:6500FB76.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Yelp/bravado: >
  .. image::
  https://github.com/Yelp/bravado/workflows/build/badge.svg?branch=master
    :target: https://github.com/Yelp/bravado/actions?query=workflow%3Abuild

  .. image:: https://img.shields.io/coveralls/Yelp/bravado.svg
    :target: https://coveralls.io/r/Yelp/bravado

  .. image:: https://img.shields.io/pypi/v/bravado.svg
      :target: https://pypi.python.org/pypi/bravado/
      :alt: PyPi version

  .. image:: https://img.shields.io/pypi/pyversions/bravado.svg
      :target: https://pypi.python.org/pypi/bravado/
      :alt: Supported Python versions

  Bravado

  ==========


  About

  -----


  Bravado is a Yelp maintained fork of `digium/swagger-py
  <https://github.com/digium/swagger-py/>`__

  for use with `OpenAPI Specification version 2.0
  <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md>`__
  (previously

  known as Swagger).


  From the OpenAPI Specification project:

      The goal of The OpenAPI Specification is to define a standard,
      language-agnostic interface to REST APIs which allows both humans and
      computers to discover and understand the capabilities of the service
      without access to source code, documentation, or through network traffic
      inspection.

  Client libraries can automatically be generated from the OpenAPI
  specification,

  however Bravado aims to be a complete replacement for code generation

  (`swagger-codegen <https://github.com/wordnik/swagger-codegen>`__).


  Example Usage

  -------------


  .. code-block:: Python

      from bravado.client import SwaggerClient
      client = SwaggerClient.from_url('http://petstore.swagger.io/v2/swagger.json')
      pet = client.pet.getPetById(petId=1).response().result

  Example with Basic Authentication

  ---------------------------------


  .. code-block:: python

      from bravado.requests_client import RequestsClient
      from bravado.client import SwaggerClient

      http_client = RequestsClient()
      http_client.set_basic_auth(
          'api.yourhost.com',
          'username', 'password'
      )
      client = SwaggerClient.from_url(
          'http://petstore.swagger.io/v2/swagger.json',
          http_client=http_client,
      )
      pet = client.pet.getPetById(petId=1).response().result

  Example with Header Authentication

  ----------------------------------


  .. code-block:: python

      from bravado.requests_client import RequestsClient
      from bravado.client import SwaggerClient

      http_client = RequestsClient()
      http_client.set_api_key(
          'api.yourhost.com', 'token',
          param_name='api_key', param_in='header'
      )
      client = SwaggerClient.from_url(
          'http://petstore.swagger.io/v2/swagger.json',
          http_client=http_client,
      )
      pet = client.pet.getPetById(petId=1).response().result

  Example with Fido Client (Async Http Client)

  --------------------------------------------


  .. code-block:: python

      # Install bravado with fido extra (``pip install bravado[fido]``)
      from bravado.fido_client import FidoClient
      from bravado.client import SwaggerClient

      http_client = FidoClient()
      client = SwaggerClient.from_url(
          'http://petstore.swagger.io/v2/swagger.json',
          http_client=http_client,
      )
      pet = client.pet.getPetById(petId=1).response().result

  Documentation

  -------------


  More documentation is available at http://bravado.readthedocs.org


  Installation

  ------------


  .. code-block:: bash

      # To install bravado with Synchronous Http Client only.
      $ pip install bravado

      # To install bravado with Synchronous and Asynchronous Http Client (RequestsClient and FidoClient).
      $ pip install bravado[fido]

  Development

  ===========


  Code is documented using `Sphinx <http://sphinx-doc.org/>`__.


  `virtualenv <https://virtualenv.readthedocs.io/en/latest/>`__. is

  recommended to keep dependencies and libraries isolated.


  Setup

  -----


  .. code-block:: bash

      # Run tests
      tox

      # Install git pre-commit hooks
      tox -e pre-commit install

  Contributing

  ------------


  1. Fork it ( http://github.com/Yelp/bravado/fork )

  2. Create your feature branch (``git checkout -b my-new-feature``)

  3. Add your modifications

  4. Commit your changes (``git commit -m "Add some feature"``)

  5. Push to the branch (``git push origin my-new-feature``)

  6. Create new Pull Request


  Releasing a new version (Yelpers only)

  --------------------------------------

  See https://yelpwiki.yelpcorp.com/pages/viewpage.action?pageId=19022447


  License

  -------


  Copyright (c) 2013, Digium, Inc. All rights reserved.

  Copyright (c) 2014-2021, Yelp, Inc. All rights reserved.


  Bravado is licensed with a `BSD 3-Clause

  License <http://opensource.org/licenses/BSD-3-Clause>`__.
stackia/test2doc.js: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AB1:6729:AA0E95:158C438:6500FB83.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
RobWin/assertj-swagger: >
  = assertj-swagger

  :author: Robert Winkler

  :version: 0.9.0

  :hardbreaks:


  image:https://travis-ci.org/RobWin/assertj-swagger.svg["Build Status",
  link="https://travis-ci.org/RobWin/assertj-swagger"]
  image:https://coveralls.io/repos/RobWin/assertj-swagger/badge.svg?branch=master["Coverage
  Status", link="https://coveralls.io/r/RobWin/assertj-swagger"]
  image:https://api.bintray.com/packages/robwin/maven/assertj-swagger/images/download.svg[link="https://bintray.com/robwin/maven/assertj-swagger/_latestVersion"]
  image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2",
  link="http://www.apache.org/licenses/LICENSE-2.0.txt"]
  image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter",
  link="https://twitter.com/rbrtwnklr"]


  == Overview


  assertj-swagger is a https://github.com/joel-costigliola/assertj-core[assertj]
  library which compares a contract-first
  https://github.com/swagger-api/swagger-spec[Swagger] YAML/JSON file with a
  code-first Swagger JSON output (e.g. from
  https://github.com/springfox/springfox[springfox] or
  https://github.com/swagger-api/swagger-core/wiki/Java-JAXRS-Quickstart[JAX-RS
  Swagger]). assertj-swagger allows to validate that the API implementation is
  in compliance with a contract specification for two test patterns:
  Documentation Driven Contracts and Consumer Driven Contracts.


  The Documentation Driven Contracts test pattern, useful for public APIs,
  validates using `#isEqualTo` and will validate that the design first
  documentation contract matches the implementation in its entirety.


  The Consumer Driven Contracts test pattern, useful for internal microservice
  APIs, validates using `#satisfiesContract` and will validate that the
  implementation provides, at minimum, the requirements of the design first
  consumer contract.  This pattern allows for extension points in the API
  resources, resource methods, and models.


  The library supports the Swagger v2.0 specification. assertj-swagger compares
  Swagger objects like Paths, Parameters and Definitions. It does not compare
  __unimportant__ Swagger objects like info, descriptions or summaries.


  == Usage guide


  === Adding assertj-swagger to your project

  The project is published in JCenter and Maven Central.


  ==== Maven


  [source,xml, subs="specialcharacters,attributes"]

  ----

  <repositories>
      <repository>
          <snapshots>
              <enabled>false</enabled>
          </snapshots>
          <id>central</id>
          <name>bintray</name>
          <url>http://jcenter.bintray.com</url>
      </repository>
  </repositories>


  <dependency>
      <groupId>io.github.robwin</groupId>
      <artifactId>assertj-swagger</artifactId>
      <version>{version}</version>
  </dependency>

  ----


  ==== Gradle


  [source,groovy, subs="attributes"]

  ----

  repositories {
      jcenter()
  }


  compile "io.github.robwin:assertj-swagger:{version}"

  ----


  === Using assertj-swagger in an integration test


  Using assertj-swagger is simple. For example, if you are using
  https://github.com/spring-projects/spring-boot[Spring Boot] and
  https://github.com/springfox/springfox[springfox] or
  https://github.com/swagger-api/swagger-core/wiki/Java-JAXRS-Quickstart[JAX-RS
  Swagger], you can validate your Swagger JSON in an integration test.


  The following code sample shows how to validate an API using the Documentation
  Driven Contract test pattern:


  [source, java]

  ----

  @RunWith(SpringJUnit4ClassRunner.class)

  @SpringApplicationConfiguration(classes = Application.class)

  @IntegrationTest

  @WebAppConfiguration

  public class AssertjSwaggerDocumentationDrivenTest {
      @Test
      public void validateThatImplementationMatchesDocumentationSpecification(){
          String designFirstSwagger = SwaggerAssertTest.class.getResource("/swagger.yaml").getPath();
          SwaggerAssertions.assertThat("http://localhost:8080/v2/api-docs")
              .isEqualTo(designFirstSwagger);
      }
  }

  ----


  The following code sample shows how to validate an API using the Consumer
  Driven Contract test pattern:


  [source, java]

  ----

  @RunWith(SpringJUnit4ClassRunner.class)

  @SpringApplicationConfiguration(classes = Application.class)

  @IntegrationTest

  @WebAppConfiguration

  public class AssertjSwaggerConsumerDrivenTest {
      @Test
      public void validateThatImplementationSatisfiesConsumerSpecification(){
          String designFirstSwagger = SwaggerAssertTest.class.getResource("/swagger-consumer1.yaml").getPath();
          SwaggerAssertions.assertThat("http://localhost:8080/v2/api-docs")
              .satisfiesContract(designFirstSwagger);
      }
  }

  ----


  ==== Example output


  For Documentation Driven Contract tests, Assertj-swagger fails a test if it
  finds differences between the implementation and the specification.


  [source]

  ----

  The following 4 assertions failed:

  1) [Checking Paths]

  Expecting:
    <["/api/pet", "/api/pet/findByStatus", "/api/pet/findByTags", "/api/pet/{petId}", "/api/store/order", "/api/store/order/{orderId}", "/api/user", "/api/user/createWithArray", "/api/user/createWithList", "/api/user/login", "/api/user/logout", "/api/user/{username}"]>
  to contain only:
    <["/pets", "/pets/findByStatus", "/pets/findByTags", "/pets/{petId}", "/stores/order", "/stores/order/{orderId}", "/users", "/users/createWithArray", "/users/createWithList", "/users/login", "/users/logout", "/users/{username}"]>
  elements not found:
    <["/pets/findByTags", "/users/logout", "/users", "/stores/order", "/users/createWithArray", "/pets", "/users/createWithList", "/pets/findByStatus", "/pets/{petId}", "/users/{username}", "/stores/order/{orderId}", "/users/login"]>
  and elements not expected:
    <["/api/store/order", "/api/user", "/api/user/createWithList", "/api/pet", "/api/pet/findByTags", "/api/user/createWithArray", "/api/user/login", "/api/pet/{petId}", "/api/store/order/{orderId}", "/api/user/{username}", "/api/pet/findByStatus", "/api/user/logout"]>

  2) [Checking properties of definition 'Order']

  Expecting:
    <["complete", "id", "identifier", "petId", "quantity", "shipDate", "status"]>
  to contain only:
    <["id", "petId", "quantity", "shipDate", "status", "complete"]>
  elements not found:
    <[]>
  and elements not expected:
    <["identifier"]>

  3) [Checking properties of definition 'User']

  Expecting:
    <["email", "firstName", "id", "identifier", "lastName", "password", "phone", "userStatus", "username"]>
  to contain only:
    <["id", "username", "firstName", "lastName", "email", "password", "phone", "userStatus"]>
  elements not found:
    <[]>
  and elements not expected:
    <["identifier"]>

  4) [Checking properties of definition 'Pet']

  Expecting:
    <["category", "id", "identifier", "name", "photoUrls", "status", "tags"]>
  to contain only:
    <["id", "category", "name", "photoUrls", "tags", "status"]>
  elements not found:
    <[]>
  and elements not expected:
    <["identifier"]>
  ----


  For Consumer Driven Contract tests,  Assertj-swagger fails a test if it finds
  missing resources, methods, models, or properties in the implementation which
  are required by the consumer specification.


  [source]

  ----

  The following 4 assertions failed:

  1) [Checking Paths]

  Expecting:
   <["/pets", "/pets/findByStatus", "/pets/findByTags", "/pets/{petId}", "/stores/order", "/stores/order/{orderId}", "/users", "/users/createWithArray", "/users/createWithList", "/users/login", "/users/logout", "/users/{username}"]>
  to contain:
   <["/animals/{animalId}", "/pets", "/pets/findByStatus", "/pets/{petId}"]>
  but could not find:
   <["/animals/{animalId}"]>

  2) [Checking Definitions]

  Expecting:
   <["User", "Category", "Pet", "Tag", "Order"]>
  to contain:
   <["Category", "Pet", "Animal", "Tag"]>
  but could not find:
   <["Animal"]>

  3) [Checking properties of definition 'Pet']

  Expecting:
   <["id", "category", "name", "photoUrls", "tags", "status"]>
  to contain:
   <["photoUrls", "extraProperty", "name", "id", "category", "tags", "status"]>
  but could not find:
   <["extraProperty"]>

  4) [Checking property 'extraProperty' of definition 'Pet']

  Expecting actual not to be null

  ----


  === Using assertj-swagger in a unit test


  If you are using the
  https://github.com/spring-projects/spring-framework[spring-framework] and
  https://github.com/springfox/springfox[springfox], Spring's MVC Test framework
  can also be used to validate the Swagger JSON output against your
  contract-first Swagger specification.

  That way you can make sure that the implementation is in compliance with the
  design specification.


  The following code sample shows how to write a unit test using the
  Documentation Driven Contract test pattern:


  [source, java]

  ----

  @Test

  public void validateThatImplementationFitsDesignSpecification() throws
  Exception {
      String designFirstDocumentationSwaggerLocation = Swagger2MarkupTest.class.getResource("/swagger.yaml").getPath();

      MvcResult mvcResult = this.mockMvc.perform(get("/v2/api-docs")
              .accept(MediaType.APPLICATION_JSON))
              .andExpect(status().isOk())
              .andReturn();

      String springfoxSwaggerJson = mvcResult.getResponse().getContentAsString();
      SwaggerAssertions.assertThat(new SwaggerParser().parse(springfoxSwaggerJson)).isEqualTo(designFirstDocumentationSwaggerLocation);
  }

  ----


  The following code sample shows how to write a unit test using the Consumer
  Driven Contract test pattern:


  [source, java]

  ----

  @Test

  public void validateThatImplementationFitsDesignSpecification() throws
  Exception {
      String designFirstConsumerSwaggerLocation = Swagger2MarkupTest.class.getResource("/swagger-consumer1.yaml").getPath();

      MvcResult mvcResult = this.mockMvc.perform(get("/v2/api-docs")
              .accept(MediaType.APPLICATION_JSON))
              .andExpect(status().isOk())
              .andReturn();

      String springfoxSwaggerJson = mvcResult.getResponse().getContentAsString();
      SwaggerAssertions.assertThat(new SwaggerParser().parse(springfoxSwaggerJson)).satisfiesContract(designFirstConsumerSwaggerLocation);
  }

  ----


  === Customizing assertj-swagger's behaviour


  For most use cases, the default behaviour will be sufficient.  However, you
  can override the default behaviour in various ways by placing a Java property
  file, `/assertj-swagger.properties`, at the root of your classpath.  It is
  also possible to override the configuration in your tests; construct an
  instance of the `SwaggerAssert` class with a custom configuration if this is
  required.


  The following overrides are available:


  ==== Disable various types of checks which are enabled by default


  * `assertj.swagger.validateDefinitions=false`: disable all validation of
  definitions

  ** `assertj.swagger.validateProperties=false`: disable validation of
  properties of definitions

  *** `assertj.swagger.validateRefProperties=false`: disable validation of
  reference (`$ref`) properties of definitions

  *** `assertj.swagger.validateArrayProperties=false`: disable validation of
  array properties of definitions

  *** `assertj.swagger.validateByteArrayProperties=false`: disable validation of
  byte-array properties of definitions

  *** `assertj.swagger.validateStringProperties=false`: disable validation of
  string properties of definitions

  ** `assertj.swagger.validateModels=false`: disable validation of models

  * `assertj.swagger.validatePaths=false`: disable all validation of endpoint
  definitions

  * `assertj.swagger.validateResponseWithStrictlyMatch=false`: allow actual
  contract return extra return code


  ==== Enable various types of checks which are disabled by default


  The following settings are disabled by default, as they will cause schema
  comparisions to be too brittle for many users. They can be enabled if
  required.


  * `assertj.swagger.validateInfo=true`: enable comparison of the info section

  * `assertj.swagger.validateVersion=true`: enable comparison of the schema
  version numbers


  ==== Disable checks for certain paths or definitions in 'actual' schema


  This feature is useful in development situations, where you have written a
  contract-first schema by hand, and are validating a contract-last schema
  generated by a partially-implemented API.


  To ignore unimplemented endpoints, try something like:


  [source]

  ----

  assertj.swagger.pathsToIgnoreInExpected=\
     /v1/friends/{id},\
     /v1/groups/{groupId}
  ----


  To ignore unimplemented definitions, use something like:


  [source]

  ----

  assertj.swagger.definitionsToIgnoreInExpected=\
     Foo,\
     Bar
  ----


  To ignore unimplemented properties, use something like:


  [source]

  ----

  assertj.swagger.propertiesToIgnoreInExpected=\
     Foo.prop1,\
     Bar.prop2
  ----



  ==== Comparing expected and actual paths in schemas


  It is occasionally useful to be able to compare schemas, where due to
  limitations in tools and libraries, endpoint

  paths don't align. Specifying a `basePath` setting in your design-first schema
  here won't work -- it's only used by

  Swagger tooling to generate paths at runtime, and does *not* form part of the
  logical pathname of your endpoints.

  For instance, in your design-first schema, you may specify a set of endpoints
  and a `basePath`, while your generated

  schema (generated from, say, Springfox) has a common prefix prepended on the
  endpoint paths; e.g.:


  [source]

  ----

  /pets/findByStatus       ! design-first schema

  ----


  and


  [source]

  ----

  /v2/pets/findByStatus    ! actual schema

  ----


  To ensure that assertj-swagger is comparing like-with-like in this situation,
  you could use the following in your

  configuration file:


  [source]

  ----

  assertj.swagger.pathsPrependExpected=/v2

  ----



  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
mobilcom-debitel/got-swag: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B76:73D2:1F9533:40C33C:6500FB59.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
metosin/ring-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6E:2A1E:A3564B:14B7427:6500FB56.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
byjg/php-swagger-test: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2727:0146:7EBD0F:1023A80:6500FB1D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
alekseyl/mini-apivore: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  270F:163A:7EAA2D:101E6BD:6500FB14.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Surnet/swagger-jsdoc: >
  # swagger-jsdoc


  This library reads your [JSDoc](https://jsdoc.app/)-annotated source code and
  generates an [OpenAPI (Swagger)
  specification](https://swagger.io/specification/).


  [![npm
  Downloads](https://img.shields.io/npm/dm/swagger-jsdoc.svg)](https://www.npmjs.com/package/swagger-jsdoc)

  ![CI](https://github.com/Surnet/swagger-jsdoc/workflows/CI/badge.svg)


  ## Getting started


  Imagine having API files like these:


  ```javascript

  /**
   * @openapi
   * /:
   *   get:
   *     description: Welcome to swagger-jsdoc!
   *     responses:
   *       200:
   *         description: Returns a mysterious string.
   */
  app.get('/', (req, res) => {
    res.send('Hello World!');
  });

  ```


  The library will take the contents of `@openapi` (or `@swagger`) with the
  following configuration:


  ```javascript

  const swaggerJsdoc = require('swagger-jsdoc');


  const options = {
    definition: {
      openapi: '3.0.0',
      info: {
        title: 'Hello World',
        version: '1.0.0',
      },
    },
    apis: ['./src/routes*.js'], // files containing annotations as above
  };


  const openapiSpecification = swaggerJsdoc(options);

  ```


  The resulting `openapiSpecification` will be a [swagger
  tools](https://swagger.io/tools/)-compatible (and validated) specification.


  ![swagger-jsdoc example screenshot](./docs/screenshot.png)


  ## System requirements


  - Node.js 12.x or higher


  You are viewing `swagger-jsdoc` v6 which is published in CommonJS module
  system.


  ## Installation


  ```bash

  npm install swagger-jsdoc --save

  ```


  Or


  ```bash

  yarn add swagger-jsdoc

  ```


  ## Supported specifications


  - OpenAPI 3.x

  - Swagger 2

  - AsyncAPI 2.0


  ## Validation of swagger docs


  By default `swagger-jsdoc` tries to parse all docs to it's best capabilities.
  If you'd like to you can instruct an Error to be thrown instead if validation
  failed by setting the options flag `failOnErrors` to `true`. This is for
  instance useful if you want to verify that your swagger docs validate using a
  unit test.


  ```javascript

  const swaggerJsdoc = require('swagger-jsdoc');


  const options = {
    failOnErrors: true, // Whether or not to throw when parsing errors. Defaults to false.
    definition: {
      openapi: '3.0.0',
      info: {
        title: 'Hello World',
        version: '1.0.0',
      },
    },
    apis: ['./src/routes*.js'],
  };


  const openapiSpecification = swaggerJsdoc(options);

  ```


  ## Documentation


  Click on the version you are using for further details:


  - [7.x](https://github.com/Surnet/swagger-jsdoc/tree/v7/docs)

  - [6.x](https://github.com/Surnet/swagger-jsdoc/tree/v6/docs)

  - [5.x](https://github.com/Surnet/swagger-jsdoc/tree/v5)
domaindrivendev/Swashbuckle: >
  | :mega: Calling for Maintainers |

  |--------------|

  | With the introduction of [ASP.NET Core](https://www.asp.net/core), I've now
  shifted my focus to the Core-specific project -
  [Swashbuckle.AspNetCore](https://github.com/domaindrivendev/Swashbuckle.AspNetCore).
  That will be receiving most of my (already limited) personal time, and so I
  won't have the capacity to maintain this one at a sufficient rate. Still, I'd
  love to see it live on and am seeking one or two "core" contributors /
  maintainers to help out. Ideally, these would be people who have already
  contributed through PRs and understand the inner workings and overall design.
  Once signed-up, we can agree on an approach that works - ultimately, I want to
  remove myself as the bottleneck to merging PRs and getting fresh Nugets
  published. If you're interested, please let me know by adding a comment
  [here](https://github.com/domaindrivendev/Swashbuckle/issues/1053) |


  Swashbuckle

  =========


  [![Build
  status](https://ci.appveyor.com/api/projects/status/qoesh4nm6tb6diuk?svg=true)](https://ci.appveyor.com/project/domaindrivendev/swashbuckle)


  Seamlessly adds a [Swagger](http://swagger.io/) to WebApi projects! Combines
  ApiExplorer and Swagger/swagger-ui to provide a rich discovery, documentation
  and playground experience to your API consumers.


  In addition to its Swagger generator, Swashbuckle also contains an embedded
  version of [swagger-ui](https://github.com/swagger-api/swagger-ui) which it
  will automatically serve up once Swashbuckle is installed. This means you can
  complement your API with a slick discovery UI to assist consumers with their
  integration efforts. Best of all, it requires minimal coding and maintenance,
  allowing you to focus on building an awesome API!


  And that's not all ...


  Once you have a Web API that can describe itself in Swagger, you've opened the
  treasure chest of Swagger-based tools including a client generator that can be
  targeted to a wide range of popular platforms. See
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more
  details.


  **Swashbuckle Core Features:**


  * Auto-generated [Swagger
  2.0](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)

  * Seamless integration of swagger-ui

  * Reflection-based Schema generation for describing API types

  * Extensibility hooks for customizing the generated Swagger doc

  * Extensibility hooks for customizing the swagger-ui

  * Out-of-the-box support for leveraging Xml comments

  * Support for describing ApiKey, Basic Auth and OAuth2 schemes ... including
  UI support for the Implicit OAuth2 flow


  **Swashbuckle 5.0**


  Swashbuckle 5.0 makes the transition to Swagger 2.0. The 2.0 schema is
  significantly different to its predecessor (1.2) and, as a result, the
  Swashbuckle config interface has undergone yet another overhaul. Checkout the
  [transition guide](#transitioning-to-swashbuckle-50) if you're upgrading from
  a prior version.


  ## Getting Started ##


  There are currently two Nuget packages - the Core library (Swashbuckle.Core)
  and a convenience package (Swashbuckle)  - that provides automatic
  bootstrapping. The latter is only applicable to regular IIS hosted Web APIs.
  For all other hosting environments, you should only install the Core library
  and then follow the instructions below to manually enable the Swagger routes.


  Once installed and enabled, you should be able to browse the following Swagger
  docs and UI endpoints respectively:


  ***\<your-root-url\>/swagger/docs/v1***


  ***\<your-root-url\>/swagger***


  ### IIS Hosted ###


  If your service is hosted in IIS, you can start exposing Swagger docs and a
  corresponding swagger-ui by simply installing the following Nuget package:

      Install-Package Swashbuckle

  This will add a reference to Swashbuckle.Core and also install a bootstrapper
  (App_Start/SwaggerConfig.cs) that enables the Swagger routes on app start-up
  using [WebActivatorEx](https://github.com/davidebbo/WebActivator).


  ### Self-hosted ###


  If your service is self-hosted, just install the Core library:

      Install-Package Swashbuckle.Core

  Then manually enable the Swagger docs and, optionally, the swagger-ui by
  invoking the following extension methods (in namespace
  Swashbuckle.Application) on an instance of HttpConfiguration (e.g. in
  Program.cs)


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
       .EnableSwaggerUi();
  ```


  ### OWIN  ###


  If your service is hosted using OWIN middleware, just install the Core
  library:

      Install-Package Swashbuckle.Core

  Then manually enable the Swagger docs and swagger-ui by invoking the extension
  methods (in namespace Swashbuckle.Application) on an instance of
  HttpConfiguration (e.g. in Startup.cs)


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi();    
  ```


  ## Troubleshooting ##


  Troubleshooting??? I thought this was all supposed to be "seamless"? OK you've
  called me out! Things shouldn't go wrong, but if they do, take a look at the
  [FAQs](#troubleshooting-and-faqs) for inspiration.


  ## Customizing the Generated Swagger Docs ##


  The following snippet demonstrates the minimum configuration required to get
  the Swagger docs and swagger-ui up and running:

  ```csharp

  httpConfiguration
        .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
        .EnableSwaggerUi();
  ```


  These methods expose a range of configuration and extensibility options that
  you can pick and choose from, combining the convenience of sensible defaults
  with the flexibility to customize where you see fit. Read on to learn more.


  ### Custom Routes ###


  The default route templates for the Swagger docs and swagger-ui are
  "swagger/docs/{apiVersion}" and "swagger/ui/{\*assetPath}" respectively.
  You're free to change these so long as the provided templates include the
  relevant route parameters - {apiVersion} and {\*assetPath}.


  ```csharp

  httpConfiguration
      .EnableSwagger("docs/{apiVersion}/swagger", c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi("sandbox/{*assetPath}");
  ```


  In this case the URL to swagger-ui will be `sandbox/index`.


  ### Pretty Print ###


  If you want the output Swagger docs to be indented properly, enable the
  __PrettyPrint__ option as following:


  ```cs

  httpConfiguration
      .EnableSwagger(c => c.PrettyPrint())
      .EnableSwaggerUi();
  ```


  ### Additional Service Metadata ###


  In addition to operation descriptions, Swagger 2.0 includes several properties
  to describe the service itself. These can all be provided through the
  configuration API:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.RootUrl(req => GetRootUrlFromAppConfig());

              c.Schemes(new[] { "http", "https" });

              c.SingleApiVersion("v1", "Swashbuckle.Dummy")
                  .Description("A sample API for testing and prototyping Swashbuckle features")
                  .TermsOfService("Some terms")
                  .Contact(cc => cc
                      .Name("Some contact")
                      .Url("http://tempuri.org/contact")
                      .Email("some.contact@tempuri.org"))
                  .License(lc => lc
                      .Name("Some License")
                      .Url("http://tempuri.org/license"));
          });
  ```

  #### RootUrl ####


  By default, the service root url is inferred from the request used to access
  the docs. However, there may be situations (e.g. proxy and load-balanced
  environments) where this does not resolve correctly. You can workaround this
  by providing your own code to determine the root URL.


  #### Schemes ####


  If schemes are not explicitly provided in a Swagger 2.0 document, then the
  scheme used to access the docs is taken as the default. If your API supports
  multiple schemes and you want to be explicit about them, you can use the
  __Schemes__ option.


  #### SingleApiVersion ####


  Use this to describe a single version API. Swagger 2.0 includes an "Info"
  object to hold additional metadata for an API. Version and title are required
  but you may also provide additional fields as shown above.


  __NOTE__: If your Web API is hosted in IIS, you should avoid using full-stops
  in the version name (e.g. "1.0"). The full-stop at the tail of the URL will
  cause IIS to treat it as a static file (i.e. with an extension) and bypass the
  URL Routing Module and therefore, Web API. 


  ### Describing Multiple API Versions ###


  If your API has multiple versions, use __MultipleApiVersions__ instead of
  __SingleApiVersion__. In this case, you provide a lambda that tells
  Swashbuckle which actions should be included in the docs for a given API
  version. Like __SingleApiVersion__, __Version__ also returns an "Info" builder
  so you can provide additional metadata per API version.


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.MultipleApiVersions(
                  (apiDesc, targetApiVersion) => ResolveVersionSupportByRouteConstraint(apiDesc, targetApiVersion),
                  (vc) =>
                  {
                      vc.Version("v2", "Swashbuckle Dummy API V2");
                      vc.Version("v1", "Swashbuckle Dummy API V1");
                  });
          });
      .EnableSwaggerUi(c =>
          {
              c.EnableDiscoveryUrlSelector();
          });
  ```


  \* You can also enable a select box in the swagger-ui (as shown above) that
  displays a discovery URL for each version. This provides a convenient way for
  users to browse documentation for different API versions.


  ### Describing Security/Authorization Schemes ###


  You can use BasicAuth, __ApiKey__ or __OAuth2__ options to describe security
  schemes for the API. See
  https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md for
  more details.


  ```csharp

  httpConfiguration
       .EnableSwagger(c =>
           {
               //c.BasicAuth("basic")
               //    .Description("Basic HTTP Authentication");

               //c.ApiKey("apiKey")
               //    .Description("API Key Authentication")
               //    .Name("apiKey")
               //    .In("header");

               c.OAuth2("oauth2")
                   .Description("OAuth2 Implicit Grant")
                   .Flow("implicit")
                   .AuthorizationUrl("http://petstore.swagger.wordnik.com/api/oauth/dialog")
                   //.TokenUrl("https://tempuri.org/token")
                   .Scopes(scopes =>
                   {
                       scopes.Add("read", "Read access to protected resources");
                       scopes.Add("write", "Write access to protected resources");
                   });

               c.OperationFilter<AssignOAuth2SecurityRequirements>();
           });
       .EnableSwaggerUi(c =>
           {
               c.EnableOAuth2Support("test-client-id", "test-realm", "Swagger UI");
           });
  ```

  __NOTE:__ These only define the schemes and need to be coupled with a
  corresponding "security" property at the document or operation level to
  indicate which schemes are required for each operation.  To do this, you'll
  need to implement a custom IDocumentFilter and/or IOperationFilter to set
  these properties according to your specific authorization implementation


  \* If your API supports the OAuth2 Implicit flow, and you've described it
  correctly, according to the Swagger 2.0 specification, you can enable UI
  support as shown above.


  ### Customize the Operation Listing ###


  If necessary, you can ignore obsolete actions and provide custom
  grouping/sorting strategies for the list of Operations in a Swagger document:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.IgnoreObsoleteActions();

              c.GroupActionsBy(apiDesc => apiDesc.HttpMethod.ToString());

              c.OrderActionGroupsBy(new DescendingAlphabeticComparer());
          });
  ```

  #### IgnoreObsoleteActions ####


  Set this flag to omit operation descriptions for any actions decorated with
  the Obsolete attribute


  __NOTE__: If you want to omit specific operations but without using the
  Obsolete attribute, you can create an IDocumentFilter or make use of the built
  in ApiExplorerSettingsAttribute


  #### GroupActionsBy ####


  Each operation can be assigned one or more tags which are then used by
  consumers for various reasons. For example, the swagger-ui groups operations
  according to the first tag of each operation. By default, this will be the
  controller name but you can use this method to override with any value.


  #### OrderActionGroupsBy ####


  You can also specify a custom sort order for groups (as defined by
  __GroupActionsBy__) to dictate the order in which operations are listed. For
  example, if the default grouping is in place (controller name) and you specify
  a descending alphabetic sort order, then actions from a ProductsController
  will be listed before those from a CustomersController. This is typically used
  to customize the order of groupings in the swagger-ui.


  ### Modifying Generated Schemas ###


  Swashbuckle makes a best attempt at generating Swagger compliant JSON schemas
  for the various types exposed in your API. However, there may be occasions
  when more control of the output is needed.  This is supported through the
  following options:


  ```csharp

  httpConfiguration
        .EnableSwagger(c =>
            {
                c.MapType<ProductType>(() => new Schema { type = "integer", format = "int32" });

                c.SchemaFilter<ApplySchemaVendorExtensions>();

                //c.UseFullTypeNameInSchemaIds();

                c.SchemaId(t => t.FullName.Contains('`') ? t.FullName.Substring(0, t.FullName.IndexOf('`')) : t.FullName);
                
                c.IgnoreObsoleteProperties();

                c.DescribeAllEnumsAsStrings();
            });
  ```


  #### MapType ####


  Use this option to override the Schema generation for a specific type.


  It should be noted that the resulting Schema will be placed "inline" for any
  applicable Operations. While Swagger 2.0 supports inline definitions for "all"
  Schema types, the swagger-ui tool does not. It expects "complex" Schemas to be
  defined separately and referenced. For this reason, you should only use the
  __MapType__ option when the resulting Schema is a primitive or array type.


  If you need to alter a complex Schema, use a Schema filter.


  #### SchemaFilter ####


  If you want to post-modify "complex" Schemas once they've been generated,
  across the board or for a specific type, you can wire up one or more Schema
  filters.


  ISchemaFilter has the following interface:


  ```csharp

  void Apply(Schema schema, SchemaRegistry schemaRegistry, Type type);

  ```


  A typical implementation will inspect the system Type and modify the Schema
  accordingly. If necessary, the schemaRegistry can be used to obtain or
  register Schemas for other Types


  #### UseFullTypeNamesInSchemaIds ####


  In a Swagger 2.0 document, complex types are typically declared globally and
  referenced by unique Schema Id. By default, Swashbuckle does NOT use the full
  type name in Schema Ids. In most cases, this works well because it prevents
  the "implementation detail" of type namespaces from leaking into your Swagger
  docs and UI. However, if you have multiple types in your API with the same
  class name, you'll need to opt out of this behavior to avoid Schema Id
  conflicts.  


  #### SchemaId ####


  Use this option to provide your own custom strategy for inferring SchemaId's
  for describing "complex" types in your API.


  #### IgnoreObsoleteProperties ####


  Set this flag to omit schema property descriptions for any type properties
  decorated with the Obsolete attribute 


  #### DescribeAllEnumsAsStrings ####


  In accordance with the built in JsonSerializer, Swashbuckle will, by default,
  describe enums as integers. You can change the serializer behavior by
  configuring the StringEnumConverter globally or for a given enum type.
  Swashbuckle will honor this change out-of-the-box. However, if you use a
  different approach to serialize enums as strings, you can also force
  Swashbuckle to describe them as strings.


  ### Modifying Generated Operations ###


  Similar to Schema filters, Swashbuckle also supports Operation and Document
  filters:


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
           {
               c.OperationFilter<AddDefaultResponse>();

               c.DocumentFilter<ApplyDocumentVendorExtensions>();
           });
  ```

  #### OperationFilter ####


  Post-modify Operation descriptions once they've been generated by wiring up
  one or more Operation filters.


  IOperationFilter has the following interface:


  ```csharp

  void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription
  apiDescription);

  ```


  A typical implementation will inspect the ApiDescription and modify the
  Operation accordingly. If necessary, the schemaRegistry can be used to obtain
  or register Schemas for Types that are used in the Operation.


  #### DocumentFilter ####


  Post-modify the entire Swagger document by wiring up one or more Document
  filters.


  IDocumentFilter has the following interface:


  ```csharp

  void Apply(SwaggerDocument swaggerDoc, SchemaRegistry schemaRegistry,
  IApiExplorer apiExplorer);

  ```


  This gives full control to modify the final SwaggerDocument. You can gain
  additional context from the provided SwaggerDocument (e.g. version) and
  IApiExplorer. You should have a good understanding of the [Swagger 2.0
  spec.](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)
  before using this option.


  ### Wrapping the SwaggerGenerator with Additional Behavior ###


  The default implementation of ISwaggerProvider, the interface used to obtain
  Swagger metadata for a given API, is the SwaggerGenerator. If neccessary, you
  can inject your own implementation or wrap the existing one with additional
  behavior. For example, you could use this option to inject a "Caching Proxy"
  that attempts to retrieve the SwaggerDocument from a cache before delegating
  to the built-in generator:


  ```csharp

  httpConfiguration
        .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
            {
          c.CustomProvider((defaultProvider) => new CachingSwaggerProvider(defaultProvider));
            });
  ```


  ### Including XML Comments ###


  If you annotate Controllers and API Types with [Xml
  Comments](http://msdn.microsoft.com/en-us/library/b2s063f7(v=vs.110).aspx),
  you can incorporate those comments into the generated docs and UI. The Xml
  tags are mapped to Swagger properties as follows:


  * **Action summary** -> Operation.summary

  * **Action remarks** -> Operation.description

  * **Parameter summary** -> Parameter.description

  * **Type summary** -> Schema.descripton

  * **Property summary** -> Schema.description (i.e. on a property Schema)


  You can enable this by providing the path to one or more XML comments files:

  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.SingleApiVersion("v1", "A title for your API");
              c.IncludeXmlComments(GetXmlCommentsPathForControllers());
              c.IncludeXmlComments(GetXmlCommentsPathForModels());
          });
  ```


  NOTE: You will need to enable output of the XML documentation file. This is
  enabled by going to project properties -> Build -> Output. The "XML
  documentation file" needs to be checked and a path assigned, such as
  "bin\Debug\MyProj.XML". You will also want to verify this across each build
  configuration. Here's an example of reading the file, but it may need to be
  modified according to your specific project settings:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              var baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
              var commentsFileName = Assembly.GetExecutingAssembly().GetName().Name + ".XML";
              var commentsFile = Path.Combine(baseDirectory, commentsFileName);

              c.SingleApiVersion("v1", "A title for your API");
              c.IncludeXmlComments(commentsFile);
              c.IncludeXmlComments(GetXmlCommentsPathForModels());
          });
  ```

  #### Response Codes ####


  Swashbuckle will automatically create a "success" response for each operation
  based on the action's return type. If it's a void, the status code will be 204
  (No content), otherwise 200 (Ok). This mirrors WebApi's default behavior. If
  you need to change this and/or list additional response codes, you can use the
  non-standard "response" tag:


  ```csharp

  /// <response code="201">Account created</response>

  /// <response code="400">Username already in use</response>

  public int Create(Account account)

  ```

  ### Working Around Swagger 2.0 Constraints ###


  In contrast to Web API, Swagger 2.0 does not include the query string
  component when mapping a URL to an action. As a result, Swashbuckle will raise
  an exception if it encounters multiple actions with the same path (sans query
  string) and HTTP method. You can workaround this by providing a custom
  strategy to pick a winner or merge the descriptions for the purposes of the
  Swagger docs 


  ```csharp

  httpConfiguration
      .EnableSwagger((c) =>
          {
              c.SingleApiVersion("v1", "A title for your API"));
              c.ResolveConflictingActions(apiDescriptions => apiDescriptions.First());
          });
  ```

  See the following discussion for more details:


  <https://github.com/domaindrivendev/Swashbuckle/issues/142>


  ## Customizing the swagger-ui ##


  The swagger-ui is a JavaScript application hosted in a single HTML page
  (index.html), and it exposes several customization settings. Swashbuckle ships
  with an embedded version and includes corresponding configuration methods for
  each of the UI settings. If you require further customization, you can also
  inject your own version of "index.html". Read on to learn more.


  ### Customizations via the configuration API ###


  If you're happy with the basic look and feel but want to make some minor
  tweaks, the following options may be sufficient:


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi(c =>
          {
              c.InjectStylesheet(containingAssembly, "Swashbuckle.Dummy.SwaggerExtensions.testStyles1.css");
              c.InjectJavaScript(containingAssembly, "Swashbuckle.Dummy.SwaggerExtensions.testScript1.js");
              c.SetValidatorUrl("http://localhost/validator");
              c.DisableValidator();
              c.DocExpansion(DocExpansion.List);
              c.SupportedSubmitMethods("GET", "HEAD")
          });
  ```


  #### InjectStylesheet ####


  Use this to enrich the UI with one or more additional CSS stylesheets. The
  file(s) must be included in your project as an "Embedded Resource", and then
  the resource's "Logical Name" is passed to the method as shown above. See
  [Injecting Custom Content](#injecting-custom-content) for step by step
  instructions.


  #### InjectJavaScript ####


  Use this to invoke one or more custom JavaScripts after the swagger-ui has
  loaded. The file(s) must be included in your project as an "Embedded
  Resource", and then the resource's "Logical Name" is passed to the method as
  shown above. See [Injecting Custom Content](#injecting-custom-content) for
  step by step instructions.


  #### SetValidatorUrl/DisableValidator ####


  By default, swagger-ui will validate specs against swagger.io's online
  validator and display the result in a badge at the bottom of the page. Use
  these options to set a different validator URL or to disable the feature
  entirely.


  #### DocExpansion ####


  Use this option to control how the Operation listing is displayed. It can be
  set to "None" (default), "List" (shows operations for each resource), or
  "Full" (fully expanded: shows operations and their details).


  #### SupportedSubmitMethods ####


  Specify which HTTP operations will have the 'Try it out!' option. An empty
  parameter list disables it for all operations.


  ### Provide your own "index" file ###


  As an alternative, you can inject your own version of "index.html" and
  customize the markup and swagger-ui directly. Use the __CustomAsset__ option
  to instruct Swashbuckle to return your version instead of the default when a
  request is made for "index". As with all custom content, the file must be
  included in your project as an "Embedded Resource", and then the resource's
  "Logical Name" is passed to the method as shown below. See [Injecting Custom
  Content](#injecting-custom-content) for step by step instructions.


  For compatibility, you should base your custom "index.html" off [this
  version](https://github.com/domaindrivendev/Swashbuckle/blob/v5.5.3/Swashbuckle.Core/SwaggerUi/CustomAssets/index.html)


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
       .EnableSwaggerUi(c =>
           {
               c.CustomAsset("index", yourAssembly, "YourWebApiProject.SwaggerExtensions.index.html");
           });
  ```


  ### Injecting Custom Content ###


  The __InjectStylesheet__, __InjectJavaScript__ and __CustomAsset__ options all
  share the same mechanism for providing custom content. In each case, the file
  must be included in your project as an "Embedded Resource". The steps to do
  this are described below:


  1. Add a new file to your Web API project.

  2. In Solution Explorer, right click the file and open its properties window.
  Change the "Build Action" to "Embedded Resource".


  This will embed the file in your assembly and register it with a "Logical
  Name". This can then be passed to the relevant configuration method. It's
  based on the Project's default namespace, file location and file extension.
  For example, given a default namespace of "YourWebApiProject" and a file
  located at "/SwaggerExtensions/index.html", then the resource will be assigned
  the name - "YourWebApiProject.SwaggerExtensions.index.html". If you use
  "Swagger" as the root folder name for your custom assets, this will collide
  with the default route templates and the page will not be loaded correctly.


  ## Transitioning to Swashbuckle 5.0 ##


  This version of Swashbuckle makes the transition to Swagger 2.0. The 2.0
  specification is significantly different to its predecessor (1.2) and forces
  several breaking changes to Swashbuckle's configuration API. If you're using
  Swashbuckle without any customizations, i.e. App_Start/SwaggerConfig.cs has
  never been modified, then you can overwrite it with the new version. The
  defaults are the same and so the swagger-ui should behave as before.


  \* If you have consumers of the raw Swagger document, you should ensure they
  can accept Swagger 2.0 before making the upgrade.


  If you're using the existing configuration API to customize the final Swagger
  document and/or swagger-ui, you will need to port the code manually. The
  static __Customize__ methods on SwaggerSpecConfig and SwaggerUiConfig have
  been replaced with extension methods on HttpConfiguration - __EnableSwagger__
  and __EnableSwaggerUi__. All options from version 4.0 are made available
  through these methods, albeit with slightly different naming and syntax. Refer
  to the tables below for a summary of changes:



  | 4.0 | 5.0 Equivalent | Additional Notes |

  | --------------- | --------------- | ---------------- |

  | ResolveBasePathUsing | RootUrl | |

  | ResolveTargetVersionUsing | N/A | version is now implicit in the docs URL
  e.g. "swagger/docs/{apiVersion}" |

  | ApiVersion | SingleApiVersion| now supports additional metadata for the
  version | 

  | SupportMultipleApiVersions | MultipleApiVersions | now supports additional
  metadata for each version |

  | Authorization | BasicAuth/ApiKey/OAuth2 | | 

  | GroupDeclarationsBy | GroupActionsBy | |

  | SortDeclarationsBy | OrderActionGroupsBy | |

  | MapType | MapType | now accepts Func&lt;Schema&gt; instead of
  Func&lt;DataType&gt; |

  | ModelFilter | SchemaFilter | IModelFilter is now ISchemaFilter,
  DataTypeRegistry is now SchemaRegistry |

  | OperationFilter | OperationFilter | DataTypeRegistry is now SchemaRegistry |

  | PolymorphicType | N/A | not currently supported |

  | SupportHeaderParams | N/A | header params are implicitly supported |

  | SupportedSubmitMethods | N/A | all HTTP verbs are implicitly supported |

  | CustomRoute | CustomAsset | &nbsp; |


  ## Troubleshooting and FAQ's ##


  1. [Swagger-ui showing "Can't read swagger JSON from
  ..."](#swagger-ui-showing-cant-read-swagger-json-from)

  2. [Page not found when accessing the
  UI](#page-not-found-when-accessing-the-ui)

  3. [Swagger-ui broken by Visual Studio
  2013](#swagger-ui-broken-by-visual-studio-2013)

  4. [OWIN Hosted in IIS - Incorrect VirtualPathRoot
  Handling](#owin-hosted-in-iis---incorrect-virtualpathroot-handling)

  5. [How to add vendor extensions](#how-to-add-vendor-extensions)

  6. [FromUri Query string DataMember names are
  incorrect](#fromuri-query-string-datamember-names-are-incorrect)

  7. [Remove Duplicate Path Parameters](#remove-duplicate-path-parameters)

  8. [Deploying behind Load Balancer / Reverse
  Proxies](#deploying-behind-load-balancer--reverse-proxies)

  9. [500 : {"Message":"An error has
  occurred."}](#500--messagean-error-has-occurred)


  ### Swagger-ui showing "Can't read swagger JSON from ..."


  If you see this message, it means the swagger-ui received an unexpected
  response when requesting the Swagger document. You can troubleshoot further by
  navigating directly to the discovery URL included in the error message. This
  should provide more details.


  If the discovery URL returns a 404 Not Found response, it may be due to a
  full-stop in the version name (e.g. "1.0"). This will cause IIS to treat it as
  a static file (i.e. with an extension) and bypass the URL Routing Module and
  therefore, Web API. 


  To workaround, you can update the version name specified in SwaggerConfig.cs.
  For example, to "v1", "1-0" etc. Alternatively, you can change the route
  template being used for the swagger docs (as shown [here](#custom-routes)) so
  that the version parameter is not at the end of the route.


  ### Page not found when accessing the UI ###


  Swashbuckle serves an embedded version of the swagger-ui through the Web API
  pipeline. But, most of the URLs contain extensions (.html, .js, .css) and many
  IIS environments are configured to bypass the managed pipeline for paths
  containing extensions.


  In previous versions of Swashbuckle, this was resolved by adding the following
  setting to your Web.config:


  ```xml

  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true" />
  </system.webServer>

  ```


  This is no longer neccessary in Swashbuckle 5.0 because it serves the
  swagger-ui through extensionless URL's.


  However, if you're using the SingleApiVersion, MultipleApiVersions or
  CustomAsset configuration settings you could still get this error. Check to
  ensure you're not specifying a value that causes a URL with an extension to be
  referenced in the UI. For example a full-stop in a version number ...


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("1.0", "A title for your API"))
      .EnableSwaggerUi();
  ```

  will result in a discovery URL like this "/swagger/docs/1.0" where the
  full-stop is treated as a file extension.


  ### Swagger-ui broken by Visual Studio 2013 ###


  VS 2013 ships with a new feature - Browser Link - that improves the web
  development workflow by setting up a channel between the IDE and pages being
  previewed in a local browser. It does this by dynamically injecting JavaScript
  into your files.


  Although this JavaScript SHOULD have no affect on your production code, it
  appears to be breaking the swagger-ui.


  I hope to find a permanent fix, but in the meantime, you'll need to workaround
  this issue by disabling the feature in your web.config:


  ```xml

  <appSettings>
      <add key="vs:EnableBrowserLink" value="false"/>
  </appSettings>

  ```

  ### OWIN Hosted in IIS - Incorrect VirtualPathRoot Handling


  When you host Web API 2 on top of OWIN/SystemWeb, Swashbuckle cannot correctly
  resolve VirtualPathRoot by default.


  You must either explicitly set VirtualPathRoot in your HttpConfiguration at
  startup, or perform customization like this to fix automatic discovery:


  ```csharp

  httpConfiguration.EnableSwagger(c => 

  {
      c.RootUrl(req =>
          req.RequestUri.GetLeftPart(UriPartial.Authority) +
          req.GetRequestContext().VirtualPathRoot.TrimEnd('/'));
  }

  ```


  ### How to add vendor extensions


  Swagger 2.0 allows additional meta-data (aka vendor extensions) to be added at
  various points in the Swagger document. Swashbuckle supports this by including
  a "vendorExtensions" dictionary with each of the extensible Swagger types.
  Meta-data can be added to these dictionaries from custom Schema, Operation or
  Document filters. For example:


  ```csharp

  public class ApplySchemaVendorExtensions : ISchemaFilter

  {
      public void Apply(Schema schema, SchemaRegistry schemaRegistry, Type type)
      {
          schema.vendorExtensions.Add("x-foo", "bar");
      }
  }

  ```


  As per the specification, all extension properties should be prefixed by "x-"


  ### FromUri Query string DataMember names are incorrect


  When using `FromUri` Model Binding, it is possible to override the querystring
  parameter name's using `DataMember`s. In this case you can add a custom
  operation filter to override the name. For example:


  ```csharp

  public class ComplexTypeOperationFilter : IOperationFilter

  {
      public void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription)
      {
          if (operation.parameters == null)
              return;

          var parameters = apiDescription.ActionDescriptor.GetParameters();
          foreach (var parameter in parameters)
          {
              foreach (var property in parameter.ParameterType.GetProperties())
              {
                  var param = operation.parameters.FirstOrDefault(o => o.name.ToLowerInvariant().Contains(property.Name.ToLowerInvariant()));

                  if (param == null) continue;

                  var name = GetNameFromAttribute(property);

                  if (string.IsNullOrEmpty(name))
                  {
                      operation.parameters.Remove(param);
                  }
                  param.name = GetNameFromAttribute(property);
              }
          }
      }
      
      private static string GetNameFromAttribute(PropertyInfo property)
      {
          var customAttributes = property.GetCustomAttributes(typeof(DataMemberAttribute), true);
          if (customAttributes.Length > 0)
          {
              var attribute = customAttributes[0] as DataMemberAttribute;
              if (attribute != null) return attribute.Name;
          }
          return string.Empty;
      }
  }

  ```


  ### Remove Duplicate Path Parameters


  When using `FromUri` Model Binding, duplicate items can appear as items can be
  passed as URI parameters, or querystrings. In this case you can add a custom
  operation filter to remove the duplicates. For example:


  ```csharp

  public class ComplexTypeOperationFilter : IOperationFilter

  {
      public void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription)
      {
         if (operation.parameters == null)
             return;
         var complexParameters = operation.parameters.Where(x => x.@in == "query" && !string.IsNullOrWhiteSpace(x.name)).ToArray();

         foreach (var parameter in complexParameters)
         {
             if (!parameter.name.Contains('.')) continue;
             var name = parameter.name.Split('.')[1];

             var opParams = operation.parameters.Where(x => x.name == name);
             var parameters = opParams as Parameter[] ?? opParams.ToArray();

             if (parameters.Length > 0)
             {
                 operation.parameters.Remove(parameter);
             }
         }
      }
  }

  ```


  ### Deploying behind Load Balancer / Reverse Proxies


  Swashbuckle attempts to populate the [Swagger
  "host"](http://swagger.io/specification/#swaggerObject) property from HTTP
  headers that are sent with the request for Swagger JSON. This may cause issues
  in load balancer / reverse proxy environments, particularly if non-standard
  headers are used to pass on the outer most host name. You can workaround this
  by providing your own function for determining your API's root URL based on
  vendor-specific headers. Checkout [issue
  705](https://github.com/domaindrivendev/Swashbuckle/issues/705) for some
  potential implementations.


  ### 500 : {"Message":"An error has occurred."}


  If, on loading the Swagger UI page, you get an error: `500 : {"Message":"An
  error has occurred."} http://<url>/swagger/docs/v1` ensure that the XML
  documentation output settings have been set in the project file in the
  solution, for both Debug and Release configurations.
gossi/swagger: "# swagger\n\n[![License](https://poser.pugx.org/gossi/swagger/license)](https://packagist.org/packages/gossi/swagger)\n[![Latest Stable Version](https://poser.pugx.org/gossi/swagger/v/stable)](https://packagist.org/packages/gossi/swagger)\n[![Total Downloads](https://poser.pugx.org/gossi/swagger/downloads)](https://packagist.org/packages/gossi/swagger)<br>\n[![HHVM Status](http://hhvm.h4cc.de/badge/gossi/swagger.svg?style=flat)](http://hhvm.h4cc.de/package/gossi/swagger)\n[![Build Status](https://travis-ci.org/gossi/swagger.svg?branch=master)](https://travis-ci.org/gossi/swagger)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/gossi/swagger/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/gossi/swagger/?branch=master)\n[![Code Coverage](https://scrutinizer-ci.com/g/gossi/swagger/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/gossi/swagger/?branch=master)\n\n\nA php library to manipulate [swagger](http://swagger.io)/[Open API](https://openapis.org) specifications.\n\n## Installation\n\n```\ncomposer require gossi/swagger\n```\n\n## Usage\n\nRead an `api.json` file:\n\n```php\n$swagger = Swagger::fromFile('api.json');\n\n// or\n\n$swagger = new Swagger($array);\n```\n\n### Collections\n\nThere are two major collections: `Paths` and `Definitions`. The API is similar for both:\n\n```php\n$paths = $swagger->getPaths();\n$p = new Path('/user');\n\n// adding\n$paths->add($p);\n\n// retrieving\nif ($paths->has('/user') ||\_$paths->contains($p)) {\n\t$path = $paths->get('/user');\n}\n\n// removing\n$paths->remove('/user');\n\n// iterating\nforeach ($paths as $path) {\n\t// do sth with $path\n}\n```\n\nOther collections are: `Headers`, `Parameters`, `Responses` and `SecurityDefinitions`.\n\n### Models\n\nThere are a lot of models, e.g. the mentioned `Path` above. The API is well written, so it works with the auto-completion of your IDE. It is straight forward and uses the same naming scheme as the OpenAPI specification.\n\n\n## Contributing\n\nFeel free to fork and submit a pull request (don't forget the tests) and I am happy to merge.\n\n\n"
Maks3w/SwaggerAssertions: >
  # Swagger Assertions


  Test any API requests and responses match with the models described in the
  documentation.


  This project is compatible with [Swagger 2](http://swagger.io/) spec
  definitions.


  ## Installing via Composer


  You can use [Composer](https://getcomposer.org) .


  ```bash

  composer require fr3d/swagger-assertions

  ```


  ## Usage in PHPUnit


  There are two traits for provide predefined helper functions for different
  assertions.


  - [AssertsTrait](src/PhpUnit/AssertsTrait.php) For assert different parts of
  the response

  - [Psr7AssertsTrait](src/PhpUnit/Psr7AssertsTrait.php) For assert [PSR-7
  compatible](http://www.php-fig.org/psr/psr-7/) responses.

  - [SymfonyAssertsTrait](src/PhpUnit/SymfonyAssertsTrait.php) For assert
  [Symfony HTTP
  Foundation](http://symfony.com/doc/current/components/http_foundation/index.html)
  responses.


  See examples at [examples/PhpUnit](examples/PhpUnit)


  ## FAQ


  <dl>
    <dt>Q: Can this library validate my Swagger definition?</dt>
    <dd>A: No. This library validate your API requests and responses match your Swagger definition.</dd>
  </dl>


  ## License

    Code licensed under BSD 2 clauses terms & conditions.

    See [LICENSE.txt](LICENSE.txt) for more information.
metosin/compojure-api: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6B:0D50:B7CA92:17440E5:6500FB55.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Azure/AutoRest: >+
  # <img align="center" src="./docs/images/logo.png">  AutoRest



  The **AutoRest** tool generates client libraries for accessing RESTful web
  services. Input to *AutoRest* is a spec that describes the REST API using the
  [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) format.


  <!-- 1) returns SVGs now which aren't rendered by GitHub 2) seems to be
  awfully unresponsive and unreliable lately

  [![PR
  Stats](http://issuestats.com/github/Azure/autorest/badge/pr?style=flat-square)](http://issuestats.com/github/Azure/autorest)

  [![Issue
  Stats](http://issuestats.com/github/Azure/autorest/badge/issue?style=flat-square)](http://issuestats.com/github/Azure/autorest)

  -->


  ## Support Policy

  AutoRest is an open source tool -- if you need assistance, first check the
  documentation. If you find a bug or need some help, feel free to submit an
  [issue](https://github.com/Azure/autorest/issues)


  # Getting Started using AutoRest ![image](./docs/images/normal.png)


  Start by reading the documentation for using AutoRest:

  - [Installing AutoRest](./docs/installing-autorest.md) - Shows how to install
  AutoRest.

  - [Understanding AutoRest Versions and
  Extensions](./docs/autorest-versioning.md) - AutoRest core and extension
  versioning

  - [Managing AutoRest](./docs/managing-autorest.md) - shows how to get new
  updates to AutoRest and choose which version to use for code generation.

  - [Generating a Client using AutoRest](./docs/examples/generating-a-client.md)
  - shows simple command line usage for generating a client library.

  - [Command Line Interface
  Documentation](./docs/user/command-line-interface.md) - explains common
  command line arguments.

  - [Examples](./Samples) - full, walkthrough-style scenarios for using
  AutoRest.

  - [Recent Updates](./changelog.md) - notes on recent updates .


  # New! AutoRest Version 3.0 

  AutoRest 3.0 introduces a large number of internal changes to support new
  scenarios. 


  ## Features


  ### OpenAPI3 support! 

  AutoRest 3.0 finally supports OpenAPI3 files as an input format, with the
  following caveats:

  - existing AutoRest v2 generators may not support all features from OpenAPI3.
  (see next section)

  - `anyOf`, `oneOf` are not currently supported 

  - other OpenAPI3 specific features may not be entirely supported.


  ### Generators


  A new set of language generator plugins are being written that adopt the
  lighter-weight patterns for Azure Core libraries.<br>

  Existing V2 generators will default to processing with the AutoRest 2
  pipeline. <br>

  If you want to force it to use the v3 (to get support for OpenAPI3 ) add
  `--v3` to the command line:

  > `autorest --v3 --csharp ...`


  | Generator | Command | Notes |

  |----|---|---|

  |PowerShell| `autorest --powershell ...` |Fully V3 Supported - use to generate
  powershell modules |   

  |CSharp|`autorest --csharp ...` |v2 generator, may use OpenAPI3 with `--v3`
  switch (may be some differences) - v3 generator in progress | 

  |Python|`autorest --python ...` |v2 generator, may use OpenAPI3 with `--v3`
  switch (may be some differences) - v3 generator in progress| 

  |Java|`autorest --java ...` |v2 generator, may use OpenAPI3 with `--v3` switch
  (may be some differences) - v3 generator in progress | 

  |TypeScript|`autorest --typescript ...` |v2 generator, may use OpenAPI3 with
  `--v3` switch (may be some differences) - v3 generator in progress | 

  |Go|`autorest --go ...` |v2 generator, may use OpenAPI3 with `--v3` switch
  (may be some differences) - v3 generator in progress | 

  |Ruby|`autorest --ruby ...` |v2 generator - does not support v3 feature, no
  OpenAPI3 support | 


  #### New V3 Pipeline


  In AutoRest v3, the pipeline has been drastically rebuilt, which allows
  support for:

  - OpenAPI3 inputs

  - Supporting merging multiple API versions 

  - Model Deduplication and Subset reduction across multiple API versions

  - Azure Profile support (v3 generator required)


  Some related information:

  - [Validation Rules &
  Linting](https://github.com/Azure/azure-openapi-validator/blob/master/docs/readme.md)
  - about the validation rules in AutoRest

  - [Client
  Runtimes](./docs/developer/architecture/Autorest-and-Clientruntimes.md) -
  information about the client runtimes required for using code generated by
  AutoRest

  <!-- - [Developer Guide](./docs/developer/guide/) - Notes on developing with
  AutoRest -->


  ### Supported Platforms


  While AutoRest itself runs on NodeJS, some generators use the .NET Core 2.0
  runtime, which is the most limiting factor.

  See
  [dotnet/core/release-notes/2.0/2.0-supported-os.md](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0-supported-os.md)
  for a list of supported platforms.


  ---


  ### Code of Conduct 

  This project has adopted the [Microsoft Open Source Code of
  Conduct](https://opensource.microsoft.com/codeofconduct/). For more
  information see the [Code of Conduct
  FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact
  [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional
  questions or comments.

subeeshcbabu/swagmock: >
  # swagmock

  Mock data generator for swagger api


  *Note: Swagmock version `1.0.0` onwards requires `Node.js v6+` (`"engines":
  {"node": ">=6.x"}`). Please use `v0.0.x` (say `0.0.5`), if you want to run
  this module on any previous node.js versions.*


  ## Install


  ```

  npm install swagmock

  ```


  ## Usage


  ```javascript
      let Swagmock = require('swagmock');
      let Mockgen = Swagmock(api, options);
      // api Can be one of the following.
      // 1) A relative or absolute path to the Swagger api document.
      // 2) A swagger api Object.
      // 3) A promise (or a `thenable`) that resolves to the swagger api Object.
      // Set the `validated` : `true`  in `options`, if the api Object is already validated
      // and dereferenced ($ref are resolved ).
  ```


  Promise response:


  ```javascript
      let responseMock = Mockgen.responses({}); //returns a promise that resolves to response mock
      responseMock.then(mock => {
          //Use mock here
      }).catch(error => {
          Assert.ifError(error);
      });
  ```


  Callback style:


  ```javascript

      Mockgen.responses({ path: '/somepath'}, (error, mock) => {
          Assert.ifError(error);
          //Use mock here
      });
  ```


  Check the [API](README.md#api) for more details.


  ## Example


  Initialize the mock generator


  ```javascript
      const apiPath = 'http://petstore.swagger.io/v2/swagger.json';
      let Assert = require('assert');
      let Swagmock = require('swagmock');
      let Mockgen = Swagmock(apiPath);
  ```


  Response mock generation:


  ```javascript
      mockgen.responses({
          path: '/pet/findByStatus',
          operation: 'get',
          response: 200
      }).then(mock => {
          console.log(mock); // This would print:
          // {
          //     "responses": [{
          //         "id": 2530624032210944,
          //         "category": {
          //             "id": 8200505595527168,
          //             "name": "r($vA&"
          //         },
          //         "name": "doggie",
          //         "photoUrls": ["p0x1", "6O)3*kO"],
          //         "tags": [{
          //             "id": 4590764340281344,
          //             "name": "WCTA6f!"
          //         }, {
          //             "id": -4614156653166592,
          //             "name": "e"
          //         }],
          //         "status": "pending"
          //     }]
          // }
      }).catch(error => {
          Assert.ifError(error);
      });
  ```


  Parameters mock generation:


  ```javascript

      mockgen.parameters({
          path: '/pet/findByStatus',
          operation: 'get'
      }).then(mock => {
          console.log(mock);//This would print:
          // {
          //     "parameters": {
          //         "query": [{
          //             "name": "status",
          //             "value": [ 'available', 'pending' ],
          //             "separator": "multi"
          //         }]
          //     }
          // }
      }).catch(error => {
          Assert.ifError(error);
      })

  ```


  Check [Examples](docs/EXAMPLES.md) for more details on mock generators.


  ## API


  `Swagmock(api, [options])`


  * `api` - (*Object*) or (*String*) or (*Promise*) - (required) - api can be
  one of the following.
      - A relative or absolute path to the Swagger api document.
      - A URL of the Swagger api document.
      - The swagger api Object
      - A promise (or a `thenable`) that resolves to the swagger api Object

  * `options` - (*Object*) - (optional) - Additional options to create the mock
  generator.
      - `validated` -  Set this property to `true` if the api is already validated against swagger schema and already dereferenced all the `$ref`. This is really useful to generate mocks for parsed api specs. Default value for this is `false` and the api will be validated using [swagger-parser validate](https://github.com/BigstickCarpet/swagger-parser/blob/master/docs/swagger-parser.md#validateapi-options-callback).

  ## responses


  `mockgen.responses(options, [callback])`


  This generates the mock response objects based on the `options`


  * `options` - (*Object*) - (required) - Options to control the mock
  generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a
  callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the response mock need
  to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path` is
  not specified, mock response will be generated for all the paths defined by
  the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the response
  mock need to be generated. For example `get`, `post` etc. If `operation` is
  not specified, mock response will be generated for all the operations defined
  by the swagger api.


  * `response` - (*String*) - (optional) - The response for which the response
  mock need to be generated. For example `200`, `400`, `default` etc. If
  `response` is not specified, mock response will be generated for all the
  responses defined by the swagger api.


  * `useExamples` - (*Boolean*)- (optional) - Should the generated mock make use
  of example values defined in your swagger.json. Note: invalid example values
  will create invalid mockdata!


  ## parameters


  `mockgen.parameters(options, [callback])`


  This generates the mock parameters objects based on the `options`


  * `options` - (*Object*) - (required) - Options to control the mock
  generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a
  callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the parameters mock
  need to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path`
  is not specified, mock parameters will be generated for all the paths defined
  by the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the
  parameters mock need to be generated. For example `get`, `post` etc. If
  `operation` is not specified, mock parameters will be generated for all the
  operations defined by the swagger api.



  ## requests


  `mockgen.requests(options, [callback])`


  This generates the mock request object based on the `options`. `requests` API
  resolves the `parameters` mock data to generate the `request` mock object
  useful for unit tests.


  * `options` - (*Object*) - (required) - Options to control the mock
  generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a
  callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the parameters mock
  need to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path`
  is not specified, mock parameters will be generated for all the paths defined
  by the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the
  parameters mock need to be generated. For example `get`, `post` etc. If
  `operation` is not specified, mock parameters will be generated for all the
  operations defined by the swagger api.


  ### data


  `request` Object will have following possible properties `query`, `header`,
  `pathname`, `path`, `formData` or `body` based on the `parameters` defined for
  the path and operation.


  Mock request [Path templates](http://swagger.io/specification/#pathTemplating)
  are resolved using path parameters.


  ```javascript
      mockgen.requests({
          path: '/pet/findByStatus',
          operation: 'get'
      }, function (error, mock) {
          assert.ifError(error);

          console.log(mock);
          //This would print:
          // {
          //     "request": {
          //         "query": "status=available&status=pending"
          //     }
          // }
      });
  ```

  ## Examples


  ### API

  [Usage](docs/EXAMPLES.md)


  ### Unit test request mocks


  [github api express
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/express/github-express/tests)


  [slack api hapi
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/hapi/slack/tests)


  ### Mock response data providers


  [spotify api hapi
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/hapi/spotify/data)


  [glugbot api express
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/express/glugbot-express/tests/api)
zalando/friboo: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E557:6C7D:248458:4AA518:6500FBAD.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
krakenjs/generator-swaggerize: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273E:28DF:7507D9:EEE314:6500FB4C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
ninenines/cowboy: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A82:7919:A4E049:14EFCDC:6500FB63.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
BlueOakJS/blueoak-server: >+
  ![BlueOak
  Logo](https://github.com/BlueOakJS/blueoak-server/wiki/images/blueoak.png)

  ======


  BlueOak Server is a NodeJS framework for building RESTful APIs.


  [![Build
  Status](https://travis-ci.org/BlueOakJS/blueoak-server.svg?branch=master)](https://travis-ci.org/BlueOakJS/blueoak-server)

  [![npm
  version](https://img.shields.io/npm/v/blueoak-server.svg)](https://www.npmjs.com/package/blueoak-server)


  BlueOak Server is _swagger-matic_, that is, it maximizes the value of your
  Swagger API (now OpenAPI, but really this supports only V2) by using it to
  drive runtime behavior.  

  BlueOak Server loads your Swagger API, connects the paths it defines to your
  implementation code, exposes that API to the network, and validates that every
  request is well-formed per that API.


  Check out the documentation on our wiki:
  <https://github.com/BlueOakJS/blueoak-server/wiki>


  ### Overview


  BlueOak Server combines some of the best Node libraries into a single tool for
  building RESTful APIs.  It uses Express under the covers, but adds many
  additional features:


  - Swagger integration

  - Easy configuration

  - Clustering

  - Logging

  - Dependency injection


  Projects use the following directory structure.


  ```

  ├── [your_project_name]/

  │   ├── index.js <-- optional Main script

  │   ├── package.json

  |   ├── config/

  |   |     └── default.json

  │   ├── handlers/

  │   ├── services/

  │   ├── middleware/

  │   ├── swagger/

  ```


  #### Handlers

  [Handlers](https://github.com/BlueOakJS/blueoak-server/wiki/Handlers) contain
  Express route-handling functions.  They can either be directly wired to routes
  on the Express _app_, or defined using Swagger.


  To use the _app_ directly, simply create a js file in the handlers directory
  that exports an `init` function.

  The `init` function is called during server startup and injected with the the
  _app_ automatically.


  ```js

  exports.init = function(app) {
    app.get('/', function(req, res) {
      res.json({});
    });
  }


  ```


  #### Services

  [Services](https://github.com/BlueOakJS/blueoak-server/wiki/Services) do most
  of the heavy lifting.  Like handlers, services contain init functions that are
  called during server startup.  However, services can export other functions,
  and those functions can be invoked from handlers.


  Here's an example of a fizzbuzz service (services/fizzbuzz.js).  You'll notice
  it has an init method with two parameters, _logger_ and _callback_.  The
  _logger_ is a [built-in
  service](https://github.com/BlueOakJS/blueoak-server/wiki/Logging-Service) for
  logging.  The _callback_ is an optional parameter used for cases where
  services need to perform asynchronous operations during startup.  The service
  also exports a _getResult_ function.  Any service or handler with a dependency
  on _fizzbuzz_ can invoke `fizzbuzz.getResult`.


  ```js

  exports.init = function(logger, callback) {
    logger.info("Starting FizzBuzz service");
    callback();
  }


  exports.getResult = function(num) {
      if (num % 15 === 0) {
          return "FizzBuzz";
      } else if (num % 3 === 0) {
          return "Fizz";
      } else if (num % 5 === 0) {
          return "Buzz";
      } else {
          return num;
      }
  };
    
  ```


  We want to use that service from our handler, so we include `fizzbuzz` as a
  parameter of the `init` function.

  The server will ensure that the fizzbuzz service is initialized during server
  startup and passed to the handler.


  ```js

  exports.init = function(app, fizzbuzz) {

    app.get('/fizzbuzz/:num', function(req, res) {
      var num = req.params.num;
      res.json({
          result: fizzbuzz.getResult(num)
       });
    });
    
  }

  ```

  #### Third-party Services

  Services can be published as npm modules and pulled into projects through the
  `npm install` command.


  For example, the bos-couchdb service adds the ability to connect to a CouchDB
  database.

  It can be installed to a blueoak-server project using


  ```bash

  $ npm install bos-couchdb --save

  ```


  Once installed, it can be used in any service or handler through the
  dependency-injected `bosCouchdb` parameter.


  ```js

  exports.init = function(config, logger, bosCouchdb) {
    var myDb = bosCouchdb.get('mydb');
  }


  ```


  * [bos-couchdb](https://github.com/BlueOakJS/bos-couchdb) - service for
  connecting to CouchDB databases


  #### Config

  [Configuration](https://github.com/BlueOakJS/blueoak-server/wiki/Services#config)
  is stored in json files in the _config_ directory.  Values can be accessed
  through the `config` service in handers and services.  Configuration also
  supports layering on environment-specific config as well as encrypted values.


  ```js

  exports.init = function(config) {
    var myServiceConfig = config.get('myService');
  }

  ```


  #### Middleware

  [Middleware](https://github.com/BlueOakJS/blueoak-server/wiki/Middleware) are
  similar to services but used to wire up Express middleware.  The _express_
  section of the config determines which middleware is loaded and in which
  order.


  ```json

  {
    "express": {
      "middleware": ["csrf", "cors", "session", "body-parser"]
    }
  }

  ```


  #### Swagger (OpenAPI)


  [Swagger](https://github.com/BlueOakJS/blueoak-server/wiki/Handlers#swagger)
  files in the _swagger_ directory are read during server startup and
  automatically wired up to handlers. Swagger files can be in either json or
  yaml formats.


  We've really focused on making API development with Swagger and BlueOak Server
  to be excellent.


  At a high-level, BlueOak Server's Swagger support provides the following:

  * Automatic app routing from the API method to the function as defined in the
  Swagger

  * Request parameter validation, including the body model, based on your method
  definion

  * Reponse model validation based on your method definitions during development

  * JSON `$ref`s to external Swagger documents on the file system

  * Multiple top-level Swagger API definitions supporting delivery of multiple
  API base paths

  * Publishing of the fully compiled Swagger spec for input to by tools such as
  [`Swagger-UI`](http://swagger.io/swagger-ui/) and
  [`swagger-commander`](https://www.npmjs.com/package/swagger-commander)


  ### Installation


  ```bash

  $ npm install -g blueoak-server

  ```


  -or-


  ```bash

  $ npm install --save blueoak-server

  ```


  ### Usage


  If installed globally, run _blueoak-server_ from within your project's
  directory.

  e.g.:

  ```bash

  $ blueoak-server

  ```


  If installed at a package level, call _blueoak-server_ in the `npm start`
  script.

  e.g.:

  ```json
    "scripts": {
      "start": "blueoak-server"
    }
  ```


  Alternatively, it can be launched programmatically from your own js script.



  ```js

  var server = require('blueoak-server');


  server.init(function(err) {
      if (err) {
          console.warn(err);
      } else {
          console.log('started');
      }
  });

  ```


  The programmatic approach works well during development with tools like
  nodemon,

  which monitor for file changes and automatically restart the server.


  ### Next steps


  Read through the [docs](https://github.com/BlueOakJS/blueoak-server/wiki) and
  look at the our [examples](/examples).


  When you're ready to try it out, start from the
  [template](https://github.com/BlueOakJS/blueoak-server-template).

Trax-air/swagger-aggregator: >
  .. image:: https://travis-ci.org/Trax-air/swagger-aggregator.svg?branch=master
     :alt: Travis status
  .. image:: https://badges.gitter.im/Trax-air/swagger-aggregator.svg
    :alt: Join the chat at https://gitter.im/Trax-air/swagger-aggregator
    :target: https://gitter.im/Trax-air/swagger-aggregator?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-aggregator.svg
      :target: https://pypi.python.org/pypi/swagger-aggregator/

  swagger-aggregator

  ==================


  Swagger-aggregator allow you to create a swagger REST API from several other
  swagger REST APIs.


  This can be really useful if you want to make an API Gateway accessing some of
  your internal APIs.

  You can also filter which path you want to deliver, and which properties of
  your definitions you don't want to show.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  * https://github.com/Trax-air/swagger-tester: Auto-test your swagger API in
  your unit tests. All test calls are generated by your swagger file.

  * https://github.com/Trax-air/swagger-stub: A stub you can use in your
  client's unit tests. All the HTTP calls to your swagger API are mocked by
  default. You can also add your own mocked_calls in your test functions.

  * https://github.com/Trax-air/swagger-parser: A helper that parses swagger
  specs. You can access the HTTP actions / paths and some example data


  Example Usage

  -------------


  Here is an example of an aggregate configuration.


  .. code:: yaml

    args: pet_url

    info:
      version: "0.1"
      title: "API Gateway"

    basePath: /v2

    apis:
        pet: http://pet_url/v2

    exclude_paths:
      - DELETE /pets/{petId}

    exclude_fields:
      petPet:
        - id

  This is not the most useful aggregation, as it only aggregate one API.

  The first part, `args`, define that the first parameter we will send to the
  aggregate will be pet_url. Then pet_url will be replaced by the given value
  everywhere in the config.

  The two next part, `info` and `basePath`, are the same as the ones you can
  find in every swagger API.

  `apis`, define the different APIs you want to aggregate. A name is associated
  with it URL.

  Then `exclude_paths` allow you to not deliver some path. In this case we don't
  want the user to delete a pet.


  Finally, `exclude_fields` define the attributes of the definitions we do not
  want to show.

  The value of the keys is the name of the API followed by the name of the
  definition. The value of each key will be a list of all properties to exclude.


  Then use this command to generate the aggregated swagger file:


  .. code:: python

    from traxit_aggregator import SwaggerAggregator

    SwaggerAggregator('config.yaml', 'pet.com')

  Documentation

  -------------


  More documentation is available at
  https://swagger-aggregator.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-aggregator`


  License

  -------


  swagger-aggregator is licensed under http://opensource.org/licenses/MIT.
Reckon-Limited/serverless_swagger: >
  # Serverless Swagger #


  Maps swagger configuration to serverless handlers.


  ## Installation ##


  If you don't have a serverless project, create one now:


  ```

  sls create -t aws-nodejs --path MyService

  cd MyService


  ```

  then

  ```

  yarn init 

  ```

  or

  ```

  npm init

  ```


  Inside your serverless project directory:


  ```

  yarn add serverless_swagger

  ```

  or

  ```

  npm install serverless_swagger

  ```


  Add the following to serverless.yml:


  ```

  plugins:
    - serverless_swagger
  ```


  ## Configuration ##


  The plugin looks for a `swagger.yml` in your serverless project.

  You can provide a different name by specifying a custom variable:


  ```

  custom:
    swagger_file: swagger.yml
  ```


  ## Generation ##


  A complete set of JS handlers and the appropriate serverless.yml configuration
  can be generated


  ```

  sls swagger

  ```

  Existing files should not be overwritten, meaning that the swagger can be
  updated and new functions generated without losing customisations.


  Generated files can be output to a specified directory using the `--output`
  flag and a destination directory (which must exist).


  ```

  sls swagger --output output

  ```


  ## Mapping ##


  At deploy, each function will be mapped to API Gateway events based on the
  swagger specification.


  Functions are mapped by parsing the path and method in the swagger spec to a
  function name in serverless.yml.


  For example, given the following `serverless.yml` and `swagger.yml`
  definitions

  ```

  functions:
    getClientById:
      handler: getClientById/handler.main
    getClientByName:
      handler: getClientByName/handler.main
  ```


  ```
    paths:
      /client/{id}:
        get:
          summary: "Get client  id"      
      /blah
        get:
          summary: "Get blah"      
  ```


  The *getClientById* function will be mapped to an API gateway event in the
  form:


  ```

  events:
    - http:
        method: get
        path: /client/{id}
  ```


  The *getClientByName* does not match any summary information and will not have
  an event
capitalone/oas-nodegen: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272C:4C8C:82C6EC:10A3300:6500FB1E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
calcinai/strut: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2729:083D:759E77:F02EDA:6500FB1D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
pingf/falsy: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A94:5F2B:A99463:157D419:6500FB70.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
gangverk/flask-swagger: >
  # flask-swagger

  A Swagger 2.0 spec extractor for Flask


  You can now specify base path for yml files:

  ```python

  app = Flask(__name__)


  @app.route("/spec")

  def spec():
      base_path = os.path.join(app.root_path, 'docs')
      return jsonify(swagger(app), from_file_keyword="swagger_from_file", base_path=base_path)
  ```

  and use relative paths:

  ```python

  @app.route('/test', methods=['POST'])

  def login():
      """
      swagger_from_file: test.yml
      """
  ```


  Install:


  ```shell

  pip install flask-swagger

  ```

  Flask-swagger provides a method (swagger) that inspects the Flask app for
  endpoints that contain YAML docstrings with Swagger 2.0
  [Operation](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object)
  objects.


  ```python

  class UserAPI(MethodView):

      def post(self):
          """
          Create a new user
          ---
          tags:
            - users
          definitions:
            - schema:
                id: Group
                properties:
                  name:
                   type: string
                   description: the group's name
          parameters:
            - in: body
              name: body
              schema:
                id: User
                required:
                  - email
                  - name
                properties:
                  email:
                    type: string
                    description: email for user
                  name:
                    type: string
                    description: name for user
                  address:
                    description: address for user
                    schema:
                      id: Address
                      properties:
                        street:
                          type: string
                        state:
                          type: string
                        country:
                          type: string
                        postalcode:
                          type: string
                  groups:
                    type: array
                    description: list of groups
                    items:
                      $ref: "#/definitions/Group"
          responses:
            201:
              description: User created
          """
          return {}
  ```

  Flask-swagger supports docstrings in methods of MethodView classes (à la
  [Flask-RESTful](https://github.com/flask-restful/flask-restful)) and regular
  Flask view functions.


  Following YAML conventions, flask-swagger searches for `---`, everything
  preceding is provided as `summary` (first line) and `description` (following
  lines) for the endpoint while everything after is parsed as a swagger
  [Operation](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object)
  object.


  In order to support inline definition of [Schema
  ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  objects in
  [Parameter](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameterObject) 
  and
  [Response](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#responsesObject)
  objects, flask-swagger veers a little off from the standard. We require an
  `id` field for the inline Schema which is then used to correctly place the
  [Schema](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  object in the
  [Definitions](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#definitionsObject)
  object.



  [Schema
  ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  objects can be defined in a definitions section within the docstrings (see
  group object above) or within responses or parameters (see user object above).
  We also support schema objects nested within the properties of other [Schema
  ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  objects. An example is shown above with the address property of User.


  If you don't like to put YAML on docstrings you can put the same content in an
  external file.


  #### file.yml

  ```yaml

  Create a new user

  ---

  tags:
    - users
  definitions:
    - schema:
        id: Group
        properties:
          name:
           type: string
           description: the group's name
  parameters:
    - in: body
      name: body
      schema:
        id: User
        required:
          - email
          - name
        properties:
          email:
            type: string
            description: email for user
          name:
            type: string
            description: name for user
          address:
            description: address for user
            schema:
              id: Address
              properties:
                street:
                  type: string
                state:
                  type: string
                country:
                  type: string
                postalcode:
                  type: string
          groups:
            type: array
            description: list of groups
            items:
              $ref: "#/definitions/Group"
  responses:
    201:
      description: User created
  ```


  and point to it in your docstring.


  ```python

  class UserAPI(MethodView):

      def post(self):
          """
          Create a new user

          blah blah

          swagger_from_file: path/to/file.yml

          blah blah
          """
          return {}
  ```


  Note that you can replace `swagger_from_file` by another keyword. Supply your
  chosen keyword as an argument to swagger. 



  To expose your Swagger specification to the world you provide a Flask route
  that does something along these lines


  ```python

  from flask import Flask, jsonify

  from flask_swagger import swagger


  app = Flask(__name__)


  @app.route("/spec")

  def spec():
      return jsonify(swagger(app))
  ```


  Note that the Swagger specification returned by `swagger(app)` is as minimal
  as it can be. It's your job to override and add to the specification as you
  see fit.


  ```python

  @app.route("/spec")

  def spec():
      swag = swagger(app)
      swag['info']['version'] = "1.0"
      swag['info']['title'] = "My API"
      return jsonify(swag)
  ```



  [Swagger-UI](https://github.com/swagger-api/swagger-ui)


  Swagger-UI is the reason we embarked on this mission to begin with,
  flask-swagger does not however include Swagger-UI. Simply follow the awesome
  documentation over at https://github.com/swagger-api/swagger-ui and point your
  [swaggerUi.url](https://github.com/swagger-api/swagger-ui#swaggerui) to your
  new flask-swagger endpoint and enjoy.


  ## flaskswagger Command

  This package now comes with a very simple command line interface:
  flaskswagger. This command can be used to build and update swagger specs for
  your flask apps from the command line or at build time.


  ```shell

  flaskswagger -h

  ```


  ```

  usage: flaskswagger [-h] [--template TEMPLATE] [--out-dir OUT_DIR]
                      [--definitions DEFINITIONS] [--host HOST]
                      [--base-path BASE_PATH] [--version VERSION]
                      app

  positional arguments:
    app                   the flask app to swaggerify

  optional arguments:
    -h, --help            show this help message and exit
    --template TEMPLATE   template spec to start with, before any other options
                          or processing
    --out-dir OUT_DIR     the directory to output to
    --definitions DEFINITIONS
                          json definitions file
    --host HOST
    --base-path BASE_PATH
    --version VERSION     Specify a spec version

  ```


  For example, this can be used to build a swagger spec which can be served from
  your static directory. In the example below, we use the manually created
  swagger.json.manual as a template, and output to the `static/` directory.


  ```shell

  flaskswagger server:app --template static/swagger.json.manual --out-dir
  static/

  ```

  Also, you can ask flaskswagger to add host and basePath to your swagger
  spec:  


  ```shell

  flaskswagger server:app --host localhost:5000 --base-path /v1

  ```


  Acknowledgements


  Flask-swagger builds on ideas and code from
  [flask-sillywalk](https://github.com/hobbeswalsh/flask-sillywalk) and
  [flask-restful-swagger](https://github.com/rantav/flask-restful-swagger)


  Notable forks


  [Flasgger](https://github.com/rochacbruno/flasgger)
Yelp/swagger_spec_validator: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2701:9FA6:777FC3:F3F946:6500FB11.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
tminglei/binder-swagger-java: >
  # binder-swagger-java


  [![Build
  Status](https://travis-ci.org/tminglei/binder-swagger-java.svg?branch=master)](https://travis-ci.org/tminglei/binder-swagger-java)


  `binder-swagger-java` is a simple api management solution, which let api
  maintainence and dev based on api easily.



  ## Features

  - lightweight, less than 3000 line codes (framework + built-in route/fake data
  generating)

  - based on `form-binder-java`, allowing dynamic objects in operation's
  parameter/response definitions

  - directly integrate with `swagger-models`, allowing to operate swagger object
  when necessary

  - can generate mock response w/ fake data on demand for unimplemented api
  operations

  - high customizable, you can replace almost all of the core components



  ## How it works

  You define the api meta data in classes' static code blocks, then it was
  collected to a static global swagger object when class scan/loading, so when
  requested, the program can serve it right now.  

  _With swagger.json, the swagger-ui can render the API menu in the browser.
  Then you can browse, fill parameters and send to/receive from service impls
  (p.s. the service urls were included in swagger.json)._


  ![binder-swagger
  description](https://raw.githubusercontent.com/tminglei/binder-swagger-java/master/binder-swagger-java.png)


  > _p.s. based on
  [`form-binder-java`](https://github.com/tminglei/form-binder-java) and
  [`swagger-models`](https://github.com/swagger-api/swagger-core),
  `binder-swagger-java` enable you to define dynamic data structures and operate
  the swagger object directly when necessary, so it's more expressive in
  theory._



  ## How to use it

  #### 0) add the dependency to your project:

  ```xml

  <dependency>
      <groupId>com.github.tminglei</groupId>
      <artifactId>binder-swagger-java</artifactId>
      <version>0.8.0</version>
  </dependency>

  ```

  #### 1) define and register your api operations:

  ```java

  // in `PetResource.java`

  static Mapping<?> petStatus = $(text(oneOf(Arrays.asList("available",
  "pending", "sold"))))
      .desc("pet status in the store").example("available").$$;
  static Mapping<?> pet = $(mapping(
      field("id", $(vLong()).desc("pet id").example(gen("petId").or(gen(() -> faker.number().randomNumber()))).$$),
      field("name", $(text(required())).desc("pet name").$$),
      field("category", attach(required()).to($(mapping(
            field("id", vLong(required())),
            field("name", text(required()))
      )).refName("category").desc("category belonged to").$$)),
      field("photoUrls", $(list(text())).desc("pet's photo urls").example(Arrays.asList("http://example.com/photo1")).$$),
      field("tags", $(list(text())).desc("tags for the pet").example(Arrays.asList("tag1", "tag2")).$$),
      field("status", petStatus)
  )).refName("pet").desc("pet info").$$;


  static SharingHolder sharing = sharing().pathPrefix("/pet").tag("pet");


  static {
      sharing.operation(GET, "/{petId}")
          .summary("get pet by id")
          .parameter(param(longv()).in("path").name("petId").example(1l))
          .response(200, response(pet))
          .response(404, response().description("pet not found"))
          .notImplemented() // MARK IT `notImplemented`, THEN `binder-swagger-java` WILL GENERATE MOCK RESPONSE FOR YOU
      ;
  }

  @GET

  @Path("/{petId}")

  public Response getPetById(@PathParam("petId") String petId) throws
  NotFoundException, SQLException {

  ...

  ```

  #### 2) supplement your other swagger info:

  ```java

  // in `Bootstrap.java`

  static {  // for swagger
      swagger().info(info()
          .title("Swagger Sample App")
          .description("This is a sample server Petstore server.  You can find out more about Swagger " +
                "at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, " +
                "you can use the api key `special-key` to test the authorization filters.")
          .termsOfService("http://swagger.io/terms/")
          .contact(contact().email("apiteam@swagger.io"))
          .license(license().name("Apache 2.0")
                .url("http://www.apache.org/licenses/LICENSE-2.0.html")
          )
      ).host("localhost:8002")
      .basePath("/api")
      .consumes("application/json")
      .produces("application/json")
      .securityDefinition("api_key", apiKeyAuth("api_key", In.HEADER))
      .securityDefinition("petstore_auth", oAuth2()
            .implicit("http://petstore.swagger.io/api/oauth/dialog")
            .scope("read:pets", "read your pets")
            .scope("write:pets", "modify pets in your account")
      ).tag(tag("pet").description("Everything about your Pets")
            .externalDocs(externalDocs().description("Find out more").url("http://swagger.io"))
      ).tag(tag("store").description("Access to Petstore orders")
      ).tag(tag("user").description("Operations about user")
            .externalDocs(externalDocs().description("Find out more about our store").url("http://swagger.io"))
      );
  }

  ```

  #### 3) configure the filter, which will serv the `swagger.json`:

  ```xml

  // in `web.xml`

  <filter>
      <filter-name>SwaggerFilter</filter-name>
      <filter-class>com.github.tminglei.swagger.SwaggerFilter</filter-class>

      <!-- enable/disable swagger, default value: true
      <init-param>
          <param-name>enabled</param-name>
          <param-value>false</param-value>
      </init-param>
      -->

      <init-param>
          <param-name>scan-packages-and-classes</param-name>
          <param-value>com.example.resource; com.example.Bootstrap</param-value>
      </init-param>

      <!-- specify the requestURI relative to base path, to fetch your swagger json, default '/swagger.json'
      <init-param>
          <param-name>swagger-uri</param-name>
          <param-value>/swagger.json</param-value>
      </init-param>
      -->

      <!-- configure your custom mapping converter
      <init-param>
          <param-name>mapping-converter</param-name>
          <param-value>com.company.pkg.MyMappingConverter</param-value>
      </init-param>
      -->

      <!-- enable/disable mock data generation, default value: true
      <init-param>
          <param-name>fake-enabled</param-name>
          <param-value>false</param-value>
      </init-param>
      -->

      <!-- configure your custom url router used by `binder-swagger-java`
      <init-param>
          <param-name>url-router</param-name>
          <param-value>com.company.pkg.MyRouter</param-value>
      </init-param>
      -->

      <!-- configure your custom data writer used by `binder-swagger-java`
      <init-param>
          <param-name>data-writer</param-name>
          <param-value>com.company.pkg.MyDataWriter</param-value>
      </init-param>
      -->
  </filter>

  <filter-mapping>
      <filter-name>SwaggerFilter</filter-name>
      <url-pattern>/api/*</url-pattern>
  </filter-mapping>

  ...

  ```



  ##### That's all. Enjoy it!



  > For more usage details, pls check the example project
  [here](https://github.com/tminglei/binder-swagger-java/tree/master/example/java-jaxrs).



  ## Q & A

  **Q:** Why use static code blocks to associate/register operation meta info
  instead of annotations?  

  **A:** Well, because we can't use annotations here. Annotation requires static
  defined data types, but we didn't define java beans in our project.  

  _(p.s. because of this, we can't also use existing frameworks, like
  `springfox`.)_



  ## License

  The BSD License, Minglei Tu &lt;tmlneu@gmail.com&gt;
thebignet/swagger-codegen-gradle-plugin: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AAD:0B2D:1EAE29:3EE227:6500FB94.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
striglia/pyramid_swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AB9:33D2:1E22E0:3DE969:6500FB87.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
kaizhu256/node-swagger-mongodb: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B62:585F:7A320E:F935B2:6500FB46.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
krakenjs/swaggerize-express: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B46:33D2:1DE6A4:3D6D35:6500FB4E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
khrt/Raisin: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B71:303E:7CD0C0:FE9531:6500FB48.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
mobilcom-debitel/pokemock: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2718:09A2:B0018E:164CAE4:6500FB5A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fleekjs/fleek-validator: >-
  {"message":"Not
  Found","documentation_url":"https://docs.github.com/rest/repos/contents#get-a-repository-readme"}
oatpp/oatpp-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B77:0E33:21BE7E:451A09:6500FB66.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
zaaack/koa-joi-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E56B:52BF:A744E1:153850A:6500FBAB.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
ruby-grape/grape-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A8E:9660:9CB36F:13E9EDE:6500FB74.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
apigee-127/swagger-tools: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2705:2749:789422:F5AF73:6500FB18.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
metosin/fnhouse-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6D:2FC5:9FCD4D:1449E16:6500FB55.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
yonaskolb/SwagGen: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E553:03EB:9CD9A0:13EC488:6500FBA9.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
jolie/jester: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B61:266F:78EF16:F6C3CA:6500FB45.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Yelp/bravado-core: >
  .. image::
  https://github.com/Yelp/bravado-core/workflows/build/badge.svg?branch=master
    :target: https://github.com/Yelp/bravado-core/actions?query=workflow%3Abuild

  .. image:: https://img.shields.io/coveralls/Yelp/bravado-core.svg
    :target: https://coveralls.io/r/Yelp/bravado-core

  .. image:: https://img.shields.io/pypi/v/bravado-core.svg
      :target: https://pypi.python.org/pypi/bravado-core/
      :alt: PyPi version

  .. image:: https://img.shields.io/pypi/pyversions/bravado_core.svg
      :target: https://pypi.python.org/pypi/bravado-core/
      :alt: Supported Python versions

  bravado-core

  ============


  About

  -----


  bravado-core is a Python library that adds client-side and server-side support

  for the `OpenAPI Specification v2.0
  <https://github.com/OAI/OpenAPI-Specification>`__.


  Features

  --------

  * OpenAPI Specification schema validation

  * Marshaling, transformation, and validation of requests and responses

  * Models as Python classes or dicts

  * Custom formats for type conversion


  Documentation

  -------------


  Documentation is available at `readthedocs.org
  <http://bravado-core.readthedocs.org>`__



  Installation

  ------------


  ::

      $ pip install bravado-core


  Related Projects

  ----------------

  * `bravado <https://github.com/Yelp/bravado>`__

  * `pyramid-swagger <https://github.com/striglia/pyramid_swagger>`__

  * `swagger-spec-validator <https://github.com/Yelp/swagger_spec_validator>`__


  Development

  ===========


  | Code is documented using `Sphinx <http://sphinx-doc.org/>`__.

  | `virtualenv <http://virtualenv.readthedocs.org/en/latest/virtualenv.html>`__
  is recommended to keep dependencies and libraries isolated.

  | `tox <https://tox.readthedocs.org/en/latest/>`__ is used for standardized
  testing.


  Setup

  -----


  ::

      # Run tests
      tox

      # Install git pre-commit hooks
      .tox/py310/bin/pre-commit install


  Contributing

  ------------


  1. Fork it ( http://github.com/Yelp/bravado-core/fork )

  2. Create your feature branch (``git checkout -b my-new-feature``)

  3. Add your modifications

  4. Add short summary of your modifications on ``CHANGELOG.rst``

  5. Commit your changes (``git commit -m "Add some feature"``)

  6. Push to the branch (``git push origin my-new-feature``)

  7. Create new Pull Request


  License

  -------


  | Copyright (c) 2013, Digium, Inc. All rights reserved.

  | Copyright (c) 2014-2015, Yelp, Inc. All rights reserved.


  Bravado is licensed with a `BSD 3-Clause

  License <http://opensource.org/licenses/BSD-3-Clause>`__.
unicredit/sbt-swagger-codegen: >
  # SBT Swagger Code Generator


  ## Overview


  Like the official
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) this project
  aims to generate Scala source code from [Swagger 2.0
  Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  compliant API descriptions.

  Moreover, you can do it directly within an `sbt` project.


  ## Compatibility


  This code generator is designed specifically for Swagger Spec Version 2.0.
  Moreover, it relies on [Play! Framework](http://www.playframework.com/) 2.7
  for Json marshalling/unmarshalling, server- and client-side code.


  ## Install


  Current release is
  [`0.0.12`](https://github.com/unicredit/sbt-swagger-codegen/tree/0.0.12)


  If you want to try the latest version on `master`, first clone this project
  and `publishLocal` it.


  Enable it inside your `project\plugins.sbt` like this:


  `addSbtPlugin("eu.unicredit" % "sbt-swagger-codegen" % "0.1.0-SNAPSHOT")`


  Enable it in your `build.sbt` like this:


  `enablePlugins(SwaggerCodegenPlugin)`


  ## Quick start


  For a *super fast* hands-on tutorial refer to the related examples and check
  out
  [sbt-swagger-codegen-examples](https://github.com/unicredit/sbt-swagger-codegen-examples).


  ## How it works


  By default, the plugin will assume that you have put your `yaml` Swagger
  specification files under `src/main/swagger`.


  If so, then you can just run `swaggerModelCodeGen` task and it will generate
  your *models* as case classes and [Play Framework](www.playframework.com)
  [Formats](https://www.playframework.com/documentation/2.5.x/ScalaJsonCombinators#Format)
  for them (for json serialization).


  ## Tasks


  All available tasks from the plugin


  - `swaggerModelCodeGen`  -> generated code for model classes

  - `swaggerServerCodeGen` -> generates Play Framework code

  - `swaggerClientCodeGen` -> generates client code using `play-ws`

  - `swaggerClean` -> cleans up already generated code


  The `swaggerModelCodeGen`, `swaggerServerCodeGen` and `swaggerClientCodeGen`
  will run automatically when the swagger sources change.


  ## Keys (and defaults)


  These keys influence properties of the generated code itself:


  - `swaggerSourcesDir` -> "/src/main/swagger" (path where to search for swagger
  files)

  - `swaggerCodeGenPackage` -> "swagger.codegen" (package name of the generated
  sources)

  - `swaggerModelFileSplitting` -> "oneFilePerSource" (in model generation how
  to group classes in '.scala' files available options are "oneFilePerSource"
  "oneFilePerModel")

  - `swaggerCodeProvidedPackage` -> "com.yourcompany" (where you will provide
  business logic server method implementation)


  These keys determine where generated files will be put:


  - `swaggerModelCodeTargetDir` ->
  "target/scala-2.1x/src_managed/src/main/swagger/model" (path where to put
  generated model files)

  - `swaggerClientCodeTargetDir` ->
  "target/scala-2.1x/src_managed/src/main/swagger/client" (path where to put
  generated client code files)

  - `swaggerServerCodeTargetDir` ->
  "target/scala-2.1x/src_managed/src/main/swagger/server" (path where to put
  generated server code files)


  These keys can be used to determine what kind of code should be generated:


  - `swaggerGenerateModel` -> true (to be disabled if you do not want model
  classes to be generated automatically when swagger source code changes)

  - `swaggerGenerateJsonRW` -> true (if you want to generate json Format for
  your model case classes)

  - `swaggerGenerateClient` -> false (enable this if you want client code to ge
  generated automatically when swagger source code changes)

  - `swaggerGenerateServer` -> false (enable this if you want client code to ge
  generated automatically when swagger source code changes)


  Moreover, you can extend this plugin by providing alternative implementations
  of the generators via:


  - `swaggerModelCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultModelGenerator() (the class used to
  generate the model classes)

  - `swaggerJsonCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultJsonGenerator() (the class used to
  generate the json marshaller/unmarshaller)

  - `swaggerServerCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultServerGenerator() (the class used to
  generate the Server classes)

  - `swaggerClientCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultClientGenerator() (the class used to
  generate the client classes)


  ## Dependencies


  - scala version 2.12.X

  - [play-ws-standalone-json
  1.1.3](http://mvnrepository.com/artifact/com.typesafe.play/play-ws-standalone-json)

  - [play-ahc-ws-standalone
  1.1.3](http://mvnrepository.com/artifact/com.typesafe.play/play-ahc-ws-standalone)
  (only if you use client)


  ### Limitations


  At the moment the project is developed to fulfill some internal projects
  needs, so do not expect it to cover all the corner cases of the Swagger Spec
  (i.e. some primitive types in body req or resp).


  ## The road ahead


  We are actively working with and on this project, trying to overcome any
  arising limitations and support all Swagger-spec properties we need.

  PRs are really welcome and please open an Issue if you find that something is
  not working.


  ## Authors


  * Andrea Peruffo ([@andreaTP](https://github.com/andreaTP))

  * Francesco Montecuccoli Degli Erri ([@fralken](https://github.com/fralken))

  * Marco Firrincieli ([@mfirry](https://github.com/mfirry))


  ### Acknowledgements


  Thanks to Daniel Wunsch ([@dwunsch](https://github.com/dwunsch)),
  [@dvirf](https://github.com/dvirf) and Reto Habluetzel
  ([@rethab](https://github.com/rethab)) for their valuable contributions.


  *** This is a work in progress and we are not done with it! ***
MicroarrayTecnologia/spec-synthase: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2733:2A1E:A2EAA9:14A97BA:6500FAFE.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fleekjs/fleek-router: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273F:6DD3:7BCD2A:FC8F97:6500FB36.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Trax-air/swagger-stub: >
  .. image:: https://travis-ci.org/Trax-air/swagger-stub.svg?branch=master
     :alt: Travis status
     :target: https://travis-ci.org/Trax-air/swagger-stub
  .. image:: https://badges.gitter.im/Trax-air/swagger-stub.svg
    :alt: Join the chat at https://gitter.im/Trax-air/swagger-stub
    :target: https://gitter.im/Trax-air/swagger-stub?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-stub.svg
      :target: https://pypi.python.org/pypi/swagger-stub/

  swagger-stub

  ==============


  Swagger-stub create automatically a stub of your swagger REST API. This stub
  can be used anywhere you want like in a pytest fixture for your unit test.


  In addition of mocking your API, you can mock some call, and check every call
  that have been made to the API.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  * https://github.com/Trax-air/swagger-tester: Auto-test your swagger API in
  your unit tests. All test calls are generated by your swagger file.

  * https://github.com/Trax-air/swagger-aggregator: Aggregate several swagger
  specs into one. Useful for your API gateways!

  * https://github.com/Trax-air/swagger-parser: A helper that parses swagger
  specs. You can access the HTTP actions / paths and some example data


  Example Usage

  -------------


  .. code:: python

    import pytest
    import requests

    from swagger_stub import swagger_stub

    # This is the fixture of your stub
    # You only need to specify the path of the swagger file and the address
    # where you want to bind your stub.
    @pytest.fixture
    def test_stub():
        return swagger_stub([('swagger.yaml', 'http://foo.com')]).next()

    # Then you can use this fixture anywhere you want like your API is really running.
    def test_swagger_stub(test_stub):
        # Get a definition example
        test_stub.definitions['Foo']

        # Check a simple call
        response = requests.get('http://foo.com/v1/bar/')
        assert response.status_code == 200
        assert response.json() == {
          'foo': 'bar'
        }

        # Check that an invalid body cause an error
        response = requests.post('http://foo.com/v1/bar/', data='invalid data')
        assert response.status_code == 400

        # Mock a call
        test_stub.add_mock_call('get', '/test', {'mock': 'call'})
        response = requests.get('http://foo.com/v1/test')
        assert response.json() == {'mock': 'call'}

        # Set some side_effect like in the mock library
        test_stub.add_mock_side_effect('get', '/iter', [{'test': '1'}, {'test': '2'}, {'test': '3'}])
        response = requests.get('http://foo.com/v1/iter')
        assert response.json() == {'test': '1'}
        response = requests.get('http://foo.com/v1/iter')
        assert response.json() == {'test': '2'}
        response = requests.get('http://foo.com/v1/iter')
        assert response.json() == {'test': '3'}

        # This side effect will raise a custom error
        test_stub.add_mock_side_effect('get', '/error', Exception)

        with pytest.raises(Exception):
            response = requests.get('http://foo.com/v1/error')

  Documentation

  -------------


  More documentation is available at
  https://swagger-stub.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-stub`


  License

  -------


  swagger-stub is licensed under http://opensource.org/licenses/MIT.
Nexmo/oas_parser: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2735:7B22:203775:42152A:6500FAFE.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
ampedandwired/bottle-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2711:3397:784A43:F58B98:6500FB15.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
vanderlee/PHPSwaggerGen: "# SwaggerGen\nVersion 2.3.21\n\n[![License](https://img.shields.io/github/license/vanderlee/PHPSwaggerGen.svg)]()\n[![Build Status](https://travis-ci.org/vanderlee/PHPSwaggerGen.svg?branch=master)](https://travis-ci.org/vanderlee/PHPSwaggerGen)\n[![Quality](https://scrutinizer-ci.com/g/vanderlee/PHPSwaggerGen/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/vanderlee/PHPSwaggerGen)\n\nCopyright &copy; 2014-2018 Martijn van der Lee [Toyls.com](http://toyls.com).\n\nMIT Open Source license applies.\n\n## Introduction\nSwaggerGen is a PHP library for generating [Swagger](http://swagger.io/) REST\nAPI documentation from PHP source code.\n\nIt reads comments starting with `@rest\\`, containing commands describing the\nAPI as you go.\nWorking with SwaggerGen is intended to be a natural extension to normal\nPHP-documentor style documentation.\nYou can describe a REST API call similar to how you would describe method.\n\nUsing just a few simple commands like `@rest\\endpoint /users` and\n`@rest\\method GET Get a list of all users` gets you a definition of an API.\nBy adding a `@rest\\response 200 array(object(name:string, age:int[0,>, gender:enum(male,female)))`\nstatement, you've just defined exactly what it'll return.\nYou could have also just defined a `User` and do the same with a\n`@rest\\response 200 array(User)` statement or even just `@rest\\response ok [User]`.\n\nSwaggerGen makes it quick and intuitive to write high quality documentation.\n\nUse [Swagger-UI](https://github.com/swagger-api/swagger-ui) to read and test\nyour API, as in this example generated real-time with SwaggerGen:\n[Example](example/docs/) (only available when running on a PHP server).\n\nSwaggerGen is compatible with the latest\n[Swagger 2.0 specification](http://swagger.io/specification/),\nwhich forms the basis of the [Open API Initiative](https://openapis.org/).\n\n## Installation\nRequires PHP 5.4 or greater. PHP 5.3 is supported as long as no more recent\nfeatures are absolutely necessary. There is no guarantee SwaggerGen will\ncontinue to work on PHP 5.3 in the future.\n\nTo install using Composer:\n\n\tcomposer require vanderlee/swaggergen\n\nMake sure you use version 2.x.x or up.\n\nSwaggerGen aims to be PSR-4 compatible, so you should be able to use it in any\npackage manager.\n\n## Using SwaggerGen\nThe easiest part of generating Swagger documentation with SwaggerGen is setting\nit up.\n\n1.\tSet up your (PSR-0, PSR-4 or custom) autoloader to use the SwaggerGen\n\tdirectory.\n\n\tYou can take a look at the autoloader in the example folder if you don't\n\talready have an autoloader.\n\n2.\tCreate an instance of the `/SwaggerGen/SwaggerGen` class.\n\n\tYou can (and are advised to) specify the domainname of your server and the\n\tpath to the API in the constructor.\n\n3.\tCall the `array SwaggerGen->getSwagger(string[] $filenames)` method to\n\tgenerate the documentation.\n\n\tJust provide the files which contain the operation definitions of your API.\n\tIf your API uses other files, just specify an array of directories in the\n\t`SwaggerGen` constructor and these files will be automatically parsed when\n\tneeded.\n\n4.\tYou're done. Your documentation is generated. All that's left to do is\n\toutput it. Store it in a file or return it real-time.\n\nIf you want to use the preprocessor, you'll probably want to call the\n`SwaggerGen->define(string $name, string $value)` method of your `SwaggerGen` instance after\nstep 2 to define preprocessor variable names.\n\nThe following is a typical example:\n\n\t// Assuming you don't already have an autoloader\n\tspl_autoload_register(function ($classname) {\n\t\tinclude_once __DIR__ . $classname . '.php';\n\t});\n\n\t$SwaggerGen = new \\SwaggerGen\\SwaggerGen(\n\t\t$_SERVER['HTTP_HOST'],\n\t\tdirname($_SERVER['REQUEST_URI']),\n\t\t[__DIR__ . '/api']\n\t);\n\t$SwaggerGen->define('admin');\t\t\t\t// admin = 1\n\t$SwaggerGen->define('date', date('Y-m-d'));\t// date = \"2015-12-31\"\n\tif (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n\t\t$SwaggerGen->define('windows');\t// windows = 1 (only if on Windows OS)\n\t}\n\t$swagger = $SwaggerGen->getSwagger(['Example.php']);\n\n\theader('Content-type: application/json');\n\techo json_encode($swagger);\n\n# SwaggerGen class\nThe only class you need to know about is the `SwaggerGen` class in the similarly\nnames `SwaggerGen` namespace.\n\n## `__construct($host = '', $basePath = '', $dirs = array())`\nCreate a new SwaggerGen object with the given `host` and `basePath` and provide\na set of `dirs` to use for scanning for classes that may be referenced\nfrom the sourcecode files you're about to scan.\n*\t`$host` should be the domain name, i.e. `www.example.com`.\n*\t`$basePath` should be the URL path to the root of the API, i.e. `/api/v1`.\n\n## `mixed getSwagger($files, $dirs = array(), $format = self::FORMAT_ARRAY)`\nGenerate Swagger/OpenAPI documentation by scanning the provided list of `files`.\nOptionally you can specify additional `dirs` to scan for class files and\nprovide a `format` to specify how you want to output the documentation.\n\nBy default, the documentation is output as an array, ready for encoding as JSON,\nYAML or for manual post-processing. The following formats are available as\nconstants of the `SwaggerGen` class.\n*\t`FORMAT_ARRAY` output the raw array.\n*\t`FORMAT_JSON` JSON-encoded output (mimetype `application/json`).\n*\t`FORMAT_JSON_PRETTY` JSON-encoded output with a human-friendly layout\n\t(mimetype `application/json`).\n*\t`FORMAT_YAML` YAML (UTF-8 character encoding) output\n\t(mimetype `application/x-yaml` (most common) or `text/yaml`).\n\n## `define($name, $value = 1)`\nDefine a value to be used by the preprocessor commands.\nBy default, it's value will be set to `1`.\n\n## `undefine($name)`\nUndefine a value, so it is no longer recognized by the preprocessor commands.\n\n# Creating documentation\nSwaggerGen takes a number of of source files and scans the comments for\ncommands it understands. The following is a short example of the type of\ncomments SwaggerGen understands:\n\n\t/*\n\t * @rest\\description SwaggerGen 2 Example API\n\t * @rest\\title Example API\n\t * @rest\\contact http://example.com Arthur D. Author\n\t * @rest\\license MIT\n\t * @rest\\security api_key apikey X-Api-Authentication header Authenticate using this fancy header\n\t * @rest\\require api_key\n\t */\n\n## Comments\nAll comments are parsed, this includes both doc-comments (`/** ... */`) and\nnormal comments, both single line (`// ...`) and multi-line (`/* ... */`).\n\nComments that are attached to functions, methods and classes. Any doc-comment\nimmediately preceeding a function, method or class will be attached to that\nfunction, method or class. Other comments will be attached to the function,\nmethod or class containing them. For instance, SwaggerGen comments within a\nfunction will be attached to that function.\n\n## Commands\n\nAll commands must be prefixed with `@rest\\` to distinguish between SwaggerGen\nstatements and normal comment statements and statements from other tools such\nas PHP-Documentor.\n\nAll commands are multi-line by default; any line(s) after the command that do\nnot start with an at-sign (`@`) are automatically appended to the command on the\nprevious line.\n\nYou can reference SwaggerGen documentation for other functions, methods or\nclasses by using the `uses` command. This command lets you specify an other\nfunction, method or class whose documentation to include.\n\nCommands are processed in the order in which they appear. This includes any\ndocumentation referenced with the `uses` command.\n\n## Contexts\nSwaggerGen uses a stack of contexts. Each context represents a certain part of\nthe Swagger documentation that will be generated. Each context supports a few\ncommands which hold meaning within that context.\n\nYou initially start at the Swagger context.\n\nYou can switch contexts using some of the commands available within the current\ncontext. In this manual, whenever a command switches the context, it is\nmarked using '&rArr; Context name' at the end of the command syntax description.\n\nIf a command is not recognized in the current context, the context is removed\nfrom the top of the stack and the previous context tries to handle the command.\nIf no context is able to handle the command, SwaggerGen will report this as an\nerror.\n\n# Preprocessor commands\nSwaggerGen has a limited set of preprocessor statements to remove or change\nparts of the generated documentation at run-time.\n\nThe preprocessor statements are loosely based on the C/C++ preprocessors.\n\nThe work by defining values for variable names and checking whether or not a\nvariable name is defined or checking if a variables name has a specific value.\n\nSwaggerGen currently has no predefined variables, but you can define variables\nyourself by assigning them to the SwaggerGen parser before scanning starts.\n\nPreprocessor statments may be nested and are available for PHP and text.\n\n### `define` *`name [value]`*\nDefine a variable name and optionally assign a value to it.\n\n### `undef` *`name`*\nRemove the definition a variable name.\n\n### `if` *`name [value]`*\nIf the variable name is defined *and*, if provided, it's value is equal to\nthe specified value, then process all following SwaggerGen commands upto\nthe next preprocessor command.\nOtherwise, do not process those commands.\n\n### `ifdef` *`name`*\nIf the variable name is defined, then process all following SwaggerGen\ncommands upto the next preprocessor\tcommand.\nOtherwise, do not process those commands.\n\n### `ifndef` *`name`*\nIf the variable name is *not* defined, then process all following SwaggerGen\ncommands upto the next preprocessor\tcommand.\nOtherwise, do not process those commands.\n\n### `else`\nIf the previous `if...` or `elif` preprocessor command did *not* match,\nthen process all following SwaggerGen commands upto the next preprocessor\ncommand.\nOtherwise, do not process those commands.\n\n### `elif` *`name [value]`*\nIf the previous `if...` or `elif` preprocessor command did *not* match\n*and* if the variable name is defined *and*, if provided, it's value is\nequal to the specified value, then process all following SwaggerGen\ncommands upto the next preprocessor command.\nOtherwise, do not process those commands.\n\n### `endif`\nEnd the previous `if...`, `elif` or `else` preprocessor command's block of\nSwaggerGen commands.\n\n# SwaggerGen context and commands\nOrdered alphabetically for reference\n\nThe following commands can be used from within any context.\n\n### `uses` *`reference`*\nInclude a reference to another function, method or class.\n\nFor example:\n*\t`uses functionName`\n*\t`uses self::staticMethodName`\n*\t`uses $this->methodName`\n*\t`uses ClassName::staticMethodName`\n*\t`uses ClassName->methodName`\n\nSwaggerGen makes no distinction between the `self` and `this` or between\nthe static and dynamic `::` and `->`. These can be interchanged without\nany impact. Though it is advised to stick to the proper terms.\n\nClass inheritance is used if a method cannot be found within the indicated\nclass.\n\nalias: `see`\n\n### `x-[...]` *`data`*\nAdd a custom extension (starting with `x-`) to the current context.\n\nExtensions have no additional functionality and are treated as raw blobs of \ntext data.\n\n## BodyParameter\nRepresents a body parameter.\n\nFor a list of commands, read the chapter on  **Parameter definitions**.\nThe available command depend on the particular type.\n\n## Contact\nContains the contact information for the API.\n\n### `email` *`email`*\nSet the email address of the contact person.\n\n### `name` *`text ...`*\nSet the name of the contact person.\n\n### `url` *`email`*\nSet the URL where users can contact the maintainer(s).\n\n## Error\nRepresents a response with an error statuscode.\n\nSee the Response context for commands.\n\n## ExternalDocumentation\nContains an URL reference to additional documentation of the context which\ncreated this context.\n\n### `description` *`text ...`*\nSet the description text for this external documentation.\n\n### `url` *`url`*\nSet the URL to the external documentation.\n\n## Header\nRepresents a response header.\n\n### `description` *`text ...`*\nSet the description text of this response header.\n\n## Info\nContains non-technical information about the API, such as a description,\ncontact details and legal small-print.\n\n### `contact` *`[url] [email] [name ...]`* &rArr; Contact\nSet the contactpoint or -person for this API.\nYou can specify the URL, email address and name in any order you want.\nThe URL and email address will be automatically detected, the name will\nconsist\tof all text remaining (properly separated with whitespace).\n\n### `description` *`text ...`*\n\tSet the description for the API.\n\n### `license` *`[url] [name ...]`* &rArr; License\nSet the license for this API.\nYou can specify the URL in name in any order you want.\nIf you omit the URL, you can use any number of predefined names, which are\nautomatically expanded to a full URL, such as `gpl`, `gpl-2.1` or `bsd`.\n\n### `terms` *`text ...`*\nSet the text for the terms of service of this API.\n\nalias: `tos`, `termsofservice`\n\n### `title` *`text ...`*\nSet the API title.\n\n### `version` *`number`*\nSet the API version number.\n\n## License\nRepresents the name and URL of the license that applies to the API.\n\n### `name` *`text ...`*\nSet the name of the license.\nIf you haven't set a URL yet, a URL may be automatically set if it is one\nof a number of recognized license names, such as `mpl` or `apache-2`\n\n### `url` *`text ...`*\nSet the URL of the license.\n\n## Operation\nDescribes an operation; a call to a specifc path using a specific method.\n\n### `body`/`body?` *`definition name [description ...]`* &rArr; BodyParameter\nAdd a new form Parameter to this operation.\n\nUse `body` to make the parameter required.\nUse `body?` (with a question mark) to make the parameter optional.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `consumes` *`mime1 [mime2 ... mimeN]`*\nAdds mime types that this operation is able to understand.\nE.g. \"application/json\",  \"multipart/form-data\" or\n\"application/x-www-form-urlencoded\".\n\n### `deprecated`\nMark this operation as deprecated.\n\n### `description` *`text ...`*\nSet the long description of the operation.\n\n### `doc` *`url [description ...]`* &rArr; ExternalDocumentation\nSet an URL pointing to more documentation.\n\nalias: `docs`\n\n### `error` *`statuscode [description]`* &rArr; Error\nAdd a possible error statuscode that may be returned by this\noperation, including an optional description text.\n\nIf no description is given, the standard reason for the statuscode will\nbe used instead.\n\n### `errors` *`statuscode1 [statuscode2 ... statuscodeN]`*\nAdd several possible error statuscodes that may be returned by this\noperation.\n\n### `form`/`form?` *`definition name [description ...]`* &rArr; Parameter\nAdd a new form Parameter to this operation.\n\nUse `form` to make the parameter required.\nUse `form?` (with a question mark) to make the parameter optional.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `header`/`header?` *`definition name [description ...]`* &rArr; Parameter\nAdd a new header Parameter to this operation.\n\nUse `header` to make the parameter required.\nUse `header?` (with a question mark) to make the parameter optional.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `id` *`name`*\nSet an operation id for this operation.\n\n`name`  The ID name must be uniue among all operations in the document.\nIf you specify an ID that has already been set, an exception will be thrown.\n\n### `parameter` *`name`*\nAdd a new parameter by referencing the name of a globally defined parameter.\n\n`name`  The globally unique name of the parameter reference.\n\nalias: `param`\n\n### `path` *`definition name [description ...]`* &rArr; Parameter\nAdd a new path Parameter to this operation.\n\n`path` parameters are always required; they cannot be optional.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `produces` *`mime1 [mime2 ... mimeN]`*\nAdds mime types that this operation is able to produce.\nE.g. \"application/xml\" or \"application/json\".\n\n### `query`/`query?` *`definition name [description ...]`* &rArr; Parameter\nAdd a new query Parameter to this operation.\n\nUse `query` to make the parameter required.\nUse `query?` (with a question mark) to make the parameter optional.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `require` *`security1 [security2 ... securityN]`*\nSet the required security scheme(s) for this operation.\n\nSecurity schemes can be defined in the **Swagger** context.\n\n### `response` *`statuscode definition description`* &rArr; Response\nAdds a possible response status code with a definition of the data that\nwill be returned. Though for error statuscodes you would typically use\nthe `error` or `errors` commands, you can use this command for those\nstatus codes as well, including a return definition.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `response` *`reference statuscode`*\nReference a response definition.\n\nThe `reference` name must exist as a Response definition defined in the\n**Swagger** context.\n\nNote that this is one of two possible signatures for the `response` command.\n\n### `schemes` *`scheme1 [scheme2 ... schemeN]`*\nAdd any number of schemes to the operation.\n\n### `summary` *`text ...`*\nSet the a short summary description of the operation.\n\n### `tags` *`tag1 [tag2 ... tagN]`*\nAdd any number of tags to the operation.\n\n## Parameter\nRepresents either a form, query, header of path parameter.\n\nFor a list of commands, read the chapter on  **Parameter definitions**.\nThe available command depend on the particular type.\n\n## Path\nRepresents a URL endpoint or Path.\n\n### `operation` *`method [summary ...]`* &rArr; Operation\nAdd a new operation to the most recently specified endpoint.\nMethod can be any one of `get`, `put`, `post`, `delete` or `patch`.\n\n### `description` *`text ...`*\nIf a tag exists, sets the description for the tag, otherwise to nothing.\n\n## Response\nRepresents a response.\n\n### `example` *`name content`*\nAdd an example to the response.\n\n`name` single-word (without spaces) name of the example. Unique per Response.\n\n`content` content of any type. Either a string, JSON object (quotes optional),\n`false`, `true`, `null` or a number (with or without floating point).\n\n### `header` *`type name [description]`* &rArr; Header\nAdd a header to the response.\n\n`type` must be either `string`, `number`, `integer`, `boolean` or `array`.\n\n`name` must be a valid HTTP header name. I.e. `X-Rate-Limit-Limit`.\n\n## Schema\nRepresents a definitions of a type, such as an array.\n\n### `doc` *`url [description ...]`* &rArr; ExternalDocumentation\nSet an URL pointing to more documentation.\n\nalias: `docs`\n\n### `title` *`text ...`*\nSet the title of this schema.\n\n### `description` *`description ...`*\nSet the description of this schema.\n\nFor a list of other commands, read the chapter on  **Parameter definitions**.\nThe available command depend on the particular type.\n\n## SecurityScheme\nRepresents a single way of authenticating the user/client to the server.\nYou specify the type of security scheme and it's settings using the `security`\ncommand from the Swagger context.\n\n### `description` *`text ...`*\nSet the description.\n\n### `scope` *`name [description ...]`*\nAdd a new oAuth2 scope name with optional description.\n\n## Swagger\nRepresents the entire API documentation.\nThis is the initial context for commands.\n\n### `consumes` *`mime1 [mime2] ... [mimeN]`*\nAdds mime types that the API is able to understand. E.g.\n\"application/json\",  \"multipart/form-data\" or\n\"application/x-www-form-urlencoded\".\n\nalias: `consume`\n\n### `contact` *`[url] [email] [name ...]`* &rArr; Contact\nSet the contactpoint or -person for this API.\nYou can specify the URL, email address and name in any order you want.\nThe URL and email address will be automatically detected, the name will consist\nof all text remaining (properly separated with whitespace).\n\n### `definition` *`name` [type]* &rArr; Schema\nStart definition of a Schema using the reference name specified. \n\nDefinitions can be specified as read only using exclamation point at the end of\nthe definition command. E.g. `definition! user` will create a user model that\nwill appear in GET responses and be omitted from POST, PUT, and PATCH requests.\n\nWhen no type is specified, `definition` creates an `object` definition. You can\nspecify `type` to create definitions for other types:\n\n    definition PositiveInteger integer[1,>\n    \n    definition ArrayOfString array(string)\n\nSee the chapter on  **Parameter definitions** for a detailed description of all\nthe possible definition types.\n\nalias: `model` (for historical reasons)\n\n### `description` *`text ...`* &rArr; Info\nSet the description for the API.\n\n### `doc` *`url [description ...]`* &rArr; ExternalDocumentation\nSet an URL pointing to more documentation.\n\nalias: `docs`\n\n### `endpoint` *`/path [tag] [description ...]`* &rArr; Path\nCreate an endpoint using the /path.\nIf tag is set, the endpoint will be assigned to the tag group of that name.\nIf a description is set, the description of the group will be set.\n\n### `license` *`[url] [name ...]`* &rArr; License\nSet the license for this API.\nYou can specify the URL in name in any order you want.\nIf you omit the URL, you can use any number of predefined names, which are\nautomatically expanded to a full URL, such as `gpl`, `gpl-2.1`, `mit` or `bsd`.\n\n### `produces` *`mime1 [mime2] ... [mimeN]`*\nAdds mime types that the API is able to produce. E.g. \"application/xml\" or\n\"application/json\".\n\nalias: `produce`\n\n### `require` *`name [scopes]`*\nSet the required security scheme names.\nIf multiple names are given, they must all apply.\nIf an `oath2` scheme is specified, you may\n\n### `response` *`name definition description`* &rArr; Response\nAdds a response definition with a schema definition of the data that will be\nreturned. You can omit the `definition` by specifying `null` instead.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `schemes` *`scheme1 [scheme2] ... [schemeN]`*\nAdds protocol schemes. E.g. \"http\" or \"https\".\n\nalias: `scheme`\n\n### `security` *`name type [params ...]`* &rArr; SecurityScheme\nDefine a security method, available to the API and individual operations.\nName can be any random name you choose. These names will be used to reference\nto the security shemes later on.\n\n`Type` must be either `basic`, `apikey` or `oauth2`.\nThe parameters depend on the type.\n\nFor `basic`, you can only specify a description text.\n\nFor `apikey`, you must first specify a name to use for the query parameter or\nheader, then use either `query` or `header` to set the type of apikey.\nOptionally followed by a description text.\n\nFor `oauth2`, you must set the flow type `implicit`, `password`, `application`\nor `accesscode`. For type `accesscode` you must specify two URL's, for\nauthorization and token respectively, for the other types only one URL is\nneeded. Optionally follow with a description text. You may need to add scopes\nusing the `scope` command afterwards.\n\n*\t`security` *`name`* `basic` *`[description ...]`*\n*\t`security` *`name`* `apikey` *`header-name`* `header` *`[description ...]`*\n*\t`security` *`name`* `apikey` *`query-variable`* `query` *`[description ...]`*\n*\t`security` *`name`* `oauth2 implicit` *`auth-url [description ...]`*\n*\t`security` *`name`* `oauth2 password` *`token-url [description ...]`*\n*\t`security` *`name`* `oauth2 application` *`token-url [description ...]`*\n*\t`security` *`name`* `oauth2 accesscode` *`auth-url token-url [description ...]`*\n\n### `tag` *`tag [description ...]`* &rArr; Tag\nSpecifies a tag definition; essentially the category in which an endpoint path\nwill be grouped together.\n\nalias: `api` (for historical reasons).\n\n### `terms` *`text ...`* &rArr; Info\nSet the text for the terms of service of this API.\n\nalias: `tos`, `termsofservice`\n\n### `title` *`text ...`* &rArr; Info\nSet the API title.\n\n### `version` *`number`* &rArr; Info\nSet the API version number.\n\n## Tag\nA tag is used to group paths and operations together in logical categories.\n\n### `description` *`text ...`*\nSet the description.\n\n### `doc` *`url [description ...]`* &rArr; ExternalDocumentation\nSet an URL pointing to more documentation.\n\nalias: `docs`\n\n# Parameter definitions\n\nAll parameters can handle the `example` command:\n\n### Commands\n*\t**`example` *content*** Set the example content of any type.\nEither a string, JSON object (quotes optional), `false`, `true`, `null` or a\nnumber (with or without floating point).\n\n## string, byte, binary, password\nRepresents a text.\n\n\ttype(pattern)[0,>=default\n\n*\ttype: `string` or `binary`,\n*\trange: [min,max].\n\tUse `[` or `]` for inclusive and `<` or `>` for\texclusive.\n\tEmpty `min` value means zero.\n\tEmpty `max` value means infinity.\n*\tdefault: any valid text not containing whitespace.\n\n### Commands\n*\t**`default` *value*** Set the default value.\n*\t**`enum` *value1 value2 ... valueN*** Set or add allowed values.\n\n### Examples\n*\t**`string`** A simple text field.\n*\t**`string(^[a-z]{2}-[A-Z]{2}$)`** String matching ISO \"ll-CC\" locale.\n*\t**`string[,256>=red`** A text of at most 255 characters, default to \"red\".\n*\t**`binary[1,8]`** Upto 8 binary digits, requiring atleast one.\n\n\n## int32 (integer, int), int64 (long)\nRepresents numbers without decimals.\n\n\ttype[0,>=default\n\n*\ttype: `integer`, `int`, `int32`, `long` or `int64`.\n*\trange: [min,max].\n\tUse `[` or `]` for inclusive and `<` or `>` for\texclusive.\n\tEmpty `min` or `max` values means infinity.\n*\tdefault: any valid integer.\n\n### Commands\n*\t**`default` *value*** Set the default value.\n*\t**`enum` *value1 value2 ... valueN*** Set or add allowed values.\n*\t**`step` *value*** Set the stepsize between numbers.\n\n### Examples\n*\t**`int`** 32-bit integer without a default or limited range.\n*\t**`long<,0>`** 64-bit negative integers only.\n*\t**`integer[0,>=100`** 32-bit positive integer or zero, default to 100.\n\n\n## float, double\nRepresents floating point numbers (with decimals).\n\n\ttype[0,>=default\n\n*\ttype: `float` or `double`\n*\trange: [min,max].\n\tUse `[` or `]` for inclusive and `<` or `>` for\texclusive.\n\tEmpty `min` or `max` values means infinity.\n*\tdefault: any valid integer.\n\n### Commands\n*\t**`default` *value*** Set the default value.\n*\t**`enum` *value1 value2 ... valueN*** Set or add allowed values.\n*\t**`step` *value*** Set the stepsize between numbers.\n\n### Examples\n*\t**`float`** 32-bit floating point number without a default or limited range.\n*\t**`double<,1>`** 64-bit floating point numbers upto (but not including) 1.\n*\t**`float<0,>=0.1`** 32-bit positive numbers, excluding 0, default to 0.1.\n\n\n## boolean (bool)\nA true/false choice.\n\n\ttype=default\n\n*\ttype: `boolean` or `bool`.\n*\tdefault: `true`, `false`, 1 (true) or 0 (false).\n\n### Commands\n*\t**`default` *value*** Set the default value.\n\n### Examples\n*\t**`boolean`** A basic boolean.\n*\t**`bool=true`** A boolean, default to true.\n\n\n## date, date-time (datetime)\nSpecial type of string which is limited to dates only\n\n\ttype=default\n\n*\ttype: `date`, `date-time` or `datetime`,\n*\tdefault: Any valid date format recognized by the [PHP DateTime object](http://php.net/manual/en/datetime.formats.php).\n\n### Commands\n*\t**`default` *date*** Set the default value.\n\n### Examples\n*\t**`date`** A simple date\n*\t**`datetime=2015-12-31T12:34:56Z`** Date and time set to a default without\n\ta timezone offset.\n*\t**`datetime=2015-12-31T12:34:56.001+01:00`** Date and time set to a default\n\tvalue with fractional seconds and a timezone offset.\n\n## csv (array), ssv, tsv, pipes, multi\nList of items\n\n\ttype(definition)[0,>\n\nAlternative short-hand notation for `array` lists:\n\n\t[definition][0,>\n\n*\ttype: `csv`, `array`, `ssv`, `tsv`, `pipes`, or `multi`.\n*\trange: [min,max].\n\tUse `[` or `]` for inclusive and `<` or `>` for\texclusive.\n\tEmpty `min` value means zero.\n\tEmpty `max` value means infinity.\n*\tdefault: any valid text not containing whitespace.\n*\tdefinition: a definition of the type of the items in the list. It is possible to\n\tdefine lists as items, creating multidimensional arrays.\n\n### Commands\n*\t**`min` *value*** Set the minimum number of items required.\n*\t**`max` *value*** Set the maximum number of items allowed.\n*\t**`items` *definition*** Set the definition of the items in this list.\n\n### Types\n*\t**`csv`** Comma (`,`) separated. I.e. `red,green,blue`. Alias: `array`.\n*\t**`ssv`** Space ( ) separated. I.e. `red green blue`.\n*\t**`tsv`** Tab-separated. I.e. `red\tgreen\tblue`.\n*\t**`pipes`** Pipe (`|`) separated. I.e. `red|green|blue`.\n*\t**`multi`** query-string formatted. I.e. `color=red&color=green&color=blue`.\n\tThis choice is only available for `form` and `query` parameters.\n\n### Examples\n*\t**`csv(string)`** A comma-separated list of strings.\n\n## file\nA file.\n\n\tfile\n\nNo further definition is possible. There are no command.\n\n### Examples\n*\t**`file`** A file.\n\n## object\nObject with properties. Typically used as key-value map\n\n\tobject(definition)[0,>\n\nAlternative short-hand notation:\n\n\t{definition}[0,>\n\n*\ttype: `object`.\n*\trange: [min,max].\n\tUse `[` or `]` for inclusive and `<` or `>` for\texclusive.\n\tEmpty `min` value means zero properties (no minimum).\n\tEmpty `max` value means infinite properties (no maximum).\n*\tdefinition: a comma-separated list of property definitions in the form of\n\t`key:definition`, where `key` can be any sequence of characters except `:` or\n\t`?` or `!`. The `?` means that key is optional. The `!` means the key is read only. \n\tRead only implies optional as well.\n\n### Commands\n*\t**`min` *value*** Set the minimum number of items required.\n*\t**`max` *value*** Set the maximum number of items allowed.\n*\t**`property` *definition name*** Add a required property.\n*\t**`property?` *definition name*** Add an optional property.\n*   **`property!` *definition name*** Add a read only property.\n*   **`discriminator` *propertyName*** Sets the property as a discriminator.\n\tThe property must be required (could not be read only nor optional), but\n\tyou can define it later.\n\n### Examples\n*\t**`object(age:int[18,25>)`** An object containing a single key `age` with\n\tan integer value greater or equal to 18 and less than 25.\n*\t**`object(age:int,name?:string[2,>)`** An object containing an `age` and an\n\toptional `name` string, where the value must be atleast two characters\n\tlong.\n*\t**`object()[4,8]`** An object containing four to eight unknown properties.\n\n## allof\nIntersection type (data must satisfy all base types). May be used for type\ncomposition or to implement inheritance (in conjunction with `discriminator`).\nCould also be used to refine the constraints imposed by the base type.\n\n    allof(definition)\n\n*\tdefinition: a comma-separated list of base types, either as inline\n\tdefinitions or references to another definition\n\n### Commands\n*   **`item` *type*** Add the type to the list of allOf types\n\n### Examples\n*   **`allOf(DataModel,IdModel)`** type composition: effectively creates\n\tDataWithId type.\n*   **`allOf(ModelWithOptionalName,object(name:string))`** type refinement:\n\teffectively makes `name` property required.\n\n## enum\nSpecial type of string which is limited to one of a number of predefined values.\n\n\tenum(value1,value1,...,valueN)=default\n\n*\tvalues: any text not containing whitespace or commas.\n*\tdefault: any of the specified texts.\n\n### Commands\nSee string.\n\n### Examples\n*\t**`enum(red,green,blue)=red`** A string containing either \"red\", \"green\" or\n\t\"blue\", default to \"red\".\n\n## uuid\nSpecial type of string which accepts\n[RFC 4122](https://www.ietf.org/rfc/rfc4122.txt) compliant Universally Unique\nIDentifier (UUID) strings. The default value is validated to ensure only valid\nUUID's are specified.\n\n\tuuid=default\n\n*\tdefault: any of the specified texts.\n\n### Commands\nSee string.\n\n### Examples\n*\t**`uuid=123e4567-e89b-12d3-a456-426655440000`** A uuid string, default to\n\tthe uuid \"123e4567-e89b-12d3-a456-426655440000\".\n\n## refobject\nReference to a globally defined `definition` (a.k.a. `model`) object.\n\n\trefobject(definitionName)\n\nor\n\n\tdefinitionName\n\n*\tdefinitionName: the name of the globally defined `definition`.\n\n### Examples\n*\t**`refobject(Address)`** Reference the a globally defined model named\n\t`Address`.\n*\t**`Address`** Reference the a globally defined model named\n\t`Address`.\n\n### Notes\nUsually, using the definition name alone is good enough.\nUse `refobject(...)` if you are using a name which is also used as a builtin\nparameter type, such as `string` or `object`.\nIt is best practice to start all definition names with an upper case character\n(i.e. `Address`).\nUsing `refobject(...)` also offers the safest forward-compatible strategy if\nyou do not start definition names with upper case (i.e. `address`).\n\n# Appendices\n## Mime types\nSome commands, such as `consumes` and `produces` take mime types as arguments.\nInstead of specifying the full mime types, you can any of the following\npredefined shorthands (case insensitive):\n\n\tfileform\tmultipart/form-data\n\tform\t\tapplication/x-www-form-urlencoded\n\tjson\t\tapplication/json\n\ttext\t\ttext/plain\n\tutf8\t\ttext/plain; charset=utf-8\n\tyml\t\t\tapplication/x-yaml\n\tyaml\t\tapplication/x-yaml\n\tphp\t\t\ttext/x-php\n\txml\t\t\ttext/xml\n\n## Licenses\nA selection of shorthands are available for licenses.\nIf you want another license added to it, please submit an issue or create a\npull request. The file you want to edit is `/SwaggerGen/Swagger/License.php`.\n\nThese are the license shorthands currently available:\n\n\tartistic-1.0\thttp://opensource.org/licenses/artistic-license-1.0\n\tartistic-1\t\thttp://opensource.org/licenses/artistic-license-1.0\n\tartistic-2.0\thttp://opensource.org/licenses/artistic-license-2.0\n\tartistic-2\t\thttp://opensource.org/licenses/artistic-license-2.0\n\tartistic\t\thttp://opensource.org/licenses/artistic-license-2.0\n\tbsd-new\t\t\thttps://opensource.org/licenses/BSD-3-Clause\n\tbsd-3\t\t\thttps://opensource.org/licenses/BSD-3-Clause\n\tbsd-2\t\t\thttps://opensource.org/licenses/BSD-2-Clause\n\tbsd\t\t\t\thttps://opensource.org/licenses/BSD-2-Clause\n\tepl-1.0\t\t\thttp://www.eclipse.org/legal/epl-v10.html\n\tepl-1\t\t\thttp://www.eclipse.org/legal/epl-v10.html\n\tepl\t\t\t\thttp://www.eclipse.org/legal/epl-v10.html\n\tapache-2.0\t\thttp://www.apache.org/licenses/LICENSE-2.0.html\n\tapache-2\t\thttp://www.apache.org/licenses/LICENSE-2.0.html\n\tapache\t\t\thttp://www.apache.org/licenses/LICENSE-2.0.html\n\tgpl-1.0\t\t\thttps://www.gnu.org/licenses/gpl-1.0.html\n\tgpl-1\t\t\thttps://www.gnu.org/licenses/gpl-1.0.html\n\tgpl-2.0\t\t\thttps://www.gnu.org/licenses/gpl-2.0.html\n\tgpl-2\t\t\thttps://www.gnu.org/licenses/gpl-2.0.html\n\tgpl-3.0\t\t\thttp://www.gnu.org/licenses/gpl-3.0.html\n\tgpl-3\t\t\thttp://www.gnu.org/licenses/gpl-3.0.html\n\tgpl\t\t\t\thttp://www.gnu.org/licenses/gpl-3.0.html\n\tlgpl-2.0\t\thttp://www.gnu.org/licenses/lgpl-2.0.html\n\tlgpl-2.1\t\thttp://www.gnu.org/licenses/lgpl-2.1.html\n\tlgpl-2\t\t\thttp://www.gnu.org/licenses/lgpl-2.1.html\n\tlgpl-3.0\t\thttp://www.gnu.org/licenses/lgpl-3.0.html\n\tlgpl-3\t\t\thttp://www.gnu.org/licenses/lgpl-3.0.html\n\tlgpl\t\t\thttp://www.gnu.org/licenses/lgpl-3.0.html\n\tmit\t\t\t\thttp://opensource.org/licenses/MIT\n\tmpl-1.1\t\t\thttps://www.mozilla.org/en-US/MPL/1.1/\n\tmpl-1\t\t\thttps://www.mozilla.org/en-US/MPL/1.1/\n\tmpl-2.0\t\t\thttps://www.mozilla.org/en-US/MPL/\n\tmpl-2\t\t\thttps://www.mozilla.org/en-US/MPL/\n\tmpl\t\t\t\thttps://www.mozilla.org/en-US/MPL/\n\tmspl\t\t\thttps://msdn.microsoft.com/en-us/library/ff648068.aspx\n\n\n# Example\nTo view an example of Swagger documentation generated with SwaggerGen, visit\nthe [Example API documentation](./example/docs/).\n\nThe following is a fragment of code from this example:\n\n\t/**\n\t * @rest\\endpoint /user/{username}\n\t * @rest\\method GET Get a list of all users\n\t * @rest\\path String username Name of the user\n\t * @rest\\see self::request\n\t */\n\tprivate function getUser($name)\n\t{\n\t\t/*\n\t\t * @rest\\model User\n\t\t * @rest\\property int age Age of the user in years\n\t\t * @rest\\property int height Height of the user in centimeters\n\t\t */\n\t\treturn $this->data['users'][$name]; // @rest\\response OK object(age:int[0,100>,height:float) User\n\t}\n"
garethjevans/swagger-codegen-maven-plugin: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5D:2C43:72FAEE:EAFB87:6500FB3C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
noirbizarre/flask-restplus: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6F:6129:AA3D82:1595603:6500FB63.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Trax-air/swagger-parser: >
  .. image:: https://travis-ci.org/Trax-air/swagger-parser.svg?branch=master
     :alt: Travis status
     :target: https://travis-ci.org/Trax-air/swagger-parser 
  .. image:: https://badges.gitter.im/Trax-air/swagger-parser.svg
     :alt: Join the chat at https://gitter.im/Trax-air/swagger-parser
     :target: https://gitter.im/Trax-air/swagger-parser?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-parser.svg
      :target: https://pypi.python.org/pypi/swagger-parser/

  swagger-parser

  ==============


  Swagger-parser is a python module giving you access to some interesting data
  about your swagger file. Like getting a dictionary example from a definition
  name, get the definition of a dictionary, and more.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  * https://github.com/Trax-air/swagger-tester: Auto-test your swagger API in
  your unit tests. All test calls are generated by your swagger file.

  * https://github.com/Trax-air/swagger-stub: A stub you can use in your
  client's unit tests. All the HTTP calls to your swagger API are mocked by
  default. You can also add your own mocked_calls in your test functions.

  * https://github.com/Trax-air/swagger-aggregator: Aggregate several swagger
  specs into one. Useful for your API gateways!


  Example Usage

  -------------


  .. code:: python

    from swagger_parser import SwaggerParser

    parser = SwaggerParser(swagger_path='swagger_path')  # Init with file
    parser = SwaggerParser(swagger_dict={})  # Init with dictionary

    # Get an example of dict for the definition Foo
    parser.definitions_example.get('Foo')

    # Get the definition of a dictionary
    test = {
      'foo': 'bar'
    }
    parser.get_dict_definition(test)

    # Validate the definition of a dict
    parser.validate_definition('Foo', test)

    # Validate that the given data match a path specification
    parser.validate_request('/foo', 'post', body=test, query={'foo': 'bar'})

    # Get the possible return value of a path
    # It will return a dictionary with keys as status_code
    # and value as example of return value.
    parser.get_request_data('/foo', 'post', body=test)

    # Get an example of a correct body for a path
    parser.get_send_request_correct_body('/foo', 'post')

  Documentation

  -------------


  More documentation is available at
  https://swagger-parser.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-parser`


  License

  -------


  swagger-parser is licensed under http://opensource.org/licenses/MIT.
elmiko/pecan-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273B:3185:76C082:F26B50:6500FB30.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
smoketurner/dropwizard-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AA6:5F2B:A9A648:157F8EB:6500FB80.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Trax-air/swagger-tester: >
  .. image:: https://travis-ci.org/Trax-air/swagger-tester.svg?branch=master
     :alt: Travis status
     :target: https://travis-ci.org/Trax-air/swagger-tester
  .. image:: https://badges.gitter.im/Trax-air/swagger-tester.svg
    :alt: Join the chat at https://gitter.im/Trax-air/swagger-tester
    :target: https://gitter.im/Trax-air/swagger-tester?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-tester.svg
      :target: https://pypi.python.org/pypi/swagger-tester/

  swagger-tester

  ==============


  Swagger-tester will test automatically your swagger API. Swagger API made with
  connexion (https://github.com/zalando/connexion) are supported directly
  without running the API server. In the case you use connexion it will
  automatically run a test server from your swagger file.


  To run the test, swagger-tester will detect every path and actions of your
  API. And for each, it will send a request and check if the response match the
  swagger file specification.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  - https://github.com/Trax-air/swagger-stub: A stub you can use in your
  client's unit tests. All the HTTP calls to your swagger API are mocked by
  default. You can also add your own mocked_calls in your test functions.

  - https://github.com/Trax-air/swagger-aggregator: Aggregate several swagger
  specs into one. Useful for your API gateways!

  - https://github.com/Trax-air/swagger-parser: A helper that parses swagger
  specs. You can access the HTTP actions / paths and some example data


  Example Usage

  -------------


  .. code:: python

   from swagger_tester import swagger_test

    # Dict containing the error you don't want to raise.
    # By default, every status_code over other than 1xx, 2xx or 3xx
    # will be considered as an error.
    authorize_error = {
          'post': {
              '/pet/{petId}': [200],
              '/pet': [200]
          },
          'put': {
              '/user/{username}': [200],
              '/pet': [200]
          },
          'delete': {
              '/pet/{petId}': [200],
              '/store/order/{orderId}': [200],
              '/user/{username}': [200]
          }
      }

    # Run the test with connexion
    # An AssertionError will be raise in case of error.
    swagger_test('path_to_your_swagger.yaml', authorize_error=authorize_error)

    # Or if you have a running API
    swagger_test(app_url='http://petstore.swagger.io/v2', authorize_error=authorize_error)

  Documentation

  -------------


  More documentation is available at
  https://swagger-tester.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-tester`


  License

  -------


  swagger-tester is licensed under http://opensource.org/licenses/MIT.
cachecontrol/hippie-swagger: >
  ![hippie-swagger](http://i.imgur.com/icjd94P.png)


  _"The confident hippie"_


  [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)

  [![Build
  Status](https://travis-ci.org/CacheControl/hippie-swagger.svg)](https://travis-ci.org/CacheControl/hippie-swagger)

  [![npm
  version](https://badge.fury.io/js/hippie-swagger.svg)](https://badge.fury.io/js/hippie-swagger)


  ## Synopsis


  ```hippie-swagger``` is a tool for testing RESTful APIs.  In addition to
  validating api behavior, it will fail tests when swagger documentation is
  missing or inaccurate.


  As the test suite runs, any request or response details *not* matching the
  swagger file will throw an appropriate exception, failing the spec.  This
  ensures the swagger definition accurately describes application behavior,
  keeping documentation in sync with reality.


  ```hippie-swagger``` uses [hippie](https://github.com/vesln/hippie) under the
  hood, an excellent API testing tool.


  ## Features


  * All [hippie](https://github.com/vesln/hippie) features included

  * All aspects of swagger file validated; parameters, request/response body,
  paths, etc.

  * Checks for extra parameters, paths, headers, etc not mentioned in the
  swagger file

  * Ensures swagger file accurately describes API behavior

  * Accurate, human readable assertion messages


  ## Installation


  ```

  npm install hippie-swagger --save-dev

  ```


  ## Basic Usage


  ```js

  var hippie = require('hippie-swagger'),
      swagger = require('./my-dereferenced-swagger-file'); // see example for how to dereference swagger

  hippie(app, swagger)

  .get('/users/{username}')

  .pathParams({
    username: 'cachecontrol'
  })

  .expectStatus(200)

  .expectValue('user.first', 'John')

  .expectHeader('cache-control', 'no-cache')

  .end(function(err, res, body) {
    if (err) throw err;
  });

  ```


  ## Usage

  * See [hippie](https://github.com/vesln/hippie) documentation for a
  description of the base api

  * When specifying a url(.get, .post, .patch, .url, etc), use the [swagger
  path](http://swagger.io/specification/#pathsObject)

  * Provide any path variables using [pathParams](#pathparams)


  These aside, use hippie as you normally would; see the
  [example](example/index.js).


  ## Methods


  ### #constructor (Object app, Object swagger, Object [options])


  Test an HTTP app (like express) directly


  ```js

  hippie(app, swagger, options)

  .get('/projects')

  .end(fn);

  ```


  ### #constructor (Object swagger, Object [options])


  Test a remote HTTP app using a fully qualified url


  ```js

  hippie(swagger, options)

  .get('http://localhost:3000/projects')

  .end(fn);

  ```


  ### #pathParams(Object hash)


  Replaces variables contained in the swagger path.


  ```js

  hippie(app, swagger)

  .get('/projects/{projectId}/tasks/{taskId}')

  .pathParams({
    projectId: 123,
    taskId: 99
  })

  .end(fn);

  ```


  ## Options


  To customize behavior, an ```options``` hash may be passed to the
  constructor.  Typically, ```options``` only need to be specified in situations
  where the test covers responses to improper requests (e.g. validating the
  application returns a 422 when a required parameter is not provided).


  ```js

  var options = {
    validateResponseSchema: true,
    validateParameterSchema: true,
    errorOnExtraParameters: true,
    errorOnExtraHeaderParameters: false
  };

  hippie(app, swagger, options)

  ```


  ```validateResponseSchema``` - Validate the server's response against the
  swagger json-schema definition (default: ```true```)


  ```validateParameterSchema``` - Validate the request parameters against the
  swagger json-schema definition (default: ```true```)


  ```validateRequiredParameters``` - Validate that required parameters were
  provided  (default: ```true```)


  ```errorOnExtraParameters``` - Throw an error if a parameter is missing from
  the swagger file  (default: ```true```)


  ```errorOnExtraHeaderParameters``` - Throw an error if a request header is
  missing from the swagger file.  By default this is turned off, because it
  results in every request needing to specify the "Content-Type" and "Accept"
  headers, which quickly becomes verbose. (default: ```false```)



  ## Example

  See the [example](example/index.js) folder


  ## Validations


  When hippie-swagger detects it is interacting with the app in ways not
  specified in the swagger file, it will throw an error and fail the test.  The
  idea is to use hippie's core features to write API tests as per usual, and
  hippie-swagger will only interject if the swagger contract is violated.


  Below are list of some of the validations that hippie-swagger checks for:


  ### Paths

  ```js

  hippie(app, swagger)

  .get('/pathNotMentionedInSwagger')

  .end(fn);

  // path does not exist in swagger file; throws:

  //    Swagger spec does not define path: pathNotMentionedInSwagger

  ```


  ### Parameter format

  ```js

  hippie(app, swagger)

  .get('/users/{userId}')

  .pathParams({
    userId: 'string-value',
  })

  .end(fn);

  // userId provided as a string, but swagger specifies it as an integer;
  throws:

  //    Invalid format for parameter {userId}

  ```


  ### Required Parameters

  ```js

  hippie(app, swagger)

  .get('/users/{username}')

  .end(fn);

  // "username" is marked 'required' in swagger file; throws:

  //    Missing required parameter in path: username

  ```


  ### Extraneous Parameters

  ```js

  hippie(app, swagger)

  .get('/users')

  .qs({ page: 2, limit: 30 })

  .end(fn);

  // "page" missing from swagger file; throws:

  //    Error: query parameter not mentioned in swagger spec: "page", available
  params: limit

  ```


  ### Response format

  ```js

  hippie(app, swagger)

  .get('/users')

  .end(fn);

  // body failed to validate against swagger file's "response" schema; throws:

  //    Response from /users failed validation: [failure description]

  ```


  ### Method validation

  ```js

  hippie(app, swagger)

  .post('/users')

  .end(fn);

  // "post" method not mentioned in swagger file; throws:

  //    Swagger spec does not define method: "post" in path /users

  ```


  ### Post body format

  ```js

  hippie(app, swagger)

  .post('/users')

  .send({"bogus":"post-body"})

  .end(fn);


  // post body fails to validate against swagger file's "body" parameter;
  throws:

  //    Invalid format for parameter {body}, received: {"bogus":"post-body"}

  ```


  ### Form Url-Encoded Parameters

  ```js

  hippie(app, swagger)

  .form()

  .post('/users')

  .send({})

  .end(fn);


  // "username" is {required: true, in: formData} in swagger; throws:

  //    Missing required parameter in formData: username

  ```


  ### Multipart Forms

  ```js

  hippie(app, swagger)

  .header('Content-Type','multipart/form-data')

  .send()

  .post('/users/upload')

  .end(fn);


  // "fileUpload" is {required: true, in: formData, type: file} in swagger;
  throws:

  //    Missing required parameter in formData: fileUpload

  ```


  ## Troubleshooting


  The most common mistake is forgetting to dereference the swagger file:


  ```js

  "'Error: cant resolve reference ...'

  ```


  Dereferencing can be accomplished using
  [swagger-parser](https://github.com/BigstickCarpet/swagger-parser/blob/master/docs/swagger-parser.md#dereferenceapi-options-callback). 
  The [example](example/index.js) gives a demonstration.


  ## Contributing


  To run the `hippie-swagger` tests:


  ```

  npm test

  ```


  ## License

  [ISC](./LICENSE)
guokr/swagger-py-codegen: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6A:7EFD:741E83:ED62E9:6500FB40.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
domaindrivendev/rswag: >+
  rswag

  =========

  [![Build
  Status](https://travis-ci.org/rswag/rswag.svg?branch=master)](https://travis-ci.org/rswag/rswag)

  [![Maintainability](https://api.codeclimate.com/v1/badges/1175b984edc4610f82ab/maintainability)](https://codeclimate.com/github/rswag/rswag/maintainability)


  OpenApi 3.0 and Swagger 2.0 compatible!


  Rswag extends rspec-rails "request specs" with a Swagger-based DSL for
  describing and testing API operations. You describe your API operations with a
  succinct, intuitive syntax, and it automaticaly runs the tests. Once you have
  green tests, run a rake task to auto-generate corresponding Swagger files and
  expose them as YAML or JSON endpoints. Rswag also provides an embedded version
  of the awesome [swagger-ui](https://github.com/swagger-api/swagger-ui) that's
  powered by the exposed file. This toolchain makes it seamless to go from
  integration specs, which youre probably doing in some form already, to living
  documentation for your API consumers.


  Api Rswag creates [Swagger](http://swagger.io) tooling for Rails API's.
  Generate beautiful API documentation, including a UI to explore and test
  operations, directly from your rspec integration tests.



  And that's not all ...


  Once you have an API that can describe itself in Swagger, you've opened the
  treasure chest of Swagger-based tools including a client generator that can be
  targeted to a wide range of popular platforms. See
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more
  details.


  ## Compatibility ##


  |Rswag Version|Swagger (OpenAPI) Spec.|swagger-ui|

  |----------|----------|----------|

  |[master](https://github.com/rswag/rswag/tree/master)|3.0.3|3.23.11|

  |[2.3.0](https://github.com/rswag/rswag/tree/2.3.0)|3.0.3|3.23.11|

  |[2.2.0](https://github.com/rswag/rswag/tree/2.2.0)|2.0|3.18.2|

  |[1.6.0](https://github.com/rswag/rswag/tree/1.6.0)|2.0|2.2.5|



  <!-- START doctoc generated TOC please keep comment here to allow auto update
  -->

  **Table of Contents**


  - [rswag](#rswag)
    - [Compatibility](#compatibility)
    - [Getting Started](#getting-started)
    - [The rspec DSL](#the-rspec-dsl)
      - [Paths, Operations and Responses](#paths-operations-and-responses)
      - [Null Values](#null-values)
      - [Support for oneOf, anyOf or AllOf schemas](#support-for-oneof-anyof-or-allof-schemas)
      - [Global Metadata](#global-metadata)
        - [Supporting multiple versions of API](#supporting-multiple-versions-of-api)
        - [Formatting the description literals:](#formatting-the-description-literals)
      - [Specifying/Testing API Security](#specifyingtesting-api-security)
    - [Configuration & Customization](#configuration--customization)
      - [Output Location for Generated Swagger Files](#output-location-for-generated-swagger-files)
      - [Input Location for Rspec Tests](#input-location-for-rspec-tests)
      - [Referenced Parameters and Schema Definitions](#referenced-parameters-and-schema-definitions)
      - [Response headers](#response-headers)
      - [Response examples](#response-examples)
      - [Enable auto generation examples from responses](#enable-auto-generation-examples-from-responses)
        - [Running tests without documenting](#running-tests-without-documenting)
          - [rswag helper methods](#rswag-helper-methods)
          - [rswag response examples](#rswag-response-examples)
      - [Route Prefix for Swagger JSON Endpoints](#route-prefix-for-swagger-json-endpoints)
      - [Root Location for Swagger Files](#root-location-for-swagger-files)
      - [Dynamic Values for Swagger JSON](#dynamic-values-for-swagger-json)
      - [Custom Headers for Swagger Files](#custom-headers-for-swagger-files)
      - [Enable Swagger Endpoints for swagger-ui](#enable-swagger-endpoints-for-swagger-ui)
      - [Enable Simple Basic Auth for swagger-ui](#enable-simple-basic-auth-for-swagger-ui)
      - [Route Prefix for the swagger-ui](#route-prefix-for-the-swagger-ui)
      - [Customizing the swagger-ui](#customizing-the-swagger-ui)
      - [Serve UI Assets Directly from your Web Server](#serve-ui-assets-directly-from-your-web-server)

  <!-- END doctoc generated TOC please keep comment here to allow auto update
  -->




  ## Getting Started ##


  1. Add this line to your applications _Gemfile_:

      ```ruby
      gem 'rswag'
      ```

      or if you like to avoid loading rspec in other bundler groups load the rswag-specs component separately.
      Note: Adding it to the :development group is not strictly necessary, but without it, generators and rake tasks must be preceded by RAILS_ENV=test.

      ```ruby
      # Gemfile
      gem 'rswag-api'
      gem 'rswag-ui'

      group :development, :test do
        gem 'rspec-rails'
        gem 'rswag-specs'
      end
      ```

  2. Run the install generator

      ```ruby
      rails g rswag:install
      ```

      Or run the install generators for each package separately if you installed Rswag as separate gems, as indicated above:

      ```ruby
      rails g rswag:api:install
      rails g rswag:ui:install
      RAILS_ENV=test rails g rswag:specs:install
      ```

  3. Create an integration spec to describe and test your API.

  There is also a generator which can help get you started `rails generate
  rspec:swagger API::MyController`

      ```ruby
      # spec/integration/blogs_spec.rb
      require 'swagger_helper'

      describe 'Blogs API' do

        path '/blogs' do

          post 'Creates a blog' do
            tags 'Blogs'
            consumes 'application/json'
            parameter name: :blog, in: :body, schema: {
              type: :object,
              properties: {
                title: { type: :string },
                content: { type: :string }
              },
              required: [ 'title', 'content' ]
            }

            response '201', 'blog created' do
              let(:blog) { { title: 'foo', content: 'bar' } }
              run_test!
            end

            response '422', 'invalid request' do
              let(:blog) { { title: 'foo' } }
              run_test!
            end
          end
        end

        path '/blogs/{id}' do

          get 'Retrieves a blog' do
            tags 'Blogs'
            produces 'application/json', 'application/xml'
            parameter name: :id, in: :path, type: :string

            response '200', 'blog found' do
              schema type: :object,
                properties: {
                  id: { type: :integer },
                  title: { type: :string },
                  content: { type: :string }
                },
                required: [ 'id', 'title', 'content' ]

              let(:id) { Blog.create(title: 'foo', content: 'bar').id }
              run_test!
            end

            response '404', 'blog not found' do
              let(:id) { 'invalid' }
              run_test!
            end

            response '406', 'unsupported accept header' do
              let(:'Accept') { 'application/foo' }
              run_test!
            end
          end
        end
      end
      ```


  4. Generate the Swagger JSON file(s)

      ```ruby
      rake rswag:specs:swaggerize
      ```

      This common command is also aliased as `rake rswag`.

      Or if you installed your gems separately:
      ```
      RAILS_ENV=test rails rswag
      ```

  5. Spin up your app and check out the awesome, auto-generated docs at
  _/api-docs_!


  ## The rspec DSL ##


  ### Paths, Operations and Responses ###


  If you've used [Swagger](http://swagger.io/specification) before, then the
  syntax should be very familiar. To describe your API operations, start by
  specifying a path and then list the supported operations (i.e. HTTP verbs) for
  that path. Path parameters must be surrounded by curly braces ({}). Within an
  operation block (see "post" or "get" in the example above), most of the fields
  supported by the [Swagger "Operation"
  object](http://swagger.io/specification/#operationObject) are available as
  methods on the example group. To list (and test) the various responses for an
  operation, create one or more response blocks. Again, you can reference the
  [Swagger "Response" object](http://swagger.io/specification/#responseObject)
  for available fields.


  Take special note of the __run_test!__ method that's called within each
  response block. This tells rswag to create and execute a corresponding
  example. It builds and submits a request based on parameter descriptions and
  corresponding values that have been provided using the rspec "let" syntax. For
  example, the "post" description in the example above specifies a "body"
  parameter called "blog". It also lists 2 different responses. For the success
  case (i.e. the 201 response), notice how "let" is used to set the blog
  parameter to a value that matches the provided schema. For the failure case
  (i.e. the 422 response), notice how it's set to a value that does not match
  the provided schema. When the test is executed, rswag also validates the
  actual response code and, where applicable, the response body against the
  provided [JSON Schema](http://json-schema.org/documentation.html).


  If you want to do additional validation on the response, pass a block to the
  __run_test!__ method:


  ```ruby

  response '201', 'blog created' do
    run_test! do |response|
      data = JSON.parse(response.body)
      expect(data['title']).to eq('foo')
    end
  end

  ```


  If you'd like your specs to be a little more explicit about what's going on
  here, you can replace the call to __run_test!__ with equivalent "before" and
  "it" blocks:


  ```ruby

  response '201', 'blog created' do
    let(:blog) { { title: 'foo', content: 'bar' } }

    before do |example|
      submit_request(example.metadata)
    end

    it 'returns a valid 201 response' do |example|
      assert_response_matches_metadata(example.metadata)
    end
  end

  ```


  ### Null Values ###


  This library is currently using JSON::Draft4 for validation of response
  models. Nullable properties can be supported with the non-standard property
  'x-nullable' to a definition to allow null/nil values to pass. Or you can add
  the new standard ```nullable``` property to a definition.

  ```ruby

  describe 'Blogs API' do
    path '/blogs' do
      post 'Creates a blog' do
        ...

        response '200', 'blog found' do
          schema type: :object,
            properties: {
              id: { type: :integer },
              title: { type: :string, nullable: true }, # preferred syntax
              content: { type: :string, 'x-nullable': true } # legacy syntax, but still works
            }
          ....
        end
      end
    end
  end

  ```


  ### Support for oneOf, anyOf or AllOf schemas ###


  Open API 3.0 now supports more flexible schema validation with the
  ```oneOf```, ```anyOf``` and ```allOf``` directives. rswag will handle these
  definitions and validate them properly.



  Notice the ```schema``` inside the ```response``` section. Placing a
  ```schema``` method inside the response will validate (and fail the tests)

  if during the integration test run the endpoint response does not match the
  response schema. This test validation can handle anyOf and allOf as well. See
  below:


  ```ruby

    path '/blogs/flexible' do
      post 'Creates a blog flexible body' do
        tags 'Blogs'
        description 'Creates a flexible blog from provided data'
        operationId 'createFlexibleBlog'
        consumes 'application/json'
        produces 'application/json'

        parameter name: :blog, in: :body, schema: {
            oneOf: [
              { '$ref' => '#/components/schemas/blog' },
              { '$ref' => '#/components/schemas/flexible_blog' }
            ]
          }

        response '201', 'flexible blog created' do
          schema oneOf: [{ '$ref' => '#/components/schemas/blog' }, { '$ref' => '#/components/schemas/flexible_blog' }]
          run_test!
        end
      end
    end

  ```

  This automatic schema validation is a powerful feature of rswag.


  ### Global Metadata ###


  In addition to paths, operations and responses, Swagger also supports global
  API metadata. When you install rswag, a file called _swagger_helper.rb_ is
  added to your spec folder. This is where you define one or more Swagger
  documents and provide global metadata. Again, the format is based on Swagger
  so most of the global fields supported by the top level ["Swagger"
  object](http://swagger.io/specification/#swaggerObject) can be provided with
  each document definition. As an example, you could define a Swagger document
  for each version of your API and in each case specify a title, version string.
  In Open API 3.0 the pathing and server definitions have changed a bit [Swagger
  host/basePath](https://swagger.io/docs/specification/api-host-and-base-path/):


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/swagger'

    config.swagger_docs = {
      'v1/swagger.json' => {
        openapi: '3.0.1',
        info: {
          title: 'API V1',
          version: 'v1',
          description: 'This is the first version of my API'
        },
        servers: [
          {
            url: 'https://{defaultHost}',
            variables: {
              defaultHost: {
                  default: 'www.example.com'
              }
            }
          }
        ]
      },

      'v2/swagger.yaml' => {
        openapi: '3.0.1',
        info: {
          title: 'API V2',
          version: 'v2',
          description: 'This is the second version of my API'
        },
        servers: [
          {
            url: 'https://{defaultHost}',
            variables: {
              defaultHost: {
                  default: 'www.example.com'
              }
            }
          }
        ]
      }
    }
  end

  ```


  #### Supporting multiple versions of API ####

  By default, the paths, operations and responses defined in your spec files
  will be associated with the first Swagger document in _swagger_helper.rb_. If
  your API has multiple versions, you should be using separate documents to
  describe each of them. In order to assign a file with a given version of API,
  you'll need to add the ```swagger_doc``` tag to each spec specifying its
  target document name:


  ```ruby

  # spec/integration/v2/blogs_spec.rb

  describe 'Blogs API', swagger_doc: 'v2/swagger.yaml' do

    path '/blogs' do
    ...

    path '/blogs/{id}' do
    ...
  end

  ```


  #### Formatting the description literals: ####

  Swagger supports the Markdown syntax to format strings. This can be especially
  handy if you were to provide a long description of a given API version or
  endpoint. Use [this
  guide](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) for
  reference.


  __NOTE:__ There is one difference between the official Markdown syntax and
  Swagger interpretation, namely tables. To create a table like this:


  | Column1 | Collumn2 |

  | ------- | -------- |

  | cell1   | cell2    |


  you should use the folowing syntax, making sure there are no whitespaces at
  the start of any of the lines:


  ```

  &#13;

  | Column1 | Collumn2 |&#13;

  | ------- | -------- |&#13;

  | cell1   | cell2    |&#13;

  &#13;

  ```


  ### Specifying/Testing API Security ###


  Swagger allows for the specification of different security schemes and their
  applicability to operations in an API. 

  To leverage this in rswag, you define the schemes globally in
  _swagger_helper.rb_ and then use the "security" attribute at the operation
  level to specify which schemes, if any, are applicable to that operation. 

  Swagger supports :basic, :bearer, :apiKey and :oauth2 and :openIdConnect
  scheme types. See [the
  spec](https://swagger.io/docs/specification/authentication/) for more info, as
  this underwent major changes between Swagger 2.0 and Open API 3.0


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/swagger'

    config.swagger_docs = {
      'v1/swagger.json' => {
        ...  # note the new Open API 3.0 compliant security structure here, under "components"
        components: {
          securitySchemes: {
            basic_auth: {
              type: :http,
              scheme: :basic
            },
            api_key: {
              type: :apiKey,
              name: 'api_key',
              in: :query
            }
          }
        }
      }
    }
  end


  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs' do

      post 'Creates a blog' do
        tags 'Blogs'
        security [ basic_auth: [] ]
        ...

        response '201', 'blog created' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('jsmith:jspass')}" }
          run_test!
        end

        response '401', 'authentication failed' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('bogus:bogus')}" }
          run_test!
        end
      end
    end
  end


  # example of documenting an endpoint that handles basic auth and api key based
  security

  describe 'Auth examples API' do 
    path '/auth-tests/basic-and-api-key' do
      post 'Authenticates with basic auth and api key' do
        tags 'Auth Tests'
        operationId 'testBasicAndApiKey'
        security [{ basic_auth: [], api_key: [] }]

        response '204', 'Valid credentials' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('jsmith:jspass')}" }
          let(:api_key) { 'foobar' }
          run_test!
        end

        response '401', 'Invalid credentials' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('jsmith:jspass')}" }
          let(:api_key) { 'barfoo' }
          run_test!
        end
      end
    end
  end
   

  ```


  __NOTE:__ Depending on the scheme types, you'll be required to assign a
  corresponding parameter value with each example. 

  For example, :basic auth is required above and so the :Authorization (header)
  parameter must be set accordingly


  ## Configuration & Customization ##


  The steps described above will get you up and running with minimal setup.
  However, rswag offers a lot of flexibility to customize as you see fit. Before
  exploring the various options, you'll need to be aware of it's different
  components. The following table lists each of them and the files that get
  added/updated as part of a standard install.


  |Gem|Description|Added/Updated|

  |---------|-----------|-------------|

  |__rswag-specs__|Swagger-based DSL for rspec & accompanying rake task for
  generating Swagger files|_spec/swagger_helper.rb_|

  |__rswag-api__  |Rails Engine that exposes your Swagger files as JSON
  endpoints|_config/initializers/rswag_api.rb, config/routes.rb_|

  |__rswag-ui__   |Rails Engine that includes
  [swagger-ui](https://github.com/swagger-api/swagger-ui) and powers it from
  your Swagger endpoints|_config/initializers/rswag-ui.rb, config/routes.rb_|


  ### Output Location for Generated Swagger Files ###


  You can adjust this in the _swagger_helper.rb_ that's installed with
  __rswag-specs__:


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/your-custom-folder-name'
    ...
  end

  ```


  __NOTE__: If you do change this, you'll also need to update the rswag_api.rb
  initializer (assuming you're using rswag-api). More on this later.


  ### Input Location for Rspec Tests ###


  By default, rswag will search for integration tests in _spec/requests_,
  _spec/api_ and _spec/integration_. If you want to use tests from other
  locations, provide the PATTERN argument to rake:


  ```ruby

  # search for tests in spec/swagger

  rake rswag:specs:swaggerize PATTERN="spec/swagger/**/*_spec.rb"

  ```


  ### Referenced Parameters and Schema Definitions ###


  Swagger allows you to describe JSON structures inline with your operation
  descriptions OR as referenced globals. 

  For example, you might have a standard response structure for all failed
  operations.

  Again, this is a structure that changed since swagger 2.0. Notice the new
  "schemas" section for these. 

  Rather than repeating the schema in every operation spec, you can define it
  globally and provide a reference to it in each spec:


  ```ruby

  # spec/swagger_helper.rb

  config.swagger_docs = {
    'v1/swagger.json' => {
      openapi: '3.0.0',
      info: {
        title: 'API V1'
      },
      components: {
        schemas: {
          errors_object: {
            type: 'object',
            properties: {
              errors: { '$ref' => '#/components/schemas/errors_map' }
            }
          },
          errors_map: {
            type: 'object',
            additionalProperties: {
              type: 'array',
              items: { type: 'string' }
            }
          },
          blog: {
            type: 'object',
            properties: {
              id: { type: 'integer' },
              title: { type: 'string' },
              content: { type: 'string', nullable: true },
              thumbnail: { type: 'string', nullable: true }
            },
            required: %w[id title]
          }
        }
      }
    }
  }


  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs' do

      post 'Creates a blog' do

        response 422, 'invalid request' do
          schema '$ref' => '#/components/schemas/errors_object'
    ...
  end


  # spec/integration/comments_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}/comments' do

      post 'Creates a comment' do

        response 422, 'invalid request' do
          schema '$ref' => '#/components/schemas/errors_object'
    ...
  end

  ```


  ### Response headers ###


  In Rswag, you could use `header` method inside the response block to specify
  header objects for this response. 

  Rswag will validate your response headers with those header objects and inject
  them into the generated swagger file:


  ```ruby

  # spec/integration/comments_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}/comments' do

      post 'Creates a comment' do

        response 422, 'invalid request' do
          header 'X-Rate-Limit-Limit', type: :integer, description: 'The number of allowed requests in the current period'
          header 'X-Rate-Limit-Remaining', type: :integer, description: 'The number of remaining requests in the current period'
    ...
  end

  ```


  ### Response examples ###


  You can provide custom response examples to the generated swagger file by
  calling the method `examples` inside the response block:

  However, auto generated example responses are now enabled by default in rswag.
  See below.

  ```ruby

  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}' do

      get 'Retrieves a blog' do

        response 200, 'blog found' do
          examples 'application/json' => {
              id: 1,
              title: 'Hello world!',
              content: '...'
            }
    ...
  end

  ```



  ### Enable auto generation examples from responses ###



  To enable examples generation from responses add callback above run_test!
  like:


  ```

  after do |example|
    example.metadata[:response][:examples] = { 'application/json' => JSON.parse(response.body, symbolize_names: true) }
  end

  ```


  You need to disable --dry-run option for Rspec > 3


  <!-- This is now enabled by default in rswag. 

  You need to set the ``` config.swagger_dry_run = false``` value in the
  spec/spec_helper.rb file.

  This is one of the more powerful features of rswag. When rswag runs your
  integration test suite via ```bundle exec rspec```, it will capture the
  request and response bodies and output those values in the examples section.

  These integration tests are usually written with ```let``` variables for post
  body parameters, and since its an integration test the service is returning
  actual values. 

  We might as well re-use these values and embed them into the generated swagger
  to provide a more real world example for request/response examples. -->


  Add to config/environments/test.rb:

  ```ruby

  RSpec.configure do |config|
    config.swagger_dry_run = false
  end

  ```


  #### Running tests without documenting ####


  If you want to use Rswag for testing without adding it to you swagger docs,
  you can provide the document tag:

  ```ruby

  describe 'Blogs API' do
    path '/blogs/{blog_id}' do
      get 'Retrieves a blog' do
        # documentation is now disabled for this response only
        response 200, 'blog found', document: false do
          ...
  ```


  You can also reenable documentation for specific responses only:

  ```ruby

  # documentation is now disabled

  describe 'Blogs API', document: false do
    path '/blogs/{blog_id}' do
      get 'Retrieves a blog' do
        # documentation is reenabled for this response only
        response 200, 'blog found', document: true do
          ...
        end

        response 401, 'special case' do
          ...
        end
  ```


  ##### rswag helper methods #####

  <!-- 

  There are some helper methods to help with documenting request bodies. 

  ```ruby

  describe 'Blogs API', type: :request, swagger_doc: 'v1/swagger.json' do
    let(:api_key) { 'fake_key' }

    path '/blogs' do
      post 'Creates a blog' do
        tags 'Blogs'
        description 'Creates a new blog from provided data'
        operationId 'createBlog'
        consumes 'application/json'
        produces 'application/json'

        request_body_json schema: { '$ref' => '#/components/schemas/blog' },
                          examples: :blog

        request_body_text_plain
        request_body_xml schema: { '$ref' => '#/components/schemas/blog' }

        let(:blog) { { blog: { title: 'foo', content: 'bar' } } }

        response '201', 'blog created' do
          schema '$ref' => '#/components/schemas/blog'
          run_test!
        end

        response '422', 'invalid request' do
          schema '$ref' => '#/components/schemas/errors_object'
          let(:blog) { { blog: { title: 'foo' } } }

          run_test! do |response|
            expect(response.body).to include("can't be blank")
          end
        end
      end
    end
  end    

  ```


  In the above example, we see methods ```request_body_json```
  ```request_body_plain``` ```request_body_xml```.

  These methods can be used to describe json, plain text and xml body. They are
  just wrapper methods to setup posting JSON, plain text or xml into your
  endpoint.

  The simplest most common usage is for json formatted body to use the schema:
  to specify the location of the schema for the request body

  and the examples: :blog which will create a named example "blog" under the
  "requestBody / content / application/json / examples" section.

  Again, documenting request response examples changed in Open API 3.0. The
  example above would generate a swagger.json snippet that looks like this:


  ```json
          ... 
          {"requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "examples": {
                  "blog": {  // takes the name from  examples: :blog above
                    "value": {  //this is open api 3.0 structure -> https://swagger.io/docs/specification/adding-examples/
                      "blog": { // here is the actual JSON payload that is submitted to the service, and shows up in swagger UI as an example
                        "title": "foo",
                        "content": "bar"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              },
              "test/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              }
            }
          },
          }
  ```


  *NOTE:* for this example request body to work in the tests properly, you need
  to ``let`` a variable named *blog*. 

  The variable with the matching name (blog in this case) is eval-ed and
  captured to be placed in the examples section.

  This ```let``` value is used in the integration test to run the test AND
  captured and injected into the requestBody section. 


  ##### rswag response examples #####


  In the same way that requestBody examples can be captured and injected into
  the swagger output, response examples can also be captured.

  Using the above example, when the integration test is run - the swagger would
  include the following snippet providing more useful real world examples

  capturing the response from the execution of the integration test. Again 3.0
  swagger changed the structure of how these are documented.


  ```json
         ...  "responses": {
            "201": {
              "description": "blog created",
              "content": {
                "application/json": {
                  "example": {
                    "id": 1,
                    "title": "foo",
                    "content": "bar",
                    "thumbnail": null
                  },
                  "schema": {
                    "$ref": "#/components/schemas/blog"
                  }
                }
              }
            },
            "422": {
              "description": "invalid request",
              "content": {
                "application/json": {
                  "example": {
                    "errors": {
                      "content": [
                        "can't be blank"
                      ]
                    }
                  },
                  "schema": {
                    "$ref": "#/components/schemas/errors_object"
                  }
                }
              }
            }
          }
  ```
   -->
  ### Route Prefix for Swagger JSON Endpoints ###


  The functionality to expose Swagger files, such as those generated by
  rswag-specs, as JSON endpoints is implemented as a Rails Engine. As with any
  Engine, you can change it's mount prefix in _routes.rb_:


  ```ruby

  TestApp::Application.routes.draw do
    ...

    mount Rswag::Api::Engine => 'your-custom-prefix'
  end

  ```


  Assuming a Swagger file exists at &lt;swagger_root&gt;/v1/swagger.json, this
  configuration would expose the file as the following JSON endpoint:


  ```

  GET http://<hostname>/your-custom-prefix/v1/swagger.json

  ```


  ### Root Location for Swagger Files ###


  You can adjust this in the _rswag_api.rb_ initializer that's installed with
  __rspec-api__:


  ```ruby

  Rswag::Api.configure do |c|
    c.swagger_root = Rails.root.to_s + '/your-custom-folder-name'
    ...
  end

  ```


  __NOTE__: If you're using rswag-specs to generate Swagger files, you'll want
  to ensure they both use the same &lt;swagger_root&gt;. The reason for separate
  settings is to maintain independence between the two gems. For example, you
  could install rswag-api independently and create your Swagger files manually.


  ### Dynamic Values for Swagger JSON ##


  There may be cases where you need to add dynamic values to the Swagger JSON
  that's returned by rswag-api. For example, you may want to provide an explicit
  host name. Rather than hardcoding it, you can configure a filter that's
  executed prior to serializing every Swagger document:


  ```ruby

  Rswag::Api.configure do |c|
    ...

    c.swagger_filter = lambda { |swagger, env| swagger['host'] = env['HTTP_HOST'] }
  end

  ```


  Note how the filter is passed the rack env for the current request. This
  provides a lot of flexibilty. For example, you can assign the "host" property
  (as shown) or you could inspect session information or an Authorization header
  and remove operations based on user permissions.


  ### Custom Headers for Swagger Files ###


  You can specify custom headers for serving your generated Swagger JSON. For
  example you may want to force a specific charset for the 'Content-Type'
  header. You can configure a hash of headers to be sent with the request:


  ```ruby

  Rswag::Api.configure do |c|
    ...
    
    c.swagger_headers = { 'Content-Type' => 'application/json; charset=UTF-8' }
  end

  ```


  Take care when overriding Content-Type if you serve both YAML and JSON files
  as it will no longer switch the Content-Type header correctly.



  ### Enable Swagger Endpoints for swagger-ui ###


  You can update the _rswag-ui.rb_ initializer, installed with rswag-ui, to
  specify which Swagger endpoints should be available to power the documentation
  UI. If you're using rswag-api, these should correspond to the Swagger
  endpoints it exposes. When the UI is rendered, you'll see these listed in a
  drop-down to the top right of the page:


  ```ruby

  Rswag::Ui.configure do |c|
    c.swagger_endpoint '/api-docs/v1/swagger.json', 'API V1 Docs'
    c.swagger_endpoint '/api-docs/v2/swagger.json', 'API V2 Docs'
  end

  ```


  ### Enable Simple Basic Auth for swagger-ui


  You can also update the _rswag-ui.rb_ initializer, installed with rswag-ui to
  specify a username and password should you want to keep your documentation
  private.


  ```ruby

  Rswag::Ui.configure do |c|
    c.basic_auth_enabled = true
    c.basic_auth_credentials 'username', 'password'
  end

  ```


  ### Route Prefix for the swagger-ui ###


  Similar to rswag-api, you can customize the swagger-ui path by changing it's
  mount prefix in _routes.rb_:


  ```ruby

  TestApp::Application.routes.draw do
    ...

    mount Rswag::Api::Engine => 'api-docs'
    mount Rswag::Ui::Engine => 'your-custom-prefix'
  end

  ```


  ### Customizing the swagger-ui ###


  The swagger-ui provides several options for customizing it's behavior, all of
  which are documented here
  https://github.com/swagger-api/swagger-ui/tree/2.x#swaggerui. If you need to
  tweak these or customize the overall look and feel of your swagger-ui, then
  you'll need to provide your own version of index.html. You can do this with
  the following generator.


  ```ruby

  rails g rswag:ui:custom


  ```


  This will add a local version that you can modify at
  _app/views/rswag/ui/home/index.html.erb_


  ### Serve UI Assets Directly from your Web Server


  Rswag ships with an embedded version of the
  [swagger-ui](https://github.com/swagger-api/swagger-ui), which is a static
  collection of JavaScript and CSS files. These assets are served by the
  rswag-ui middleware. However, for optimal performance you may want to serve
  them directly from your web server (e.g. Apache or NGINX). To do this, you'll
  need to copy them to the web server root. This is the "public" folder in a
  typical Rails application.


  ```

  bundle exec rake rswag:ui:copy_assets[public/api-docs]

  ```


  __NOTE:__: The provided subfolder MUST correspond to the UI mount prefix -
  "api-docs" by default.



  Notes to test swagger output locally with swagger editor

  ```

  docker pull swaggerapi/swagger-editor

  ```

  ```

  docker run -d -p 80:8080 swaggerapi/swagger-editor

  ```

  This will run the swagger editor in the docker daemon and can be accessed 

  at ```http://localhost```. From here, you can use the UI to load the generated
  swagger.json to validate the output.

drewish/rspec-rails-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273F:6DD3:7BC730:FC8333:6500FB2F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
zalando/connexion: >-
  {"message":"API rate limit exceeded for 40.122.242.104. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more
  details.)","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
rochacbruno/flasgger: >+
  # Flasgger

  ## Easy Swagger UI for your Flask API


  [![Build
  Status](https://travis-ci.com/flasgger/flasgger.svg?branch=master)](https://travis-ci.com/flasgger/flasgger)

  [![Code
  Health](https://landscape.io/github/rochacbruno/flasgger/master/landscape.svg?style=flat)](https://landscape.io/github/rochacbruno/flasgger/master)

  [![Coverage
  Status](https://coveralls.io/repos/github/rochacbruno/flasgger/badge.svg?branch=master)](https://coveralls.io/github/rochacbruno/flasgger?branch=master)

  [![PyPI](https://img.shields.io/pypi/v/flasgger.svg)](https://pypi.python.org/pypi/flasgger)
   <a target="_blank" href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=rochacbruno%40gmail%2ecom&amp;lc=BR&amp;item_name=Flasgger&amp;no_note=0&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHostedGuest"><img alt='Donate with Paypal' src='http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif' /></a>


  ![flasgger](docs/flasgger.png)


  Flasgger is a Flask extension to **extract
  [OpenAPI-Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)**
  from all Flask views registered in your API.


  Flasgger also comes with **[SwaggerUI](http://swagger.io/swagger-ui/)
  embedded** so you can access
  [http://localhost:5000/apidocs](localhost:5000/apidocs) and visualize and
  interact with your API resources.


  Flasgger also **provides validation** of the incoming data, using the same
  specification it can validates if the data received as as a POST, PUT, PATCH
  is valid against the schema defined using **YAML**, **Python dictionaries** or
  **Marshmallow Schemas**.


  Flasgger can work with simple function views or MethodViews using docstring as
  specification, or using `@swag_from` decorator to get specification from
  **YAML** or **dict** and also provides **SwaggerView** which can use
  **Marshmallow Schemas**  as specification.


  Flasgger is compatible with `Flask-RESTful` so you can use `Resources` and
  `swag` specifications together, take a look at [restful
  example.](examples/restful.py)


  Flasgger also supports `Marshmallow APISpec` as base template for
  specification, if you are using APISPec from Marshmallow take a look at
  [apispec example.](examples/apispec_example.py)


  # Top Contributors


  [![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/0)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/0)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/1)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/1)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/2)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/2)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/3)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/3)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/4)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/4)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/5)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/5)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/6)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/6)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/7)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/7)


  # Examples and demo app


  There are some [example applications](examples/) and you can also play with
  examples in [Flasgger demo app](http://flasgger.pythonanywhere.com/)


  > NOTE: all the examples apps are also test cases and run automatically in
  Travis CI to ensure quality and coverage.


  ## Docker


  The examples and demo app can also be built and run as a Docker
  image/container:


  ```

  docker build -t flasgger .

  docker run -it --rm -p 5000:5000 --name flasgger flasgger

  ```

  Then access the Flasgger demo app at http://localhost:5000 .


  # Installation


  > under your virtualenv do:


  Ensure you have latest setuptools

  ```

  pip install -U setuptools

  ```


  then


  ```

  pip install flasgger

  ```


  or (dev version)


  ```

  pip install https://github.com/rochacbruno/flasgger/tarball/master

  ```


  > NOTE: If you want to use **Marshmallow Schemas** you also need to run `pip
  install marshmallow apispec`


  # Getting started


  ## Using docstrings as specification


  Create a file called for example `colors.py`


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger


  app = Flask(__name__)

  swagger = Swagger(app)


  @app.route('/colors/<palette>/')

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      This is using docstrings for specifications.
      ---
      parameters:
        - name: palette
          in: path
          type: string
          enum: ['all', 'rgb', 'cmyk']
          required: true
          default: all
      definitions:
        Palette:
          type: object
          properties:
            palette_name:
              type: array
              items:
                $ref: '#/definitions/Color'
        Color:
          type: string
      responses:
        200:
          description: A list of colors (may be filtered by palette)
          schema:
            $ref: '#/definitions/Palette'
          examples:
            rgb: ['red', 'green', 'blue']
      """
      all_colors = {
          'cmyk': ['cian', 'magenta', 'yellow', 'black'],
          'rgb': ['red', 'green', 'blue']
      }
      if palette == 'all':
          result = all_colors
      else:
          result = {palette: all_colors.get(palette)}

      return jsonify(result)

  app.run(debug=True)

  ```


  Now run:


  ```

  python colors.py

  ```


  And go to: [http://localhost:5000/apidocs/](http://localhost:5000/apidocs/)


  You should get:


  ![colors](docs/colors.png)


  ## Using external YAML files


  Save a new file `colors.yml`


  ```yaml

  Example endpoint returning a list of colors by palette

  In this example the specification is taken from external YAML file

  ---

  parameters:
    - name: palette
      in: path
      type: string
      enum: ['all', 'rgb', 'cmyk']
      required: true
      default: all
  definitions:
    Palette:
      type: object
      properties:
        palette_name:
          type: array
          items:
            $ref: '#/definitions/Color'
    Color:
      type: string
  responses:
    200:
      description: A list of colors (may be filtered by palette)
      schema:
        $ref: '#/definitions/Palette'
      examples:
        rgb: ['red', 'green', 'blue']
  ```



  lets use the same example changing only the view function.


  ```python

  from flasgger import swag_from


  @app.route('/colors/<palette>/')

  @swag_from('colors.yml')

  def colors(palette):
      ...
  ```


  If you do not want to use the decorator you can use the docstring `file:`
  shortcut.


  ```python

  @app.route('/colors/<palette>/')

  def colors(palette):
      """
      file: colors.yml
      """
      ...
  ```



  ## Using dictionaries as raw specs


  Create a Python dictionary as:


  ```python

  specs_dict = {
    "parameters": [
      {
        "name": "palette",
        "in": "path",
        "type": "string",
        "enum": [
          "all",
          "rgb",
          "cmyk"
        ],
        "required": "true",
        "default": "all"
      }
    ],
    "definitions": {
      "Palette": {
        "type": "object",
        "properties": {
          "palette_name": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Color"
            }
          }
        }
      },
      "Color": {
        "type": "string"
      }
    },
    "responses": {
      "200": {
        "description": "A list of colors (may be filtered by palette)",
        "schema": {
          "$ref": "#/definitions/Palette"
        },
        "examples": {
          "rgb": [
            "red",
            "green",
            "blue"
          ]
        }
      }
    }
  }

  ```


  Now take the same function and use the dict in the place of YAML file.


  ```python

  @app.route('/colors/<palette>/')

  @swag_from(specs_dict)

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      In this example the specification is taken from specs_dict
      """
      ...
  ```


  ## Using Marshmallow Schemas


  > FIRST: `pip install marshmallow apispec`


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger, SwaggerView, Schema, fields



  class Color(Schema):
      name = fields.Str()

  class Palette(Schema):
      pallete_name = fields.Str()
      colors = fields.Nested(Color, many=True)

  class PaletteView(SwaggerView):
      parameters = [
          {
              "name": "palette",
              "in": "path",
              "type": "string",
              "enum": ["all", "rgb", "cmyk"],
              "required": True,
              "default": "all"
          }
      ]
      responses = {
          200: {
              "description": "A list of colors (may be filtered by palette)",
              "schema": Palette
          }
      }

      def get(self, palette):
          """
          Colors API using schema
          This example is using marshmallow schemas
          """
          all_colors = {
              'cmyk': ['cian', 'magenta', 'yellow', 'black'],
              'rgb': ['red', 'green', 'blue']
          }
          if palette == 'all':
              result = all_colors
          else:
              result = {palette: all_colors.get(palette)}
          return jsonify(result)

  app = Flask(__name__)

  swagger = Swagger(app)


  app.add_url_rule(
      '/colors/<palette>',
      view_func=PaletteView.as_view('colors'),
      methods=['GET']
  )


  app.run(debug=True)


  ```


  > NOTE: take a look at `examples/validation.py` for a more complete example.



  > NOTE: when catching arguments in path rule always use explicit types, bad:
  ``/api/<username>`` good: ``/api/<string:username>``



  ## Using **Flask RESTful** Resources


  Flasgger is compatible with Flask-RESTful you only need to install `pip
  install flask-restful` and then:


  ```python


  from flask import Flask

  from flasgger import Swagger

  from flask_restful import Api, Resource


  app = Flask(__name__)

  api = Api(app)

  swagger = Swagger(app)


  class Username(Resource):
      def get(self, username):
         """
         This examples uses FlaskRESTful Resource
         It works also with swag_from, schemas and spec_dict
         ---
         parameters:
           - in: path
             name: username
             type: string
             required: true
         responses:
           200:
             description: A single user item
             schema:
               id: User
               properties:
                 username:
                   type: string
                   description: The name of the user
                   default: Steven Wilson
          """
          return {'username': username}, 200


  api.add_resource(Username, '/username/<username>')


  app.run(debug=True)


  ```


  ## Auto-parsing external YAML docs and `MethodView`s


  Flasgger can be configured to auto-parse external YAML API docs.  [Set a
  `doc_dir`](https://github.com/rochacbruno/flasgger/blob/aaef05c17cc559d01b7436211093463642eb6ae2/examples/parsed_view_func.py#L16)
  in your `app.config['SWAGGER']` and Swagger will load API docs by looking in
  `doc_dir` for YAML files stored by endpoint-name and method-name.  For
  example, `'doc_dir': './examples/docs/'` and a file
  `./examples/docs/items/get.yml` will provide a Swagger doc for `ItemsView`
  method `get`.


  Additionally, when using **Flask RESTful** per above, by passing `parse=True`
  when constructing `Swagger`, Flasgger will use 
  `flask_restful.reqparse.RequestParser`, locate all `MethodView`s and parsed
  and validated data will be stored in `flask.request.parsed_data`.


  ## Handling multiple http methods and routes for a single function


  You can separate specifications by endpoint or methods


  ```python

  from flasgger.utils import swag_from


  @app.route('/api/<string:username>', endpoint='with_user_name',
  methods=['PUT', 'GET'])

  @app.route('/api/', endpoint='without_user_name')

  @swag_from('path/to/external_file.yml', endpoint='with_user_name')

  @swag_from('path/to/external_file_no_user_get.yml',
  endpoint='without_user_name', methods=['GET'])

  @swag_from('path/to/external_file_no_user_put.yml',
  endpoint='without_user_name', methods=['PUT'])

  def fromfile_decorated(username=None):
      if not username:
          return "No user!"
      return jsonify({'username': username})
  ```


  And the same can be achieved with multiple methods in a `MethodView` or
  `SwaggerView` by

  registering the `url_rule` many times. Take a look at `examples/example_app`



  # Use the same data to validate your API POST body.


  Setting `swag_from`'s _validation_ parameter to `True` will validate incoming
  data automatically:


  ```python

  from flasgger import swag_from


  @swag_from('defs.yml', validation=True)

  def post():
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  Using `swagger.validate` annotation is also possible:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('UserSchema')

  def post():
      '''
      file: defs.yml
      '''
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  Yet you can call `validate` manually:


  ```python

  from flasgger import swag_from, validate


  @swag_from('defs.yml')

  def post():
      validate(request.json, 'UserSchema', 'defs.yml')
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  It is also possible to define `validation=True` in `SwaggerView` and also use

  `specs_dict` for validation.


  Take a look at `examples/validation.py` for more information.


  All validation options can be found at
  http://json-schema.org/latest/json-schema-validation.html


  ### Custom validation


  By default Flasgger will use
  [python-jsonschema](https://python-jsonschema.readthedocs.io/en/latest/)

  to perform validation.


  Custom validation functions are supported as long as they meet the
  requirements:
   - take two, and only two, positional arguments:
      - the data to be validated as the first; and
      - the schema to validate against as the second argument
   - raise any kind of exception when validation fails.

  Any return value is discarded.



  Providing the function to the Swagger instance will make it the default:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app, validation_function=my_validation_function)

  ```


  Providing the function as parameter of `swag_from` or `swagger.validate`

  annotations or directly to the `validate` function will force it's use

  over the default validation function for Swagger:


  ```python

  from flasgger import swag_from


  @swag_from('spec.yml', validation=True, validation_function=my_function)

  ...

  ```


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('Pet', validation_function=my_function)

  ...

  ```


  ```python

  from flasgger import validate


  ...

      validate(
          request.json, 'Pet', 'defs.yml', validation_function=my_function)
  ```


  ### Validation Error handling


  By default Flasgger will handle validation errors by aborting the

  request with a 400 BAD REQUEST response with the error message.


  A custom validation error handling function can be provided to

  supersede default behavior as long as it meets the requirements:
   - take three, and only three, positional arguments:
      - the error raised as the first;
      - the data which failed validation as the second; and
      - the schema used in to validate as the third argument


  Providing the function to the Swagger instance will make it the default:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app, validation_error_handler=my_handler)

  ```


  Providing the function as parameter of `swag_from` or `swagger.validate`

  annotations or directly to the `validate` function will force it's use

  over the default validation function for Swagger:


  ```python

  from flasgger import swag_from


  @swag_from(
      'spec.yml', validation=True, validation_error_handler=my_handler)
  ...

  ```


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('Pet', validation_error_handler=my_handler)

  ...

  ```


  ```python

  from flasgger import validate


  ...

      validate(
          request.json, 'Pet', 'defs.yml',
          validation_error_handler=my_handler)
  ```


  Examples of use of a custom validation error handler function can be

  found at [example
  validation_error_handler.py](examples/validation_error_handler.py)


  # Get defined schemas as python dictionaries


  You may wish to use schemas you defined in your Swagger specs as dictionaries

  without replicating the specification. For that you can use the `get_schema`

  method:


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger, swag_from


  app = Flask(__name__)

  swagger = Swagger(app)


  @swagger.validate('Product')

  def post():
      """
      post endpoint
      ---
      tags:
        - products
      parameters:
        - name: body
          in: body
          required: true
          schema:
            id: Product
            required:
              - name
            properties:
              name:
                type: string
                description: The product's name.
                default: "Guarana"
      responses:
        200:
          description: The product inserted in the database
          schema:
            $ref: '#/definitions/Product'
      """
      rv = db.insert(request.json)
      return jsonify(rv)

  ...


  product_schema = swagger.get_schema('product')

  ```


  This method returns a dictionary which contains the Flasgger schema id,

  all defined parameters and a list of required parameters.


  # HTML sanitizer


  By default Flasgger will try to sanitize the content in YAML definitions

  replacing every ```\n``` with ```<br>``` but you can change this behaviour

  setting another kind of sanitizer.


  ```python

  from flasgger import Swagger, NO_SANITIZER


  app =Flask()

  swagger = Swagger(app, sanitizer=NO_SANITIZER)

  ```


  You can write your own sanitizer


  ```python

  swagger = Swagger(app, sanitizer=lambda text: do_anything_with(text))

  ```


  There is also a Markdown parser available, if you want to be able to render

  Markdown in your specs description use **MK_SANITIZER**



  # Swagger UI and templates


  You can override the `templates/flasgger/index.html` in your application and

  this template will be the `index.html` for SwaggerUI. Use
  `flasgger/ui2/templates/index.html`

  as base for your customization.


  Flasgger supports Swagger UI versions 2 and 3, The version 3 is still
  experimental but you

  can try setting `app.config['SWAGGER']['uiversion']`.


  ```python

  app = Flask(__name__)

  app.config['SWAGGER'] = {
      'title': 'My API',
      'uiversion': 3
  }

  swagger = Swagger(app)


  ```


  # OpenAPI 3.0 Support


  There is experimental support for OpenAPI 3.0 that should work when using
  SwaggerUI 3. To use OpenAPI 3.0, set `app.config['SWAGGER']['openapi']` to a
  version that the current SwaggerUI 3 supports such as `'3.0.2'`.


  For an example of this that uses `callbacks` and `requestBody`, see the
  [callbacks example](examples/callbacks.py).


  ## Externally loading Swagger UI and jQuery JS/CSS


  Starting with Flasgger 0.9.2 you can specify external URL locations for
  loading the JavaScript and CSS for the Swagger and jQuery libraries loaded in
  the Flasgger default templates.  If the configuration properties below are
  omitted, Flasgger will serve static versions it includes - these versions may
  be older than the current Swagger UI v2 or v3 releases.


  The following example loads Swagger UI and jQuery versions from unpkg.com:


  ```

  swagger_config = Swagger.DEFAULT_CONFIG

  swagger_config['swagger_ui_bundle_js'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js'

  swagger_config['swagger_ui_standalone_preset_js'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js'

  swagger_config['jquery_js'] = '//unpkg.com/jquery@2.2.4/dist/jquery.min.js'

  swagger_config['swagger_ui_css'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui.css'

  Swagger(app, config=swagger_config)

  ```


  # Initializing Flasgger with default data.


  You can start your Swagger spec with any default data providing a template:


  ```python

  template = {
    "swagger": "2.0",
    "info": {
      "title": "My API",
      "description": "API for my data",
      "contact": {
        "responsibleOrganization": "ME",
        "responsibleDeveloper": "Me",
        "email": "me@me.com",
        "url": "www.me.com",
      },
      "termsOfService": "http://me.com/terms",
      "version": "0.0.1"
    },
    "host": "mysite.com",  # overrides localhost:500
    "basePath": "/api",  # base bash for blueprint registration
    "schemes": [
      "http",
      "https"
    ],
    "operationId": "getmyData"
  }


  swagger = Swagger(app, template=template)


  ```


  And then the template is the default data unless some view changes it. You

  can also provide all your specs as template and have no views. Or views in

  external APP.


  ## Getting default data at runtime


  Sometimes you need to get some data at runtime depending on dynamic values ex:
  you want to check `request.is_secure` to decide if `schemes` will be `https`
  you can do that by using `LazyString`.


  ```py

  from flask import Flask

  from flasgger import, Swagger, LazyString, LazyJSONEncoder


  app = Flask(__init__)


  # Set the custom Encoder (Inherit it if you need to customize)

  app.json_encoder = LazyJSONEncoder



  template = dict(
      info={
          'title': LazyString(lambda: 'Lazy Title'),
          'version': LazyString(lambda: '99.9.9'),
          'description': LazyString(lambda: 'Hello Lazy World'),
          'termsOfService': LazyString(lambda: '/there_is_no_tos')
      },
      host=LazyString(lambda: request.host),
      schemes=[LazyString(lambda: 'https' if request.is_secure else 'http')],
      foo=LazyString(lambda: "Bar")
  )

  Swagger(app, template=template)


  ```


  The `LazyString` values will be evaluated only when `jsonify` encodes the
  value at runtime, so you have access to Flask `request, session, g, etc..` and
  also may want to access a database.


  ## Behind a reverse proxy


  Sometimes you're serving your swagger docs behind an reverse proxy (e.g.
  NGINX).  When following the [Flask
  guidance](http://flask.pocoo.org/snippets/35/),

  the swagger docs will load correctly, but the "Try it Out" button points to
  the wrong place.  This can be fixed with the following code:


  ```python

  from flask import Flask, request

  from flasgger import Swagger, LazyString, LazyJSONEncoder


  app = Flask(__name__)

  app.json_encoder = LazyJSONEncoder


  template = dict(swaggerUiPrefix=LazyString(lambda :
  request.environ.get('HTTP_X_SCRIPT_NAME', '')))

  swagger = Swagger(app, template=template)


  ``` 


  # Customize default configurations


  Custom configurations such as a different specs route or disabling Swagger UI
  can be provided to Flasgger:


  ```python

  swagger_config = {
      "headers": [
      ],
      "specs": [
          {
              "endpoint": 'apispec_1',
              "route": '/apispec_1.json',
              "rule_filter": lambda rule: True,  # all in
              "model_filter": lambda tag: True,  # all in
          }
      ],
      "static_url_path": "/flasgger_static",
      # "static_folder": "static",  # must be set by user
      "swagger_ui": True,
      "specs_route": "/apidocs/"
  }


  swagger = Swagger(app, config=swagger_config)


  ```


  ## Extracting Definitions


  Definitions can be extracted when `id` is found in spec, example:


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger


  app = Flask(__name__)

  swagger = Swagger(app)


  @app.route('/colors/<palette>/')

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      ---
      parameters:
        - name: palette
          in: path
          type: string
          enum: ['all', 'rgb', 'cmyk']
          required: true
          default: all
      responses:
        200:
          description: A list of colors (may be filtered by palette)
          schema:
            id: Palette
            type: object
            properties:
              palette_name:
                type: array
                items:
                  schema:
                    id: Color
                    type: string
          examples:
            rgb: ['red', 'green', 'blue']
      """
      all_colors = {
          'cmyk': ['cian', 'magenta', 'yellow', 'black'],
          'rgb': ['red', 'green', 'blue']
      }
      if palette == 'all':
          result = all_colors
      else:
          result = {palette: all_colors.get(palette)}

      return jsonify(result)

  app.run(debug=True)

  ```


  In this example you do not have to pass `definitions` but need to add `id` to

  your schemas.

fotinakis/swagger-blocks: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273E:28DF:74F3F4:EEBAD1:6500FB39.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
westfieldlabs/apivore: >
  [![Build
  Status](https://travis-ci.org/westfieldlabs/apivore.svg?branch=master)](https://travis-ci.org/westfieldlabs/apivore)


  [![Code
  Climate](https://codeclimate.com/github/westfieldlabs/apivore/badges/gpa.svg)](https://codeclimate.com/github/westfieldlabs/apivore)

  # Apivore


  Automatically tests your rails API against its OpenAPI (Swagger) description
  of end-points, models, and query parameters.


  Currently supports and validates against OpenAPI 2.0, (see
  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)


  ## Installation


  To use Apivore, add the following to your Gemfile:

      gem 'apivore'
  ***WARNING:*** If apivore is listed in the Gemfile _above_ rspec then some
  issues, specifically `NameError: uninitialized constant RSpec::Mocks`, may
  arise when trying to run specs.


  ## Usage


  Create a new request spec in spec/requests:

  ```ruby

  require 'spec_helper'


  RSpec.describe 'the API', type: :apivore, order: :defined do
    subject { Apivore::SwaggerChecker.instance_for('/swagger.json') }

    context 'has valid paths' do
      # tests go here
    end

    context 'and' do
      it 'tests all documented routes' do
        expect(subject).to validate_all_paths
      end
    end
  end

  ```

  using the path to your application's Swagger 2.0 documentation. The convention
  is `/swagger.json`.


  This will validate the json against the Swagger 2.0 schema and allow you to
  add tests for each documented endpoint combination of a path, method, and
  expected response.


  If your Swagger documentation contains a schema for the response model, the
  generated tests will test whether the response conforms to that model.


  For paths that take parameters, listed in the Swagger docs like
  `/deals/{id}.json`, values need to be passed to Apivore to substitute in to
  access the responses generated by your test data.


  This is accomplished by passing the params into the validates function.

  ```ruby

  context 'has valid paths' do
    let(:params) { { "id" => 1 } }
    specify do
      expect(subject).to validate(
        :get, '/deals/{id}.json', 200, params
      )
    end

    # or alternatively

    it { is_expected.to validate( :get, '/deals/{id}.json', 200, params ) }
  end

  ```

  A query string can be specified with the `_query_string` key as follows:


  ```ruby

  expect(subject).to validate(
    :get '/deals', 200, {"_query_string" => "title=Hello%20World&edition=3"}
  )

  ```

  Parameters in the query string are not validated or processed by Apivore in
  any way.


  Post parameters can be specified with the `_data` key as follows:


  ```ruby

  expect(subject).to validate(
    :post '/deals', 200, {"_data" => {'title' => 'Hello World'} }
  )

  ```


  HTTP headers can be specified via the `_headers` key:


  ```ruby

  expect(subject).to validate(
    :get '/deals', 200, {"_headers" => {'accept' => 'application/json'} }
  )

  ```


  Your Swagger.json can be validated against additional custom schemata, for
  example to enforce organisation API documentation standards, by using the
  following syntax:


  ```ruby

  it 'additionally conforms to a custom schema' do
    expect(subject).to conform_to("<your custom schema>.json")
  end

  ```

  We have included an example [here]
  (data/custom_schemata/westfield_api_standards.json). The file path to this
  custom schema is stored in `Apivore::CustomSchemaValidator::WF_SCHEMA`, if you
  wish to use it. 


  Run the tests as part of your normal rspec test suite, e.g., `rake
  spec:requests`


  ## Useful Resources


  * http://json-schema.org/

  * https://github.com/OAI/OpenAPI-Specification

  * https://github.com/ruby-json-schema/json-schema


  ## License


  Copyright 2014 Westfield Labs Corporation


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at


  http://www.apache.org/licenses/LICENSE-2.0


  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.


  This project includes and makes use of the [OpenAPI (Swagger) 2.0 schema
  json](http://swagger.io/v2/schema.json) (Copyright 2016 The Linux Foundation.
  Released under the [Apache
  License](http://www.apache.org/licenses/LICENSE-2.0)) included here as
  `data/swagger_2.0_schema.json`


  It also includes a copy of http://json-schema.org/draft-04/schema, included as
  `data/draft04_schema.json`. These schemata are included to prevent network
  resource fetching and speed up validation times considerably.


  ## Contributors


  * Charles Horn (https://github.com/hornc)

  * Leon Dewey (https://github.com/leondewey)

  * Max Brosnahan (https://github.com/gingermusketeer)
slanatech/swagger-stats: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B68:9AE9:A099B9:14642B7:6500FB7E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
notonthehighstreet/svelte: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A84:0E33:21BC78:4515CC:6500FB63.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
domaindrivendev/Swashbuckle.AspNetCore: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2733:1D02:76F450:F30473:6500FB2D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
z0mt3c/hapi-swaggered: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E56A:20B0:A66D0B:151CDF8:6500FBAA.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
jfinkhaeuser/prance: >+
  |Posix Build Status| |Windows Build Status| |Docs| |License|

  |PyPI| |Python Versions| |Package Format| |Package Status| |FOSSA Status|
  |Liberapay|


  |Logo|


  Prance provides parsers for `Swagger/OpenAPI

  2.0 and 3.0 <http://swagger.io/specification/>`__ API specifications in
  Python.

  It uses `openapi\_spec\_validator
  <https://github.com/p1c2u/openapi-spec-validator>`__,

  `swagger\_spec\_validator <https://github.com/Yelp/swagger_spec_validator>`__
  or

  `flex <https://github.com/pipermerriam/flex>`__

  to validate specifications, but additionally resolves `JSON

  references <https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03>`__

  in accordance with the OpenAPI spec.


  Mostly the latter involves handling non-URI references; OpenAPI is fine

  with providing relative file paths, whereas JSON references require URIs

  at this point in time.


  Prance is `up for adoption
  <https://github.com/jfinkhaeuser/prance/issues/91>`__.


  Usage

  =====


  Installation

  ------------


  Prance is available from PyPI, and can be installed via pip:


  .. code:: bash

      $ pip install prance

  Note that this will install the code, but additional subpackages must be
  specified

  to unlock various pieces of functionality. At minimum, a parsing backend must
  be

  installed. For the CLI functionality, you need further dependencies.


  The recommended installation installs the CLI, uses ICU and installs one
  validation

  backend:


  .. code:: bash

      $ pip install prance[osv,icu,cli]

  Make sure you have `ICU Unicode Library <http://site.icu-project.org/home>`__
  installed,

  as well as Python dev library before running the commands above. If not, use
  the

  following commands:


  **Ubuntu**


  .. code:: bash

      $ sudo apt-get install libicu-dev
      $ sudo apt-get install python3-dev


  Command Line Interface

  ----------------------


  After installing prance, a CLI is available for validating (and resolving

  external references in) specs:


  .. code:: bash

      # Validates with resolving
      $ prance validate path/to/swagger.yml

      # Validates without resolving
      $ prance validate --no-resolve path/to/swagger.yml

      # Fetch URL, validate and resolve.
      $ prance validate http://petstore.swagger.io/v2/swagger.json
      Processing "http://petstore.swagger.io/v2/swagger.json"...
       -> Resolving external references.
      Validates OK as Swagger/OpenAPI 2.0!

  Validation is not the only feature of prance. One of the side effects of

  resolving is that from a spec with references, one can create a fully resolved

  output spec. In the past, this was done via options to the ``validate``
  command,

  but now there's a specific command just for this purpose:


  .. code:: bash

      # Compile spec
      $ prance compile path/to/input.yml path/to/output.yml


  Lastly, with the arrival of OpenAPI 3.0.0, it becomes useful for tooling to

  convert older specs to the new standard. Instead of re-inventing the wheel,

  prance just provides a CLI command for passing specs to the web API of

  `swagger2openapi <https://github.com/Mermade/swagger2openapi>`__ - a working

  internet connection is therefore required for this command:


  .. code:: bash

      # Convert spec
      $ prance convert path/to/swagger.yml path/to/openapi.yml


  Code

  ----


  Most likely you have spec file and want to parse it:


  .. code:: python

      from prance import ResolvingParser
      parser = ResolvingParser('path/to/my/swagger.yaml')
      parser.specification  # contains fully resolved specs as a dict

  Prance also includes a non-resolving parser that does not follow JSON

  references, in case you prefer that.


  .. code:: python

      from prance import BaseParser
      parser = BaseParser('path/to/my/swagger.yaml')
      parser.specification  # contains specs as a dict still containing JSON references

  On Windows, the code reacts correctly if you pass posix-like paths

  (``/c:/swagger``) or if the path is relative.  If you pass absolute

  windows path (like ``c:\swagger.yaml``), you can use

  ``prance.util.fs.abspath`` to convert them.


  URLs can also be parsed:


  .. code:: python

      parser = ResolvingParser('http://petstore.swagger.io/v2/swagger.json')

  Largely, that's it. There is a whole slew of utility code that you may

  or may not find useful, too. Look at the `full documentation

  <https://jfinkhaeuser.github.io/prance/#api-modules>`__ for details.



  Compatibility

  -------------


  *Python Versions*


  Version 0.16.2 is the last version supporting Python 2. It was released on

  Nov 12th, 2019. Python 2 reaches end of life at the end of 2019. If you wish

  for updates to the Python 2 supported packages, please contact the maintainer

  directly.


  Until fairly recently, we also tested with `PyPy <https://www.pypy.org/>`__.

  Unfortunately, Travis isn't very good at supporting this. So in the absence

  of spare time, they're disabled. `Issue 50
  <https://github.com/jfinkhaeuser/prance/issues/50>`__

  tracks progress on that.


  Similarly, but less critically, Python 3.4 is no longer receiving a lot of

  love from CI vendors, so automated builds on that version are no longer

  supported.


  *Backends*


  Different validation backends support different features.


  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | Backend                | Python Version | OpenAPI Version | Strict Mode |
  Notes                                                 | Available From |
  Link                                                                             
  |

  +========================+================+=================+=============+=======================================================+================+===================================================================================+

  | swagger-spec-validator | 2 and 3        | 2.0 only        | yes         |
  Slow; does not accept integer keys (see strict mode). | prance 0.1     |
  `swagger\_spec\_validator
  <https://github.com/Yelp/swagger_spec_validator>`__     |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | flex                   | 2 and 3        | 2.0 only        | n/a         |
  Fastest; unfortunately deprecated.                    | prance 0.8     | `flex
  <https://github.com/pipermerriam/flex>`__                                   |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | openapi-spec-validator | 2 and 3        | 2.0 and 3.0     | yes         |
  Slow; does not accept integer keys (see strict mode). | prance 0.11    |
  `openapi\_spec\_validator
  <https://github.com/p1c2u/openapi-spec-validator>`__    |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+


  You can select the backend in the constructor of the parser(s):


  .. code:: python

      parser = ResolvingParser('http://petstore.swagger.io/v2/swagger.json', backend = 'openapi-spec-validator')


  No backend is included in the dependencies; they are detected at run-time. If
  you install them,

  they can be used:


  .. code:: bash

      $ pip install openapi-spec-validator
      $ pip install prance
      $ prance validate --backend=openapi-spec-validator path/to/spec.yml

  *A note on flex usage:* While flex is the fastest validation backend,
  unfortunately it is no longer

  maintained and there are issues with its dependencies. For one thing, it
  depends on a version of `PyYAML`

  that contains security flaws. For another, it depends explicitly on older
  versions of `click`.


  If you use the flex subpackage, therefore, you do so at your own risk.


  *Compatibility*


  See `COMPATIBILITY.rst
  <https://github.com/jfinkhaeuser/prance/blob/master/COMPATIBILITY.rst>`__

  for a list of known issues.



  Partial Reference Resolution

  ----------------------------


  It's possible to instruct the parser to only resolve some kinds of references.

  This allows e.g. resolving references from external URLs, whilst keeping local

  references (i.e. to local files, or file internal) intact.


  .. code:: python

      from prance import ResolvingParser
      from prance.util.resolver import RESOLVE_HTTP

      parser = ResolvingParser('/path/to/spec', resolve_types = RESOLVE_HTTP)


  Multiple types can be specified by OR-ing constants together:


  .. code:: python

      from prance import ResolvingParser
      from prance.util.resolver import RESOLVE_HTTP, RESOLVE_FILES

      parser = ResolvingParser('/path/to/spec', resolve_types = RESOLVE_HTTP | RESOLVE_FILES)


  Extensions

  ----------


  Prance includes the ability to reference outside swagger definitions

  in outside Python packages. Such a package must already be importable

  (i.e. installed), and be accessible via the

  `ResourceManager API
  <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#resourcemanager-api>`__

  (some more info `here
  <https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files>`__).


  For example, you might create a package ``common_swag`` with the file

  ``base.yaml`` containing the definition


  .. code:: yaml

      definitions:
        Severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL

  In the ``setup.py`` for ``common_swag`` you would add lines such as


  .. code:: python

      packages=find_packages('src'),
      package_dir={'': 'src'},
      package_data={
          '': '*.yaml'
      }

  Then, having installed ``common_swag`` into some application, you could

  now write


  .. code:: yaml

      definitions:
        Message:
          type: object
          properties:
            severity:
              $ref: 'python://common_swag/base.yaml#/definitions/Severity'
            code:
              type: string
            summary:
              type: string
            description:
              type: string
          required:
          - severity
          - summary

  Contributing

  ============


  See `CONTRIBUTING.md
  <https://github.com/jfinkhaeuser/prance/blob/master/CONTRIBUTING.md>`__ for
  details.


  Professional support is available through `finkhaeuser consulting
  <https://finkhaeuser.de>`__.


  License

  =======


  Licensed under MITNFA (MIT +no-false-attribs) License. See the

  `LICENSE.txt
  <https://github.com/jfinkhaeuser/prance/blob/master/LICENSE.txt>`__ file for
  details.


  "Prancing unicorn" logo image Copyright (c) Jens Finkhaeuser.

  Made by `Moreven B <http://morevenb.com/>`__. Use of the logo is permitted
  under

  the `Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
  license <https://creativecommons.org/licenses/by-nc-sa/4.0/>`__.


  .. |Posix Build Status| image::
  https://travis-ci.org/jfinkhaeuser/prance.svg?branch=master
     :target: https://travis-ci.org/jfinkhaeuser/prance
  .. |Windows Build Status| image::
  https://ci.appveyor.com/api/projects/status/ic7lo8r95mkee7di/branch/master?svg=true
     :target: https://ci.appveyor.com/project/jfinkhaeuser/prance
  .. |Docs| image:: https://img.shields.io/badge/docs-passing-brightgreen.svg
     :target: https://jfinkhaeuser.github.io/prance/
  .. |License| image:: https://img.shields.io/pypi/l/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |PyPI| image:: https://img.shields.io/pypi/v/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Package Format| image:: https://img.shields.io/pypi/format/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Python Versions| image:: https://img.shields.io/pypi/pyversions/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Package Status| image:: https://img.shields.io/pypi/status/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |FOSSA Status| image::
  https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjfinkhaeuser%2Fprance.svg?type=shield
     :target: https://app.fossa.io/projects/git%2Bgithub.com%2Fjfinkhaeuser%2Fprance?ref=badge_shield
  .. |Liberapay| image::
  http://img.shields.io/liberapay/receives/jfinkhaeuser.svg?logo=liberapay
     :target: https://liberapay.com/jfinkhaeuser/donate
  .. |Logo| image::
  https://raw.githubusercontent.com/jfinkhaeuser/prance/master/docs/images/prance_logo_256.png

swimlane/qswag: >
  # qswag


  Fast & Light Swagger generator for .NET Core. For more information, checkout
  the [documentation](https://swimlane.gitbooks.io/qswag/content/)


  ## Example


  ```csharp

  using System;

  using System.Collections.Generic;

  using System.IO;

  using System.Linq;

  using System.Net.Http;

  using System.Reflection;

  using System.Text;

  using Microsoft.AspNetCore.Authorization;

  using Microsoft.AspNetCore.Mvc;

  using Newtonsoft.Json;

  using QSwagGenerator;

  using QSwagSchema;


  namespace Controllers

  {
      /// <summary>
      /// Swagger spec controller.
      /// </summary>
      /// <seealso cref="Microsoft.AspNetCore.Mvc.Controller" />
      public class SwaggerController : Controller
      {
          private readonly List<Type> _types;

          /// <summary>
          /// Initializes a new instance of the <see cref="SwaggerController"/> class.
          /// </summary>
          public SwaggerController()
          {
              _types = new List<Type>
              {
                  typeof(GroupsController),
                  typeof(SettingsController)

              };
          }
          /// <summary>
          /// Gets the swagger.
          /// </summary>
          /// <returns>Swagger specification Json
          /// </returns>
          [HttpGet("/swagger")]
          public ActionResult GetSwagger(params string[] type)
          {
              var types = type == null || type.Length <= 0 ? _types : type.Select(GetTypeFromString);
              var httpRequest = HttpContext?.Request;
              
              var generatorSettings = new GeneratorSettings(httpRequest)
              {
                  DefaultUrlTemplate = "/[controller]/{id?}",
                  IgnoreObsolete = true,
                  Info = new Info() { Title = "Swimlane API", Version = "3.0" },
                  XmlDocPath = Path.ChangeExtension(Assembly.GetEntryAssembly().Location, "xml"),
                  SecurityDefinitions = new Dictionary<string, SecurityDefinition>()
                  {
                      {
                          "jwt_token",
                          new SecurityDefinition("Authorization", SecuritySchemeType.ApiKey) {In = Location.Header}
                      }
                  },
                  JsonSchemaLicense = "YourJsonSchemaLicense"
              };
              
              generatorSettings.Security.Add(new SecurityRequirement("jwt_token"));
              var generateForControllers = WebApiToSwagger.GenerateForControllers(types, generatorSettings, nameof(GetSwagger));
              
              return new FileContentResult(Encoding.UTF8.GetBytes(generateForControllers), "application/json");
          }

          private Type GetTypeFromString(string type)
          {
              var typeFromString = Type.GetType(type);
              if (typeFromString != null)
                  return typeFromString;
              if (!type.Contains("."))
                  return GetTypeFromString(string.Join(".", GetType().Namespace, type));
              if (!type.EndsWith("controller", StringComparison.CurrentCultureIgnoreCase))
                  return GetTypeFromString(string.Concat(type, "Controller"));
              return null;
          }
      }
  }

  ```


  ## Building Locally

  Before running tests locally you must set an an environment variable called
  `Newtonsoft` that contains the your Newtonsoft JSONSchema key.  Tests will not
  execute successfully without this key.


  ## Build Job Details

  Before merging to master the semver version attrbutes (major, minor, or patch)
  must be updated to reflect the type of change made.  The publish to NuGet upon
  merging to master will fail if the version is not updated.


  ### Stages

  [Dotnet Restore] - Restore 3rd party NuGet packages for all projects

  [Dotnet Build] - Build all projects in release mode

  [Run Tests] - Run all tests

  [Publish] - Publishes QSwagGenerator and QSwagSchema to NuGet if a master
  branch build


  ## Credits

  `qswag` is a [Swimlane](http://swimlane.com) open-source project; we believe
  in giving back to the open-source community by sharing some of the projects we
  build for our application. Swimlane is an automated cyber security operations
  and incident response platform that enables cyber security teams to leverage
  threat intelligence, speed up incident response and automate security
  operations.
frankiesardo/pedestal-swagger: >
  # route-swagger


  [![Build
  status](https://circleci.com/gh/frankiesardo/route-swagger.svg?style=shield)](https://circleci.com/gh/frankiesardo/route-swagger)


  Generate Swagger documentation from pedestal (or tripod) routes


  - [Demo](https://pedestal-swagger.herokuapp.com)


  ## For old pedestal-swagger users


  This project now focuses solely on route transformation and schema validation
  and thus is pedestal-agnostic.


  Route-swagger is a much lower level library. Everything the old
  pedestal-swagger did is still possible (look at the example repo) but requires
  a bit more boilerplate. The major breaking difference is that now
  route-swagger uses ring specific keys for describing the schema rather than
  swagger ones, e.g.


  ```clj

  {:parameters {:body-params ..
                :form-params ..
                :query-params ..
                :path-params ..
                :headers ..}
    :responses {500 {:body .. :headers ..}}}            
  ```


  Instead of `body`, `formData`, `query`, `schema`, etc. That should make it
  much more user friendly for clojure users.


  For a nicer integration with pedestal, extra features and easier migration
  path from the old pedestal-swagger check out
  [pedestal-api](https://github.com/oliyh/pedestal-api).


  ## Download


  [![Clojars
  Project](http://clojars.org/frankiesardo/route-swagger/latest-version.svg)](http://clojars.org/frankiesardo/route-swagger)


  ## Usage


  Have a look at the project under the example folder for a working pedestal app


  ## License


  Copyright © 2015 Frankie Sardo


  Distributed under the Eclipse Public License either version 1.0 or (at

  your option) any later version.
gengo/grpc-gateway: >
  # grpc-gateway


  [![release](https://img.shields.io/github/release/grpc-ecosystem/grpc-gateway.svg?style=flat-square)](https://github.com/grpc-ecosystem/grpc-gateway/releases)
  [![CircleCI](https://img.shields.io/circleci/project/github/grpc-ecosystem/grpc-gateway/master.svg?style=flat-square)](https://circleci.com/gh/grpc-ecosystem/grpc-gateway)
  [![fuzzit](https://app.fuzzit.dev/badge?org_id=grpc-gateway)](https://app.fuzzit.dev/orgs/grpc-gateway/dashboard)
  [![coverage](https://img.shields.io/codecov/c/github/grpc-ecosystem/grpc-gateway/master.svg?style=flat-square)](https://codecov.io/gh/grpc-ecosystem/grpc-gateway)
  [![license](https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway.svg?style=flat-square)](LICENSE.txt)


  The grpc-gateway is a plugin of the Google protocol buffers compiler

  [protoc](https://github.com/protocolbuffers/protobuf).

  It reads protobuf service definitions and generates a reverse-proxy server
  which

  'translates a RESTful HTTP API into gRPC. This server is generated according
  to the

  [`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)

  annotations in your service definitions.


  This helps you provide your APIs in both gRPC and RESTful style at the same
  time.


  ![architecture introduction
  diagram](https://docs.google.com/drawings/d/12hp4CPqrNPFhattL_cIoJptFvlAqm5wLQ0ggqI5mkCg/pub?w=749&amp;h=370)


  ## Check out our
  [documentation](https://grpc-ecosystem.github.io/grpc-gateway/)!


  ## Background

  gRPC is great -- it generates API clients and server stubs in many programming

  languages, it is fast, easy-to-use, bandwidth-efficient and its design is

  combat-proven by Google. However, you might still want to provide a
  traditional

  RESTful JSON API as well. Reasons can range from maintaining

  backwards-compatibility, supporting languages or clients not well supported by

  gRPC, to simply maintaining the aesthetics and tooling involved with a RESTful

  JSON architecture.


  This project aims to provide that HTTP+JSON interface to your gRPC service.

  A small amount of configuration in your service to attach HTTP semantics is
  all

  that's needed to generate a reverse-proxy with this library.


  ## Installation


  The grpc-gateway requires a local installation of the Google protocol buffers

  compiler `protoc` v3.0.0 or above. Please install this via your local package

  manager or by downloading one of the releases from the official repository:


  https://github.com/protocolbuffers/protobuf/releases


  The following instructions assume you are using

  [Go Modules](https://github.com/golang/go/wiki/Modules) for dependency

  management. Use a

  [tool
  dependency](https://github.com/golang/go/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module)

  to track the versions of the following executable packages:


  ```go

  // +build tools


  package tools


  import (
      _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway"
      _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger"
      _ "github.com/golang/protobuf/protoc-gen-go"
  )

  ```


  Run `go mod tidy` to resolve the versions. Install by running


  ```sh

  $ go install \
      github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway \
      github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger \
      github.com/golang/protobuf/protoc-gen-go
  ```


  This will place three binaries in your `$GOBIN`;


  * `protoc-gen-grpc-gateway`

  * `protoc-gen-swagger`

  * `protoc-gen-go`


  Make sure that your `$GOBIN` is in your `$PATH`.


  ## Usage


  1. Define your [gRPC](https://grpc.io/docs/) service using protocol buffers 

     `your_service.proto`:
     ```protobuf
     syntax = "proto3";
     package example;
     message StringMessage {
       string value = 1;
     }

     service YourService {
       rpc Echo(StringMessage) returns (StringMessage) {}
     }
     ```

  2. Add a
  [`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)

  annotation to your .proto file

     `your_service.proto`:
     ```diff
      syntax = "proto3";
      package example;
     +
     +import "google/api/annotations.proto";
     +
      message StringMessage {
        string value = 1;
      }

      service YourService {
     -  rpc Echo(StringMessage) returns (StringMessage) {}
     +  rpc Echo(StringMessage) returns (StringMessage) {
     +    option (google.api.http) = {
     +      post: "/v1/example/echo"
     +      body: "*"
     +    };
     +  }
      }
     ```

     See [a_bit_of_everything.proto](examples/internal/proto/examplepb/a_bit_of_everything.proto)
     for examples of more annotations you can add to customize gateway behavior
     and generated Swagger output.

     If you do not want to modify the proto file for use with grpc-gateway you can
     alternatively use an external
     [gRPC Service Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config) file.
     [Check our documentation](https://grpc-ecosystem.github.io/grpc-gateway/docs/grpcapiconfiguration.html)
     for more information.

  3. Generate gRPC stub

     The following generates gRPC code for Golang based on `path/to/your_service.proto`:
     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --go_out=plugins=grpc:. \
       path/to/your_service.proto
     ```

     It will generate a stub file `path/to/your_service.pb.go`.

  4. Implement your service in gRPC as usual

     1. (Optional) Generate gRPC stub in the [other programming languages](https://grpc.io/docs/).

       For example, the following generates gRPC code for Ruby based on `path/to/your_service.proto`:
       ```sh
       protoc -I/usr/local/include -I. \
         -I$GOPATH/src \
         -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
         --ruby_out=. \
         path/to/your_service.proto

       protoc -I/usr/local/include -I. \
         -I$GOPATH/src \
         -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
         --plugin=protoc-gen-grpc=grpc_ruby_plugin \
         --grpc-ruby_out=. \
         path/to/your_service.proto
       ```
     2. Add the googleapis-common-protos gem (or your language equivalent) as a dependency to your project.
     3. Implement your gRPC service stubs

  5. Generate reverse-proxy using `protoc-gen-grpc-gateway`

     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --grpc-gateway_out=logtostderr=true:. \
       path/to/your_service.proto
     ```

     It will generate a reverse proxy `path/to/your_service.pb.gw.go`.

  6. Write an entrypoint for the HTTP reverse-proxy server

     ```go
     package main
   
     import (
       "context"  // Use "golang.org/x/net/context" for Golang version <= 1.6
       "flag"
       "net/http"
   
       "github.com/golang/glog"
       "github.com/grpc-ecosystem/grpc-gateway/runtime"
       "google.golang.org/grpc"
   
       gw "path/to/your_service_package"  // Update
     )
   
     var (
       // command-line options:
       // gRPC server endpoint
       grpcServerEndpoint = flag.String("grpc-server-endpoint",  "localhost:9090", "gRPC server endpoint")
     )
   
     func run() error {
       ctx := context.Background()
       ctx, cancel := context.WithCancel(ctx)
       defer cancel()
   
       // Register gRPC server endpoint
       // Note: Make sure the gRPC server is running properly and accessible
       mux := runtime.NewServeMux()
       opts := []grpc.DialOption{grpc.WithInsecure()}
       err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)
       if err != nil {
         return err
       }
   
       // Start HTTP server (and proxy calls to gRPC server endpoint)
       return http.ListenAndServe(":8081", mux)
     }
   
     func main() {
       flag.Parse()
       defer glog.Flush()
   
       if err := run(); err != nil {
         glog.Fatal(err)
       }
     }
     ```

  7. (Optional) Generate swagger definitions using `protoc-gen-swagger`

     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --swagger_out=logtostderr=true:. \
       path/to/your_service.proto
     ```

  ## Video intro


  This GopherCon UK 2019 presentation from our maintainer

  [@JohanBrandhorst](https://github.com/johanbrandhorst) provides a good intro
  to

  using the grpc-gateway. It uses the following boilerplate repo as a base:

  https://github.com/johanbrandhorst/grpc-gateway-boilerplate.


  [![gRPC-Gateway
  presentation](https://img.youtube.com/vi/Pq1paKC-fXk/0.jpg)](https://www.youtube.com/watch?v=Pq1paKC-fXk)


  ## Parameters and flags


  During code generation with `protoc`, flags to grpc-gateway tools must be
  passed

  through protoc using the `--<tool_suffix>_out=<flags>:<path>` pattern, for

  example:


  ```sh

  --grpc-gateway_out=logtostderr=true,repeated_path_param_separator=ssv:.

  --swagger_out=logtostderr=true,repeated_path_param_separator=ssv:.

  ```


  `protoc-gen-grpc-gateway` supports custom mapping from Protobuf `import` to

  Golang import paths. They are compatible to

  [the parameters with same names in
  `protoc-gen-go`](https://github.com/golang/protobuf#parameters)

  (except `source_relative`).


  In addition we also support the `request_context` parameter in order to use
  the

  `http.Request`'s Context (only for Go 1.7 and above). This parameter can be

  useful to pass request scoped context between the gateway and the gRPC
  service.


  `protoc-gen-grpc-gateway` also supports some more command line flags to
  control

  logging. You can give these flags together with parameters above. Run

  `protoc-gen-grpc-gateway --help` for more details about the flags.


  Similarly, `protoc-gen-swagger` supports command-line flags to control Swagger

  output (for example, `json_names_for_fields` to output JSON names for fields

  instead of protobuf names). Run `protoc-gen-swagger --help` for more flag

  details. Further Swagger customization is possible by annotating your `.proto`

  files with options from

  [openapiv2.proto](protoc-gen-swagger/options/openapiv2.proto) - see

  [a_bit_of_everything.proto](examples/internal/proto/examplepb/a_bit_of_everything.proto)

  for examples.


  ## More Examples

  More examples are available under `examples` directory.

  * `proto/examplepb/echo_service.proto`,
  `proto/examplepb/a_bit_of_everything.proto`,
  `proto/examplepb/unannotated_echo_service.proto`: service definition
    * `proto/examplepb/echo_service.pb.go`, `proto/examplepb/a_bit_of_everything.pb.go`, `proto/examplepb/unannotated_echo_service.pb.go`: [generated] stub of the service
    * `proto/examplepb/echo_service.pb.gw.go`, `proto/examplepb/a_bit_of_everything.pb.gw.go`, `proto/examplepb/uannotated_echo_service.pb.gw.go`: [generated] reverse proxy for the service
    * `proto/examplepb/unannotated_echo_service.yaml`: gRPC API Configuration for ```unannotated_echo_service.proto```
  * `server/main.go`: service implementation

  * `main.go`: entrypoint of the generated reverse proxy


  To use the same port for custom HTTP handlers (e.g. serving `swagger.json`),

  gRPC-gateway, and a gRPC server, see

  [this example by
  CoreOS](https://github.com/philips/grpc-gateway-example/blob/master/cmd/serve.go)

  (and its accompanying [blog
  post](https://coreos.com/blog/grpc-protobufs-swagger.html)).


  ## Features


  ### Supported


  * Generating JSON API handlers.

  * Method parameters in request body.

  * Method parameters in request path.

  * Method parameters in query string.

  * Enum fields in path parameter (including repeated enum fields).

  * Mapping streaming APIs to newline-delimited JSON streams.

  * Mapping HTTP headers with `Grpc-Metadata-` prefix to gRPC metadata (prefixed
  with `grpcgateway-`)

  * Optionally emitting API definitions for

  [OpenAPI (Swagger)
  v2](https://swagger.io/docs/specification/2-0/basic-structure/).

  * Setting [gRPC
  timeouts](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests)

  through inbound HTTP `Grpc-Timeout` header.

  * Partial support for [gRPC API
  Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config)

  files as an alternative to annotation.

  * Automatically translating PATCH requests into Field Mask gRPC requests. See

  [the docs](https://grpc-ecosystem.github.io/grpc-gateway/docs/patch.html)

  for more information.


  ### No plan to support

  But patch is welcome.

  * Method parameters in HTTP headers.

  * Handling trailer metadata.

  * Encoding request/response body in XML.

  * True bi-directional streaming.


  # Mapping gRPC to HTTP


  * [How gRPC error codes map to HTTP status codes in the
  response](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/runtime/errors.go#L15).

  * HTTP request source IP is added as `X-Forwarded-For` gRPC request header.

  * HTTP request host is added as `X-Forwarded-Host` gRPC request header.

  * HTTP `Authorization` header is added as `authorization` gRPC request header.

  * Remaining Permanent HTTP header keys (as specified by the IANA

  [here](http://www.iana.org/assignments/message-headers/message-headers.xhtml)

  are prefixed with `grpcgateway-` and added with their values to gRPC request

  header.

  * HTTP headers that start with 'Grpc-Metadata-' are mapped to gRPC metadata

  (prefixed with `grpcgateway-`).

  * While configurable, the default {un,}marshaling uses

  [jsonpb](https://godoc.org/github.com/golang/protobuf/jsonpb) with

  `OrigName: true`.


  # Contribution

  See
  [CONTRIBUTING.md](http://github.com/grpc-ecosystem/grpc-gateway/blob/master/CONTRIBUTING.md).


  # License

  grpc-gateway is licensed under the BSD 3-Clause License.

  See
  [LICENSE.txt](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt)
  for more details.
BigstickCarpet/swagger-express-middleware: >
  Swagger Express Middleware

  ============================

  ### Swagger 2.0 middleware and mocks for Express.js


  [![Cross-Platform
  Compatibility](https://apitools.dev/img/badges/os-badges.svg)](https://github.com/APIDevTools/swagger-express-middleware/blob/master/.github/workflows/CI-CD.yaml)

  [![Build
  Status](https://github.com/APIDevTools/swagger-express-middleware/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-express-middleware/blob/master/.github/workflows/CI-CD.yaml)


  [![Coverage
  Status](https://coveralls.io/repos/github/APIDevTools/swagger-express-middleware/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-express-middleware)

  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://apis.guru/browse-apis/)

  [![Dependencies](https://david-dm.org/APIDevTools/swagger-express-middleware.svg)](https://david-dm.org/APIDevTools/swagger-express-middleware)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-express-middleware.svg)](https://www.npmjs.com/package/@apidevtools/swagger-express-middleware)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-express-middleware.svg)](LICENSE)

  [![Buy us a
  tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-express-middleware)




  Features

  --------------------------

  - **Supports Swagger 2.0 specs in JSON or YAML** <br>

  Swagger Express Middleware uses
  [Swagger-Parser](https://github.com/APIDevTools/swagger-parser) to parse,
  validate, and dereference Swagger files.  You can even split your spec into
  multiple different files using `$ref` pointers.


  - **Thoroughly tested**<br>

  Over 1,000 unit tests and integration tests with 100% code coverage.  Tested
  on [**over 1,000 real-world APIs**](https://apis.guru/browse-apis/) from
  Google, Instagram, Spotify, etc.  All tests are run on Mac, Linux, and Windows
  using all LTS versions of Node.


  - [**Mock
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/mock.html)<br>

  **Fully-functional mock** implementations for every operation in your API,
  including data persistence, all with **zero code!**  This is a great way to
  test-drive your API as you write it, or for quick demos and POCs.  You can
  even extend the mock middleware with your own logic and data to fill in any
  gaps.


  - [**Metadata
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/metadata.html)<br>

  Annotates each request with all the relevant information from the Swagger
  definition.  The path, the operation, the parameters, the security
  requirements - they're all easily accessible at `req.swagger`.


  - [**Parse Request
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/parseRequest.html)<br>

  Parses incoming requests and converts everything into the correct data types,
  according to your Swagger API definition.


  - [**Validate Request
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/validateRequest.html)<br>

  Ensures that every request complies with your Swagger API definition, or
  returns the appropriate HTTP error codes if needed.  Of course, you can catch
  any validation errors and handle them however you want.


  - [**CORS
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/CORS.html)<br>

  Adds the appropriate CORS headers to each request and automatically responds
  to CORS preflight requests, all in compliance with your Swagger API
  definition.


  - [**Files
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/files.html)<br>

  Serves the Swagger API file(s) in JSON or YAML format so they can be used with
  front-end tools like [Swagger UI](http://www.swagger.io), [Swagger
  Editor](http://editor.swagger.io), and [Postman](http://getpostman.com).




  Installation and Use

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/).


  ```bash

  npm install @apidevtools/swagger-express-middleware

  ```

  Then use it in your [Node.js](http://nodejs.org/) script like this:


  ```javascript

  const express = require('express');

  const createMiddleware = require('@apidevtools/swagger-express-middleware');


  let app = express();


  createMiddleware('PetStore.yaml', app, function(err, middleware) {
      // Add all the Swagger Express Middleware, or just the ones you need.
      // NOTE: Some of these accept optional options (omitted here for brevity)
      app.use(
          middleware.metadata(),
          middleware.CORS(),
          middleware.files(),
          middleware.parseRequest(),
          middleware.validateRequest(),
          middleware.mock()
      );

      app.listen(8000, function() {
          console.log('The PetStore sample is now running at http://localhost:8000');
      });
  });

  ```




  Samples & Walkthroughs

  --------------------------

  Swagger Express Middleware comes two samples that use the [Swagger Pet Store
  API](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/PetStore.yaml).


  #### Sample 1

  This sample demonstrates the most simplistic usage of Swagger Express
  Middleware. It simply creates a new Express Application and adds all of the
  Swagger middleware without changing any options, and without adding any custom
  middleware.


  * [Source
  Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample1.js)

  *
  [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/running.html)



  #### Sample 2

  This sample demonstrates a few more advanced features of Swagger Express
  Middleware, such as setting a few options, initializing the mock data store,
  and adding custom middleware logic.


  * [Source
  Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample2.js)

  *
  [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/walkthrough2.html)




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [File an
  issue](https://github.com/APIDevTools/swagger-express-middleware/issues) on
  GitHub and [submit a pull
  request](https://github.com/APIDevTools/swagger-express-middleware/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-express-middleware.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`


  4. **Run the sample app**<br>

  `npm start`




  License

  --------------------------

  Swagger Express Middleware is 100% free and open-source, under the [MIT
  license](LICENSE). Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in
  production, then we ask that you [**buy the world a
  tree**](https://plant.treeware.earth/APIDevTools/swagger-express-middleware)
  to thank us for our work. By contributing to the Treeware forest you’ll be
  creating employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![Travis
  CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
RobWin/swagger2markup-gradle-plugin: >
  = Swagger2Markup Gradle Plugin

  :author: Robert Winkler

  :hardbreaks:


  image:https://travis-ci.org/Swagger2Markup/swagger2markup-gradle-plugin.svg?branch=master["Build
  Status",
  link="https://travis-ci.org/Swagger2Markup/swagger2markup-gradle-plugin"]
  image:https://coveralls.io/repos/Swagger2Markup/swagger2markup-gradle-plugin/badge.svg["Coverage
  Status",
  link="https://coveralls.io/r/Swagger2Markup/swagger2markup-gradle-plugin"]
  image:https://api.bintray.com/packages/swagger2markup/Maven/swagger2markup-gradle-plugin/images/download.svg[link="https://bintray.com/swagger2markup/Maven/swagger2markup-gradle-plugin/_latestVersion"]
  image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2",
  link="http://www.apache.org/licenses/LICENSE-2.0.txt"]
  image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter",
  link="https://twitter.com/rbrtwnklr"]
  image:https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/Swagger2Markup/swagger2markup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]


  == Reference documentation


  The documentation can be found at
  https://github.com/Swagger2Markup/swagger2markup#reference-documentation[Reference
  documentation]


  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
raphael/goa: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A82:7919:A4E765:14F0BB1:6500FB69.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
'BigstickCarpet/swagger-parser#swagger-parser': >-
  {"id":25453221,"node_id":"MDEwOlJlcG9zaXRvcnkyNTQ1MzIyMQ==","name":"swagger-parser","full_name":"APIDevTools/swagger-parser","private":false,"owner":{"login":"APIDevTools","id":43750074,"node_id":"MDEyOk9yZ2FuaXphdGlvbjQzNzUwMDc0","avatar_url":"https://avatars0.githubusercontent.com/u/43750074?v=4","gravatar_id":"","url":"https://api.github.com/users/APIDevTools","html_url":"https://github.com/APIDevTools","followers_url":"https://api.github.com/users/APIDevTools/followers","following_url":"https://api.github.com/users/APIDevTools/following{/other_user}","gists_url":"https://api.github.com/users/APIDevTools/gists{/gist_id}","starred_url":"https://api.github.com/users/APIDevTools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/APIDevTools/subscriptions","organizations_url":"https://api.github.com/users/APIDevTools/orgs","repos_url":"https://api.github.com/users/APIDevTools/repos","events_url":"https://api.github.com/users/APIDevTools/events{/privacy}","received_events_url":"https://api.github.com/users/APIDevTools/received_events","type":"Organization","site_admin":false},"html_url":"https://github.com/APIDevTools/swagger-parser","description":"Swagger
  2.0 and OpenAPI 3.0
  parser/validator","fork":false,"url":"https://api.github.com/repos/APIDevTools/swagger-parser","forks_url":"https://api.github.com/repos/APIDevTools/swagger-parser/forks","keys_url":"https://api.github.com/repos/APIDevTools/swagger-parser/keys{/key_id}","collaborators_url":"https://api.github.com/repos/APIDevTools/swagger-parser/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/APIDevTools/swagger-parser/teams","hooks_url":"https://api.github.com/repos/APIDevTools/swagger-parser/hooks","issue_events_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues/events{/number}","events_url":"https://api.github.com/repos/APIDevTools/swagger-parser/events","assignees_url":"https://api.github.com/repos/APIDevTools/swagger-parser/assignees{/user}","branches_url":"https://api.github.com/repos/APIDevTools/swagger-parser/branches{/branch}","tags_url":"https://api.github.com/repos/APIDevTools/swagger-parser/tags","blobs_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/refs{/sha}","trees_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/trees{/sha}","statuses_url":"https://api.github.com/repos/APIDevTools/swagger-parser/statuses/{sha}","languages_url":"https://api.github.com/repos/APIDevTools/swagger-parser/languages","stargazers_url":"https://api.github.com/repos/APIDevTools/swagger-parser/stargazers","contributors_url":"https://api.github.com/repos/APIDevTools/swagger-parser/contributors","subscribers_url":"https://api.github.com/repos/APIDevTools/swagger-parser/subscribers","subscription_url":"https://api.github.com/repos/APIDevTools/swagger-parser/subscription","commits_url":"https://api.github.com/repos/APIDevTools/swagger-parser/commits{/sha}","git_commits_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/commits{/sha}","comments_url":"https://api.github.com/repos/APIDevTools/swagger-parser/comments{/number}","issue_comment_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues/comments{/number}","contents_url":"https://api.github.com/repos/APIDevTools/swagger-parser/contents/{+path}","compare_url":"https://api.github.com/repos/APIDevTools/swagger-parser/compare/{base}...{head}","merges_url":"https://api.github.com/repos/APIDevTools/swagger-parser/merges","archive_url":"https://api.github.com/repos/APIDevTools/swagger-parser/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/APIDevTools/swagger-parser/downloads","issues_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues{/number}","pulls_url":"https://api.github.com/repos/APIDevTools/swagger-parser/pulls{/number}","milestones_url":"https://api.github.com/repos/APIDevTools/swagger-parser/milestones{/number}","notifications_url":"https://api.github.com/repos/APIDevTools/swagger-parser/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/APIDevTools/swagger-parser/labels{/name}","releases_url":"https://api.github.com/repos/APIDevTools/swagger-parser/releases{/id}","deployments_url":"https://api.github.com/repos/APIDevTools/swagger-parser/deployments","created_at":"2014-10-20T06:14:51Z","updated_at":"2020-04-06T17:57:45Z","pushed_at":"2020-04-01T13:01:11Z","git_url":"git://github.com/APIDevTools/swagger-parser.git","ssh_url":"git@github.com:APIDevTools/swagger-parser.git","clone_url":"https://github.com/APIDevTools/swagger-parser.git","svn_url":"https://github.com/APIDevTools/swagger-parser","homepage":"https://apitools.dev/swagger-parser","size":32415,"stargazers_count":584,"watchers_count":584,"language":"JavaScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"forks_count":93,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":41,"license":{"key":"mit","name":"MIT
  License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"forks":93,"open_issues":41,"watchers":584,"default_branch":"master","permissions":{"admin":false,"push":false,"pull":true},"temp_clone_token":"","organization":{"login":"APIDevTools","id":43750074,"node_id":"MDEyOk9yZ2FuaXphdGlvbjQzNzUwMDc0","avatar_url":"https://avatars0.githubusercontent.com/u/43750074?v=4","gravatar_id":"","url":"https://api.github.com/users/APIDevTools","html_url":"https://github.com/APIDevTools","followers_url":"https://api.github.com/users/APIDevTools/followers","following_url":"https://api.github.com/users/APIDevTools/following{/other_user}","gists_url":"https://api.github.com/users/APIDevTools/gists{/gist_id}","starred_url":"https://api.github.com/users/APIDevTools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/APIDevTools/subscriptions","organizations_url":"https://api.github.com/users/APIDevTools/orgs","repos_url":"https://api.github.com/users/APIDevTools/repos","events_url":"https://api.github.com/users/APIDevTools/events{/privacy}","received_events_url":"https://api.github.com/users/APIDevTools/received_events","type":"Organization","site_admin":false},"network_count":93,"subscribers_count":17}
kogosoftwarellc/express-openapi: >
  # @open-api [![Build Status][travis-image]][travis-url] [![Coveralls
  Status][coveralls-image]][coveralls-url] [![Gitter
  chat][gitter-image]][gitter-url] [![Greenkeeper
  badge](https://badges.greenkeeper.io/kogosoftwarellc/open-api.svg)](https://greenkeeper.io/)

  > A Monorepo of various packages to power OpenAPI in node.


  ## Quick Start Express


  * See
  [express-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/express-openapi)&nbsp;&nbsp;&nbsp;[![express-openapi
  Downloads][express-openapi-downloads-image]][express-openapi-npm-url]


  ## Quick Start Koa

  * See
  [koa-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/koa-openapi)&nbsp;&nbsp;&nbsp;[![koa-openapi
  Downloads][koa-openapi-downloads-image]][koa-openapi-npm-url]


  ## Packages

  *
  [express-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/express-openapi)

  *
  [fetch-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/fetch-openapi)

  *
  [fs-routes](https://github.com/kogosoftwarellc/open-api/tree/master/packages/fs-routes)

  *
  [openapi-default-setter](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-default-setter)

  *
  [openapi-framework](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-framework)

  *
  [openapi-jsonschema-parameters](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-jsonschema-parameters)

  *
  [openapi-request-coercer](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-request-coercer)

  *
  [openapi-request-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-request-validator)

  *
  [openapi-response-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-response-validator)

  *
  [openapi-schema-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-schema-validator)

  *
  [openapi-types](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-types)


  ## Development


  _Note:  One of the goals of this monorepo is to support independent package
  versions.  The author has used other popular options out there (like lerna),
  and has found independent versioning to behave strangely with them.  Another
  goal with the current approach is to reduce boilerplate code as much as
  possible (something tools like lerna don't help with).  The inspiration for
  the current approach came from
  [boennemann/alle](https://github.com/boennemann/alle).  The author isn't

  married to the current approach, so if you have ideas on how to simplify the
  development of this monorepo by all means please [open an
  issue](https://github.com/kogosoftwarellc/open-api/issues/new)._


  ### Typical Workflow for Contributors


  Let's say you're working on a package under
  [./packages](https://github.com/kogosoftwarellc/open-api/tree/master/packages). 
  Here's what you do:


  1. `cd open-api`

  1. `./bin/test packages/<package_you're_working_on>`

  1. Make your changes.
    1. _Do not bump the version in package.json._  A maintainer will handle that once your PR is merged.
  1. Once you're satisfied with your changes:
    1. Create a new branch `git checkout -b my-branch` (in case you haven't done so already).
    1. `./bin/commit packages/<package_you're_working_on> 'commit message describing your change.  can be multi line here.  just close with a single quote like so:'`
    1. Push your change to your fork
    1. Open a PR.

  ### bin


  Several scripts have been created to aid in the development of this monorepo
  (see [./bin](./bin)).  They assume that your `$PWD` is the root of the
  repository.  Here is a brief summary of common actions:


  * Testing
    * (Note: `./bin/test` will run `npm i` in the package _prior_ to running the tests)
    * Test a single package - `./bin/test packages/<package_to_test>` (starts the test in watch mode)
    * Test all packages - `./bin/test`
  * Commit changes to a package - `./bin/commit packages/<package_to_commit>
  'Commit message'` (the commit message will be prepended with the package name
  e.g. `<package_to_commit>: Commit message`


  #### dev-tools

  Scripts in this directory wrap common tools, like `nyc`, `tsc`, and `mocha`. 
  They reduce boilerplate and are called from npm scripts.


  ## LICENSE


  ```

  The MIT License (MIT)


  Copyright (c) 2018 Kogo Software LLC


  Permission is hereby granted, free of charge, to any person obtaining a copy

  of this software and associated documentation files (the "Software"), to deal

  in the Software without restriction, including without limitation the rights

  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell

  copies of the Software, and to permit persons to whom the Software is

  furnished to do so, subject to the following conditions:


  The above copyright notice and this permission notice shall be included in

  all copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN

  THE SOFTWARE.

  ```


  [express-openapi-downloads-image]:
  http://img.shields.io/npm/dm/express-openapi.svg

  [express-openapi-npm-url]: https://npmjs.org/package/express-openapi

  [koa-openapi-downloads-image]: http://img.shields.io/npm/dm/koa-openapi.svg

  [koa-openapi-npm-url]: https://npmjs.org/package/koa-openapi


  [travis-url]: https://travis-ci.org/kogosoftwarellc/open-api

  [travis-image]:
  https://api.travis-ci.org/kogosoftwarellc/open-api.svg?branch=master


  [coveralls-url]: https://coveralls.io/r/kogosoftwarellc/open-api

  [coveralls-image]:
  https://coveralls.io/repos/github/kogosoftwarellc/open-api/badge.svg?branch=master


  [gitter-url]: https://gitter.im/kogosoftwarellc/open-api

  [gitter-image]: https://badges.gitter.im/kogosoftwarellc/open-api.png
inaka/cowboy-swagger: >
  <img src="http://www.braveterry.com/wp-content/uploads/2015/03/swagger2.png"/>


  # cowboy-swagger

  [Swagger](http://swagger.io/) integration for
  [Cowboy](https://github.com/ninenines/cowboy) (built on
  [trails](https://github.com/inaka/cowboy-trails)).


  ## Contact Us

  If you find any **bugs** or have a **problem** while using this library,
  please

  [open an issue](https://github.com/inaka/elvis/issues/new) in this repo

  (or a pull request :)).


  ## Requirements

  Cowboy Swagger requires Erlang 18+ after 0.1.0 version


  ## Why Cowboy Swagger?

  Simple, because there isn't a tool in Erlang to document Cowboy RESTful APIs
  easy and fast,

  and to improve development productivity.


  With `cowboy_swagger` is possible to integrate Swagger to your Erlang projects
  that use Cowboy as a web server.

  It is extremely easy to use, and with just a few steps you'll have a nice Web
  documentation for your RESTful APIs.


  To learn a bit more about Swagger, please check this [blog
  post](http://inaka.net/blog/2015/06/23/erlang-swagger-2015/).


  ## How to Use it?

  This is the best part. It is extremely easy.


  ### 1. Document each Cowboy Handler

  Because `cowboy_swagger` runs on top of `trails`, the first thing that you
  have to do

  is document all about your handler within the trails metadata. Keep in mind
  that

  all fields defined within each method into the metadata must be compliant with
  the

  [Swagger specification](http://swagger.io/specification).


  For example, suppose that you have `example_echo_handler`, so it must
  implement the `trails/0`

  callback from `trails_handler` behaviour:


  ```erlang

  trails() ->
    Metadata =
      #{get =>
        #{tags => ["echo"],
          description => "Gets echo var from the server",
          produces => ["text/plain"]
        },
        put =>
        #{tags => ["echo"],
          description => "Sets echo var in the server",
          produces => ["text/plain"],
          parameters => [
            #{name => <<"echo">>,
              description => <<"Echo message">>,
              in => <<"path">>,
              required => false,
              type => <<"string">>}
          ]
        }
      },
    [trails:trail("/message/[:echo]", example_echo_handler, [], Metadata)].
  ```


  To get a better idea of how your handler should look like, please check
  [here](./example/src/example_echo_handler.erl).


  ### 2. Include cowboy_swagger in your app

  First, you need to include `cowboy_swagger_handler` module in your list of
  trails to be compiled.


  ```erlang

  % Include cowboy_swagger_handler in the trails list

  Trails = trails:trails([example_echo_handler,
                          example_description_handler,
                          cowboy_swagger_handler]),
  % store them

  trails:store(Trails),

  % and then compile them

  Dispatch = trails:single_host_compile(Trails),

  ```


  The snippet of code above is usually placed when you start `cowboy`. Check it
  [here](./example/src/example.erl#L31).


  Then add `cowboy_swagger` to the list of apps to be loaded in your `*.app.src`
  file.


  ```erlang

  {application, example,
   [
    {description, "Cowboy Swagger Basic Example."},
    {vsn, "0.1"},
    {applications,
     [kernel,
      stdlib,
      jsx,
      cowboy,
      trails,
      cowboy_swagger
     ]},
    {modules, []},
    {mod, {example, []}},
    {registered, []},
    {start_phases, [{start_trails_http, []}]}
   ]
  }.

  ```


  And that's it, you got it. Now start your application and then you will have
  access to the API docs

  under the path `/api-docs`. Supposing that you're running the app on
  `localhost:8080`,

  that will be [http://localhost:8080/api-docs](http://localhost:8080/api-docs).


  ## Configuration


  Additionally, `cowboy_swagger` can be configured/customized from a `*.config`
  file:


  ### app.config


  ```erlang

  [
   %% Other apps ...

   %% cowboy_swagger config
   {cowboy_swagger,
    [
     %% `static_files`: Static content directory. This is where Swagger-UI
     %% is located. Default: `priv/swagger`.
     %% Remember that Swagger-UI is embedded into `cowboy-swagger` project,
     %% within `priv/swagger` folder. BUT you have to reference that path,
     %% and depending on how you're using `cowboy-swagger` it will be different.
     %% For example, assuming that you want to run your app which has
     %% `cowboy-swagger` as dependency from the console, `static_files` will be:
     {static_files, "./deps/cowboy_swagger/priv/swagger"},

     %% `global_spec`: Global fields for Swagger specification.
     %% If these fields are not set, `cowboy_swagger` will set default values.
     {global_spec,
      #{swagger => "2.0",
        info => #{title => "Example API"},
        basePath => "/api-docs"
       }
     }
    ]
   }
  ].

  ```


  ### Definitions


  [Definitions](http://swagger.io/specification/#definitionsObject) can be used
  for describing

  [parameters](http://swagger.io/specification/#parametersDefinitionsObject),

  [responses](http://swagger.io/specification/#responsesDefinitionsObject) and

  [security](http://swagger.io/specification/#securityDefinitionsObject)
  schemas.


  For adding definitions to your app, you have 2 choices:


  1. Add a `definitions` key to your cowboy_swagger `global_spec` map.

  2. Add them by calling `cowboy_swagger:add_definition/2` and send the
     definition's name and properties.

  Let's say you want to describe a `POST` call to a `newspapers` endpoint that
  requires

  `name` and `description` fields only, you can do it like this:


  **Option 1:**

  ```erlang

  [ ... % other configurations

  , { cowboy_swagger
    , [ { global_spec
        , #{ swagger => "2.0"
           , info => #{title => "My app API"}
           , definitions => #{
               "RequestBody" =>
                 #{ "name" =>
                     #{ "type" => "string"
                      , "description" => "Newspaper name"
                      }
                  , "description" =>
                      #{ "type" => "string"
                       , "description" => "Newspaper description"
                       }
                  }
             }
           }
        }
      ]
    }
  ]

  ```


  **Option 2:**


  For the second choice, you can do it for example in one or several
  `start_phases`,

  directly in your handler or any other place you want.


  ```erlang

  -spec trails() -> trails:trails().

  trails() ->
    DefinitionName = <<"RequestBody">>,
    DefinitionProperties =
      #{ <<"name">> =>
           #{ type => <<"string">>
            , description => <<"Newspaper name">>
            }
       , <<"description">> =>
           #{ type => <<"string">>
            , description => <<"Newspaper description">>
            }
       },
    % Add the definition
    ok = cowboy_swagger:add_definition(DefinitionName, DefinitionProperties),
    ...
  ```



  Now in your handler's trails callback function you can use it:


  ```erlang

  ...
    RequestBody =
      #{ name => <<"request body">>
       , in => body
       , description => <<"request body (as json)">>
       , required => true
         % Use the previously created `RequestBody' definition
       , schema => cowboy_swagger:schema(<<"RequestBody">>)
       },
    Metadata =
      #{ get =>
         #{ tags => ["newspapers"]
          , description => "Returns the list of newspapers"
          , produces => ["application/json"]
          }
       , post =>
         # { tags => ["newspapers"]
           , description => "Creates a new newspaper"
           , consumes => ["application/json"]
           , produces => ["application/json"]
           , parameters => [RequestBody] % and then use that parameter here
           }
       },
    Path = "/newspapers",
    Options = #{path => Path},
    [trails:trail(Path, newspapers_handler, Options, Metadata)].
  ```


  What this does for you is add a nice `response`, `parameter` or `security`

  model in swagger-ui, so client developers will know exactly what parameters

  the API expects for every endpoint.


  ## Example

  For more information about `cowboy_swagger` and how to use it, please check
  this [Example](./example).
gedaiu/swaggarize: >
  # OpenApi


  I will not mantain this project in the future. Please have a loog at this
  fork: [https://github.com/gedaiu/OpenApi](https://github.com/gedaiu/OpenApi)
tjwebb/sails-swagger: >
  # sails-swagger


  [![NPM version][npm-image]][npm-url]

  [![Build status][ci-image]][ci-url]

  [![Dependency Status][daviddm-image]][daviddm-url]

  [![Code Climate][codeclimate-image]][codeclimate-url]



  [swagger.io](http://swagger.io/) (v2.0) hook for Sails. The application's
  models, controllers, and routes are aggregated and transformed into a Swagger
  Document. Supports the Swagger 2.0 specification.


  ## Install


  ```sh

  $ npm install sails-swagger --save

  ```


  ## Configuration

  ```js

  // config/swagger.js

  module.exports.swagger = {
    /**
     * require() the package.json file for your Sails app.
     */
    pkg: require('../package'),
    ui: {
      url: 'http://swagger.balderdash.io'
    }
  };

  ```


  ## Usage

  After installing and configuring swagger, you can find the docs output on the
  [/swagger/doc](http://localhost:1337/swagger/doc) route.


  You may also specify additional swagger endpoints by specifying the swagger
  spec in config/routes.js


  ```

  /**
   * Route Mappings
   * @file config/routes.js
   * (sails.config.routes)
   *
   * Your routes map URLs to views and controllers.
   */

  module.exports.routes = {

      /***************************************************************************
       *                                                                          *
       * Make the view located at `views/homepage.ejs` (or `views/homepage.jade`, *
       * etc. depending on your default view engine) your home page.              *
       *                                                                          *
       * (Alternatively, remove this and add an `index.html` file in your         *
       * `assets` directory)                                                      *
       *                                                                          *
       ***************************************************************************/

      '/': {
          view: 'homepage'
      },

      /***************************************************************************
       *                                                                          *
       * Custom routes here...                                                    *
       *                                                                          *
       * If a request to a URL doesn't match any of the custom routes above, it   *
       * is matched against Sails route blueprints. See `config/blueprints.js`    *
       * for configuration options and examples.                                  *
       *                                                                          *
       ***************************************************************************/
      'get /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['GET', 'POST'],
              summary: ' Get Groups ',
              description: 'Get Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'List of Groups',
                      schema: 'Group', // api/model/Group.js,
                      type: 'array'
                  }
              },
              parameters: []

          }
      },
      'put /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['PUT', 'POST'],
              summary: 'Update Groups ',
              description: 'Update Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'Updated Group',
                      schema: 'Group' // api/model/Group.js
                  }
              },
              parameters: [
                  'Group' // api/model/Group.js
              ]

          }
      }
  };



  ```


  ## License

  MIT


  ## Maintained By

  [<img src='http://i.imgur.com/Y03Jgmf.png' height='64px'>](http://langa.io)


  [sails-version-image]: https://goo.gl/gTUV5x

  [sails-url]: http://sailsjs.org

  [npm-image]: https://img.shields.io/npm/v/sails-swagger.svg?style=flat

  [npm-url]: https://npmjs.org/package/sails-swagger

  [ci-image]:
  https://img.shields.io/travis/langateam/sails-swagger/master.svg?style=flat

  [ci-url]: https://travis-ci.org/langateam/sails-swagger

  [daviddm-image]:
  http://img.shields.io/david/langateam/sails-swagger.svg?style=flat

  [daviddm-url]: https://david-dm.org/langateam/sails-swagger

  [codeclimate-image]:
  https://img.shields.io/codeclimate/github/langateam/sails-swagger.svg?style=flat

  [codeclimate-url]: https://codeclimate.com/github/langateam/sails-swagger
sarnowski/swagger1st: >
  ## swagger1st: A Swagger-First Clojure Ring handler


  ![Maven
  Central](https://img.shields.io/maven-central/v/org.zalando/swagger1st.svg)

  [![Build
  Status](https://travis-ci.org/zalando-stups/swagger1st.svg?branch=master)](https://travis-ci.org/zalando-stups/swagger1st)

  [![codecov](https://codecov.io/gh/zalando-stups/swagger1st/branch/master/graph/badge.svg)](https://codecov.io/gh/zalando-stups/swagger1st)


  swagger1st is a Clojure [Ring](https://github.com/ring-clojure/ring) handler
  that parses, validates and routes requests

  based on your [Swagger](http://swagger.io/)/OpenAPI definition. It takes the
  opposite approach of
  [ring-swagger](https://github.com/metosin/ring-swagger)—which enables you to
  generate your Swagger spec from your Clojure code—by allowing you to use your
  Swagger spec to generate Clojure code.


  Instead of defining routes and validation rules in your code, you can use
  swagger1st along with [Swagger/OpenAPI's great tool
  set](http://editor.swagger.io/) to specify your API according to the
  [Swagger/Open API 2.0
  Specification](https://github.com/swagger-api/swagger-spec). This enables you
  to specify your API in an API-First, technology-independent format. The
  resulting definition is the ultimate format for publishing, sharing and
  reviewing your API.


  #### Compatibility Overview

  swagger1st aims to implement all of the Swagger/OpenAPI spec's features, so
  that you only have to write your business logic. [This
  document](https://github.com/zalando-stups/swagger1st/blob/master/comp-2.0.md)
  shows which aspects of the spec it currently supports.


  swagger1st will use the Swagger definition of your API as a configuration file
  for processing incoming requests—ensuring that your implementation and
  specification always remain in sync. During runtime, you can inspect and
  easily test

  your API with the built-in [Swagger UI](http://petstore.swagger.io/). You can
  also extend the interpretation of

  your definition according to your own needs.


  Imagine a simple API definition like this:


  ```yaml

  swagger: '2.0'


  info:
    title: Example API
    version: '0.1'

  paths:
    /helloworld:
      get:
        summary: Returns a greeting.
        operationId: example.api/generate-greeting
        parameters:
          - name: firstname
            in: query
            type: string
            pattern: "^[A-Z][a-z]+"
        responses:
            200:
                description: say hello
  ```


  By default, this definition is connected to your business logic via the
  `operationId`, which might be defined like so:


  ```clojure

  (ns example.api
    (:require [ring.util.response :as r]))

  (defn generate-greeting [request]
    (let [firstname (-> request :parameters :query :firstname)]
      (-> (r/response (str "Hello " firstname "!"))
          (r/content-type "plain/text"))))
  ```


  This is all you need to do to define and implement your API. Only fully
  validated requests get to your function,

  so you can rely on swagger1st to properly check all input parameters according
  to your definition. The function itself

  is a normal Clojure function without any dependencies to swagger1st - simple
  as that.


  ### Quickstart


  The following provides instructions for simple, complex and manual setups. For
  all three approaches you'll need to install [Leiningen](http://leiningen.org/)
  as the build tool.


  #### Simple Setup

  If you're bootstrapping a completely new project, or just want to try out
  swagger1st, you can use this Leiningen template:


  ```

  $ lein new swagger1st myproject

  $ cd myproject

  $ lein ring server-headless

  ```


  This will run a local web server on port 3000, so you can interact with the
  API at <http://localhost:3000/>. Also, you might want to have a look at
  <http://localhost:3000/ui/> for a graphical interface to explore and
  experiment with your API (using [Swagger UI](http://petstore.swagger.io/)).


  ### Complex Setup


  To see how you can handle dependency injection with swagger1st, generate a
  project setup that includes Stuart Sierra's

  [component](https://github.com/stuartsierra/component) framework:


  ```

  $ lein new swagger1st myproject +component

  $ cd myproject

  $ lein run -m myproject.core

  ```


  As with the simple setup above, this will launch a local web server on port
  3000.


  ### Manual Setup


  The following steps describe how to manually set up swagger1st in a Clojure
  project. This is especially useful if you want to integrate it into an
  existing project or cannot use the provided template for other reasons.


  Use the following dependency in your [Leiningen](http://leiningen.org/)
  project:

      [org.zalando/swagger1st "<latest>"]

  This creates a Ring-compliant handler:


  ```clojure

  (ns example
    (:require [io.sarnowski.swagger1st.core :as s1st]
              [io.sarnowski.swagger1st.util.security :as s1stsec]))

  (def app
    (-> (s1st/context :yaml-cp "my-swagger-api.yaml")
        (s1st/discoverer)
        (s1st/mapper)
        (s1st/parser)
        (s1st/protector {"oauth2" (s1stsec/allow-all)})
        (s1st/executor)))
  ```


  ### Commands for Development


  ```shell

  # get the source

  $ git clone https://github.com/zalando-stups/swagger1st.git

  $ cd swagger1st


  # run the tests

  $ lein test


  # run all tests, including performance benchmarks

  $ lein test :all


  # build an own artifact for local development

  $ lein install


  # release a new version

  $ lein release :minor

  ```


  For interactive development, you can start a REPL by typing `lein repl`.


  ### Projects Using Swagger1st in Production


  - [Friboo](https://github.com/zalando/friboo), a utility library for writing
  microservices in Clojure, with support for Swagger and OAuth. It uses
  swagger1st at its base for RESTful HTTP endpoints and also integrates with the
  [component](https://github.com/stuartsierra/component) framework.

  - [STUPS.io](https://stups.io/) components
  [Kio](https://github.com/zalando-stups/kio),
  [PierOne](https://github.com/zalando-stups/pierone) (a complete Docker
  registry based on S3),
  [Essentials](https://github.com/zalando-stups/essentials),
  [TWINTIP](https://github.com/zalando-stups/twintip-storage) and
  [mint](https://github.com/zalando-stups/mint-storage)


  ### The Ring Handler in Detail


  * `s1st/context` (required)
      * Creates a new context from a given definition. This context will be used by the next steps to prepare the
        execution of requests.
  * `s1st/discoverer` (optional)
      * The discoverer enables certain HTTP endpoints, that makes it easy to work with your API. In particular, this
        enables the Swagger UI under the path `/ui/` and exposes the Swagger definition under `/swagger.json`.
  * `s1st/mapper` (required)
      * The mapper denormalizes the given definition (e.g. resolves all `$ref`s) and figures out, which request definition
        maps to the actual incoming request. After this function, your `request` map contains the `:swagger` key, which
        contains a `:request` key containing the denormalized definition of the request and a `:key` key which can be used
        to uniquely identify a request.
  * `s1st/parser` (required)
      * The parser parses the incoming request according to the definition and validates all inputs.
  * `s1st/protector` (optional)
      * The protector can enforce all security definitions for you. As the security check implementations vary depending
        on your environment, this is only a framework to hook into the system and define callbacks for the actual checks.
  * `s1st/executor` (required)
      * The executor executes your defined function in the end. At this point, the whole definition was validated and only
        valid requests make it up until here. You can also specify an own function resolver function in order to hook into
        your own framework.

  ### License


  Copyright (c) 2015, Tobias Sarnowski

  Copyright (c) 2016, Zalando SE


  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted,

  provided that the above copyright notice and this permission notice appear in
  all copies.


  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL

  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
  AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,

  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
  CONNECTION WITH THE USE OR PERFORMANCE OF

  THIS SOFTWARE.
lucybot/api-spec-converter: >
  # api-spec-converter

  [![Share on Twitter][twitter-image]][twitter-link]


  [![Chat on gitter][gitter-image]][gitter-link]

  [![NPM version][npm-image]][npm-link]

  [![Build status][travis-image]][travis-link]


  [![Dependency status][deps-image]][deps-link]

  [![devDependency status][devdeps-image]][devdeps-link]


  Convert between API description formats such as [Swagger](http://swagger.io/)
  and [RAML](http://raml.org/)


  **Currently only supports conversion to OpenAPI(fka Swagger) 2.0 format, and
  from OpenAPI 2.0 to OpenAPI 3.0.x**


  You can also use the online version at
  https://lucybot-inc.github.io/api-spec-converter/.


  ## Installation


  ### Command Line

  > Problems? See [issue
  #132](https://github.com/LucyBot-Inc/api-spec-converter/issues/132)

  ```bash

  npm install -g api-spec-converter

  ```


  ### NodeJS/Browser

  ```bash

  npm install --save api-spec-converter

  ```


  ## Usage


  ### Command Line

  ```bash

  $ api-spec-converter -h

    Usage: api-spec-converter [options] <URL|filename>

    Convert API descriptions between popular formats.

    Supported formats:
      * swagger_1
      * swagger_2
      * openapi_3
      * api_blueprint
      * io_docs
      * google
      * raml
      * wadl

    Options:

      -h, --help              output usage information
      -V, --version           output the version number
      -f, --from <format>     Specifies format to convert
      -t, --to <format>       Specifies output format
      -s, --syntax [syntax]   Specifies output data syntax: json or yaml. Defaults to json
      -o, --order [sortOrder] Specifies top fields ordering: openapi or alpha. Defaults to openapi
      -c, --check             Check if result is valid spec
      -d, --dummy             Fill missing required fields with dummy data
  ```


  Example:

  ```bash

  $ api-spec-converter --from=swagger_1 --to=swagger_2 --syntax=yaml
  --order=alpha
  https://raw.githubusercontent.com/LucyBot-Inc/api-spec-converter/master/test/input/swagger_1/petstore/pet.json
  > swagger.json

  ```


  ### NodeJS


  ### Options

  * `from` - source format (see formats below)

  * `to` - desired format (see formats below)

  * `source` - Filename, URL, or JS object for the source

  ### Simple example:

  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  }, function(err, converted) {
    console.log(converted.stringify());
    // For yaml and/or OpenApi field order output replace above line
    // with an options object like below
    //   var  options = {syntax: 'yaml', order: 'openapi'}
    //   console.log(converted.stringify(options));
  })

  ```

  ### Callback vs Promises

  This library has full support for both callback and promises.

  All async functions return promises but also will execute callback if
  provided.


  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })

  .then(function(converted) {
    console.log(converted.stringify());
  });

  ```

  ### Advanced features:

  ```js

  var Converter = require('api-spec-converter');

  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })
    .then(function(converted) {
      // [Optional] Fill missing fields with dummy values
      converted.fillMissing();

      // [Optional] Validate converted spec
      return converted.validate()
        .then(function (result) {
          if (result.errors)
            return console.error(JSON.stringify(errors, null, 2));
          if (result.warnings)
            return console.error(JSON.stringify(warnings, null, 2));

          fs.writeFileSync('swagger2.json', converted.stringify());
        });
    });
  ```


  ### Browser

  ```js

  <script
  src="node_modules/api-spec-converter/dist/api-spec-converter.js"></script>

  APISpecConverter.convert(...)

  ```


  ## Supported Formats


  * [Swagger
  1.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/1.2.md)
  (swagger_1)

  * [OpenAPI(fka Swagger)
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  (swagger_2)

  * [OpenAPI
  3.0.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  (openapi_3)

  * [I/O Docs](https://github.com/mashery/iodocs) (io_docs)

  * [API
  Blueprint](https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md)
  (api_blueprint)

  * [Google API
  Discovery](https://developers.google.com/discovery/v1/reference/apis) (google)

  * [RAML](http://raml.org/spec.html) (raml)

  * [WADL](http://www.w3.org/Submission/wadl/) (wadl)



  ## Conversion Table


  |from:            
  |swagger_1|swagger_2|openapi_3|io_docs|api_blueprint|google|raml|wadl|

  -------------------|:-------:|:-------:|:-----:|:-----:|:-----------:|:----:|:--:|:--:|

  |to swagger_1      |  n/a    |         |       |       |             |     
  |    |    |

  |to swagger_2      | :white_check_mark: |    n/a  | :white_check_mark:  |
  :white_check_mark: | :white_check_mark: | :white_check_mark: |
  :white_check_mark: | :white_check_mark: |

  |to openapi_3      |   :eight_spoked_asterisk:     | :white_check_mark: | 
  n/a  |   :eight_spoked_asterisk:  | :eight_spoked_asterisk: | 
  :eight_spoked_asterisk:   | :eight_spoked_asterisk:  |
  :eight_spoked_asterisk:  |

  |to io_docs        |         |         |       |  n/a  |             |     
  |    |    |

  |to api_blueprint  |         |         |       |       |    n/a      |     
  |    |    |

  |to google         |         |         |       |       |             |  n/a
  |    |    |

  |to raml           |         |         |       |       |             |      |
  n/a|    |

  |to wadl           |         |         |       |       |             |     
  |    | n/a|


  #### Key

  * :white_check_mark: - direct conversion

  * :eight_spoked_asterisk: - conversion via swagger_2


  ## Contributing

  Contributions are welcome and encouraged.


  ### Testing

  Please add a test case if you're adding features or fixing bugs. To run the
  tests:


  ```bash

  WRITE_GOLDEN=true npm test

  ```


  ### Releases

  ```

  npm run browserify

  git commit -a -m "Build browser distribution"

  npm version minor # or major/patch

  npm publish

  git push --follow-tags

  ```


  [twitter-image]:
  https://img.shields.io/twitter/url/http/lucybot.github.io/api-spec-converter.svg?style=social

  [twitter-link]:
  https://twitter.com/intent/tweet?text=Convert+between+API+description+formats+such+as+Swagger+and+RAML:&url=http%3A%2F%2Flucybot.github.io%2Fapi-spec-converter

  [gitter-image]:
  https://img.shields.io/gitter/room/lucybot/api-spec-converter.svg

  [gitter-link]: https://gitter.im/lucybot/api-spec-converter

  [npm-image]: https://img.shields.io/npm/v/api-spec-converter.svg

  [npm-link]: https://npmjs.org/package/api-spec-converter

  [travis-image]:
  https://img.shields.io/travis/LucyBot-Inc/api-spec-converter.svg

  [travis-link]: https://travis-ci.org/LucyBot-Inc/api-spec-converter

  [deps-image]: https://img.shields.io/david/lucybot/api-spec-converter.svg

  [deps-link]: https://david-dm.org/lucybot/api-spec-converter

  [devdeps-image]:
  https://img.shields.io/david/dev/lucybot/api-spec-converter.svg

  [devdeps-link]:
  https://david-dm.org/lucybot/api-spec-converter#info=devDependencies
zalando/play-swagger: >
  ## The Play-Swagger plugin is now renamed
  [api-first-hand](https://github.com/zalando/api-first-hand). This version is
  no longer under active development.

  ## Api-First-Hand is actively mantained and offers full functionality of
  Play-Swagger with an exception of Play 2.4 support. Please navigate to
  [api-first-hand](https://github.com/zalando/api-first-hand) if you'd like to
  check out Play-Swagger or create an issue.


  --

  --

  --

  --



  # Play-Swagger


  [![Build
  Status](https://travis-ci.org/zalando/play-swagger.svg)](https://travis-ci.org/zalando/play-swagger)

  [![codecov](https://codecov.io/gh/zalando/play-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/zalando/play-swagger)

  [![Gitter
  Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/zalando/play-swagger?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)


  ## Compatibility


  - Play 2.4

  - Swagger (OpenAPI) 2.0


  ## Status


  This plugin should be enabled using the
  [play-swagger-service](http://www.typesafe.com/activator/template/play-swagger-service)
  activator template 

  as the version in this repository is under active development. The status of
  this software is beta, 

  an end-to-end functional release intended to demonstrate the possibility to
  generate following from a Swagger specification:


  - Play route files

  - Generators of random test data

  - Wrappers for Play route files to convert semantics from http-related to
  domain-related (controller_base)

  - Skeletons for the domain-driven controller implementation

  - Model classes and validation rules

  - Unit tests for invalid and valid parameter sets

  - Security extractors (if needed)

  - Skeletons for custom deserializers (if needed)


  We benefit from community feedback. All comments are welcome!


  # Play-Swagger Tutorial


  This tutorial is based on the
  [play-swagger-service](http://www.typesafe.com/activator/template/play-swagger-service)
  activator template.


  ```bash

  $ activator new playground play-swagger-service

  ```


  The template project contains following:


  - `tutorial` folder with HTML tutorial

  - `public/swagger` folder containing static files needed for swagger UI

  - `project` folder containing pre-configured `plugins.sbt` file with a
  definition of all required resolvers and plugins

  - `conf` folder with following customized contents:
      * `routes` file with route configuration for Swagger UI, example specification and commented out links to other examples
      * `example.yaml`, a demo Swagger specification. The specification has a dummy implementation in `app` folder. 
      * `examples` folder containing other different Swagger specification examples. Each specification in this folder represents some aspect of the Play-Swagger plugin in more details.
          For the specification to be picked up by the plugin it must be moved into the `conf` folder. It is allowed to have multiple Swagger specifications in the `conf` folder at the same time. 
  - `app` directory with following template implementations:
      * `controllers/Swagger.scala` - a backend side of the Swagger UI
      * `generated_controllers/example.yaml.scala` - a dummy implementation of the example controller. Will be (re)generated if deleted
      * `security/example.yaml.scala` - a marshaller for OAuth2 tokens. Will not be regenerated until 
          a) deleted or renamed
          b) explicitly requested by issuing a `apiFirstSecurity` command 


  ## Welcome to Play-Swagger


  Congratulations, you just created a new Play-Swagger application!


  The [Play Framework](http://www.playframework.com/) with the
  [Play-Swagger](https://github.com/zalando/play-Swagger/) 

  plugin make it easy to build RESTful web services from a Swagger API
  specification as the single source of truth. 

  Play is based on a lightweight, stateless, web-friendly architecture. Built on
  [Akka](http://akka.io), 

  Play provides predictable and minimal resource consumption for highly-scalable
  applications. 

  The Play-Swagger plugin takes Swagger API definitions and treats them as the
  single source of truth of your REST services.


  Play-Swagger supports round-trip regeneration and compilation of:


  - Play routes definitions (managed).

  - Swagger domain model definitions and parameters onto Scala case classes
  (managed).

  - Swagger domain model constraints onto Play validations (managed).

  - Generators for random test data generation of parameter values (managed).

  - Unit tests for validating your service at the API boundary (managed).

  - Swagger path definitions onto skeletons for Play controller implementations
  (unmanaged).


  In the list above, "(managed)" means that the code is managed by sbt. The code
  is not controlled 

  and altered by you, the programmer of the REST service. The plugin takes your
  Swagger API definition as the single 

  source of truth and regenerates these code parts in a consistent manner.

  You'll instead be focusing on implementing the service business logic in an
  (unmanaged) Play controller class 

  that is generated once. Subsequent regenerations keep the code that you have
  added, either by commenting out the 

  parts that are no longer valid, or by adding parts that are needed because you
  have made a change to the API.


  Manual generation and compilation of:


  - Security extractors

  - Unmarshallers for custom content types 


  is supported in the case if


  a) No security extractor or unmarshaller with the same name already exists

  b) The developer issues `apiFirstSecurity` or `apiFirstMarshallers` sbt
  command 


  ## Run Your Application


  Before we go any further, let's run the application.


  - Open a shell and `cd` into your service project directory.

  - Start `sbt` and `run` the service.

  - View the running application at
  [http://localhost:9000](http://localhost:9000).


  The service template comes with the Swagger UI frontend included, 

  run statically from the within Play, which provides a sandbox for your
  service. 

  The template is configured with a template Swagger API definition called
  `example.yaml` 

  and located in the `conf` directory of the Play application. 


  The `example.yaml` definition provides an example [API
  description](https://github.com/zalando/play-swagger-service/blob/master/conf/example.yaml)


  This definition contains three end points: 

  - the `/token` path, which accept the `GET` and `POST` methods

  - the `/todos/{user_id}`, which accepts the `GET` method. 


  The `GET /token` API plays a role of an authentication server and is used by
  the Swagger UI for OAuth token requests.

  The `POST /token` API represents an authorization server and is used by the
  security part of the 

  generated code to validate OAuth tokens.
   
  The `GET /todos/{user_id}` takes a path parameter `user_id` and returns a TODO
  list for given user. 

  For the client to be allowed to access this endpoint, it must provide an OAuth
  token with the scope `admin:org`. 

  The token can be requested using the Swagger UI.


  Try it out for yourself: 


  Click the [default](http://localhost:9000/) button to expand the API
  definition in the Swagger UI.



  # Play Routes Integration


  As a Play application developer, you are used to defining your endpoints in
  the `conf/routes` file. 

  Not so with the Play-Swagger plugin! Swagger API specifications already define
  endpoints as `path` definitions, 

  as seen in the example above. So why do the work twice, right? Instead, the
  Play-Swagger plugin requires you to 

  link your API definition in the routes file ones—making all Swagger
  API-defined endpoints available as children 

  of one single path context location, and generating Play route definitions
  from them (as shown below):


  ```

  ->      /example        example.yaml.Routes

  ```


  Note that the `conf/routes` file provided by this activator template also
  contains a couple of additional `GET` 

  mappings required for the the Swagger UI sandbox.


  There are a couple of commented out links to other examples. If you activate
  some specification by moving it from 

  the `examples` folder into the `conf` folder, you'll need to uncomment an
  appropriate line in the `routes` file in

  order for play to be able to find it.  



  ## Swagger Domain Definitions


  Scala domain model definitions are generated for all data types defined as
  Swagger parameters in an API specification. 

  Swagger parameters can be of path, query, header, form or body types, and
  consist of either primitive data types or 

  more complex types composed from objects and arrays with primitives as
  leaves. 


  Both primitive types and complex types are mapped to scala.


  As an example, let's look at the Swagger API specification file
  [`simple.petstore.api.yaml`](https://github.com/zalando/play-swagger-service/blob/master/conf/examples/simple.petstore.api.yaml), 

  which defines the API of a simple pet store. It contains a model definition
  for a pet.


  ```yaml

  definitions:
    pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
  ```


  This definition consists of an object `pet` containing the required properties
  `id` and `name` 

  and the optional property `tag`. The Swagger primitive types of these
  properties are a 64-bit `integer` 

  and (twice) a `string`, successively.  The Play-Swagger plugin will map this
  definition on to a generated Scala model.


  ```scala

  package simple.petstore.api


  package object yaml {

      type PetTag = Option[String]

      case class Pet(id: Long, name: String, tag: PetTag)
  }

  ```


  This generated model contains a type definition `PetTag`, which declares a
  type alias for the optional `tag` property, 

  and a `Pet` case class with the properties as named in the Swagger API
  definition and mapped on the subsequent 

  Scala primitive or declared types. The case class and type alias are generated
  in an package object `yaml`, 

  this package  object itself is contained in the package `simple.petstore.api`
  so that full object name corresponds 

  to the API filename.


  Note that models are generated within a Play application as _managed_ code in
  the target folder. 

  Generated model code is not intended to be altered.  We should instead look
  upon the Swagger definition as the single 

  source of truth, and as the source code that defines our model.

  The Swagger specification file of our API is, in that sense, part of the
  codebase. 

  Even though the generated `Pet` case class is managed by the plugin, and not
  us, it can (of course) 

  be used in our application codebase after being imported.


  ```scala

  import simple.petstore.api.yaml._


  val pet = Pet(0L, "Tucker", Some("Greyhound"))

  ```


  ## Specification Cross-References


  A `$ref` element of the specification is allowed to contain a name of file as
  it's part. Because of this, it is possible to split 

  a single specification into multiple files as shown in
  [`cross_spec_references.yaml`](https://github.com/zalando/play-swagger-service/blob/master/conf/examples/cross_spec_references.yaml) 

  example. It is also possible to reference a definition in one specification
  from another specification. 

  In this case for each reference an independent copy of the class definition
  will be created for each referencing specification. 

  The definition is then placed into the appropriate package for each
  specification. 


  Thus, even if multiple classes with  the same name and structure might be
  generated, they all will coexist in their 

  own separate namespaces and won't be interchangeable.



  ## Primitive Types


  Swagger version 2.0 allows for primitive data types based on the types defined
  by 

  [JSON-Schema](http://json-schema.org/latest/json-schema-core.html#anchor8).


  When generated as Scala, the following mapping applies:


  | Common Name | Swagger Type | Swagger Format | Scala
  Type                                  |

  |-------------|--------------|----------------|---------------------------------------------|

  | integer     | integer      | int32          |
  scala.Int                                   |

  | long        | integer      | int64          |
  scala.Long                                  |

  | float       | number       | float          |
  scala.Float                                 |

  | double      | number       | double         |
  scala.Double                                |

  | big int     | integer      |                |
  scala.math.BigInt                           |

  | big decimal | number       |                |
  scala.math.BigDecimal                       |

  | boolean     | boolean      |                |
  scala.Boolean                               |

  | string      | string       |                |
  scala.String                                |

  | byte        | string       | byte           |
  de.zalando.play.controllers.Base64String    |

  | binary      | string       | binary         |
  de.zalando.play.controllers.BinaryString    |

  | date        | string       | date           |
  org.joda.time.LocalDate                     |

  | datetime    | string       | date-time      |
  org.joda.time.DateTime                      |

  | password    | string       | password       |
  scala.String                                |

  | file        | file         |                |
  java.io.File                                |


  Additionally, if a validation of type "enum" is defined for some primitive
  type, a trait and a set of case objects forming an ADT 

  will be generated for this enum.


  ## Complex Types


  Complex types are made up of primitive objects, or nested objects.


  ### Objects


  Complex object types are defined in Swagger model definitions as either
  objects or arrays.


  Objects are, again, based on the
  [JSON-Schema](http://json-schema.org/latest/json-schema-core.html#anchor8)
  specification 

  and defined as Swagger [Schema
  Objects](https://github.com/Swagger-api/Swagger-spec/blob/master/versions/2.0.md#schema-object) 

  for parameter definitions of `type: "object"`.

  For example, given a Swagger API definition file `api.yaml` containing a model
  that defines a `person` as an object 

  with the properties `name` and `age` of the primitive types `string` and
  `integer` subsequently, 

  this object will be mapped on a Scala case class, and generated in a Scala
  package object (namespace) with the same name 

  as the extension of the file the specification is read from and in a package
  with the same name as the 

  Swagger definition file in which the model is defined—that is, `api`


  ```yaml

  definitions:
    person:
      type: object
      required:
        - name
        - age
      properties:
        name:
          type: string
        age:
          type: integer
          format: int32
  ```


  Is generated into:


  ```scala

  package api

  package object yaml {
      case class Person(name: String, age: Int) 
  }

  ```


  ### Nested Objects


  Nested objects are generated adjourned but referenced hierarchically. E.g.


  ```yaml

  definitions:
    parent:
      type: object
      required:
        - child
      properties:
        child:
          type: object
          required:
            - name
          properties:
            name:
              type: string
  ```


  Is generated into:


  ```scala

  package api

  package object yaml {
      case class Parent(child: ParentChild) 
      case class ParentChild(name: String) 
  }


  ```


  ### Optionality


  Swagger, by default, defines object properties to be optional, which can be
  overridden by providing a list of `required` 

  object properties as already used in the examples above. Optional properties
  are mapped upon Scala's `Option` type, 

  for which a type alias is generated for each property that is optional. E.g.


  ```yaml

  definitions:
    product:
      required:
        - name
      properties:
        name:
          type: string
        tag:
          type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
      type ProductTag = Option[String]
      case class Product(name: String, tag: ProductTag) 
  }


  ```


  As objects can be nested, so can object property optionality. To facilitate
  for nested optionality, we generate a nested scala `Option` type alias. E.g.


  ```yaml

  definitions:
    Basic:
      properties:
        optional:
          type: object
          properties:
            nested:
              type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
      type BasicOptional = Option[BasicOptionalOpt]
      type BasicOptionalNested = Option[String]

      case class BasicOptionalOpt(nested: BasicOptionalNested) 
      case class Basic(optional: BasicOptional) 
  }

  ```



  ### Parameter optionality


  As object properties can be optional, so can be query, header, body or form
  parameters. 

  In the case if they are not required, they are mapped to the Scala's `Option`
  type. 


  Path parameters are _must_ be declared as required.


  In the case, if a parameter is _not_ required, it is allowed to have a default
  value.



  ### Extension


  Objects can extend other objects via employment of Swagger's `allOff`
  property. In the example below, the `ExtendedErrorModel` inherits _all of_ the
  properties of the `ErrorModel` which it refers to—that is, the properties
  `message` and `code`—and _extends_ this model with the property `rootCause`.
  Swagger object extension is mapped by duplicating inherited properties in the
  object that extends. E.g.


  ```yaml

  definitions:
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
    ExtendedErrorModel:
      allOf:
      - $ref: '#/definitions/ErrorModel'
      - type: object
        required:
        - rootCause
        properties:
          rootCause:
            type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
    import scala.math.BigInt
    case class ErrorModel(message: String, code: BigInt) 
    case class ExtendedErrorModel(message: String, code: BigInt, rootCause: String) 
  }


  ```


  ### Polymorphism


  Polymorphic object definitions are possible through employment of the Swagger
  `discriminator` property. 

  In the example definition below, an abstract `Pet` defines what concrete `Cat`
  and `Dog`s have in common. 

  Swagger object models define data, so a discriminator property is required to
  distinguish concrete cat and dog 

  instances as they are serialised to and from the API. In this sense, the
  discriminator property works 

  in the same way as a discriminator column works in ORM frameworks when mapping
  a class hierarchy onto a single table. 

  It simply contains a value that maps onto one of the concrete types—for
  example, `petType: "Cat"` or `petType: "Dog"`.


  ```yaml

  definitions:
    Pet:
      discriminator: petType
      properties:
        name:
          type: string
        petType:
          type: string
      required:
      - name
      - petType
    Cat:
      allOf:
      - $ref: '#/definitions/Pet'
      - properties:
          huntingSkill:
            type: string
            default: lazy
            enum:
            - clueless
            - lazy
            - adventurous
            - aggressive
        required:
        - huntingSkill
    Dog:
      allOf:
      - $ref: '#/definitions/Pet'
      - properties:
          packSize:
            type: integer
            format: int32
        required:
        - packSize
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      trait IPet {
          def name: String
          def petType: String
      }

      case class Cat(name: String, petType: String, huntingSkill: CatHuntingSkill) extends IPet
      case class Dog(name: String, petType: String, packSize: Int) extends IPet
      case class Pet(name: String, petType: String) extends IPet

      sealed trait CatHuntingSkill { def value: String }
      case object Clueless extends CatHuntingSkill { val value = "clueless" }
      case object Lazy extends CatHuntingSkill { val value = "lazy" }
      case object Adventurous extends CatHuntingSkill { val value = "adventurous" }
      case object Aggressive extends CatHuntingSkill { val value = "aggressive" }
      implicit def stringToCatHuntingSkill(in: String): CatHuntingSkill = in match {
          case "clueless" => Clueless
          case "lazy" => Lazy
          case "adventurous" => Adventurous
          case "aggressive" => Aggressive
      }
  }


  ```


  Please note how the enumeration of cat's `huntingSkill`'s get's translated
  into the ADT with a sealed trait `CatHuntingSkill`

  and four case objects implementing that trait.


  ### Additional Properties


  Swagger's model language allows objects' additional properties to be loosely
  defined employing the `additionalProperties` annotation 

  in order to model dictionaries. These dictionaries are mapped to Scala's `Map`
  type, for which a type alias is 

  generated following the same (by now) well-known pattern as for optional
  properties, with the map's key parameter type being a Scala `String`.


  A Swagger additional property definition takes as its type property the
  element type of the dictionary, 

  which can be of primitive or complex type and which is mapped on Scala as the
  map's value parameter type. 

  Swagger allows for one `additionalProperties` annotation per object
  definition, so we can generate this Scala parameter 

  with the static name `additionalProperties`.


  In the following example we define a Swagger model object definition
  `KeyedArray` that uses the `additionalProperties` 

  annotation to provide the object with a set of key value mappings from string
  to array. E.g.


  ```yaml

  definitions:
    KeyedArrays:
      type: object
      additionalProperties:
        type: array
        items:
          type: integer
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper
      import scala.math.BigInt
      import scala.collection.immutable.Map

      type KeyedArraysAdditionalPropertiesCatchAll = ArrayWrapper[BigInt]
      type KeyedArraysAdditionalProperties = Map[String, KeyedArraysAdditionalPropertiesCatchAll]
      case class KeyedArrays(additionalProperties: KeyedArraysAdditionalProperties) 
  }

  ```


  ## Arrays


  Swagger's `array` is used to define properties that hold sets or lists of
  model values—possibly of a primitive type, 

  but complex element types are also allowed. Depending on the place where the
  array definition appears, Swagger array can be mapped to one of two Scala
  types, parametrised for the element type that it contains:

  - if an array only defined inline as a part of the response definition, it is
  translated to a `Seq` type

  - otherwise (array appears in the parameter definition or in the `definitions`
  part of the specification) it is 

  defined as a `de.zalando.play.controllers.ArrayWrapper`


  For example, in the snippet below, an `Activity` object definition is referred
  to as an item element in the 

  `messages` property of `type: array` of the containing object definition
  `Example`. 

  A Scala type alias will be generated for the array type (just as we've seen
  before with optional properties), 

  after which the array-containing property can be generated within the case
  class as being of this alias type. 

  E.g. in the Swagger definition and code


  ```yaml

  definitions:
    Activity:
      type: object
      required:
      - actions
      properties:
        actions:
          type: string
    Example:
      type: object
      required:
      - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/definitions/Activity'
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper

      type ExampleMessages = ArrayWrapper[Activity]

      case class Activity(actions: String) 
      case class Example(messages: ExampleMessages) 
  }


  ```


  If the description of the same array is inlined as a part of the response
  definition like that:


  ```yaml

  paths:
    /api:
      get:
        responses:
          200:
            schema:
              type: object
              required:
              - messages
              properties:
                messages:
                  type: array
                  items:
                    $ref: '#/definitions/Activity'
            description: array payload
  definitions:
    Activity:
      type: object
      required:
      - actions
      properties:
        actions:
          type: string
  ```


  than the `Seq` scala type will be used:

  ```scala

  package api

  package object yaml {
      type ApiGetResponses200Messages = Seq[Activity]
      case class Activity(actions: String) 
      case class ApiGetResponses200(messages: ApiGetResponses200Messages) 
  }

  ```



  ### Nested Arrays


  Array definition types can be nested and are possibly optional. 

  The following (contrived) snippet depicts the generated Scala code when both
  definition types are 

  employed in a somewhat non-useful manner. The intent of this example is to
  show that the case 

  class definitions are rather concisely generated, even though a stack of type
  aliases is needed 

  to make sure that we still refer in Scala code to an aptly named Swagger
  definition—especially 

  in conjunction with the object properties being optional. Next to its
  benefits, 

  type safety against `null` pointers does have an associated cost as well.


  ```yaml

  definitions:
    Activity:
      type: object
      properties:
        actions:
          type: string
    Example:
      type: object
      properties:
        messages:
          type: array
          items:
            type: array
            items:
              $ref: '#/definitions/Activity'
        nested:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: array
                items:
                  type: string
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper

      type ExampleMessagesOpt = ArrayWrapper[ExampleMessagesOptArr]
      type ExampleMessages = Option[ExampleMessagesOpt]
      type ExampleNested = Option[ExampleNestedOpt]
      type ExampleMessagesOptArr = ArrayWrapper[Activity]
      type ExampleNestedOptArrArrArr = ArrayWrapper[String]
      type ExampleNestedOptArrArr = ArrayWrapper[ExampleNestedOptArrArrArr]
      type ActivityActions = Option[String]
      type ExampleNestedOptArr = ArrayWrapper[ExampleNestedOptArrArr]
      type ExampleNestedOpt = ArrayWrapper[ExampleNestedOptArr]

      case class Activity(actions: ActivityActions) 
      case class Example(messages: ExampleMessages, nested: ExampleNested) 
  }


  ```


  ## Swagger Validations


  Swagger API definitions allow for constraints to be put on parameter types. 

  We have already seen the `required` constraint, used to mark a parameter or
  specific field within 

  a domain definition to be required upon input. Additional constraints, as
  defined by the 

  [Parameter
  Object](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameterObject), 

  can be added to your API definition. The Play-Swagger plugin will generate
  validations for these parameter 

  constraints and make sure that your controller methods are only called if the
  input of your service 

  complies to those constraints. 


  In the example below, the API definition of the `token` parameter of 

  type `Base64String`, as the form parameter, contains validation rules for the
  lenght of the perameter as well as a regexp pattern the value of the parameter
  must confirm to.

  The parameter is also required.


  ```yaml

  ...

  parameters:
        - name: token
          in: formData
          description: oauth2 token
          type: string
          format: byte
          pattern: "[A-Za-z0-9]*"
          minLength: 5
          maxLength: 100
          required: true
  ...

  ```


  Let's take another example:


  ```yaml

  ...
      get:
        parameters:
        - name: state
          in: query
          description: Any application state to be forwarded back to the frontend
          type: string
          minLength: 1
          maxLength: 110
          required: false
  ...

  ```


  The `state` parameter is of type string, is not required and has no default
  value. 

  It is also only allowed to have a state of length between 1 and 110, otherwise
  it won't pass validation. 

  For the demo purposes, let's change it's type to `integer` and make it
  required. 


  As the parameter is required now, the `default` value cannot be present. The
  `maxLength` and `maxLength` validations 

  are not allowed for integer parameters, therefore let's replace them with
  `minimum` and `maximum` values:
      
  ```yaml

  ...
      get:
        parameters:
        - name: state
          in: query
          description: Any application state to be forwarded back to the frontend
          type: integer
          format: int32
          required: true
          minimum: 2000
          maximum: 2100      
  ...

  ```    



  As we just changed the parameter type, refreshing Swagger UI will, in addition
  to generating validations 

  for that parameter type, also force a regeneration of the model consistent
  with the validation. 

  That's nice, but note that it will break the current implementation of the
  controller class, as the 

  implementation of the `postAction` expects `state` to be of type `String`.


  ![Validation screenshot](/docs/validations-01.png)


  Let's change the implementation. The second parameter `state` is no longer 

  of type `Option[String]` but of type `Int`. We change the implementation to
  take this fact into the account:


  ```scala

  ...

  val tokenGet = tokenGetAction { input: (String, String, String, Int) =>
      val (redirect_uri, scope, response_type, state) = input
      // ----- Start of unmanaged code area for action  TokenService.tokenGet
      val statePart = s"""state=$state"""
  ...

  }

  ```


  Refreshing Swagger UI and trying out a couple of integer values for `state`
  shows that the service 

  now excepts value within the range `[2000..2100]`, but returns a descriptive
  error when outside. I.e.


  ```json

  [
    {
      "messages": [
        "error.max"
      ],
      "args": [
        2100
      ]
    }
  ]

  ```


  ## Test Generators


  Having an API definition as the single source of truth in your codebase—with
  formal type specification of the in- and output values, 

  including their constraints—provides for a powerful feature when it comes to
  testing. 

  The Play-Swagger plugin automates the creation of test data generators that
  can drive property checks directly 

  from the API specification. Play-Swagger derives data generators and unit
  tests directly from your Swagger API specification.


  Property-based testing using generator-driven property checks is a cool way to
  test the validity of your application 

  according to the rules or properties that apply to your application.
  Properties, in this sense, are high-level 

  specifications that should always hold for a range of data values. The idea is
  to generate a range of data 

  values for your data types and let (also generated) tests assert that the
  properties of these data types hold. 

  A Swagger API definition contains formal type definitions _and_ constraints
  for all data values, and the Play-Swagger 

  plugin maps these types on managed Scala source code that represents the data
  types, so it is also possible to map 

  these API definitions on test data generators that provide a range of data
  values for these types. 

  The plugin does exactly that: It creates managed test data generators and unit
  tests that assert whether your 

  application still complies to your specification. It does so in a
  single-source-of-truth manner, 

  taking the Swagger API definition as the source.


  We employ the ScalaTest [property-based
  testing](http://www.scalatest.org/user_guide/property_based_testing) 

  functionality as the framework to generate the data values, and map the data
  types of our API definition on 

  the test data generators that are created by the plugin. ScalaTest provides 

  `org.scalacheck.Gen` and `org.scalacheck.Arbitrary` objects with utility
  methods that help generate a range of 

  (possibly arbitrary) data values for common Scala types and primitives. The
  Play-Swagger plugin uses these 

  methods to create test data generators specific for the data types of our API
  definition. When necessary, 

  it composes generators from primitive types into generators for complex types,
  so that you end up with a 

  set of generators that provide test data for your complete API.


  As an example, let's take the API definition for the simple pet store—trimmed
  down to the parts defining 

  parameter types, and (for brevity) omitting any non-data definitions and error
  definitions:


  ```yaml

  paths:
    /pets:
      get:
        parameters:
          - name: limit
            in: query
            required: false
            type: integer
            format: int32
        responses:
          default:
            description: error payload
      post:
        parameters:
          - name: pet
            in: body
            required: true
            schema:
              $ref: '#/definitions/newPet'
        responses:
          default:
            description: error payload
    /pets/{id}:
      get:
        parameters:
          - name: id
            in: path
            required: true
            type: integer
            format: int64
        responses:
          default:
            description: error payload
      delete:
        parameters:
          - name: id
            in: path
            required: true
            type: integer
            format: int64
        responses:
          default:
            description: error payload
  definitions:
    pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    newPet:
        required:
          - name
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          tag:
            type: string
  ```


  The `get` method on path `/pets` takes an optional `limit` parameter of common
  type `integer`. 

  The `post` method takes a `newPet` body parameter comprising of the primitive
  attributes `id`, `name` and `tag`, 

  subsequently of common types `long` and `string` (twice). Of these, only the
  `name` attribute is mandatory. 

  The `get` method on the path `/pets/{id}` takes the path parameter `id` of
  common type `long` and returns 

  an array of `pet`s consisting of the same attributes and primitive types as a
  `newPet` - but this time 

  with both `name` and `id` being mandatory. This specification maps to the
  following managed Scala domain model code:



  ```scala

  package example


  package object yaml {

      import de.zalando.play.controllers.PlayPathBindables

      type PetsIdDeleteResponsesDefault = Null
      type NewPetTag = Option[String]
      type PetsIdDeleteId = Long
      type PetsGetLimit = Option[Int]
      type NewPetId = Option[Long]

      case class Pet(id: Long, name: String, tag: NewPetTag) 
      case class NewPet(name: String, id: NewPetId, tag: NewPetTag) 

      implicit val bindable_OptionIntQuery = PlayPathBindables.createOptionQueryBindable[Int]
  }

  ```


  We want to have test data generators that generate an arbitrary range of
  values for the model 

  code shown above - composed from primitive, and sometimes optional, data
  definitions. 

  The Play-Swagger plugin does this by generating two Scala objects: one for the
  Swagger API definition, 

  and one for the API path parts. Each object contains generator factory methods
  for the defined data types, 

  prefixed by `create`, which returns a generator function. A generator function
  takes a given integer count 

  and returns a generated amount of test data for the data type it was created
  for.


  Data types are composed from primitive types, Scala optional types, and
  possibly more complex types. 

  Test data values for the primitive types are generated arbitrarily, employing
  the ScalaCheck 

  `org.scalacheck.Arbitrary.arbitrary[T]` method (the type parameter, replaced
  with Scala's primitive type, 

  on which the Swagger common type is mapped).


  In the code shown below, starting with primitive leaf data values, the `pet`
  parameter's attribute `id` 

  of common type `long` is arbitrarily generated from a `scala.Long`.  Note that
  the `id` attribute is optional, 

  though, for the `newPet` definition. As with the generated model, we created a
  `NewPetIdGenerator` value that 

  takes an arbitrarily generated `scala.Long` id value and generates an option
  value from it, employing the 

  ScalaCheck `org.scalacheck.Gen.option[T]`.  This generator will generate test
  data values comprising of `None` 

  and `Some` arbitrarily id value. It's probably best to let the Scala generator
  code speak for itself. 

  Note how it composes according to the same structure as the Scala model code.


  ```scala

  package example.yaml


  import org.scalacheck.Gen

  import org.scalacheck.Arbitrary

  import play.api.libs.json.scalacheck.JsValueGenerators

  import Arbitrary._


  object Generators extends JsValueGenerators {

      def createNullGenerator = _generate(NullGenerator)
      def createNewPetTagGenerator = _generate(NewPetTagGenerator)
      def createLongGenerator = _generate(LongGenerator)
      def createPetsGetLimitGenerator = _generate(PetsGetLimitGenerator)
      def createNewPetIdGenerator = _generate(NewPetIdGenerator)

      def createPetGenerator = _generate(PetGenerator)
      def createNewPetGenerator = _generate(NewPetGenerator)

      def NullGenerator = arbitrary[Null]
      def NewPetTagGenerator = Gen.option(arbitrary[String])
      def LongGenerator = arbitrary[Long]
      def PetsGetLimitGenerator = Gen.option(arbitrary[Int])
      def NewPetIdGenerator = Gen.option(arbitrary[Long])

      def PetGenerator = for {
          id <- arbitrary[Long]
          name <- arbitrary[String]
          tag <- NewPetTagGenerator
      } yield Pet(id, name, tag)
      def NewPetGenerator = for {
          name <- arbitrary[String]
          id <- NewPetIdGenerator
          tag <- NewPetTagGenerator
      } yield NewPet(name, id, tag)

      def _generate[T](gen: Gen[T]) = (count: Int) => for (i <- 1 to count) yield gen.sample
  }

  ```


  A `PetGenerator` and `NewPetGenerator` are created and implemented by the
  plugin as a for comprehension 

  that generates data values for each attribute, yielding an instance of a test
  pet. Other generators follow 

  the same pattern but, if necessary, delegate to different child generators.
  From this we acquire a set of 

  test data generators to implement our property-based testing.


  Running the test is as simple as running a test set from sbt. Just type `test`
  from your `sbt` prompt.


  # Building a Play-Swagger Plugin


  To build a plugin, do the following:


  - Clone the repository to your local filesystem

  - Run ```sbt +publishLocal``` in the Play-Swagger directory. This will publish
  the plugin into your local ivy repository


  To use the plugin in a plain Play project:


  - Create a new Play-Swagger project using activator template, for example:
  ```activator new hello-world play-swagger-service```

  - Take a look at the `project/plugins.sbt` of the generated project and add
  required plugins and resolvers to the `project/plugins.sbt` of your Play
  project

  - Do the same for `build.sbt`

  - Put a Swagger specification with a ```.yaml``` or ```.json``` extension into
  the ```conf``` directory

  - Add a specification link (`->`) to the play's routes file



  ## Plugin Architecture


  Ths Play-Swagger plugin has a three-tier architecture:


  * specification - this tier is responsible for finding and parsing a
  specification and converting it into the raw AST format

  * normalisation - this tier performs a couple of optimisations on the AST
  including type deduplication, flattening and parameter dereferencing

  * generation - a final step including transformation of the AST into the
  source-code related data and generation of source code from it   


  The separation of the specification and generation tiers allows for plugging
  in different specification standards 

  and generating source code for different frameworks.



  ## Plugin Project Structure


  There are a couple of sub-projects:


  * `swagger-model` - A standalone Scala Swagger model and a Jackson parser for
  it. Can be used by another projects

  * `api` - This is the project that's automatically added to the runtime
  classpath of any projects that use this plugin.

  * `swagger-parser` - A converter of the Swagger model to the internal AST of
  the plugin

  * `api-first-core` - This is a core of the plugin with minimal functionality.
  It includes defining an AST structure and some transformations on AST.  

  * `play-scala-generator` - The standalone generator for transforming an AST
  into the skeleton of Play-Scala application. 

  * `plugin` - A coupble of sbt plugins, one for each tier:
      - `ApiFirstSwaggerParser` - a plugin wrapping Swagger parsing part 
      - `ApiFirstCore` - a wrapper for AST-related functionality
      - `ApiFirstPlayScalaCodeGenerator` - a wrapper for the Play-Scala generator

  Because of the modular plugin architecture, all modules must be enabled
  separatly in sbt's build.sbt. 

  It is also necessary to configure which parser(s) must be used by the plugin,
  like that: 


  ```scala

  lazy val root = (project in file(".")).enablePlugins(PlayScala, ApiFirstCore,
  ApiFirstPlayScalaCodeGenerator, ApiFirstSwaggerParser)


  apiFirstParsers := Seq(ApiFirstSwaggerParser.swaggerSpec2Ast.value).flatten

  ```


  Please take a look at activator template's configuration for complete example.



  ## Custom Templates For Code Generation


  The PlayScala generator supports custom templates. In order to override
  default template for some of the components,

  please provide your custom template named in accordance to the following list:

      * `play_scala_test.mustache` - for unit tests
      * `play_validation.mustache` - for validators 
      * `generators.mustache` - for test data generators
      * `model.mustache` - for model classes and query and path bindables
      * `play_scala_controller_base.mustache` - for play controller bases 
      * `play_scala_controller_security.mustache` - for security adapters used by controller bases
      * `play_scala_form_parser.mustache` - for form parsers used by the controller bases
      * `play_scala_controller.mustache` - for play controller skeletons supposed to be augmented by the programmer
      * `play_scala_response_writers.mustache` - for custom serializers to be augmented by the programmer
      * `play_scala_security_extractors.mustache` - for custom security extractors to be augmented by the programmer 


  Please be aware that generated artifacts need to preserve some specific shape
  in order to be compiled together without errors.


  The location where custom templates reside needs to be configured by
  overriding the plugin setting `playScalaCustomTemplateLocation`.


  For example following configuration will set this place to be `conf/templates`
  folder of the project:

  ```scala

  playScalaCustomTemplateLocation := Some(((resourceDirectory in Compile) /
  "templates").value)

  ```



  ## Plugin Developing


  sbt doesn't allow sub-projects to depend on each other as sbt plugins. To test
  an sbt plugin, you need a separate 

  project.  This project is `swagger-tester`.  To test your changes as you're
  developing the plugin, cd into this 

  directory, and run sbt. This project uses an sbt `ProjectRef` to the sbt
  plugin, which means you don't need to 

  `publishLocal` the plugin after each change. Just run `reload` in the sbt
  console, and it will pick up your changes.


  The play-swagger plugin provides a couple of commands useful for development: 


  * `apiFirstPrintDenotations` - outputs a common names of different parts of
  the AST as they are intended to be used in generated Scala code

  * `apiFirstPrintRawAstTypes` - outputs all type definitions as they read from
  the specification before type optimisations

  * `apiFirstPrintRawAstParameters` - outputs all parameters definitions before
  type optimisations

  * `apiFirstPrintFlatAstTypes` - outputs type definitions after type
  optimisations

  * `apiFirstPrintFlatAstParameters` - outputs parameter definitions after type
  optimisations



  ## Plugin Testing


  We're using the sbt scripted framework for testing. You can find the tests in
  `plugin/src/sbt-test`, and run them 

  by running `scripted` in the sbt console.



  ## Code quality


  There are some quality checks embedded into the build script:

  * the source code is (re)formatted using
  [scalariform](https://github.com/scala-ide/scalariform) each time it is
  compiled (currently deactivated).

  * [`scalastyle`](http://www.scalastyle.org) sbt command shall be used to
  perform code style checks before putting changes into the repository.

  * [`lint:compile`](https://github.com/HairyFotr/linter) sbt command shall be
  used to perform static code analysis before putting changes into the
  repository.

  * code coverage for api and compiler modules can be executed by issuing `sbt
  clean coverage test` command for these 

  projects. Coverage statistics can be generated using `coverageReport` sbt
  command. 
casualjim/go-swagger: >
  # Swagger 2.0 [![Build
  Status](https://circleci.com/gh/go-swagger/go-swagger.svg?style=shield)](https://circleci.com/gh/go-swagger/go-swagger)
  [![Build
  status](https://ci.appveyor.com/api/projects/status/x377t5o9ennm847o/branch/master?svg=true)](https://ci.appveyor.com/project/casualjim/go-swagger/branch/master)
  [![codecov](https://codecov.io/gh/go-swagger/go-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/go-swagger/go-swagger)
  [![GitHub
  version](https://badge.fury.io/gh/go-swagger%2Fgo-swagger.svg)](https://badge.fury.io/gh/go-swagger%2Fgo-swagger)

  [![Slack
  Status](https://slackin.goswagger.io/badge.svg)](https://slackin.goswagger.io)

  [![license](http://img.shields.io/badge/license-Apache%20v2-orange.svg)](https://raw.githubusercontent.com/swagger-api/swagger-spec/master/LICENSE)

  [![GoDoc](https://godoc.org/github.com/go-swagger/go-swagger?status.svg)](http://godoc.org/github.com/go-swagger/go-swagger)

  [![Docker Repository on
  Quay](https://quay.io/repository/goswagger/swagger/status "Docker Repository
  on Quay")](https://quay.io/repository/goswagger/swagger)

  [![FOSSA
  Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_shield)

  [![GolangCI](https://golangci.com/badges/github.com/go-swagger/go-swagger.svg)](https://golangci.com)

  [![Go Report
  Card](https://goreportcard.com/badge/github.com/go-swagger/go-swagger)](https://goreportcard.com/report/github.com/go-swagger/go-swagger)


  This package contains a golang implementation of Swagger 2.0 (aka [OpenAPI
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)):

  it knows how to serialize and deserialize swagger specifications.


  [Swagger](https://swagger.io/) is a simple yet powerful representation of your
  RESTful API.<br>


  >
  ![swagger](https://raw.githubusercontent.com/go-swagger/go-swagger/master/docs/favicon-16x16.png)
  **Swagger in a nutshell**

  >

  > With the largest ecosystem of API tooling on the planet, thousands of
  developers are supporting Swagger in almost every modern programming language
  and deployment environment.

  >

  > With a Swagger-enabled API, you get interactive documentation, client SDK
  generation and discoverability. We created Swagger to help fulfill the promise
  of APIs.

  >

  > Swagger helps companies like Apigee, Getty Images, Intuit, LivingSocial,
  McKesson, Microsoft, Morningstar, and PayPal build the best possible services
  with RESTful APIs. Now in version 2.0, Swagger is more enabling than ever. And
  it's 100% open source software.


  ##  Features

  `go-swagger` brings to the go community a complete suite of fully-featured,
  high-performance, API components to  work with a Swagger API: server, client
  and data model.


  * Generates a server from a swagger specification

  * Generates a client from a swagger specification

  * Supports most features offered by jsonschema and swagger, including
  polymorphism

  * Generates a swagger specification from annotated go code

  * Additional tools to work with a swagger spec

  * Great customization features, with vendor extensions and customizable
  templates


  Our focus with code generation is to produce idiomatic, fast go code, which
  plays nice with golint, go vet etc.


  ##  Project status

  `go-swagger` is now feature complete and has stabilized its API.


  Most features and building blocks are now in a stable state, with a rich set
  of CI tests.


  The go-openapi community actively continues bringing fixes and enhancements to
  this code base.


  There is still much room for improvement: contributors and PR's are welcome.
  You may also get in touch with maintainers on [our slack
  channel](https://slackin.goswagger.io).


  ## Documentation

  <https://goswagger.io>


  ## FAQ

  Q&A contributed by the community:


  <https://goswagger.io/faq/>


  ## How is this different from go generator in swagger-codegen?

  **tl;dr** The main difference at this moment is that this one actually
  works...


  The swagger-codegen project only generates a _workable_ go client and even
  there it will only support flat models.

  Further, the go server generated by swagger-codegen is mostly a stub.


  > **Motivation**

  > Why is this not done as a part of the swagger-codegen project? Because:

  >

  > * I don't really know java very well and so I'd be learning both java and
  the object model of the codegen which was in heavy flux as opposed to doing go
  and I really wanted to go experience of designing a large codebase with it.

  > * Go's super limited type system makes it so that it doesn't fit well in the
  model of swagger-codegen

  > * Go's idea of polymorphism doesn't reconcile very well with a solution
  designed for languages that actually have inheritance and so forth.

  > * For supporting types like `[][][]map[string][][]int64` I don't think it's
  possible with mustache

  >

  > I gravely underestimated the amount of work that would be involved in making
  something useful out of it.

  > My personal mission: I want the jvm to go away, it was great way back when
  now it's just silly (vm in container on vm in vm in container)


  ## What's inside?


  Here is an outline of available features (see the full list
  [here](https://goswagger.io/features.html)):


  - An object model that serializes swagger-compliant yaml or json

  - A tool to work with swagger
    - Serve swagger UI for any swagger spec file
    - Flexible code generation, with customizable templates
      - Generate go API server based on swagger spec
      - Generate go API client from a swagger spec
    -  Validate a swagger spec document, with extra rules outlined [here](https://github.com/apigee-127/sway/blob/master/docs/README.md#semantic-validation)
    -  Generate a spec document based on annotated code
  - A runtime to work with Rest API and middlewares
    - Serve spec
    - Routing
    - Validation
    - Authorization
    - Swagger docs UI
    - A Diff tool which will cause a build to fail if a change in the spec breaks backwards compatibility

  There is more to that...


  - A [typed JSON Schema implementation](https://goswagger.io/use/model.html),
  supporting most Draft 4 features

  - Extended string and numeric formats:
  [strfmt](https://github.com/go-openapi/strfmt)

  - Utilities to work with JSON, convert data types and pointers:
  [swag](https://github.com/go-openapi/swag)

  - A jsonschema (Draft 4) validator, with full $ref support:
  [validate](https://github.com/go-openapi/validate)

  - Custom validation interface


  ## Installing

  `go-swagger` is available as binary or docker releases as well as from source:
  [more details](https://goswagger.io/install.html).


  ## Use-cases

  The main package of the toolkit, go-swagger/go-swagger, provides command line
  tools to help working with swagger.


  The toolkit is highly customizable and allows endless possibilities to work
  with OpenAPI2.0 specifications.


  Beside the go-swagger CLI tool and generator, the [go-openapi
  packages](https://github.com/go-openapi) provide modular functionality to
  build custom solutions on top of OpenAPI.


  The CLI supports shell autocompletion utilities: see
  [here](https://goswagger.io/cli_helpers.html).


  ### Serve specification UI

  Most basic use-case: serve a UI for your spec:


  ```

  swagger serve
  https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json

  ```


  ### Validate a specification

  To [validate](https://goswagger.io/usage/validate.html) a Swagger
  specification:


  ```

  swagger validate
  https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json

  ```


  ### Generate an API server

  To generate a [server for a swagger
  spec](https://goswagger.io/generate/server.html) document:


  ```

  swagger generate server [-f ./swagger.json] -A [application-name [--principal
  [principal-name]]

  ```


  ### Generate an API client

  To generate a [client for a swagger
  spec](https://goswagger.io/generate/client.html) document:


  ```

  swagger generate client [-f ./swagger.json] -A [application-name [--principal
  [principal-name]]

  ```


  ### Generate a spec from source

  To generate a [swagger spec document for a go
  application](https://goswagger.io/generate/spec.html):


  ```

  swagger generate spec -o ./swagger.json

  ```


  ### Generate a data model

  To generate model structures and validators exposed by the API:


  ```

  swagger generate model --spec={spec}

  ```


  ### Transform specs


  There are [several commands](https://goswagger.io/use/transform.html) allowing
  you to transform your spec.


  Resolve and expand $ref's in your spec as inline definitions:

  ```

  swagger expand {spec}

  ```


  Flatten your spec: all external $ref's are imported into the main document and
  inline schemas reorganized as definitions.

  ```

  swagger flatten {spec}

  ```


  Merge specifications (composition):

  ```

  swagger mixin {spec1} {spec2}

  ```


  ### Compare specs


  The  diff command allows you to check backwards compatibility.

  Type ```swagger diff --help``` for info.


  ```

  swagger diff {spec1} {spec2}

  ```


  ## Try it


  Try `go-swagger` in a free online workspace using Gitpod:


  [![Open in
  Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io#https://github.com/go-swagger/go-swagger)


  ## Licensing


  The toolkit itself is licensed as Apache Software License 2.0. Just like
  swagger, this does not cover code generated by the toolkit. That code is
  entirely yours to license however you see fit.



  [![FOSSA
  Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_large)


  ## Who is using this project?


  To name but a few... (feel free to sign in there if you are using this
  project):


  > In the list below, we tried to figure out the public repos where you'll find
  examples on how to use `go-swagger` and `go-openapi`:


  [3DSIM](https://github.com/3DSIM)  

  [Alibaba PouchAPI](https://github.com/alibaba/pouch)  

  [CheckR](https://github.com/checkr/flagr)  

  [Cilium](https://github.com/cilium/cilium)  

  [CoreOS](https://github.com/coreos/go-quay)  

  [NetBox Community](https://github.com/netbox-community/go-netbox)  

  [EVE Central](https://github.com/evecentral)  

  Iron.io

  [JaegerTracing](https://github.com/jaegertracing/jaeger)  

  [Kubernetes-Helm](https://github.com/kubernetes-helm/monocular)  

  [Kubernetes](https://godoc.org/k8s.io/apiextensions-apiserver/pkg/apiserver)  

  [ManifoldCo](https://github.com/manifoldco)  

  [Metaparticle.io](https://github.com/metaparticle-io/metaparticle-ast)  

  [Netlify](https://github.com/netlify/open-api)  

  [Nutanix](https://github.com/nutanix)  

  [OAS2](https://github.com/hypnoglow/oas2)  

  [OVH API](https://github.com/appscode/go-ovh)  

  [RackHD](https://github.com/RackHD/RackHD)  

  [ScaleFT](https://github.com/authclub/billforward)  

  [StratoScale](https://github.com/Stratoscale/swagger)  

  [Terraform Provider
  OpenAPI](https://github.com/dikhan/terraform-provider-openapi)  

  [VMWare](https://github.com/vmware/dispatch)  

  ...


  ## Note to users migrating from older releases


  ### Using 0.5.0


  Because 0.5.0 and master have diverged significantly, you should checkout the
  tag 0.5.0 for go-swagger when you use the currently released version.


  ### Migrating from 0.5.0 to 0.6.0


  You will have to rename some imports:


  ```

  github.com/go-swagger/go-swagger/httpkit/validate to
  github.com/go-openapi/validate

  github.com/go-swagger/go-swagger/httpkit to github.com/go-openapi/runtime

  github.com/naoina/denco to github.com/go-openapi/runtime/middleware/denco

  github.com/go-swagger/go-swagger to github.com/go-openapi

  ```


  ### Migrating from 0.12 to 0.13


  Spec flattening and $ref resolution brought breaking changes in model
  generation, since all complex things generate their own definitions.


  ### Migrating from 0.14 to 0.15


  Generated servers no more import the following package (replaced by go1.8
  native functionality):

  ```

  github.com/tylerb/graceful

  ```


  Spec flattening now defaults to minimal changes to models and should be
  workable for 0.12 users.


  Users who prefer to stick to 0.13 and 0.14 default flattening mode may now use
  the `--with-flatten=full` option.


  Note that the `--skip-flatten` option has been phased out and replaced by the
  more explicit `--with-expand` option.
krakenjs/swaggerize-hapi: >
  # hapi-openapi


  [![Build
  Status](https://travis-ci.org/krakenjs/hapi-openapi.svg?branch=master)](https://travis-ci.org/krakenjs/hapi-openapi)

  [![NPM
  version](https://badge.fury.io/js/hapi-openapi.png)](http://badge.fury.io/js/hapi-openapi)


  ### Note: this project was renamed from 'swaggerize-hapi' to 'hapi-openapi'.


  `hapi-openapi` is a design-driven approach to building RESTful services with
  [OpenAPI (Swagger)](http://openapis.org) and [Hapi](http://hapijs.com)
  (OpenAPI 3.0 support coming soon).


  `hapi-openapi` provides the following features:


  - API schema validation.

  - Routes based on the OpenAPI document.

  - API documentation route.

  - Input validation.


  ### Why "Design Driven"


  There are already a number of modules that help build RESTful APIs for node
  with OpenAPI. However,

  these modules tend to focus on building the documentation or specification as
  a side effect of writing

  the application business logic.


  `hapi-openapi` begins with the OpenAPI document first. This facilitates
  writing APIs that are easier to design, review, and test.


  At runtime, `hapi-openapi` uses the API specification to build routes from
  previously defined paths. This ensures that everything specified is what is
  implemented.


  ### Quick Start with a Generator


  This guide will let you go from an `api.json` to a service project in no time
  flat.


  First install `generator-swaggerize` (and `yo` if you haven't already):


  ```bash

  $ npm install -g yo

  $ npm install -g generator-swaggerize

  ```


  Now run the generator.


  ```bash

  $ mkdir petstore && cd $_

  $ yo swaggerize

  ```


  Follow the prompts (note: make sure to choose `hapi` as your framework
  choice).


  You now have a working api and can use something like
  [SwaggerHub](https://swaggerhub.com/?_ga=2.118604234.2143392684.1515431456-1673703125.1481054263)
  to explore it.


  ### Manual Usage


  ```javascript

  const Hapi = require('@hapi/hapi');


  const server = new Hapi.Server();


  await server.register({
      plugin: require('hapi-openapi'),
      options: {
          api: Path.join(__dirname, './config/pets.json'),
          handlers: Path.join(__dirname, './handlers')
      }
  });

  ```


  ### Hapi Plugin


  The plugin will be registered as `openapi` on `server.plugins` with the
  following exposed:


  - `getApi()` - the resolved Swagger document.

  - `setHost(host)` - a helper function for setting the `host` property on the
  `api`.


  ### Configuration Options


  - `api` - a path to a valid OpenAPI 2.0 document, or a valid document in the
  form of an object.

  - *deprecated* `docspath` - the path to expose api docs for swagger-ui, etc.
  Defaults to `/api-docs`.

  - `docs` - an object used to configure the api docs route.
      - `path` - the path to expose api docs for swagger-ui, etc. Defaults to `/api-docs`.
      - `auth` - options auth config for this route.
      - `stripExtensions` - strip vendor extensions from docs. Defaults to true.
      - `prefixBasePath` - prefix path of docs with he OpenAPI document's `basePath` value. Defaults to true.
  - `handlers` - either a string directory structure for route handlers, object,
  or not set if using `x-hapi-handler`.

  - `extensions` - an array of file extension types to use when scanning for
  handlers. Defaults to `['js']`.

  - `vhost` - *optional* domain string (see [hapi route
  options](http://hapijs.com/api#route-options)).

  - `cors` - *optional* cors setting (see [hapi route
  options](http://hapijs.com/api#route-options)).

  - `outputvalidation` - *optional* validate response data.


  ### Mount Path


  Api `path` values will be prefixed with the OpenAPI document's `basePath`
  value.  This behavior can be negated if you set the option
  `docs.prefixBasePath` to `false`.


  ### Handlers Directory


  The `options.handlers` option specifies a directory to scan for handlers.
  These handlers are bound to the api `paths` defined in the OpenAPI document.


  ```

  handlers
    |--foo
    |    |--bar.js
    |--foo.js
    |--baz.js
  ```


  Will route as:


  ```

  foo.js => /foo

  foo/bar.js => /foo/bar

  baz.js => /baz

  ```


  ### Path Parameters


  The file and directory names in the handlers directory can also represent path
  parameters.


  For example, to represent the path `/users/{id}`:


  ```shell

  handlers
    |--users
    |    |--{id}.js
  ```


  This works with directory names as well:


  ```shell

  handlers
    |--users
    |    |--{id}.js
    |    |--{id}
    |        |--foo.js
  ```


  To represent `/users/{id}/foo`.


  ### Handlers File


  Each provided javascript file should export an object containing functions
  with HTTP verbs as keys.


  Example:


  ```javascript

  module.exports = {
      get: function (req, h) { ... },
      put: function (req, h) { ... },
      ...
  }

  ```


  Optionally, `pre` handlers can be used by providing an array of handlers for a
  method:


  ```javascript

  module.exports = {
      get: [
          function p1(req, h) { ... },
          function handler(req, h) { ... }
      ],
  }

  ```


  ### Handlers Object


  The directory generation will yield this object, but it can be provided
  directly as `options.handlers`.


  Example:


  ```javascript

  {
      'foo': {
          'get': function (req, h) { ... },
          'bar': {
              'get': function (req, h) { ... },
              'post': function (req, h) { ... }
          }
      }
      ...
  }

  ```


  ### X-Hapi-Handler


  Alternatively the API document can set `x-hapi-handler` attribute on each
  defined `paths` element if `handlers` is not defined.


  Example:


  ```

  "/pets/{id}": {
      "x-hapi-handler": "./routes/pets-by-id.js",
      .
      .
      .
  ```


  This will construct a `handlers` object from the given `x-hapi-handler` files.


  ### X-Hapi-Options


  There is now support at the operations level for `x-hapi-options` which
  represent individual [Hapi Route
  Optijons](https://github.com/hapijs/hapi/blob/master/API.md#route-options).


  This support is limited to configuration supported by the JSON file type.


  Example:


  ```

  "/internal": {
    "post": {
      "x-hapi-options": {
        "isInternal": true
      }
      .
      .
      .
  ```


  ### Authentication


  Support for OpenAPI [security
  schemes](http://swagger.io/specification/#securitySchemeObject) requires that
  relevant authentication scheme and strategy are registered before the
  hapi-openapi plugin. See the [hapi docs](http://hapijs.com/tutorials/auth) for
  information about authentication schemes and strategies.


  The name of the hapi authentication strategy is expected to match the name
  field of the OpenAPI [security requirement
  object](http://swagger.io/specification/#securityRequirementObject).


  Example:


  ```yaml

  securityDefinitions:
    api_key:
      type: apiKey
      name: Authorization
      in: header
  paths:
    '/users/':
      get:
        security:
          - api_key: []
  ```


  ```javascript

  const server = new Hapi.Server();


  await server.register({ plugin: AuthTokenScheme });


  server.auth.strategy('api_key', 'auth-token-scheme', {
      validateFunc: async function (token) {
        // Implement validation here, return { credentials, artifacts }.
      }
  });


  await server.register({
      plugin: require('hapi-openapi'),
      options: {
          api: require('./config/pets.json'),
          handlers: Path.join(__dirname, './handlers')
      }
  });

  ```


  ### X-Hapi-Auth


  Alternatively it may be easier to automatically register a plugin to handle
  registering the necessary schemes and strategies.


  **x-hapi-auth-schemes**


  The root document can contain an `x-hapi-auth-schemes` object specifying
  different plugins responsible for registering auth schemes.


  Example:


  ```

  "x-hapi-auth-schemes": {
      "apiKey": "../lib/xauth-scheme.js"
  }

  ```


  This plugin will be passed the following options:


  - `name` - the auth scheme name, in this example `apiKey`.


  **x-hapi-auth-strategy**


  The `securityDefinitions` entries can contain an `x-hapi-auth-strategy`
  attribute pointing to a plugin responsible for registering auth strategies.


  Example:


  ```

  "securityDefinitions": {
    "api_key": {
      "x-hapi-auth-strategy": "../lib/xauth-strategy.js",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  }

  ```


  The plugin will be passed the following options:


  - `name` - the `securityDefinitions` entry's key. In this example, `api_key`.
  This is typically used as the strategy name.

  - `scheme` - the `securityDefinitions` `type`. In this example, `apiKey`. This
  should match a `x-hapi-auth-scheme` name.

  - `where` - `securityDefinitions` entry `in` attribute. This is search for the
  `lookup` value; in this example `header`.

  - `lookup` - `securityDefinitions` entry `name` attribute. Used as the name to
  look up against `where`.


  The way you can make these play together is that for every `type`, a scheme
  exists that delegates some lookup or evaluation to the appropriate strategy.


  Example:


  ```javascript

  //xauth-scheme.js


  const register = function (server, { name  }) {
      server.auth.scheme(name /*apiKey*/, (server, /* options received from the strategy */ { validate }) => {
          return {
              authenticate: async function (request, h) {
                  return h.authenticated(await validate(request));
              }
          };
      });
  };


  module.exports = { register, name: 'x-hapi-auth-scheme' };

  ```


  and


  ```javascript

  //xauth-strategy.js


  const Boom = require('@hapi/boom');


  const register = function (server, { name, scheme, where, lookup }) {
      server.auth.strategy(name, /* the scheme to use this strategy with */ scheme, {
          //Define a validate function for the scheme above to receive
          validate: async function (request) {
              const token = request.headers[lookup];

              //Some arbitrary example
              if (token === '12345') {
                  return { credentials: { scope: ['read'] }, artifacts: { token } };
              }

              throw Boom.unauthorized();
          }
      });
  };


  module.exports = { register, name: 'x-hapi-auth-strategy' };

  ```
AntXlab/pyswagger: >+
  pyswagger

  =========


  [![Build
  Status](https://travis-ci.org/mission-liao/pyswagger.svg?branch=master)](https://travis-ci.org/mission-liao/pyswagger)

  [![Coverage
  Status](https://coveralls.io/repos/mission-liao/pyswagger/badge.svg?branch=master&style=flat)](https://coveralls.io/r/mission-liao/pyswagger?branch=master)


  A python client for [Swagger](https://helloreverb.com/developers/swagger)
  enabled REST API. It wouldn't be easier to

  try Swagger REST API by [Swagger-UI](https://github.com/wordnik/swagger-ui).
  However, when it's time to **unittest**

  your API, the first option you find would be
  [Swagger-codegen](https://github.com/wordnik/swagger-codegen), but the better
  option is us.


  This project is developed after
  [swagger-py](https://github.com/digium/swagger-py), which is a nicely
  implemented one, and inspired many aspects of this project. Another project is
  [flex](https://github.com/pipermerriam/flex), which focuses on parameter
  validation, try it if you can handle other parts by yourselves. For other
  projects related to Swagger tools in python, check
  [here](https://github.com/swagger-api/swagger-spec#python).


  **pyswagger** is much easier to use (compared to swagger-codegen, you don't
  need to prepare a scala environment) and tries hard to **fully supports**
  [Swagger Spec](https://helloreverb.com/developers/swagger) in all aspects.


  - [NEWs: upcoming support for OpenAPI 3.0](docs/md/news.md)

  - [Features](README.md#features)

  - [Tutorial](README.md#tutorial)

  - [Quick Start](README.md#quick-start)

  - [Installation](README.md#installation)

  - [Reference](README.md#reference)

  - [Contributors](README.md#contributors)

  - [Contribution Guideline](README.md#contribution-guildeline)

  - [FAQ](docs/md/faq.md)

  - [Changes](CHANGES.md)


  ---------


  ## Features

  - convert Swagger Document from older version to newer one. (ex. convert from
  1.2 to 2.0)

  - support Swagger **1.2**, **2.0** on python ~~2.6~~, **2.7**, **3.3**,
  **3.5**, **3.6**

  - support YAML via [Pretty-YAML](https://github.com/mk-fg/pretty-yaml)

  - support $ref to **External Document**, multiple swagger.json will be
  organized into a group of App. And external document with self-describing
  resource is also supported (refer to
  [issue](https://github.com/swagger-api/swagger-spec/issues/219)).

  - type safe, input/output are converted to python types according to [Data
  Type](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#43-data-types)
  described in Swagger. You don't need to touch any json schema when using
  pyswagger. Limitations like **minimum/maximum** or **enum** are also checked.
  **Model inheritance** also supported.

  - provide function **App.validate** to check validity of the loaded API
  definition according to spec.

  - builtin client implementation based on various http clients in python. For
  usage of these clients, please refer to `pyswagger.tests.contrib.client` for
  details
    - [requests](https://github.com/kennethreitz/requests)
    - [tornado.httpclient.AsyncHTTPClient](http://tornado.readthedocs.org/en/latest/httpclient.html)
    - [flask.testing.FlaskClient](http://flask.pocoo.org/docs/0.10/api/#flask.testing.FlaskClient)
    - [webapp2](http://webapp2.readthedocs.io/en/latest/guide/testing.html)
  - not implemented parts, fire me a bug if you need it
    - [ ] Swagger 2.0
      - [ ] Schema.pattern
      - [ ] Scheme.patternProperties
      - [ ] Schema.readonly
      - [ ] Schema.allowEmptyValue
      - [ ] A scanner to validate schema
    - [ ] A WebSocket client
    - [ ] dump extension field

  ---------


  ## Tutorial


  - [Initialization](docs/md/tutorial/init.md)

  - [Making a Request](docs/md/tutorial/request.md)

  - [Access the Response](docs/md/tutorial/response.md)

  - [Testing a Local Server](docs/md/tutorial/local.md)

  - [Converting Document into another version](docs/md/tutorial/converter.md)

  - [Exntending Primitive Factory for user-defined
  primitives](docs/md/tutorial/extend_prim.md)

  - [Rendering Random Requests for BlackBox Testing](docs/md/tutorial/render.md)

  - [Operation MIME Support](docs/md/tutorial/mime.md)

  - [Test with Invalid Input](docs/md/tutorial/invalid.md)

  - [Load Spec from a Restricted
  Service](docs/md/tutorial/restricted_service.md)

  - [Customized Headers](docs/md/tutorial/customized_headers.md)


  ---------


  ## Quick Start


  Before running this script, please make sure
  [requests](https://github.com/kennethreitz/requests) is installed on your
  environment.


  ```python

  from pyswagger import App, Security

  from pyswagger.contrib.client.requests import Client

  from pyswagger.utils import jp_compose


  # load Swagger resource file into App object

  app = App._create_('http://petstore.swagger.io/v2/swagger.json')


  auth = Security(app)

  auth.update_with('api_key', '12312312312312312313q') # api key

  auth.update_with('petstore_auth', '12334546556521123fsfss') # oauth2


  # init swagger client

  client = Client(auth)


  # a dict is enough for representing a Model in Swagger

  pet_Tom=dict(id=1, name='Tom', photoUrls=['http://test']) 

  # a request to create a new pet

  client.request(app.op['addPet'](body=pet_Tom))


  # - access an Operation object via App.op when operationId is defined

  # - a request to get the pet back

  req, resp = app.op['getPetById'](petId=1)

  # prefer json as response

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  assert pet.name == 'Tom'


  # new ways to get Operation object corresponding to 'getPetById'.

  # 'jp_compose' stands for JSON-Pointer composition

  req, resp = app.resolve(jp_compose('/pet/{petId}',
  base='#/paths')).get(petId=1)

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  ```


  ---------


  ## Installation

  We support pip installtion.

  ```bash

  pip install pyswagger

  ```


  Additional dependencies must be prepared before firing a request. If you are
  going to access a remote/local web server, you must install
  [requests](https://github.com/kennethreitz/requests) first.

  ```bash

  pip install requests

  ```


  If you want to test a local tornado server, please make sure tornado is ready
  on your environment

  ``` bash

  pip install tornado

  ```


  We also provide native client for flask app, but to use it, flask is also
  required

  ``` bash

  pip install flask

  ```



  ---------


  ## Reference

  All exported API are described in following sections. ![A diagram about
  relations between
  components](https://docs.google.com/drawings/d/1DZiJgl4i9L038UJJp3kpwkWRvcNQktf5h-e4m96_C-k/pub?w=849&h=530)


  - [App](docs/md/ref/app.md)

  - [SwaggerClient](docs/md/ref/client.md)

  - [Security](docs/md/ref/security.md)


  ---------


  ## Contributors

  - [Marcin Goliński](https://github.com/mjgolinski)

  - [Andrey Mikhailov](https://github.com/zlovred)

  - [Telepenin Nikolay](https://github.com/prefer)

  - [WangJiannan](https://github.com/WangJiannan)


  ---------


  ## Contribution Guildeline


  #### report an issue:

  - issues can be reported
  [here](https://github.com/mission-liao/pyswagger/issues)

  - include swagger.json if possible

  - turn on logging and report with messages on console

  ```python

  import logging

  logger = logging.getLogger('pyswagger')


  formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s -
  %(message)s')


  console = logging.StreamHandler()

  console.setLevel(logging.DEBUG)

  console.setFormatter(formatter)


  logger.addHandler(console)

  logger.setLevel(logging.DEBUG)


  ... your stuff


  ```


  - describe expected behavior, or more specific, the input/output


  #### submit a PR

  - test included

  - only PR to `develop` would be accepted


  env preparation

  ```bash

  pip install -r requirement-dev.txt

  ```


  unit testing

  ```bash

  python -m pytest -s -v --cov=pyswagger --cov-config=.coveragerc
  pyswagger/tests

  ```

RobWin/swagger2markup: >
  = Swagger2Markup

  :author: Robert Winkler

  :hardbreaks:


  image:https://travis-ci.org/Swagger2Markup/swagger2markup.svg?branch=master["Build
  Status", link="https://travis-ci.org/Swagger2Markup/swagger2markup"]
  image:https://coveralls.io/repos/Swagger2Markup/swagger2markup/badge.svg["Coverage
  Status", link="https://coveralls.io/r/Swagger2Markup/swagger2markup"]
  image:https://api.codacy.com/project/badge/grade/498a6a39d7d84ff687546359f58ee18d["Codacy
  code quality", link="https://www.codacy.com/app/robwin/swagger2markup"]
  image:https://api.bintray.com/packages/swagger2markup/Maven/swagger2markup/images/download.svg[link="https://bintray.com/swagger2markup/Maven/swagger2markup/_latestVersion"]
  image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2",
  link="http://www.apache.org/licenses/LICENSE-2.0.txt"]
  image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter",
  link="https://twitter.com/rbrtwnklr"]
  image:https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/RobWin/swagger2markup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]



  == Overview



  NOTE: Dear community,

  unfortunately I can't maintain Swagger2Markup alone anymore. There are many
  interesting new topics:

  1) Swagger v3 support

  2) Fixing bugs

  2) Merge Swagger2Markup repositories and create a new multi-module repository.

  Any help is welcome.

  Kind regards,

  Robert



  The primary goal of this project is to *simplify the generation of an
  up-to-date RESTful API documentation by combining documentation that's been
  hand-written with auto-generated API documentation* produced by
  https://github.com/swagger-api[Swagger]. The result is intended to be an
  *up-to-date, easy-to-read, on- and offline user guide*, comparable to
  https://developer.github.com/v3/[GitHub's API documentation]. The output of
  Swagger2Markup can be used as an alternative to
  https://github.com/swagger-api/swagger-ui[swagger-ui] and can be served as
  static content.

  NOTE: The Swagger Specification has been donated to to the
  https://openapis.org/[Open API Initiative (OAI)] and has been renamed to the
  https://github.com/OAI/OpenAPI-Specification[OpenAPI Specification].


  Swagger2Markup converts a Swagger JSON or YAML file into several *AsciiDoc* or
  *GitHub Flavored Markdown* documents which can be combined with hand-written
  documentation. The Swagger source file can be located locally or remotely via
  HTTP. Swagger2Markup supports the Swagger 1.2 and 2.0 specification.
  Internally it uses the _official_
  https://github.com/swagger-api/swagger-parser[swagger-parser] and my
  https://github.com/RobWin/markup-document-builder[markup-document-builder].


  You can use Swagger2Markup to convert your contract-first Swagger YAML file
  into a human-readable format and combine it with hand-written documentation.
  As an alternative, you can choose the code-first approach and use
  Swagger2Markup together with
  https://github.com/swagger-api/swagger-core/wiki/Swagger-Core-JAX-RS-Project-Setup-1.5.X[Swagger
  JAX-RS], https://github.com/springfox/springfox[springfox] or
  https://github.com/spring-projects/spring-restdocs[spring-restdocs]. If you
  are Gradle or Maven user, you can also use the
  https://github.com/RobWin/swagger2markup-gradle-plugin[Swagger2Markup Gradle
  Plugin] or
  https://github.com/redowl/swagger2markup-maven-plugin[Swagger2markup Maven
  Plugin].


  http://asciidoctor.org/docs/asciidoc-writers-guide/[AsciiDoc] is preferable to
  Markdown as it has more features. AsciiDoc is a text document format for
  writing documentation, articles, books, ebooks, slideshows, web pages and
  blogs. AsciiDoc files can be converted to *HTML*, *PDF* and *EPUB*. AsciiDoc
  is much better suited for describing public APIs than *JavaDoc* or
  *Annotations*.


  You can generate your HTML5, PDF and EPUB documentation via
  https://github.com/asciidoctor/asciidoctorj[asciidoctorj] or even better via
  the
  https://github.com/asciidoctor/asciidoctor-gradle-plugin[asciidoctor-gradle-plugin]
  or
  https://github.com/asciidoctor/asciidoctor-maven-plugin[asciidoctor-maven-plugin].


  The project requires at least JDK 8.


  == Example


  image::swagger2markup-documentation/src/docs/asciidoc/images/Swagger2Markup.PNG[]


  image::swagger2markup-documentation/src/docs/asciidoc/images/Swagger2Markup_definitions.PNG[]


  == Reference documentation

  - http://swagger2markup.github.io/swagger2markup/1.3.3/[Reference
  Documentation]

  -
  https://github.com/Swagger2Markup/swagger2markup/blob/master/RELEASENOTES.adoc[Release
  notes]

  - https://github.com/Swagger2Markup/spring-swagger2markup-demo[Demo using
  Swagger2Markup, Spring Boot, Springfox and spring-restdocs]


  == Contributing


  === Community contributions


  Pull requests are welcome.


  === Questions

  You can ask questions about Swagger2Markup in
  https://gitter.im/Swagger2Markup/swagger2markup[Gitter].


  === Bugs

  If you believe you have found a bug, please take a moment to search the
  existing issues. If no one else has reported the problem, please open a new
  issue that describes the problem in detail and, ideally, includes a test that
  reproduces it.


  === Enhancements

  If you’d like an enhancement to be made to Swagger2Markup, pull requests are
  most welcome. The source code is on GitHub. You may want to search the
  existing issues and pull requests to see if the enhancement is already being
  worked on. You may also want to open a new issue to discuss a possible
  enhancement before work on it begins.


  == Companies who use Swagger2Markup


  * Deutsche Telekom AG

  * https://restlet.com/[Restlet] -- Restlet offers an API platform, covering
  the https://restlet.com/products/restlet-studio/[design],
  https://restlet.com/products/dhc/[test] and
  https://restlet.com/products/apispark/[operation] of Web APIs, and uses
  Swagger2Markup to generate appealing HTML documentation from API definitions.

  * http://www.qaware.de/[QAware GmbH]

  * http://www.appdirect.com/[AppDirect] -- The leading commerce platform for
  selling cloud services.

  * http://www.wescale.com[wescale]

  * http://taskassure.com[TaskAssure] 

  * https://www.isaac.nl[ISAAC]

  * https://www.spreadshirt.de[Spreadshirt]


  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
OpenAPITools/openapi-generator: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2739:73D2:1F3988:40065E:6500FAFF.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
marshmallow-code/apispec: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B62:0720:AAA110:159E61C:6500FB53.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
APIs-guru/awesome-openapi3: >+
  # awesome-openapi3
  [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

  A list of awesome projects related to OpenAPI 3.0.x.


  <div align="center">
    <img src="https://github.com/Mermade/awesome-openapi3/blob/master/openapi_awesome1.png?raw=true"/>
    <img src="https://raw.githubusercontent.com/APIs-guru/openapi-directory/master/branding/icon-96x96.png"/>
  </div>


  Why not make your project discoverable by using the topic
  [openapi3](https://github.com/search?utf8=%E2%9C%93&q=topic%3Aopenapi3&type=Repositories&ref=advsearch&l=&l=)
  on GitHub and using the hashtags **#openapi3** and **#OASv3** on social media?


  ## Tools


  * Please see [APIs.guru Awesome-OpenAPI3](https://apis.guru/awesome-openapi3/)


  ## Contributing


  The best way to get your project added to the list is to tag it with the
  github topic `openapi3`. 


  Pull requests should only be for visual / functional changes, or
  projects/products not hosted on GitHub.


  ## API Access


  * [categories.json](https://apis.guru/awesome-openapi3/api/categories.json)

  * [tools.json](https://apis.guru/awesome-openapi3/api/tools.json)


  The raw data contains OpenAPI 2.0 and Swagger 1.x-related projects.


  ## RSS Feed


  * [feed.xml](https://apis.guru/awesome-openapi3/rss/feed.xml)

Orange-OpenSource/angular-swagger-ui: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273D:6C7D:2389F0:48A832:6500FB01.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Mermade/openapi-codegen: >+
  # OpenAPI-CodeGen


  [![Build
  status](https://travis-ci.org/Mermade/openapi-codegen.svg?branch=master)](https://travis-ci.org/Mermade/openapi-codegen)


  Node.js-based codegen for OpenAPI documents. This project was initially a
  24-hour hackathon. The local model adaptor code is entirely original and has
  been reverse-engineered from the existing documentation and template usage.


  **Work in progress**


  Supports OpenAPI 3.0.x natively, and Swagger/OpenAPI 1.2 and 2.0 by internal
  conversion. Node.js LTS versions are supported.


  ## Usage


  ### Installing


  `npm i -g openapi-codegen`


  or


  * clone the repository, and

  * `npm i`


  or


  `npx -p openapi-codegen cg ...`


  ### CLI


  ```

  cg [options] {[path]configName} {openapi-definition}


  Options:
    --help           Show help                                           [boolean]
    --version        Show version number                                 [boolean]
    --filter         Filter term to use with --list                       [string]
    --list           List available templates for provider (og or sc)     [string]
    -d, --debug      Turn on debugging information in the model          [boolean]
    -f, --flat       Do not include config-name in output directory structure
                                                                         [boolean]
    -l, --lint       Lint input definition                               [boolean]
    -o, --output     Specify output directory         [string] [default: "./out/"]
    -s, --stools     Use swagger-tools to validate OpenAPI 2.0 definitions
                                                                         [boolean]
    -t, --templates  Specify templates directory                          [string]
    -v, --verbose    Increase verbosity                                  [boolean]
    -z, --zip        Create a .zip file instead of individual files      [boolean]
  ```


  e.g.


  ```

  node cg --verbose nodejs defs/generator.yaml

  ```


  In this case, the generated code will be written to the `.out/nodejs`
  directory.


  You can also load the OpenAPI definition from a URL.


  ### API


  ```javascript

  const renderer = require('openapi-codegen');

  // load a config and a definition

  renderer.main(definition,config,configName);

  ```


  ## Templates


  The local templates were taken directly from `swagger-codegen`. This project
  is also licensed under [Apache-2.0](LICENSE) for this reason. Generated code
  is explicitly covered by the [Unlicense](templates/_common/UNLICENSE). Code to
  downconvert OpenAPI 3.0 definitions is taken from
  [Angular-Swagger-UI](https://github.com/Orange-OpenSource/angular-swagger-ui)
  and is MIT licensed.


  You can also use the latest online templates from two providers: `og`
  ([openapi-generator](https://github.com/OpenAPITools/openapi-generator)) and
  `sc` ([swagger-codegen](https://github.com/swagger-api/swagger-codegen)). The
  `--list` and `--filter` options allow you to see which templates are
  available. Note that using the online templates involves sending your API
  definition to a remote server.


  ### Contributors


  See [here](https://github.com/swagger-api/swagger-codegen#template-creator)
  for a partial list of template contributors.


  ### Status of the template configurations


  The local templates with a status have a working (if not necessarily tested)
  configuration in the **configs** directory. Contributions are welcomed from
  the community of new and updated configurations and template updates.


  <details>

  <summary>Click here to expand...</summary>


  |Template|Type|Status|README|Authors (TODO)|Config Maintainer|

  |---|---|---|---|---|---|

  |**\_common**|meta| *contains Apache-2.0 and Unlicense licenses*||

  |**Ada**|client|**Untested**

  |akka-scala||

  |android||

  |**apache2**|configuration|**needs work**||

  |apex||

  |aspnetcore||

  |**bash**|client|**Syntax ok, needs testing**||@bkryza|@MikeRalphson

  |**clojure**|client|**Untested**|

  |**codegen**|meta|**Demo only**|||@MikeRalphson

  |**confluenceWikiDocs**|documentation|**Tested** with Docker
  [server](https://hub.docker.com/r/atlassian/confluence-server/)||

  |cpprest||

  |csharp||

  |**csharp-dotnet2**|client|**Untested**||

  |dart||

  |**debug**|meta|*used for dumping the model state*||@Mermade|@MikeRalphson

  |Eiffel||

  |elixir||

  |**erlang-client**|client|**Untested**||

  |erlang-server|server|

  |finch||

  |flash||

  |**flaskConnexion**|server|**Needs testing**||

  |**go**|client|**Builds, needs testing**||

  |**go-server**|server|**Builds and runs**||

  |**Groovy**|?|**untested**||

  |haskell-http-client|client||||

  |**haskell-servant**|server|**Untested**||

  |**htmlDocs**|documentation|*Appears to work*||

  |**htmlDocs2**|documentation|*Appears to work, no console errors logged*||

  |Java||

  |JavaInflector||

  |JavaJaxRS||

  |JavaPlayFramework||

  |**Javascript**|client|**Untested**||

  |**Javascript-Closure-Angular**|client|**Untested**

  |JavaSpring||

  |JavaVertXServer||

  |**JMeter**|meta|**Untested**||

  |kotlin-client||

  |**lua**|client|**Compiles OK**|

  |lumen||

  |MSF4J||

  |nancyfx||

  |**nodejs**|server|**tested** :white_check_mark:||@jfiala|@MikeRalphson|

  |objc||

  |**openapi**|meta|*outputs the input definition (in OpenAPI 3.0.x form)*
  :white_check_mark:||@Mermade|@MikeRalphson

  |perl||

  |php||

  |**php-silex**|?|**untested**||

  |php-symfony||

  |pistache-server||

  |powershell||

  |**python**|client|**needs testing**|||@mpnordland

  |qt5cpp||

  |r||

  |rails5||

  |**restbed**|server|**Untested**||

  |ruby||

  |rust||

  |rust-server||

  |scala||

  |scalatra||

  |scalaz|client|**Untested**||

  |**sinatra**|server|**Syntax checks OK**||

  |**slim**|server|**Untested**||

  |**swagger**|meta|*outputs the input definition (in original form if OpenAPI
  2.0)* :white_check_mark:||

  |**swagger-static**|documentation|**tested** *template modified to include
  partials*||

  |swift||

  |swift3||

  |swift4||

  |tizen||

  |typescript-angular||

  |typescript-angularjs||

  |**typescript-axios**|client|**tested**||jaredpalmer|

  |typescript-aurelia||

  |**typescript-fetch**|client|**compiles with tsc ok**||

  |typescript-jquery||

  |**typescript-node**|client|**compiles with tsc ok**||

  |undertow||

  |**validator**|meta|*uses swagger2openapi's OpenAPI 3.0 validator internally*
  :white_check_mark:||

  |ze-ph|


  ### New Templates


  These templates are examples of how features of OpenAPI Codegen may be used,
  and best-practices in naming model properties.


  |Template|Type|Status|README|Authors|Config Maintainer|

  |---|---|---|---|---|---|

  |testing.dredd|testing|**In
  progress**|[README](templates/testing.dredd/README.md.mustache)|@Mermade|@MikeRalphson|

  </details>


  ## Documentation


  * [See here](docs/README.md) - contributions welcome

thomaxxl/safrs: >-
  [![Latest
  Version](https://img.shields.io/pypi/v/safrs.svg)](https://pypi.python.org/pypi/safrs/)

  [![Supported Python
  versions](https://img.shields.io/pypi/pyversions/safrs.svg)](https://pypi.python.org/pypi/safrs/)

  [![License: GPL
  v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)

  ![Python
  application](https://github.com/thomaxxl/safrs/workflows/Python%20application/badge.svg)

  [![Codacy
  Badge](https://app.codacy.com/project/badge/Grade/de12c50717e8487db5dcc31907e627f7)](https://www.codacy.com/gh/thomaxxl/safrs/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=thomaxxl/safrs)

  [![Downloads](https://pepy.tech/badge/safrs)](https://pepy.tech/project/safrs)


  # SAFRS: Python OpenAPI & JSON:API Framework


  ![demo](docs/images/safrs.gif)


  <a class="mk-toclify" id="table-of-contents"></a>


  - [Introduction](#overview)

  - [Installation](#installation)

  - [JSON:API Interface](#http-methods)

  - [Resource Objects](#resource-objects)

  - [Relationships](#relationships)

  - [Methods](#methods)
      - [Custom Methods](#custom-methods)
      - [Class Methods](#class-methods)
  - [Initialization](#initialization)

  - [Endpoint Naming](#endpoint-naming)

  - [Configuration](#configuration)

  - [Exposing Existing Databases](#expose-existing)

  - [More Examples and Use Cases](#more-examples-and-use-cases)

  - [Advanced Functionality](#advanced-usage)
      - [Filtering](#filtering)
  - [Customization](#customization)
      - [Custom Serialization](#custom-serialization)
      - [Excluding Attributes and Relationships](#excluding-attrs-rels)
      - [HTTP Decorators](#http-decorators)
      - [API Methods](#api-methods)
      - [Custom Swagger](#custom-swagger)
      - [Classes Without SQLAlchemy Models](#Classes-Without-Models)

  <a class="mk-toclify" id="overview"></a>

  ## Introduction


  SAFRS exposes SQLAlchemy database models as a [JSON:API](https://jsonapi.org)
  webservice and generates the corresponding
  [swagger/OpenAPI](https://swagger.io/).


  Documentation can be found in the
  [wiki](https://github.com/thomaxxl/safrs/wiki).


  __A [LIVE DEMO](http://thomaxxl.pythonanywhere.com) is available__, where much
  of the basic functionality is implemented using a simple
  [example](examples/demo_pythonanywhere_com.py).


  <a class="mk-toclify" id="installation"></a>

  ## Installation


  SAFRS can be installed as a [pip package](https://pypi.python.org/pypi/safrs/)
  or by downloading the latest version from github, for example:


  ```bash

  git clone https://github.com/thomaxxl/safrs

  cd safrs

  pip install .

  ```


  Once the dependencies are installed, the [examples](examples) can be started,
  for example

  ```

  python examples/demo_relationship.py "your-interface-ip"

  ```


  <a class="mk-toclify" id="http-methods"></a>

  ## JSON:API Interface


  Exposed resource objects can be queried using the [JSON:API
  format](http://jsonapi.org/format/). The API supports following HTTP
  operations:


  - GET : Retrieve an object or a list of objects

  - PATCH : Update an object.

  - DELETE: Delete an object.

  - POST : Create an object. 


  Please check the [JSON:API spec](http://jsonapi.org/format/) for more
  implementation details. 

  You can also try out the interface in the [live
  demo](http://thomaxxl.pythonanywhere.com/api).


  <a class="mk-toclify" id="resource-objects"></a>

  ## Resource Objects


  Database objects are implemented as subclasses of the SAFRSBase and SQLAlchemy
  model classes. The SQLAlchemy columns are serialized to JSON when the
  corresponding REST API is invoked. 


  Following example [app](examples/demo_relationship.py) illustrates how the API
  is built and documented:


  ```python

  class User(SAFRSBase, db.Model):
      """
          description: User description
      """

      __tablename__ = "Users"
      id = db.Column(db.Integer, primary_key=True)
      name = db.Column(db.String)
      email = db.Column(db.String)

  ```


  The User class is implemented as a subclass of 

  - db.Model: SQLAlchemy base

  - SAFRSBase: Implements JSON serialization for the object and generates
  (swagger) API documentation


  This User object is then exposed through the web interface using the Api
  object


  ```python 

  api.expose_object(User)

  ``` 


  The User object REST methods are available on /User, the swagger schema is
  available on /api/swagger.json and the UI is available on /api/:

  ![User Swagger](docs/images/USER_swagger.png)



  <a class="mk-toclify" id="relationships"></a>

  ## Relationships


  Database object such as the User class from the demo.py example can be
  extended to include relationships with other objects. The demo_relationship.py
  contains following extension of the User class where a relationship with the
  Book class is implemented:


  ```python

  class User(SAFRSBase, db.Model):
      '''
          description: User description
      '''
      __tablename__ = 'Users'
      id = db.Column(db.String, primary_key=True)
      name = db.Column(db.String, default='')
      email = db.Column(db.String, default='')
      books = db.relationship('Book', back_populates="user")
  ...

  ``` 


  A many-to-one database association is declared by the back_populates
  relationship argument.

  The Book class is simply another subclass of SAFRSBase and db.Model, similar
  to the previous User class:


  ```python

  class Book(SAFRSBase, db.Model):
      '''
          description: Book description
      '''
      __tablename__ = 'Books'
      id = db.Column(db.String, primary_key=True)
      name = db.Column(db.String, default='')
      user_id = db.Column(db.String, db.ForeignKey('Users.id'))
      user = db.relationship('User', back_populates='books')
  ```


  The User.book relationship can be queried in the API through the following
  endpoints:

  ![Relations Swagger](docs/images/Relations_swagger.png)


  - POST adds an item to the relationship

  - DELETE removes an item from the relationship

  - GET retrieves a list of item ids


  The relationship API endpoints work similarly for one-to-many relationships.


  Relationship members can also be included in the response when querying an
  instance, by specifying the relationship names as a comma separated list in
  the `include` query argument.


  ![relationship include swagger](docs/images/rel_include.PNG)


  For example, to retrieve all items in the `books_read` relationship from the
  People endpoint, you may add the `include=books_read` url parameter



  http://thomaxxl.pythonanywhere.com/api/People/?include=books_read


  To retrieve nested relationship items, you can specify the nested relationship
  name after the '.', to retrieve the authors of the books_read instances for
  instance, you can use


  http://thomaxxl.pythonanywhere.com/api/People/?include=books_read.author


  <a class="mk-toclify" id="methods"></a>

  ## Methods


  <a class="mk-toclify" id="custom-methods"></a>

  ### Custom Methods


  Safrs allows the user to implement custom methods on the exposed objects. This
  methods can be invoked through the json API by sending an HTTP POST request to
  the method endpoint

  The following example implements a "send_mail" method fro example:


  ```python

  class User(SAFRSBase, db.Model):
      '''
          description: User description
      '''
      __tablename__ = 'Users'
      id = Column(String, primary_key=True)
      name = Column(String, default='')
      email = Column(String, default='')

      # Following method is exposed through the REST API 
      # This means it can be invoked with a HTTP POST
      @jsonapi_rpc(http_methods=['POST','GET'])
      def send_mail(self, email):
          '''
              description : Send an email
              args:
                  email:
                      type : string 
                      example : test email
          '''
          content = 'Mail to {} : {}\n'.format(self.name, email)
          return { 'result' : 'sent {}'.format(content)}

  ```


  This method shows up in the swagger interface:


  ![Method Swagger](docs/images/method_swagger.PNG)


  The ```send_mail``` method is documented with the ```jsonapi_rpc```
  decorator. 

  This decorator generates a schema based on the function documentation. This
  documentation contains yaml specification of the API which is used by the
  swagger UI. 


  [api_methods.py](safrs/api_methods.py) contains a couple of methods that can
  be used in your models.


  The yaml specification has to be in the first part of the function and class
  comments. These parts are delimited by four dashes ("----") . The rest of the
  comment may contain additional documentation.


  <a class="mk-toclify" id="class-methods"></a>

  ### Class Methods


  Two class-level methods have been defined to facilitate object retrieval:


  * **lookup** : retrieve a list of objects that match the argument list. For
  example, following HTTP POST request to a container will retrieve a list of
  itemswhere the name is "thomas"

  ```json

  {
    "method": "lookup",
    "args": {
      "name": "thomas"
    }
  }

  ```


  * **get_list** : retrieve a list of the items with the specified ID's


  <a class="mk-toclify" id="initialization"></a>

  ## Application Initialization

  The API can be initialized like this:

  ```python

  api = SafrsApi(app, host=HOST, port=PORT, prefix=API_PREFIX)

  ```

  Then you can expose objects with `expose_object`

  ```python

  api.expose_object(User)    

  ```


  An example that uses the flask app factory pattern is implement in
  [examples/mini_app.py](examples/mini_app.py)


  <a class="mk-toclify" id="endpoint-naming"></a>

  ## Endpoint Naming

  As can be seen in the swagger UI:

  - the endpoint collection path names are the SQLAlchemy \_\_tablename\_\_
  properties (e.g. /Users )

  - the parameter names are derived from the SAFRSBase class names (e.g.
  {UserId} )

  - the the relationship names are the SAFRSBase class relationship names (e.g
  /books )

  The URL path format is [configurable](#configuration)


  <a class="mk-toclify" id="configuration"></a>

  ## Configuration


  Some configuration parameters can be set in [config.py](safrs/config.py):

  - USE_API_METHODS: set this to false in case you want to disable the
  `jsonapi_rpc` functionality

  - INSTANCE_URL_FMT: This parameter declares the instance url path format

  - RELATIONSHIP_URL_FMT: This parameter declares the relationship endpoint path
  format


  <a class="mk-toclify" id="expose-existing"></a>

  ## Exposing Existing Databases

  Safrs allows you to Expose existing databases as jsona:api services with the
  [expose_existing.py](expose_existing/expose_existing.py) script, for example:


  ```bash

  python3 expose_existing.py mysql+pymysql://root:password@localhost/sakila
  --host localhost

  ```


  This script uses sqlacodegen to generate a source file containing the
  SQLAlchemy and `SAFRSBase` database models and starts the API webservice.


  More details [here](docs/ExposeDB.md). This approach is used by the
  [ApiLogicServer](https://github.com/valhuber/ApiLogicServer) project.


  <a class="mk-toclify" id="more-examples-and-use-cases"></a>

  ## More Examples and Use Cases

  The [examples](examples) folder contains more example scripts:

  - Using a sha hash as primary key (id)

  - CORS usage

  - Flask-Admin integration example, eg.:

  ![demo](docs/images/flask-admin.png)


  A docker image can be found here:

  [https://github.com/thomaxxl/safrs-example](https://github.com/thomaxxl/safrs-example)


  <a class="mk-toclify" id="advanced-usage"></a>

  ## Advanced Functionality


  <a class="mk-toclify" id="filtering"></a>

  ### Filtering

  The swagger shows the jsonapi filters that can be used in the url query
  arguments. Items with an exact match of the specified attribute value can be
  fetched by specifying the corresponding key-value query parameter. For
  example, suppose the `User` class, exposed at `/Users` has a `name` attribute,
  to retrieve all instances with the name "John", you can use a `GET` request
  to 

  `/Users?filter[name]=John`.


  It is also possible to use more generic filters by specifiying a JSON string,
  for example
  `filter=[{"name":"timestamp","op":"gt","val":"2020-08-01"},{"name":"timestamp","op":"lt","val":"2020-08-02"}]`.


  More info can be found in the
  [wiki](https://github.com/thomaxxl/safrs/wiki/API-Functionality#filtering).


  <a class="mk-toclify" id="custom-serialization"></a>

  ### Custom Serialization

  Serialization and deserialization are implemented by the SAFRSBase `to_dict`
  and `__init__` : you can extend these methods as usual.

  For example, if you would like to add some attributes to the json payload of
  the User object, you can override the to_dict method:


  ```python

  class User(SAFRSBase, db.Model):
      '''
          description: User description
      '''
      __tablename__ = 'Users'
      id = db.Column(db.String, primary_key=True)
      name = db.Column(db.String, default='')
      email = db.Column(db.String, default='')
      books = db.relationship('Book', back_populates="user")

      def to_dict(self):
          result = SAFRSBase.to_dict(self)
          result['custom_field'] = 'custom'
          return result
  ``` 


  This will add the `custom_field` attribute to the result attributes:

  ```json

  "attributes": {
      "custom_field": "custom",
      "email": "reader_email0",
      "name": "Reader 0"
  }

  ```


  <a class="mk-toclify" id="customization"></a>

  ## Customization


  <a class="mk-toclify" id="excluding-attrs-rels"></a>

  ### Excluding Attributes and Relationships

  It is possible to specify attributes and relationships that should not be
  serialized by specifying the respective `exclude_attrs` and èxclude_rels`
  class attributes in your SAFRSBase instances.

  Examples can be found [here](examples/demo_pythonanywhere_com.py#L81) and
  [here](examples/demo_http_get.py#L21)


  <a class="mk-toclify" id="limit-http-verbs"></a>

  ### Limiting HTTP Methods

  It is possible to limit the HTTP methods that are allowed by overriding the
  `http_methods` class attribute. An example can be found
  [here](examples/demo_http_get.py#L20)


  <a class="mk-toclify" id="HTTP-decorators"></a>

  ### HTTP Decorators

  The `decorators` class attribute list can be used to add custom decorators to
  the HTTP endpoints. An example of this functionality is implemented

  in the [authentication examples](examples/authentication).



  <a class="mk-toclify" id="api-methods"></a>

  ### API Methods

  Some additional API RPC methods are implemented in
  [api_methods.py](safrs/api_methods.py), e.g. mysql regex search. 


  <a class="mk-toclify" id="custom-swagger"></a>

  ### Custom swagger

  The swagger schema can be merged with a modified schema dictionary by
  supplying the to-be-merged dictionary as the `custom_swagger` argument to
  `SafrsApi`, e.g.

  ```python

  custom_swagger = {"info": {"title" : "New Title" }} # Customized swagger title
  will be merged

  api = SafrsApi(app, host=swagger_host, port=PORT, prefix=OAS_PREFIX,
  api_spec_url=OAS_PREFIX+'/swagger',
                 custom_swagger=custom_swagger, schemes=['http', 'https'], description=description)
  ```


  <a class="mk-toclify" id="Classes-Without-Models"></a>

  ### Classes Without SQLAlchemy Models

  You can implement a serializable class without a model but this requires some
  extra work because safrs needs to know which attributes and relationships to
  serialize. An example is implemented [here](examples/demo_stateless.py)


  ### More Customization

  The documentation is being moved to the
  [wiki](https://github.com/thomaxxl/safrs/wiki)


  <details>

  <summary>About</summary>

  SAFRS is an acronym for **S**ql**A**lchemy **F**lask-**R**estful **S**wagger.
  The purpose of this framework is to help python developers create a
  self-documenting JSON API for sqlalchemy database objects and relationships.
  These objects can be serialized to JSON and can be created, retrieved, updated
  and deleted through the JSON API. 

  Optionally, custom resource object methods can be exposed and invoked using
  JSON.

  Class and method descriptions and examples can be provided in yaml syntax in
  the code comments. The description is parsed and shown in the swagger web
  interface. 


  The result is an easy-to-use [swagger/OpenAPI](https://swagger.io/) and
  [JSON:API](https://jsonapi.org) compliant API implementation.

  </details>


  <details>

  <summary>limitations & Todos</summary>

  This code was developed for a specific use-case and may not be flexible enough
  for everyone's needs. A lot of the functionality is available but not
  documented for the sake of brevity.

  Performance is reasonable for regular databases, but once you start exposing
  really big tables you may run into problems, for example: the `count()` for
  mysql innodb is slow on large(1M rows) tables, a workaround can be implemented
  by querying the `sys` tables or using werkzeug caching. 

  Feel free to open an issue or drop
  [me](mailto:thomas.pollet+no+spam+@gmail.com) an email if you run into
  problems or something isn't clear!

  </details>


  <details>

  <summary>References</summary>


  - [JSON:API specification](http://jsonapi.org/format/)

  - [OpenApi (Swagger)](https://www.openapis.org/)

  - [Flask](http://flask.pocoo.org/)

  - [SQLAlchemy](https://www.sqlalchemy.org/)

  </details>


  <details>

  <summary>Thanks</summary>

  I developed this code when I worked at [Excellium
  Services](https://www.excellium-services.com/). They allowed me to open source
  it when I stopped working there.

  </details>
cebe/php-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272D:8000:817DBD:107AC6F:6500FB23.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
AresS31/swurg: >
  <p align="center">
    <img alt="logo" src="https://raw.githubusercontent.com/AresS31/swurg/dev/images/logo3.png" height="200">
    <p align="center">
        <a href="https://portswigger.net/bappstore/6bf7574b632847faaaa4eb5e42f1757c"><img alt="bapp store" src="https://img.shields.io/badge/BApp-Published-orange.svg"></a>
        <a href="https://www.java.com"><img alt="lang" src="https://img.shields.io/badge/Lang-Java-blue.svg"></a>
        <a href="https://opensource.org/licenses/Apache-2.0"><img alt="license" src="https://img.shields.io/badge/License-Apache%202.0-red.svg"></a>
        <img alt="version" src="https://img.shields.io/badge/Version-2.3-green.svg">
        <img alt="bitcoin" src="https://img.shields.io/badge/Bitcoin-15aFaQaW9cxa4tRocax349JJ7RKyj7YV1p-yellow.svg">
        <img alt="bitcoin cash" src="https://img.shields.io/badge/Bitcoin%20Cash-qqez5ed5wjpwq9znyuhd2hdg86nquqpjcgkm3t8mg3-yellow.svg">
        <img alt="ether" src="https://img.shields.io/badge/Ether-0x70bC178EC44500C17B554E62BC31EA2B6251f64B-yellow.svg">
    </p>
  </p>


  ## Swurg is a Burp Suite extension designed for OpenAPI testing.

  > The OpenAPI Specification (OAS) defines a standard, programming
  language-agnostic interface description for REST APIs, which allows both
  humans and computers to discover and understand the capabilities of a service
  without requiring access to source code, additional documentation, or
  inspection of network traffic. When properly defined via OpenAPI, a consumer
  can understand and interact with the remote service with a minimal amount of
  implementation logic. Similar to what interface descriptions have done for
  lower-level programming, the OpenAPI Specification removes guesswork in
  calling a service. 

  > 

  > Use cases for machine-readable API definition documents include, but are not
  limited to: interactive documentation; code generation for documentation,
  clients, and servers; and automation of test cases. OpenAPI documents describe
  an API's services and are represented in either YAML or JSON formats. These
  documents may either be produced and served statically or be generated
  dynamically from an application.

  > 

  > \- [OpenAPI Initiative](https://github.com/OAI/OpenAPI-Specification)


  Performing security assessment of OpenAPI-based APIs can be a tedious task due
  to Burp Suite (industry standard) lacking native OpenAPI parsing capabilities.
  A solution to this situation, is to use third-party tools (e.g. `SOAP-UI`) or
  to implement custom scripts (often on a per engagement basis) to handle the
  parsing of OpenAPI documents and integrate/chain the results to Burp Suite to
  use its first class scanning capabilities.


  Swurg is an OpenAPI parser that aims to streamline this entire process by
  allowing security professionals to use Burp Suite as a standalone tool for
  security assessment of OpenAPI-based APIs.


  ## Supported Features

  * Parse OpenAPI documents, formerly known as the `Swagger specification`,
  fully compliant with OpenAPI 2.0/3.0 Specifications (OAS). Supports both JSON
  and YAML formats.

  * OpenAPI documents can be parsed either from a supplied file or URL. The
  extension can fetch OpenAPI documents directly from a URL using the `Send to
  Swagger Parser` feature under the `Target -> Site map` context menu.

  * Requests can be sent to the `Comparer, Intruder, Repeater, Scanner and Site
  map` Burp tools.


  ## Installation

  ### Compilation 

  #### Windows & Linux

  1. Install gradle (<https://gradle.org/>)

  2. Download the repository.

  ```console

  $ git clone https://github.com/AresS31/swurg

  $ cd .\swurg\

  ```

  3. Create the swurg jarfile:

  ```console

  $ gradle fatJar

  ```


  ### Burp Suite settings

  In Burp Suite, under the `Extender/Options` tab, click on the `Add` button and
  load the `swurg-all` jarfile. 


  ## Possible Improvements

  - [ ] Beautify the graphical user interface.

  - [ ] Enable cells editing to change API calls directly from the GUI.

  - [x] Further optimise the source code.

  - [ ] Implement support for authenticated testing (via user-supplied
  API-keys).

  - [ ] Improve the Param column by adding the type of parameters (e.g. inquery,
  inbody, etc.).

  - [ ] Increase the extension verbosity (via the bottom panel).


  ## Dependencies

  ### Third-party libraries

  #### Swagger Parser:

  The [Swagger
  Parser](https://mvnrepository.com/artifact/io.swagger.parser.v3/swagger-parser)
  library is required and automatically imported in this project.


  ## Project information

  In July 2016, after posting a request for improvement on the [PortSwigger
  support
  forum](https://support.portswigger.net/customer/portal/questions/16358278-swagger-parser-and-wsdler-improvement),
  I decided to take the initiative and to implement a solution myself.


  The extension is still in development, feedback, comments and contributions
  are therefore much appreciated.


  ## One-time donation

  * Donate via Bitcoin      : **15aFaQaW9cxa4tRocax349JJ7RKyj7YV1p**

  * Donate via Bitcoin Cash : **qqez5ed5wjpwq9znyuhd2hdg86nquqpjcgkm3t8mg3**

  * Donate via Ether        : **0x70bC178EC44500C17B554E62BC31EA2B6251f64B**


  ## License

  Copyright (C) 2016 - 2018 Alexandre Teyar


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at


  <http://www.apache.org/licenses/LICENSE-2.0>


  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.
danielgtaylor/apisprout: >
  <img
  src="https://user-images.githubusercontent.com/106826/43119494-78be9224-8ecb-11e8-9d1a-9fc6f3014b91.png"
  width="300" alt="API Sprout"/>


  [![Go Report
  Card](https://goreportcard.com/badge/github.com/danielgtaylor/apisprout)](https://goreportcard.com/report/github.com/danielgtaylor/apisprout)
  [![Build
  Status](https://travis-ci.org/danielgtaylor/apisprout.svg?branch=master)](https://travis-ci.org/danielgtaylor/apisprout)
  [![GitHub tag (latest
  SemVer)](https://img.shields.io/github/tag/danielgtaylor/apisprout.svg)](https://github.com/danielgtaylor/apisprout/releases)
  [![Docker
  Pulls](https://img.shields.io/docker/pulls/danielgtaylor/apisprout.svg)](https://hub.docker.com/r/danielgtaylor/apisprout/)


  A simple, quick, cross-platform API mock server that returns examples
  specified in an API description document. Features include:


  - OpenAPI 3.x support
    - Uses operation `examples` or generates examples from `schema`
  - Load from a URL or local file (auto reload with `--watch`)

  - CORS headers enabled by default

  - Accept header content negotiation
    - Example: `Accept: application/*`
  - Prefer header to select response to test specific cases
    - Example: `Prefer: status=409`
  - Server validation (enabled with `--validate-server`)
    - Validates scheme, hostname/port, and base path
    - Supports `localhost` out of the box
    - Use the `--add-server` flag, in conjunction with `--validate-server`, to dynamically include more servers in the validation logic
  - Request parameter & body validation (enabled with `--validate-request`)

  - Configuration via:
    - Files (`/etc/apisprout/config.json|yaml`)
    - Environment (prefixed with `SPROUT_`, e.g. `SPROUT_VALIDATE_SERVER`)
    - Commandline flags

  Usage is simple:


  ```sh

  # Load from a local file

  apisprout my-api.yaml


  # Validate server name and use base path

  apisprout --validate-server my-api.yaml


  # Dynamically Include a new server / path in the validation

  apisprout --add-server http://localhost:8080/mock --validate-server
  my-api.yaml


  # Load from a URL

  apisprout
  https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/api-with-examples.yaml

  ```


  ## Docker Image


  A hosted [API Sprout Docker
  image](https://hub.docker.com/r/danielgtaylor/apisprout/) is provided that
  makes it easy to deploy mock servers or run locally. For example:


  ```sh

  docker pull danielgtaylor/apisprout

  docker run -p 8000:8000 danielgtaylor/apisprout http://example.com/my-api.yaml

  ```


  Configuration can be passed via environment variables, e.g. setting
  `SPROUT_VALIDATE_REQUEST=1`, or by passing commandline flags. It is also
  possible to use a local API description file via [Docker
  Volumes](https://docs.docker.com/storage/volumes/):


  ```

  # Remember to put the full path to local archive YAML in -v

  docker run -p 8000:8000 -v $FULLPATH/localfile.yaml:/api.yaml
  danielgtaylor/apisprout /api.yaml

  ```


  ## Installation


  Download the appropriate binary from the
  [releases](https://github.com/danielgtaylor/apisprout/releases) page.


  Alternatively, you can use `go get`:


  ```sh

  go get github.com/danielgtaylor/apisprout

  ```


  ## Extra Features


  ### Remote Reload


  If your API spec is loaded from a remote URL, you can live-reload it by
  hitting the `/__reload` endpoint.


  ### Health Check


  A simple endpoint which returns status code `200` is available at `/__health`.
  This endpoint successfully returns `200` even if `--validate-server` is turned
  on, and the endpoint is being accessed from a non-validated host.


  ## Contributing


  Contributions are very welcome. Please open a tracking issue or pull request
  and we can work to get things merged in.


  ## Release Process


  The following describes the steps to make a new release of API Sprout.


  1. Merge open PRs you want to release.

  1. Select a new semver version number (major/minor/patch depending on
  changes).

  1. Update `CHANGELOG.md` to describe changes.

  1. Create a commit for the release.

  1. Tag the commit with `git tag -a -m 'Tagging x.y.z release' vx.y.z`.

  1. Build release binaries with `./release.sh`.

  1. Push the commit and tags.

  1. Upload the release binaries.


  ## License


  Copyright &copy; 2018-2019 Daniel G. Taylor


  http://dgt.mit-license.org/
tobilg/api2html: >
  # api2html

  A CLI tool to transform Swagger/OpenAPI/AsyncAPI docs to beautiful HTML pages
  via
  [Shins](https://github.com/mermade/shins)/[Widdershins](https://github.com/mermade/widdershins).


  You can find an example generated page at
  [http://tobilg.github.io/api2html/petstore/](http://tobilg.github.io/api2html/petstore/).


  ## Installation


  To install `api2html` globally, use


  ```bash

  $ npm i api2html -g

  ```


  You can also install it to use as `devDependencies`, and use it locally via a
  `npm run` task in your `package.json`:


  ```bash

  $ npm i api2html --save-dev

  ```


  Usage in `package.json`:


  ```javascript

  {
    "scripts": {
      "api-docs": "node_modules/.bin/api2html -o docs/api.html -l shell,javascript--nodejs docs/openapi/api.yml"
    }
  }

  ```


  ## Usage


  ### Available commands


  ```bash

  $ api2html --help 

  Usage: api2html [options] <sourcePath>
    
    Options:
      -V, --version                   output the version number
      -r, --resolve <source>          resolve external dependencies, source should be a url or a path
      -o, --out <outputPath>          output path for the resulting HTML document
      -t, --theme <themeName>         theme to use (see https://highlightjs.org/static/demo/ for a list)
      -c, --customLogo <logoPath>     use custom logo at the respective path
      -u, --customLogoUrl <logoURL>   url for the custom logo to point to
      -C, --customCss                 use custom css
      -P, --customCssPath <cssPath>   use custom css file
      -i, --includes <includesList>   comma-separated list of files to include
      -l, --languages <languageList>  comma-separated list of languages to use for the language tabs (out of shell, http, javascript, javascript--nodejs, ruby, python, java, go)
      -s, --search                    enable search
      -S, --summary                   use summary instead of operationId for TOC
      -b, --omitBody                  Omit top-level fake body parameter object
      -R, --raw                       Show raw schemas in samples, not example values
      -h, --help                      output usage information
  ```


  ### Usage examples


  #### Render OpenAPI v3 file as HTML


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the current directory.


  ```bash

  $ api2html -o myapi.html myapi.yml

  ```


  #### Use custom logo


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the same directory, and use the custom logo `mylogo.png`.


  ```bash

  $ api2html -o myapi.html -c mylogo.png myapi.yml

  ```


  #### Define which language examples should be generated


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the same directory, and use `go` and `javascript` examples.


  ```bash

  $ api2html -o myapi.html -l go,javascript myapi.yml

  ```


  #### Use different syntax highlighter


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the same directory, and use `go` and `javascript` examples, as well as
  a different syntax higlighter from
  [highlight.js](https://highlightjs.org/static/demo/).


  ```bash

  $ api2html -o myapi.html -l go,javascript -t arta myapi.yml

  ```


  #### Resolve external dependencies


  If you add refs to external files in your source file, you can enable them by
  using `-r <source>`. The following command will resolve all your relative
  imports from the current directory.


  ```bash

  $ api2html -o myapi.html -r ./ myapi.yml

  ```
epiphone/routing-controllers-openapi: >
  # routing-controllers-openapi


  [![codecov](https://codecov.io/gh/epiphone/routing-controllers-openapi/branch/master/graph/badge.svg)](https://codecov.io/gh/epiphone/routing-controllers-openapi)
  [![npm
  version](https://badge.fury.io/js/routing-controllers-openapi.svg)](https://badge.fury.io/js/routing-controllers-openapi)


  Runtime OpenAPI v3 schema generation for
  [routing-controllers](https://github.com/typestack/routing-controllers).


  ## Installation


  `npm install --save routing-controllers-openapi`


  ## Usage


  ```typescript

  import { getMetadataArgsStorage } from 'routing-controllers'

  import { routingControllersToSpec } from 'routing-controllers-openapi'


  // Define your controllers as usual:


  @JsonController('/users')

  class UsersController {
    @Get('/:userId')
    getUser(@Param('userId') userId: string) {
      // ...
    }

    @HttpCode(201)
    @Post('/')
    createUser(@Body() body: CreateUserBody) {
      // ...
    }
  }


  // Generate a schema:


  const storage = getMetadataArgsStorage()

  const spec = routingControllersToSpec(storage)

  console.log(spec)

  ```


  prints out the following specification:


  ```json

  {
    "components": {
      "schemas": {}
    },
    "info": {
      "title": "",
      "version": "1.0.0"
    },
    "openapi": "3.0.0",
    "paths": {
      "/users/{userId}": {
        "get": {
          "operationId": "UsersController.getUser",
          "parameters": [
            {
              "in": "path",
              "name": "userId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {}
              },
              "description": "Successful response"
            }
          },
          "summary": "List users",
          "tags": ["Users"]
        }
      },
      "/users/": {
        "post": {
          "operationId": "UsersController.createUser",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserBody"
                }
              }
            },
            "description": "CreateUserBody",
            "required": false
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {}
              },
              "description": "Successful response"
            }
          },
          "summary": "Create user",
          "tags": ["Users"]
        }
      }
    }
  }

  ```


  Check [`/sample`](/sample) for a complete sample application.


  ### Configuration


  `routingControllersToSpec` has the following type signature:


  ```typescript

  export function routingControllersToSpec(
    storage: MetadataArgsStorage,
    routingControllerOptions: RoutingControllersOptions = {},
    additionalProperties: Partial<OpenAPIObject> = {}
  ): OpenAPIObject

  ```


  `routingControllerOptions` refers to the options object used to configure
  routing-controllers. Pass in the same options here to have your
  [`routePrefix`](https://github.com/typestack/routing-controllers/#prefix-all-controllers-routes)
  and
  [`defaults`](https://github.com/typestack/routing-controllers/#default-settings)
  options reflected in the resulting OpenAPI spec.


  `additionalProperties` is a partial [OpenAPI
  object](https://swagger.io/specification/#openapi-object-17) that gets merged
  into the result spec. You can for example set your own
  [`info`](https://swagger.io/specification/#openapi-object-19) or
  [`components`](https://swagger.io/specification/#components-object-33)
  keywords here.


  ### Validation classes


  Use
  [class-validator-jsonschema](https://github.com/epiphone/class-validator-jsonschema)
  to convert your validation classes into OpenAPI-compatible schemas:


  ```typescript

  import { validationMetadatasToSchemas } from 'class-validator-jsonschema'


  // ...


  const schemas = validationMetadatasToSchemas({
    refPointerPrefix: '#/components/schemas/',
  })


  const spec = routingControllersToSpec(storage, routingControllerOptions, {
    components: { schemas },
    info: { title: 'My app', version: '1.2.0' },
  })

  ```


  ### Decorating with additional keywords


  Use the `@OpenAPI` decorator to supply your actions with additional keywords:


  ```typescript

  import { OpenAPI } from 'routing-controllers-openapi'


  @JsonController('/users')

  export class UsersController {
    @Get('/')
    @OpenAPI({
      description: 'List all available users',
      responses: {
        '400': {
          description: 'Bad request',
        },
      },
    })
    listUsers() {
      // ...
    }
  }

  ```


  The parameter object consists of any number of properties from the [Operation
  object](https://swagger.io/specification/#operationObject). These properties
  are then merged into the spec, overwriting any existing values.


  Alternatively you can call `@OpenAPI` with a function of type `(source:
  OperationObject, route: IRoute) => OperationObject`, i.e. a function receiving
  the existing spec as well as the target route, spitting out an updated spec.
  This function parameter can be used to implement for example your own merging
  logic or custom decorators.


  #### Multiple `@OpenAPI` decorators


  A single handler can be decorated with multiple `@OpenAPI`s. Note though that
  since decorators are applied top-down, any possible duplicate keys are
  overwritten by subsequent decorators:


  ```typescript
    @OpenAPI({
      summary: 'This value will be overwritten!',
      description: 'This value will remain'
    })
    @OpenAPI({
      summary: 'This value will remain'
    })
    listUsers() {
      // ...
    }
  ```


  Multiple `@OpenAPI`s are merged together with
  [`lodash/merge`](https://lodash.com/docs/4.17.11#merge) which has [a few
  interesting properties](https://github.com/lodash/lodash/issues/1313) to keep
  in mind when it comes to arrays. Use the function parameter described above
  when strict control over merging logic is required.


  #### Class `@OpenAPI` decorator


  Using `@OpenAPI` on the controller class effectively applies given spec to
  each class method. Method-level `@OpenAPI`s are merged into class specs, with
  the former having precedence:


  ```typescript

  @OpenAPI({
    security: [{ basicAuth: [] }], // Applied to each method
  })

  @JsonController('/users')

  export class UsersController {
    // ...
  }

  ```


  ### Annotating response schemas


  Extracting response types automatically in runtime isn't currently allowed by
  Typescript's reflection system. Specifically the problem is that
  `routing-controllers-openapi` can't unwrap generic types like Promise<MyModel>
  or Array<MyModel>: see e.g.
  [here](https://github.com/Microsoft/TypeScript/issues/10576) for discussion.
  As a workaround you can use the `@ResponseSchema` decorator to supply the
  response body schema:


  ```typescript

  import { ResponseSchema } from 'routing-controllers-openapi'


  @JsonController('/users')

  export class UsersController {
    @Get('/:id')
    @ResponseSchema(User)
    getUser() {
      // ...
    }
  }

  ```


  `@ResponseSchema` takes as an argument either a class-validator class or a
  plain string schema name. You can also supply an optional secondary `options`
  argument:


  ```typescript
    @Post('/')
    @ResponseSchema(User, {
      contentType: 'text/csv',
      description: 'A list of created user objects',
      isArray: true
      statusCode: '201'})
    createUsers() {
      // ...
    }
  ```


  `contentType` and `statusCode` default to routing-controller's `@ContentType`
  and `@HttpCode` values. To specify a response schema of an array, set
  `options.isArray` as `true`. You can also annotate a single handler with
  multiple `ResponseSchema`s to specify responses with different status codes.


  Note that when using `@ResponseSchema` together with `@JSONSchema`, the outer
  decorator will overwrite keys of inner decorators. So in the following
  example, information from `@ResponseSchema` would be overwritten by
  `@JSONSchema`:


  ```typescript

  @JSONSchema({responses: {
    '200': {
      'content': {
        'application/json': {
          schema: {
            '$ref': '#/components/schemas/Pet'
          }
        }
      }
    }
  }})

  @ResponseSchema(SomeResponseObject)

  handler() { ... }

  ```


  #### Multiple ResponseSchemas


  Multiple ResponseSchemas with different status codes are supported as follows.


  ```typescript

  @ResponseSchema(Response1)

  @ResponseSchema(Response2, {statusCode: '400'})

  ```


  In case of multiple ResponseSchemas being registered with the same status
  code, we resolve them

  using the
  [oneOf](https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/#oneof)
  operator.


  ```typescript

  @ResponseSchema(Response1)

  @ResponseSchema(Response2)

  ```


  will generate


  ```json

  "200": {
    "content": {
      "application/json":{
        "schema": {
          "oneOf": [
            {$ref: "#/components/schemas/Response1"},
            {$ref: "#/components/schemas/Response2"}
          ]
        }
      }
    }
  }

  ```


  ## Supported features


  - `@Controller`/`@JsonController` base route and default content-type

  - `options.routePrefix`

  - `@Get`, `@Post` and other action decorators

  - Parse path parameters straight from path strings and optionally supplement
  with `@Param` decorator
    - Regex and optional path parameters (e.g. `/users/:id(\d+)/:type?`) are also supported
  - `@QueryParam` and `@QueryParams`

  - `@HeaderParam` and `@HeaderParams`

  - `@Body` and `@BodyParam`

  - Parse response keywords from `@HttpCode` and `@ContentType` values

  - Global `options.defaults.paramOptions.required` option and local override
  with `{required: true}` in decorator params

  - Parse `summary`, `operationId` and `tags` keywords from controller/method
  names


  ## Future work


  - Support for routing-controller's [authorization
  features](https://github.com/typestack/routing-controllers#using-authorization-features)


  Feel free to submit a PR!


  ## Related projects


  - Inspired by [tsoa](https://github.com/lukeautry/tsoa) and
  [trafficlight](https://github.com/swimlane/trafficlight)

  - Include your Mongoose models in the spec with
  [mongoose-schema-jsonschema](https://github.com/DScheglov/mongoose-schema-jsonschema)

  - Generate JSON schema from your Typescript sources with
  [typescript-json-schema](https://github.com/YousefED/typescript-json-schema)

  - [openapi3-ts](https://github.com/metadevpro/openapi3-ts/) provides handy
  OpenAPI utilities for Typescript

  - Convert OpenAPI 3 spec to **Swagger 2** with
  [api-spec-converter](https://github.com/LucyBot-Inc/api-spec-converter)

  - Generate Typescript interface definitions from SQL database schema with
  [schemats](https://github.com/SweetIQ/schemats)
koumoul-dev/vue-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B77:12D7:769290:F1D5E7:6500FB4C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
sanjayvacharya/sleeplessinslc: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A85:7EBD:A73492:1533F13:6500FB75.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
epiphone/class-validator-jsonschema: >
  # class-validator-jsonschema


  [![codecov](https://codecov.io/gh/epiphone/class-validator-jsonschema/branch/master/graph/badge.svg)](https://codecov.io/gh/epiphone/class-validator-jsonschema)
  [![npm
  version](https://badge.fury.io/js/class-validator-jsonschema.svg)](https://badge.fury.io/js/class-validator-jsonschema)


  Convert
  [class-validator](https://github.com/typestack/class-validator)-decorated
  classes into OpenAPI-compatible JSON Schema. The aim is to provide a
  best-effort conversion: since some of the `class-validator` decorators lack a
  direct JSON Schema counterpart, the conversion is bound to be somewhat
  opinionated. To account for this multiple extension points are available.


  ## Installation


  `npm install class-validator-jsonschema`


  **Note the peer dependency versions** in [package.json](./package.json). Try
  installing a previous major version of `class-validator-jsonschema` in case
  you're stuck with older peer dependencies.


  ## Usage


  ```typescript

  import { IsOptional, IsString, MaxLength } from 'class-validator'

  import { validationMetadatasToSchemas } from 'class-validator-jsonschema'


  class BlogPost {
    @IsString() id: string

    @IsOptional()
    @MaxLength(20, { each: true })
    tags: string[]
  }


  const schemas = validationMetadatasToSchemas()

  console.log(schemas)

  ```


  which prints out:


  ```json

  {
    "BlogPost": {
      "properties": {
        "id": {
          "type": "string"
        },
        "tags": {
          "items": {
            "maxLength": 20,
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": ["id"],
      "type": "object"
    }
  }

  ```


  `validationMetadatasToSchemas` takes an `options` object as an optional
  parameter. Check available configuration objects and defaults at
  [`options.ts`](src/options.ts).


  ### Adding and overriding default converters


  With `options.additionalConverters` you can add new validation metadata
  converters or override [the existing ones](src/defaultConverters.ts). Let's
  say we want to, for example, add a handy `description` field to each
  `@IsString()`-decorated property:


  ```typescript

  import { ValidationTypes } from 'class-validator'


  // ...


  const schemas = validationMetadatasToSchemas({
    additionalConverters: {
      [ValidationTypes.IS_STRING]: {
        description: 'A string value',
        type: 'string',
      },
    },
  })

  ```


  which now outputs:


  ```json

  {
    "BlogPost": {
      "properties": {
        "id": {
          "description": "A string value",
          "type": "string"
        }
        // ...
      }
    }
  }

  ```


  An additional converter can also be supplied in form of a function that
  receives the validation metadata item and global options, outputting a JSON
  Schema property object (see below for usage):


  ```typescript

  type SchemaConverter = (
    meta: ValidationMetadata,
    options: IOptions
  ) => SchemaObject | void

  ```


  ### Custom validation classes


  `class-validator` allows you to define [custom validation
  classes](https://github.com/typestack/class-validator#custom-validation-classes).
  You might for example validate that a string's length is between given two
  values:


  ```typescript

  import {
    Validate,
    ValidationArguments,
    ValidatorConstraint,
    ValidatorConstraintInterface,
  } from 'class-validator'


  // Implementing the validator:


  @ValidatorConstraint()

  export class CustomTextLength implements ValidatorConstraintInterface {
    validate(text: string, validationArguments: ValidationArguments) {
      const [min, max] = validationArguments.constraints
      return text.length >= min && text.length <= max
    }
  }


  // ...and putting it to use:


  class Post {
    @Validate(CustomTextLength, [0, 11])
    title: string
  }

  ```


  Now to handle your custom validator's JSON Schema conversion include a
  `CustomTextLength` converter in `options.additionalConverters`:


  ```typescript

  const schemas = validationMetadatasToSchemas({
    additionalConverters: {
      CustomTextLength: (meta) => ({
        maxLength: meta.constraints[1],
        minLength: meta.constraints[0],
        type: 'string',
      }),
    },
  })

  ```


  ### Decorating with additional properties


  Validation classes can also be supplemented with the `JSONSchema` decorator.
  `JSONSchema` can be applied both to classes and individual properties; any
  given keywords are then [merged](https://lodash.com/docs/4.17.4#merge) into
  the JSON Schema derived from class-validator decorators:


  ```typescript

  import { JSONSchema } from 'class-validator-jsonschema'


  @JSONSchema({
    description: 'A User object',
    example: { id: '123' },
  })

  class BlogPost {
    @IsString()
    @JSONSchema({
      description: 'User primary key',
      format: 'custom-id',
    })
    id: string
  }

  ```


  Results in the following schema:


  ```json

  {
    "BlogPost": {
      "description": "A User object",
      "example": { "id": "123" },
      "properties": {
        "id": {
          "description": "User primary key",
          "format": "custom-id",
          "type": "string"
        }
      },
      "required": ["id"],
      "type": "object"
    }
  }

  ```


  `JSONSchema` decorators also flow down from parent classes into [inherited
  validation
  decorators](https://github.com/typestack/class-validator#inheriting-validation-decorators).
  Note though that if the inherited class uses `JSONSchema` to redecorate a
  property from the parent class, the parent class `JSONSchema` gets overwritten
  - i.e. there's no merging logic.


  #### Custom handlers


  Alternatively `JSONSchema` can take a function of type `(existingSchema:
  SchemaObject, options: IOptions) => SchemaObject`. The return value of this
  function is then **not** automatically merged into existing schema (i.e. the
  one derived from `class-validator` decorators). Instead you can handle merging
  yourself in whichever way is preferred, the idea being that removal of
  existing keywords and other more complex overwrite scenarios can be
  implemented here.


  ### @ValidateNested and arrays


  `class-validator` supports validating nested objects via the
  [`@ValidateNested`
  decorator](https://github.com/typestack/class-validator#validating-nested-objects).
  Likewise JSON Schema generation is supported out-of-the-box for nested
  properties such as


  ```typescript

  @ValidateNested()

  user: UserClass

  ```


  However, due to [limitations in Typescript's reflection
  system](https://github.com/Microsoft/TypeScript/issues/10576) we cannot infer
  the inner type of a generic class. In effect this means that properties like


  ```typescript

  @ValidateNested({ each: true })

  users: UserClass[]


  @ValidateNested()

  user: Promise<UserClass>

  ```


  would resolve to classes `Array` and `Promise` in JSON Schema. To work around
  this limitation we can use `@Type` from `class-transformer` to explicitly
  define the nested property's inner type:


  ```typescript

  import { Type } from 'class-transformer'

  import { validationMetadatasToSchemas } from 'class-validator-jsonschema'

  const { defaultMetadataStorage } = require('class-transformer/cjs/storage') //
  See https://github.com/typestack/class-transformer/issues/563 for alternatives


  class User {
    @ValidateNested({ each: true })
    @Type(() => BlogPost) // 1) Explicitly define the nested property type
    blogPosts: BlogPost[]
  }


  const schemas = validationMetadatasToSchemas({
    classTransformerMetadataStorage: defaultMetadataStorage, // 2) Define class-transformer metadata in options
  })

  ```


  Note also how the `classTransformerMetadataStorage` option has to be defined
  for `@Type` decorator to take effect.


  ### Using a custom validation metadataStorage


  Under the hood we grab validation metadata from the default storage returned
  by `class-validator`'s `getMetadataStorage()`. In case of a version clash or
  something you might want to manually pass in the storage:


  ```typescript

  const schemas = validationMetadatasToSchemas({
    classValidatorMetadataStorage: myCustomMetadataStorage,
  })

  ```


  ## Limitations


  There's no handling for `class-validator`s **validation groups** or
  **conditional decorator** (`@ValidateIf`) out-of-the-box. The above-mentioned
  extension methods can be used to fill the gaps if necessary.


  The OpenAPI spec doesn't currently support the new JSON Schema **draft-06
  keywords** `const` and `contains`. This means that constant value decorators
  such as `@IsEqual()` and `@ArrayContains()` translate to quite [complicated
  schemas](https://github.com/sahava/gtm-datalayer-test/issues/4). Hopefully [in
  a not too distant
  future](https://github.com/OAI/OpenAPI-Specification/issues/1313#issuecomment-335893062)
  these keywords are adopted into the spec and we'll be able to provide neater
  conversion.


  Handling **null values** is also tricky since OpenAPI doesn't support JSON
  Schema's `type: null`, providing its own `nullable` keyword instead. The
  default `@IsEmpty()` converter for example opts for `nullable` but you can use
  `type: null` instead via `options.additionalConverters`:


  ```typescript

  // ...

  additionalConverters: {
    [ValidationTypes.IS_EMPTY]: {
      anyOf: [
        {type: 'string', enum: ['']},
        {type: 'null'}
      ]
    }
  }

  ```


  ## TODO


  - [x] handle `skipMissingProperties` and `@isDefined()`

  - [x] decorators for overwriting prop schemas

  - [ ] optional property descriptions (e.g. `A Base64-encoded string`)

  - [ ] optional draft-06 keywords
apisyouwonthate/openapi.tools: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  271F:8FF2:259C24:4D2ECF:6500FB1A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fsprojects/OpenAPITypeProvider: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B42:7EFD:7419F1:ED596D:6500FB3B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
outofcoffee/vertx-oas: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A8D:2A1E:A374AC:14BB219:6500FB6E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
cdimascio/openapi-spring-webflux-validator: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2725:7B1E:7A62CC:F9E9DA:6500FB22.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fmvilas/openapi3-generator: >
  <h1 align="center">OpenAPI 3 Generator</h1>

  <p align="center">
    Use your API OpenAPI 3 definition to generate code, documentation, and literally anything you need.
  </p>


  ## Install


  To use it from the CLI:


  ```bash

  npm install -g openapi3-generator

  ```


  ## Requirements


  * Node.js v7.6+


  ## Usage


  ### From the command-line interface (CLI)


  ```bash
    Usage: og [options] <openapiFileOrURL> <template>


    Options:

      -V, --version                  output the version number
      -o, --output <outputDir>       directory where to put the generated files (defaults to current directory)
      -t, --templates <templateDir>  directory where templates are located (defaults to internal templates directory)
      -b, --basedir <baseDir>        directory to use as the base when resolving local file references (defaults to OpenAPI file directory)
      -h, --help                     output usage information
  ```


  #### Examples


  The shortest possible syntax:

  ```bash

  og openapi.yaml markdown

  ```


  Specify where to put the generated code:

  ```bash

  og -o ./my-docs openapi.yaml markdown

  ```


  ## Templates


  ### Creating your own templates

  Templates are the sources where the result will be generated from. There are
  already some templates

  you can use to generate code and documentation.


  The files in your template can be of the following types:

  1. Static: This kind of files will be simply copied to the output directory.

  2. Templates: This kind of files will be compiled using
  [Handlebars](http://handlebarsjs.com/), and copied to the output directory.

  3. Path templates: This kind of files will be compiled using
  [Handlebars](http://handlebarsjs.com/), but it will generate one file per
  OpenAPI path.


  Assuming we have the following OpenAPI Spec:

  ```yaml

  openapi: "3.0.0"

  info:
    version: 1.0.0
    title: OpenAPI Petstore
    license:
      name: MIT
  servers:
    - url: http://petstore.openapi.io/v1
  paths:
    /pet:
      get:...
      post:...
    /pet/{petId}:
      get:...
    /user/login:
      post:...
    /user/{username}:
      get:...
      put:...
      delete:...
  ...

  ```

  And some template files like this:

  ```

  |- index.js            // This file contains static code, e.g. starting a
  webserver and including ./api/index.js

  |+ api/
   |- index.js.hbs       // This is a static template, it contains placeholders that will be filled in, e.g. includes for each file in routes
   |+ routes/
    |- $$path$$.route.js.hbs      // This file will be generated for each operation and contains skeleton code for each method for an operation.
    |+ $$path$$/                  // This folder will also be generated for each operation.
      |- route.js.hbs             // This is another example of an operation file.
  ```

  The first important thing to notice here is the variable notation in
  `$$path$$.route.js.hbs`. It will be replaced by the name of the path.


  This example also shows `$$path$$` used in a folder name - the generated
  folder names here will replace $$path$$ with

  the name of the path (in kebab-case).


  In this example the generated directory structure will be like this:

  ```

  |- index.js            // This file still contains static code like before.

  |+ api/
   |- index.js           // This file will now e.g. have included the two files in routes.
   |+ routes/
    |- pet.route.js      // This file contains the code for methods on pets.
    |                    // (e.g. getPet, postPet, getPetByPetId).
    |- user.route.js     // This file will contain the code for methods on users.
    |                    // (e.g. postUserLogin, getUserByUsername, putUserByUsername, deleteUserByUsername).
    |+ pet/
     | - route.js        // this file also contains the code for methods on pets.
    |+ user/
     | - route.js        // this file also contains the code for methods on users.
  ```


  ### Template file extensions

  You can (optionally) name your template files with `.hbs` extensions, which
  will be removed when writing the generated

  file. e.g. `index.js.hbs` writes `index.js`. `index.js` would also write to
  `index.js`, if you prefer to omit the hbs

  extension.


  The only case where the `.hbs` extension isn't optional would be if you are
  writing handlebars templates with the

  templates. In that case the the template would need the extension `.hbs.hbs`.
  `usertpl.hbs.hbs` writes `usertpl.hbs`

  (but `usertpl.hbs` as a source would write `usertpl` with no extension).


  ### Template file content

  The generator passes the OpenAPI spec to template files, so all information
  should be available there.

  In addition to that, the code generator adds a bit [more
  data](#data-passed-to-handlebars-templates) that can be helpful.


  #### Examples:

  ##### Dynamically require files in JavaScript

  ```mustache

  {{#each @root.openapi.endpoints}}

  const {{.}} = require('./routes/{{.}}.route.js')

  {{/each}}

  ```

  will produce (using the OAS Spec example from above):

  ```js

  const pet = require('./routes/pet.route.js')

  const user = require('./routes/user.route.js')

  ```


  ### Data passed to Handlebars templates

  | Param | Type | Description |

  | --- | --- | --- |

  |openapi|object|The OpenAPI spec.|

  |openapi.endpoints| object | All first level endpoints (e.g  `pet` and `user`)
  |


  ### Custom handlebars helpers

  If your template needs Handlebars helpers, you can define them in a directory
  called `.helpers` inside your template.


  Check out some examples in the [markdown](./templates/markdown/.helpers)
  template.


  ### Using handlebars partials

  If you want to use partials in your template, define them in a directory
  called `.partials` inside your template.


  Check out some examples in the [markdown](./templates/markdown/.partials)
  template.


  > The name of the partial will be obtained from the file name, converted to
  camel case. So, for instance, if the file name is `my-partial.js`, you can use
  the partial with `{{> myPartial}}`.


  ## Authors


  * Fran Méndez ([@fmvilas](http://twitter.com/fmvilas))

  * Richard Klose ([@richardklose](http://github.com/richardklose))
atlassian/oas3-chow-chow: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2725:7B1E:7A5C53:F9DC75:6500FB1B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
mrTimofey/vue-admin: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6F:6129:AA36AC:1594839:6500FB5D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Microsoft/OpenAPI.NET.OData: >

  VSTS Build  | Status

  --------|---------

  Rolling | <img
  src="https://identitydivision.visualstudio.com/_apis/public/build/definitions/2cfe7ec3-b94f-4ab9-85ab-2ebff928f3fd/410/badge"/>

  Nightly | <img
  src="https://identitydivision.visualstudio.com/_apis/public/build/definitions/2cfe7ec3-b94f-4ab9-85ab-2ebff928f3fd/427/badge"/>



  AzurePipeline|Status

  --------|--------------
   Rolling |<img src="https://identitydivision.visualstudio.com/OData/_apis/build/status/OpenApi/OpenAPI.OData-Master-Rolling?branchName=master" />
    Nightly |<img src="https://identitydivision.visualstudio.com/OData/_apis/build/status/OpenApi/OpenAPI.OData-Master-Nightly?branchName=master" />

  # Convert OData to OpenAPI.NET [Preview]


  [**Disclaimer:This library is in a preview state. Feedback and contribution is
  welcome!**]


  ## Introduction


  The **Microsoft.OpenAPI.OData.Reader** library helps represent an OData
  service metadata as an OpenApi description. It converts
  [OData](http://www.odata.org)
  [CSDL](http://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html),
  the XML representation of the Entity Data Model (EDM) describing an OData
  service into [Open API](https://github.com/OAI/OpenAPI-Specification) based on
  [OpenAPI.NET](http://aka.ms/openapi) object model.


  The conversion is based on the mapping doc from [OASIS OData OpenAPI
  v1.0](https://www.oasis-open.org/committees/document.php?document_id=61852&wg_abbrev=odata)
  and uses the following :


  1. [Capabilities vocabulary
  annotation](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Capabilities.V1.xml)

  2. [Authorization vocabulary
  annotation](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Authorization.V1.xml)

  3. [Core vocabulary
  annotation](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Core.V1.xml)

  4. Navigation property path

  5. Edm operation and operation import path


  ## Overview


  The image below is generic overview of how this library can convert the EDM
  model to an [OpenAPI.NET
  document](https://github.com/Microsoft/OpenAPI.NET/blob/master/src/Microsoft.OpenApi/Models/OpenApiDocument.cs)
  object.


  ![Convert OData CSDL to OpenAPI](docs/images/odata-2-openapi.png "Map ///
  OData CSDL --> OpenAPI.NET")


  For more information on the CSDL and Entity Data model, please refer to
  [http://www.odata.org/documentation](http://www.odata.org/documentation).

  For more information about the Open API object of model, please refer to
  [http://github.com/microsoft/OpenAPI.NET](http://github.com/microsoft/OpenAPI.NET)


  ## Sample code


  The following sample code illustrates the use of the library


  ```csharp

  public static void GenerateOpenApiDescription()

  {
      IEdmModel model = GetEdmModel();
      OpenApiDocument document = model.ConvertToOpenApi();
      var outputJSON = document.SerializeAsJson(OpenApiSpecVersion.OpenApi3_0);
      var outputYAML = document.SerializeAsYaml(OpenApiSpecVersion.OpenApi3_0);
  }


  public static IEdmModel GetEdmModel()

  {
      // load EDM model here...
  }

  ```


  Or with the convert settings:


  ```csharp

  public static void GenerateOpenApiDescription()

  {
      IEdmModel model = GetEdmModel();
      OpenApiConvertSettings settings = new OpenApiConvertSettings
      {
          // configuration
      };
      OpenApiDocument document = model.ConvertToOpenApi(settings);
      var outputJSON = document.SerializeAsJson(OpenApiSpecVersion.OpenApi3_0);
      var outputYAML = document.SerializeAsYaml(OpenApiSpecVersion.OpenApi3_0);
  }


  public static IEdmModel GetEdmModel()

  {
      // load EDM model here...
  }

  ```


  The `GetEdmModel()` method can load a model in 3 ways:


  1. Create the Edm model from scratch. For details refer [building a basic
  model](http://odata.github.io/odata.net/#02-01-build-basic-model)


  2. Load the Edm model from CSDL file. The following shows a code sample that
  loads a model from a csdl file.

      ```csharp
      public static IEdmModel GetEdmModel()
      {
          string csdlFilePath = @"c:\csdl.xml";
          string csdl = System.IO.File.ReadAllText(csdlFilePath);
          IEdmModel model = CsdlReader.Parse(XElement.Parse(csdl).CreateReader());
          return model;
      }
      ```

  3. Create the Edm model using Web API OData model builder. For details refer
  to the [web api model builder
  article](http://odata.github.io/WebApi/#02-01-model-builder-abstract)


  ## Nightly builds


  The nightly build process will upload a Nuget package for OpenAPI.OData.reader
  to [OpenAPIOData MyGet gallery](https://www.myget.org/gallery/openapiodata).


  To connect to OpenAPI.OData.reader feed, use
  [this](https://www.myget.org/F/openapiodata/api/v3/index.json) URL source.


  ## Nuget packages


  The OpenAPI.OData.reader nuget package is at:
  [https://www.nuget.org/packages/Microsoft.OpenApi.OData/](https://www.nuget.org/packages/Microsoft.OpenApi.OData)


  ---


  # Contributing


  This project welcomes contributions and suggestions.  Most contributions
  require you to agree to a

  Contributor License Agreement (CLA) declaring that you have the right to, and
  actually do, grant us

  the rights to use your contribution. For details, visit
  [https://cla.microsoft.com](https://cla.microsoft.com).


  When you submit a pull request, a CLA-bot will automatically determine whether
  you need to provide

  a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow
  the instructions

  provided by the bot. You will only need to do this once across all repos using
  our CLA.


  This project has adopted the [Microsoft Open Source Code of
  Conduct](https://opensource.microsoft.com/codeofconduct/).

  For more information see the [Code of Conduct
  FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or

  contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any
  additional questions or comments.
Mermade/openapi-lint-vscode: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272B:09A2:AF915B:163E4D9:6500FAFB.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
tavis-software/Tavis.OpenApi: >
  # Tavis.OpenAPI


  **Note: This library has been superceded by
  [Microsoft.OpenAPI.NET](https://github.com/Microsoft/OpenAPI.NET).  I don't
  expect any further development on this project.**


  This library is a parser for the [OpenAPI
  Specification](https://openapis.org/).  The model is based around OpenAPI 3.0
  specification.


  ## Simple Example


  ```csharp
              var parsingContext = OpenApiParser.Parse(@"
                      openapi: 3.0.0
                      info:
                          title: A simple inline example
                          version: 1.0.0
                      paths:
                        /api/home:
                          get:
                            responses:
                              200:
                                description: A home document
                      ");

              Assert.Equal("3.0.0", parsingContext.OpenApiDoc.Version);
              Assert.Equal(0, parsingContext.ParsingErrors.Count());
  ```


  ## Goals


  - Import OpenAPI V3 definitions in both YAML and JSON formats.

  - Export OpenAPI definition in YAML format

  - Import OpenAPI V2 definitions

  - Provide comprehensive syntax and semantic error reporting 

  - Enable constructing of OpenAPI descriptions via a document object model
rafaelcaricio/sticker: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B77:0E33:21CA6E:45320E:6500FB72.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
cdimascio/kotlin-spring-mvc-template: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2723:303E:7CAAC4:FE46A8:6500FB21.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
wzshiming/gen: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E567:5E42:9E47C0:1417EB0:6500FBA5.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
technocreatives/openapi-eller: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0ABC:71E4:A98F7B:1583505:6500FB91.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
go-courier/oas: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B64:671B:24DEBF:4BD23A:6500FB3E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
koumoul-dev/data-fair: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5F:4DCD:7E0AEB:100CA73:6500FB4A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Mermade/openapi3-examples: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272F:574C:2179CC:447AC5:6500FAFC.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Rots/n26-api: >+
  # n26-api

  Unofficial N26 API documentation


  It is a collection of observed API calls and methods. No guarantees are
  provided that they are complete, correct or that they are still functioning as
  specified.


  The OpenAPI specification is provided in the `openapi.yml` file.

  For testing the spec, it is also published at
  https://app.swaggerhub.com/apis/Rots/N26



  # Client wrapper generation


  The OpenAPI specification allows for generating client wrappers to access the
  data.


  Example:


  ```

  docker run --rm -v ${PWD}:/local korchasa/swagger-codegen-openapi generate -i
  /local/openapi.yml -l java -o /local/out/java

  ```


  # Security warning!


  Do not type in your bank credentials to an untrusted software!

  Once you have given full access to a third party, they can indefinitely "keep
  the bank API session alive" by refreshing their access token and make
  transactions on your behalf (and change any details on the banking app).

  N26 haven't enabled a way to revoke access of third party apps (as far as I
  know, you can't securely sign in to the bank without giving your password in
  plain text to the third party).


  If you think that your credentials may have been compromised, immidiately
  change your login password in the official N26 app and notify the bank of any
  relevant information.


  # Other known software for N26


  * https://github.com/guitmz/n26 Go API

  * https://github.com/PierrickP/n26 JSON API

isa-group/oas-tools: >-
  {"message":"API rate limit exceeded for 40.77.92.214. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more
  details.)","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
ckaratzas/vertx-openapi-spec-generator: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2732:7EFD:740447:ED2CAA:6500FB25.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
OpenAPITools/openapi-petstore: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272A:93AA:A5CC34:150A914:6500FB00.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
technocreatives/openapi-mock-eller: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0ABF:62AF:A20C14:148C9CD:6500FB92.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
serafin-labs/serafin: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2709:7B22:20B141:430EDF:6500FB76.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
yayoc/swagger-to-mock: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E569:7A58:A0655A:14453AE:6500FBA8.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
rinold/Steamer: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A8D:2A1E:A37CBA:14BC2A3:6500FB74.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
wzshiming/openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E541:2DE3:209C33:42CFD3:6500FBA6.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
isa-group/oas-generator: >-
  {"message":"API rate limit exceeded for 20.171.133.141. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more
  details.)","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
erasys/openapi-php: >
  # openapi-php


  [![Latest Version on Packagist][ico-version]][link-releases]

  [![Software License][ico-license]](LICENSE)

  [![Build Status][ico-travis]][link-travis]

  [![Coverage Status][ico-coverage]][link-coverage]

  [![Quality Score][ico-scrutinizer]][link-scrutinizer]

  [![Total Downloads][ico-downloads]][link-downloads]


  Open API 3.0 builder and validation library for PHP that helps you write valid
  specs.


  [PSR-1]:
  https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md

  [PSR-2]:
  https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md

  [PSR-4]:
  https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md



  This project is compliant with [PSR-1], [PSR-2] and [PSR-4].

  If you notice compliance oversights, please send a patch via pull request.


  ## Features


  - Fully documented object-oriented representation of the 

  [Open API
  3.0+](https://github.com/OAI/OpenAPI-Specification/tree/master/versions)
  specification with helper methods

  to write valid documents.

  - Supports Illuminate (Laravel)
  [`Jsonable`](https://github.com/illuminate/contracts/blob/v5.4.0/Support/Jsonable.php) 

  and
  [`Arrayable`](https://github.com/illuminate/contracts/blob/v5.4.0/Support/Arrayable.php).

  - Generates an specification in plain PHP arrays, plain objects, JSON or YAML.

  - Validates Open API documents against the Open API 3.0.x JSON Schema.



  ## Install


  Via Composer


  ``` bash

  $ composer require erasys/openapi-php

  ```


  Via Git


  ``` bash

  $ git clone https://github.com/erasys/openapi-php.git

  ```


  ## Usage


  Basic example:


  ```php

  <?php


  use erasys\OpenApi\Spec\v3 as OASv3;


  $doc = new OASv3\Document(
      new OASv3\Info('My API', '1.0.0', 'My API description'),
      [
          '/foo/bar' => new OASv3\PathItem(
              [
                  'get' => new OASv3\Operation(
                      [
                          '200' => new OASv3\Response('Successful response.'),
                          'default' => new OASv3\Response('Default error response.'),
                      ]
                  ),
              ]
          ),
      ]
  );


  $yaml = $doc->toYaml();

  $json = $doc->toJson();

  $arr  = $doc->toArray();

  $obj  = $doc->toObject();


  ```


  ## Testing


  ``` bash

  $ composer test

  ```


  or


  ``` bash

  $ vendor/bin/phpunit

  $ vendor/bin/phpcs

  ```


  ## Contributing


  Please see
  [CONTRIBUTING](https://github.com/erasys/openapi-php/blob/master/CONTRIBUTING.md)
  for details.


  ## License


  The MIT License (MIT).

  Please see [License
  File](https://github.com/erasys/openapi-php/blob/master/LICENSE) for more
  information.



  [ico-version]:
  https://img.shields.io/packagist/v/erasys/openapi-php.svg?style=flat-square

  [ico-license]:
  https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square

  [ico-travis]:
  https://img.shields.io/travis/erasys/openapi-php/master.svg?style=flat-square

  [ico-downloads]:
  https://img.shields.io/packagist/dt/erasys/openapi-php.svg?style=flat-square

  [ico-coverage]:
  https://img.shields.io/scrutinizer/coverage/g/erasys/openapi-php.svg?style=flat-square

  [ico-scrutinizer]:
  https://img.shields.io/scrutinizer/g/erasys/openapi-php.svg?style=flat-square

  [link-releases]: https://packagist.org/packages/erasys/openapi-php

  [link-travis]: https://travis-ci.org/erasys/openapi-php

  [link-downloads]: https://packagist.org/packages/erasys/openapi-php

  [link-coverage]:
  https://scrutinizer-ci.com/g/erasys/openapi-php/code-structure

  [link-scrutinizer]: https://scrutinizer-ci.com/g/erasys/openapi-php
SkeLLLa/fastify-oas: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2733:2A1E:A2FA74:14AB810:6500FB0A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
SabzCity/go-library: >-
  # go-library

  It was deprecated in favor of
  [ChaparKhane](https://github.com/SabzCity/ChaparKhane)
lendingblock/aio-openapi: >
  # aio-openapi


  [![PyPI
  version](https://badge.fury.io/py/aio-openapi.svg)](https://badge.fury.io/py/aio-openapi)

  [![Python
  versions](https://img.shields.io/pypi/pyversions/aio-openapi.svg)](https://pypi.org/project/aio-openapi)

  [![Build](https://github.com/quantmind/aio-openapi/workflows/build/badge.svg)](https://github.com/quantmind/aio-openapi/actions?query=workflow%3Abuild)

  [![Coverage
  Status](https://coveralls.io/repos/github/quantmind/aio-openapi/badge.svg?branch=HEAD)](https://coveralls.io/github/quantmind/aio-openapi?branch=HEAD)

  [![Documentation
  Status](https://readthedocs.org/projects/aio-openapi/badge/?version=latest)](https://aio-openapi.readthedocs.io/en/latest/?badge=latest)


  Asynchronous web middleware for [aiohttp][] and serving Rest APIs with
  [OpenAPI][] v 3

  specification and with optional [PostgreSql][] database bindings.


  <!-- START doctoc generated TOC please keep comment here to allow auto update
  -->

  <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->


  **Table of Contents**


  - [Installation](#installation)

  - [Development](#development)

  - [Features](#features)

  - [Web App](#web-app)

  - [OpenAPI Documentation](#openapi-documentation)

  - [Database Integration](#database-integration)

  - [Websockets](#websockets)
    - [RPC protocol](#rpc-protocol)
    - [Publish/Subscribe](#publishsubscribe)
  - [Environment Variables](#environment-variables)


  <!-- END doctoc generated TOC please keep comment here to allow auto update
  -->


  ## Installation


  ```

  pip install aio-openapi

  ```


  ## Development


  Clone the repository and create a virtual environment `venv`.


  Install dependencies by running the install script


  ```

  ./dev/install

  ```


  To run tests


  ```

  pytest --cov

  ```


  ## Features


  - Asynchronous web routes with
  [aiohttp](https://aiohttp.readthedocs.io/en/stable/)

  - Data validation, serialization and unserialization with python
  [dataclasses](https://docs.python.org/3/library/dataclasses.html)

  - [OpenApi][] v 3 auto documentation

  - [SqlAlchemy][] expression language

  - Asynchronous DB interaction with [asyncpg][]

  - Migrations with [alembic][]

  - SqlAlchemy tables as python dataclasses

  - Support [click][] command line interface

  - Optional [sentry](https://sentry.io) middleware


  ## Web App


  To create an openapi RESTful application follow this schema (lets call the
  file `main.py`)


  ```python

  from openapi.rest import rest


  def create_app():
      return rest(
          openapi=dict(
              title='A REST API',
              ...
          ),
          base_path='/v1',
          allowed_tags=[...],
          validate_docs=True,
          setup_app=setup_app,
          commands=[...]
      )


  def setup_app(app):
      app.router.add_routes(...)
      return app


  if __name__ == '__main__':
      create_app().main()
  ```


  The `create_app` function creates the [aiohttp][] server application by
  invoking the `rest` function.

  This function adds the [click][] command in the `cli` mapping entry and add

  documentation for routes which support OpenAPI docs.

  The `setup_app` function is used to actually setup the custom application,
  usually by adding middleware, routes,

  shutdown callbacks, database integration and so forth.


  ## OpenAPI Documentation


  The library provide tools for creating OpenAPI v 3 compliant endpoints and

  auto-document them.


  An example from test `tests/example` directory


  ```python

  from typing import List


  from aiohttp import web


  from openapi.db.path import SqlApiPath

  from openapi.spec import op



  routes = web.RouteTableDef()



  @routes.view('/tasks')

  class TasksPath(SqlApiPath):
      """
      ---
      summary: Create and query Tasks
      tags:
          - name: Task
            description: Task tag description
      """
      table = 'tasks'

      @op(query_schema=TaskOrderableQuery, response_schema=List[Task])
      async def get(self) -> web.Response:
          """
          ---
          summary: Retrieve Tasks
          description: Retrieve a list of Tasks
          responses:
              200:
                  description: Authenticated tasks
          """
          paginated = await self.get_list()
          return paginated.json_response()

      @op(response_schema=Task, body_schema=TaskAdd)
      async def post(self) -> web.Response:
          """
          ---
          summary: Create a Task
          description: Create a new Task
          responses:
              201:
                  description: the task was successfully added
              422:
                  description: Failed validation
          """
          data = await self.create_one()
          return self.json_response(data, status=201)
  ```


  ## Database Integration


  This library provides integration with [asyncpg][], an high performant
  asynchronous

  connector with [PostgreSql][] database.

  To add the database extension simply use the `get_db` function in the
  applicatiuon `setup_app` function:


  ```python

  from aiohttp import web


  from openapi.db import get_db


  def setup_app(app: web.Application) -> None:
      db = get_db(app)
      meta = db.metadata

  ```


  This will enable database connection and command line tools (most of them from
  [alembic][]):


  ```

  python main.py db --help

  ```


  The database container is available at the `db` app key:


  ```python

  app['db']

  ```


  ## Websockets


  This library provides a simple distributed websocket utility for creating

  websocket remote procedure calls (RPC) and pub/sub.


  ```python

  from aiohttp import web


  from openapi.ws import Sockets


  app = web.Application()

  ...

  app['web_sockets'] = Sockets(app)

  ```


  ### RPC protocol


  The RPC protocol has the following structure for incoming messages


  ```javascript

  {
      "id": "abc",
      "method": "rpc_method_name",
      "payload": {
          ...
      }
  }

  ```


  The `id` is used by clients to link the request with the corresponding
  response.

  The response for an RPC call is eitrher a success


  ```javascript

  {
      "id": "abc",
      "method": "rpc_method_name",
      "response": {
          ...
      }
  }

  ```


  or error


  ```

  {
      "id": "abc",
      "method": "rpc_method_name":
      "error": {
          ...
      }
  }

  ```


  ### Publish/Subscribe


  To subscribe to messages, one need to use the `Subscribe` mixin with the
  subscribe RPC handler.

  Messages take the form:


  ```javascript

  {
      "channel": "channel_name",
      "event": "event_name",
      "data": {
          ...
      }
  }

  ```


  ## Environment Variables


  Several environment variables are used by the library to support testing and
  deployment.


  - `DATASTORE`: PostgreSql connection string (same as [SqlAlchemy][] syntax)

  - `DBPOOL_MIN_SIZE`: minimum size of database connection pool (default is 10)

  - `DBPOOL_MAX_SIZE`: maximum size of database connection pool (default is 10)


  [aiohttp]: https://aiohttp.readthedocs.io/en/stable/

  [openapi]: https://www.openapis.org/

  [postgresql]: https://www.postgresql.org/

  [sqlalchemy]: https://www.sqlalchemy.org/

  [click]: https://github.com/pallets/click

  [alembic]: http://alembic.zzzcomputing.com/en/latest/

  [asyncpg]: https://github.com/MagicStack/asyncpg
Mermade/swaggerplusplus: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2710:9AE9:9FFB28:144FE15:6500FAFD.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
niteoweb/pyramid_openapi3: >
  ## Validate [Pyramid](https://trypyramid.com) views against an [OpenAPI
  3.0](https://swagger.io/specification/) document


  <p align="center">
    <img height="200" src="https://github.com/Pylons/pyramid_openapi3/blob/master/header.jpg?raw=true" />
  </p>


  <p align="center">
    <a href="https://circleci.com/gh/Pylons/pyramid_openapi3">
      <img alt="CircleCI for pyramid_openapi3 (master branch)"
           src="https://circleci.com/gh/Pylons/pyramid_openapi3.svg?style=shield">
    </a>
    <img alt="Test coverage (master branch)"
         src="https://img.shields.io/badge/tests_coverage-100%25-brightgreen.svg">
    <img alt="Test coverage (master branch)"
         src="https://img.shields.io/badge/types_coverage-100%25-brightgreen.svg">
    <a href="https://pypi.org/project/pyramid_openapi3/">
      <img alt="latest version of pyramid_openapi3 on PyPI"
           src="https://img.shields.io/pypi/v/pyramid_openapi3.svg">
    </a>
    <a href="https://pypi.org/project/pyramid_openapi3/">
      <img alt="Supported Python versions"
           src="https://img.shields.io/pypi/pyversions/pyramid_openapi3.svg">
    </a>
    <a href="https://github.com/Pylons/pyramid_openapi3/blob/master/LICENSE">
      <img alt="License: MIT"
           src="https://img.shields.io/badge/License-MIT-yellow.svg">
    </a>
    <a href="https://github.com/Pylons/pyramid_openapi3/graphs/contributors">
      <img alt="Built by these great folks!"
           src="https://img.shields.io/github/contributors/Pylons/pyramid_openapi3.svg">
    </a>
    <a href="https://webchat.freenode.net/?channels=pyramid">
      <img alt="Talk to us in #pyramid on Freenode IRC"
           src="https://img.shields.io/badge/irc-freenode-blue.svg">
    </a>
  </p>


  ## Peace of Mind


  The reason this package exists is to give you peace of mind when providing a
  RESTful API. Instead of chasing down preventable bugs and saying sorry to
  consumers, you can focus on more important things in life.


  - Your **API documentation is never out-of-date**, since it is generated out
  of the API document that you write.

  - The documentation comes with **_try-it-out_ examples** for every endpoint in
  your API. You don't have to provide (and maintain) `curl` commands to showcase
  how your API works. Users can try it themselves, right in their browsers.

  - Your **API document is always valid**, since your Pyramid app won't even
  start if the document is not according to OpenAPI 3.0 specification.

  - Automatic request **payload validation and sanitization**. Your views do not
  require any code for validation and input sanitation. Your view code only
  deals with business logic. Tons of tests never need to be written since every
  request, and its payload, is validated against your API document before it
  reaches your view code.

  - Your API **responses always match your API document**. Every response from
  your view is validated against your document and a `500 Internal Server Error`
  is returned if the response does not exactly match what your document says the
  output of a certain API endpoint should be. This decreases the effects of the
  [Hyrum's Law](https://www.hyrumslaw.com).

  - **A single source of truth**. Because of the checks outlined above you can
  be sure that whatever your API document says is in fact what is going on in
  reality. You have a single source of truth to consult when asking an API
  related question, such as "Remind me again, which fields does the endpoint
  /user/info return?".

  - Based on [Pyramid](https://trypyramid.com), a **mature Python Web
  framework**. Companies such as Mozilla, Yelp, RollBar and SurveyMonkey [trust
  Pyramid](https://trypyramid.com/community-powered-by-pyramid.html), and the
  new [pypi.org](https://github.com/pypa/warehouse) runs on Pyramid too. Pyramid
  is thoroughly [tested](https://travis-ci.org/Pylons/pyramid) and
  [documented](http://docs.pylonsproject.org/projects/pyramid/en/latest/),
  providing flexibility, performance, and a large ecosystem of [high-quality
  add-ons](https://trypyramid.com/extending-pyramid.html).


  ## Features


  - Validates your API document (for example, `openapi.yaml` or `openapi.json`)
  against the OpenAPI 3.0 specification using the
  [openapi-spec-validator](https://github.com/p1c2u/openapi-spec-validator).

  - Generates and serves the [Swagger try-it-out
  documentation](https://swagger.io/tools/swagger-ui/) for your API.

  - Validates incoming requests *and* outgoing responses against your API
  document using [openapi-core](https://github.com/p1c2u/openapi-core).



  ## Getting started


  1. Declare `pyramid_openapi3` as a dependency in your Pyramid project.


  2. Include the following lines:


  ```python

  config.include("pyramid_openapi3")

  config.pyramid_openapi3_spec('openapi.yaml', route='/api/v1/openapi.yaml')

  config.pyramid_openapi3_add_explorer(route='/api/v1/')

  ```


  3. Use the `openapi` [view
  predicate](https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/viewconfig.html#view-configuration-parameters)
  to enable request/response validation:


  ```python

  @view_config(route_name="foobar", openapi=True, renderer='json')

  def myview(request):
      return request.openapi_validated.parameters
  ```


  For requests, `request.openapi_validated` is available with two fields:
  `parameters` and `body`.

  For responses, if the payload does not match the API document, an exception is
  raised.



  ## Demo / Examples


  There are two examples provided with this package:

  * A fairly simple [single-file app providing a Hello World
  API](https://github.com/Pylons/pyramid_openapi3/tree/master/examples/singlefile).

  * A slightly more [built-out app providing a TODO app
  API](https://github.com/Pylons/pyramid_openapi3/tree/master/examples/todoapp).


  Both examples come with tests that exhibit pyramid_openapi's error handling
  and validation capabilities.


  A **fully built-out app**, with 100% test coverage, providing a
  [RealWorld.io](https://realworld.io) API is available at
  [niteoweb/pyramid-realworld-example-app](https://github.com/niteoweb/pyramid-realworld-example-app).
  It is a Heroku-deployable Pyramid app that provides an API for a
  Medium.com-like social app. You are encouraged to use it as a scaffold for
  your next project.



  ## Design defense


  The authors of pyramid_openapi3 believe that the approach of validating a
  manually-written API document is superior to the approach of generating the
  API document from Python code. Here are the reasons:


  a) Both generation and validation against a document are lossy processes. The
  underlying libraries running the generation/validation will always have
  something missing. Either a feature from the latest OpenAPI specification, or
  an implementation bug. Having to fork the underlying library in order to
  generate the part of your API document that might only be needed for the
  frontend is unfortunate.

     Validation on the other hand allows one to skip parts of validation that are not supported yet, and not block a team from shipping the document.

  b) Validation approach does sacrifice DRY-ness, one has to write the API
  document and then the (view) code in Pyramid. Feels a bit redundant at first.
  However, this provides a clear separation between the intent and the
  implementation.


  c) Generation approach has the drawback of having to write Python code even
  for parts of the API document that the Pyramid backend does not handle, as it
  might be handled by a different system, or be specific only to documentation
  or only to the client side of the API. This bloats your Pyramid codebase with
  code that does not belong there.


  ## Running tests


  You need to have [pipenv](https://pipenv.readthedocs.io/) and Python 3.7 or
  3.8 installed on your machine. Then you can run:

      $ make tests

  ## Related packages


  These packages tackle the same problem-space:


  - [pyramid_oas3](https://github.com/kazuki/pyramid-oas3) seems to do things
  very similarly to pyramid_openapi3, but the documentation is not in English
  and we sadly can't fully understand what it does just reading the code.

  - [pyramid_swagger](https://github.com/striglia/pyramid_swagger) does a
  similar
    thing, but for Swagger 2.0 documents.
  - [connexion](https://github.com/zalando/connexion) takes the same "write spec
  first, code second" approach as pyramid_openapi3, but is based on Flask.

  - [bottle-swagger](https://github.com/ampedandwired/bottle-swagger) takes the
  same "write spec first, code second" approach too, but is based on Bottle.

  - [pyramid_apispec](https://github.com/ergo/pyramid_apispec) uses generation
  with
    help of apispec and marshmallow validation library. See above [why we prefer validation instead of generation](#design-defense).

  ## Deprecation policy


  We do our best to follow the rules below.


  * Support the latest two releases of Python, currently Python 3.7 and 3.8.

  * Support only a single release of `openapi-core` and its sub-dependencies.
  See `Pipfile.lock` for a frozen-in-time known-good-set of all dependencies.


  ## Use in the wild


  A couple of projects that use pyramid_openapi3 in production:


  - [WooCart API](https://app.woocart.com/api/v1/) - User control panel for
  WooCart Managed WooCommerce service.

  - [Kafkai API](https://app.kafkai.com/api/v1) - User control panel for Kafkai
  text generation service.
OverSpeedIO/koa2-oas3: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273F:02BE:9C046A:13D2462:6500FB02.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Mermade/openapi-webconverter: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272D:5F2B:A90BBD:156BC7E:6500FAFC.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
zweidenker/OpenAPI: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E56E:73D2:1FF532:418801:6500FBAD.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
denismakogon/fn-openapi-v3: "OpenAPI v3 spec generator tool for Fn applications\n==================================================\n\nIdea\n----\nThe Fn application is nothing but set of function where each has its own HTTP route for execution.\n\nWhat if there's a way to build client binding for the particular serverless application?\n\nThis library and tool are designed to provide necessary API to generate OpenAPI v3.0.0 specification using Function spec language.\n\n\nFunction spec language\n----------------------\n\nThis tool relies on improved Swagger API 2.0 plus additional inline referencing features \nthat are missing in both Swagger 2.0 and OpenAPI 3.0 that are allowing developers to structure their application in more modular way.\n\n\nFunction spec example\n---------------------\n\n```yaml\nversion: 0.0.1\ndescription: Functions spec that describes Fn-powered serverless application\nfunctions:\n  createUser:\n    handler: handler.create\n    events:\n      - http:\n          method: post\n          fn: ${file(models/func.yml):first}\n          documentation:\n            summary: Create User\n            description: Creates a user and then sends a generated password email\n            requestBody:\n              schema: ${file(models/request.json)}\n            parameters:\n              - name: username\n                description: The username for a user to create\n                required: true\n                in: path\n                schema:\n                  type: string\n                  pattern: \"^[-a-z0-9_]+$\"\n              - name: membershipType\n                description: The user's Membership Type\n                required: true\n                in: query\n                schema:\n                  type: string\n                  enum:\n                    - premium\n                    - standard\n            responses:\n              200:\n                description: create a user\n                content:\n                  application/json:\n                    schema: ${file(models/request.json)}\n              500:\n                description: error\n                content:\n                  application/json:\n                    schema: ${file(models/error.json)}\n```\nThis sample you can find [here](examples/fn.yml)\n\nusing the following code:\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/denismakogon/fn-openapi/models\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\nfunc main() {\n\n\tyamlFile, err := ioutil.ReadFile(os.Args[1])\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tos.Exit(1)\n\t}\n\n\tvar fn models.Fn\n\n\terr = fn.Unmarshal(yamlFile, os.Stdout)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tos.Exit(1)\n\t}\n\n\tvar oai models.OpenAPISpec\n\terr = oai.FromFnSpec(\"http://localhost:8080\", &fn)\n\terr = oai.Marshal(os.Stdout)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tos.Exit(1)\n\t}\n}\n```\n\nit is possible to turn Function spec into valid OpenAPI v3 specification.\nTo confirm that spec is valid use the following command:\n```bash\ndocker run --rm -i -v `pwd`:/go fnproject/openapiv3-validator:0.0.1 /go/examples/openapi.yml\n```\n"
nasa9084/go-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B79:2794:9B396C:13B3F91:6500FB60.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
foxel/openapi3-typescript-codegen: >
  # openapi3-typescript-codegen


  TypeScript code generator for OpenAPI 3.0.0


  Inspired by problems with
  [openapi-codegen](https://github.com/Mermade/openapi-codegen)


  Idea is to provide native OpenAPI 3 generator with all language-specific code
  being put into templates with help of generic helpers.


  Currently only TypeScript language and Angular frameworks are supported.


  **Work in progress**


  ## Usage


  ### Installing


  `npm i -g openapi3-typescript-codegen`


  ### CLI


  ```

  op3-codegen {openapi-definition.yaml} [options]


  Options:
    -o, --output     Specify output directory         [string] [default: "./out/"]
    -t, --templates  Specify templates directory (pro only)               [string]
  ```


  ## Limitations in OpenAPI support (to be removed)


  * support only for 'http' ('basic' and 'bearer') and 'apiKey' Security
  schemas,

  * parameters encoder supports only style='form',explode=false encoding scheme,

  * only GET, POST, PUT, DELETE operations code is generated 
muskratjs/muskrat: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B67:055A:AB0B21:15B4002:6500FB5F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
kinecosystem/ecosystem-api: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  271B:17CB:782D7D:F556CC:6500FB48.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
microprofile-extensions/openapi-ext: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B57:03EB:9C6DC2:13DE829:6500FB56.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
philosowaffle/vs-openapi-designer: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B79:2794:9B3FD5:13B4C38:6500FB67.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
ckaratzas/tus-server-implementation: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  271B:17CB:78097F:F50C66:6500FB25.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Dzoukr/OpenAPIParser: >-
  <img src="https://github.com/Dzoukr/OpenAPITypeProvider/raw/master/logo.jpg"
  alt="drawing" width="100px"/>


  # Open API F# Parser


  Simple library for parsing YAML/JSON Open API (previously called as Swagger)
  specification (version 3.0.1). Originally part of my type provider, but I will
  probably never finish it, so at least community can use part of it for own
  projects. :)


  ## Installation

  First install NuGet package

      Install-Package OpenAPIParser

  or using [Paket](http://fsprojects.github.io/Paket/getting-started.html)

      nuget OpenAPIParser

  ## How to use


  Typically, you would use some existing specification (see [official examples
  for version
  3](https://github.com/OAI/OpenAPI-Specification/tree/master/examples/v3.0)):


  ```fsharp

  open OpenAPIParser.Version3.Parser

  let openAPI = Document.loadFromYamlFile "mySpec.yaml" 

  ```


  Then you have basic F# record filled


  ```fsharp

  let version = openAPI.Info.Version

  let title = openAPI.Info.Title

  let paths = openAPI.Paths

  ...

  ```


  Please check [test
  project](https://github.com/Dzoukr/OpenAPIParser/tree/master/tests/OpenAPIParser.Tests)
  for more examples.


  ## Limitations


  Not all properties from [3.0.1
  specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md)
  are implemented. Especially `anyOf` and `oneOf` Schema objects, which will be
  probably implemented in future versions. Please check [Specification record
  definition](https://github.com/Dzoukr/OpenAPIParser/blob/master/src/OpenAPIParser/Version3/Specification.fs)
  for already implemented properties.


  ## Contribution


  You know the drill. Code + Tests = Good PR. Any contribution more than
  welcome!
confuser/exegesis-koa: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2737:7DD3:785172:F5AF32:6500FB26.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
unifysell/unifysell-sdk-php: >
  # Official Unifysell API SDK


  This packages combines the group of packages needed.


  ## Installation


  ### Include the package via composer


  to use in composer add to the require section:
      
      "require": {
          "unifysell/unifysell-sdk-php": "*"
      }

  ### Installing composer


  see https://getcomposer.org/download/


  ## Usage


  You can have a look at the `example/complete-example.php` file for a basic
  usage example.


  ### Authenticate

      Download Access Token from unifysell Control Center (UCC).

  ### Make your first request

      $config = Unifysell\SDK\Configuration::getDefaultConfiguration()->setApiKey(
          'Authorization', 
          '----INSERT BEARER TOKEN HERE----'
      );
      $config->setApiKeyPrefix('Authorization', 'Bearer');
      
      $apiInstance = new Unifysell\SDK\Api\OrdersApi(
          new GuzzleHttp\Client(),
          $config
      );
      
      $result = $apiInstance->getOrder(1);
kumuluz/kumuluzee-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B4D:3B7D:9BD3E3:13C9363:6500FB4E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
koumoul-dev/soas: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B68:9AE9:A083FA:1461633:6500FB6C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
entrepreneur-interet-general/open_api_schemas_to_markdown: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273D:2701:77981C:F467BB:6500FB31.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
brreg/openAPI: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2701:9FA6:778C13:F412A6:6500FB1C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
funa1g/multi-file-oas-example: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  271B:17CB:782011:F53B27:6500FB3C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
koshevy/oapi3codegen: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B73:8000:81A505:107FD49:6500FB4A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
acme-software/typeswagger: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2707:671B:24B5BB:4B7D64:6500FB12.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
unjello/openapi-mockk: "image::http://unmaintained.tech/badge.svg[link=http://unmaintained.tech/]\r\n\r\n= DEPRECATED\r\n\r\n_openapi-parser_ is no longer supported, please consider using https://github.com/swagger-api/swagger-parser[swagger-parser].\r\n"
Bankdata/gradle-swagger-plugin: >-
  {"message":"Not
  Found","documentation_url":"https://docs.github.com/rest/repos/contents#get-a-repository-readme"}
chrisdostert/listener-from-oas3-js: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2730:4DCD:7DE1E0:10075EE:6500FB24.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
smartrecruiters/openapi-schemas-validator: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AA4:0E33:21D5A1:454939:6500FB7F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
kazuki/pyramid-oas3: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B66:4DCD:7E066B:100C114:6500FB47.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
vivek-26/koa-openapi3-router: '### This library is in alpha stage'
tandfgroup/schema-oas: |
  # OpenAPI Specifications for Schema.org

  ## Table of Contents

  - [About the Service](#about)
    - [Features](#features)
  - [Usage](#usage)
  - [Contributing](CONTRIBUTING.md)
  - [License](#license)

  ---

  ## About the Service <a id="about"></a>

  This is a collection of OpenAPI Specs for all the Schema.org entities.

  ## Usage <a id="usage"></a>

  TBD...

  > :point_up: _more instructions coming soon._

  ---

  ## License <a id="license"></a>

  Copyright 2018 Taylor & Francis Group

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  <http://www.apache.org/licenses/LICENSE-2.0>

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
data-studio/data-studio: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  271B:17CB:780F26:F51831:6500FB2A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
unjello/openapi-parser: "image::http://unmaintained.tech/badge.svg[link=http://unmaintained.tech/]\r\n\r\n= DEPRECATED\r\n\r\n_openapi-parser_ is no longer supported, please consider using https://github.com/swagger-api/swagger-parser[swagger-parser].\r\n"
joar/py-openapilib: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B65:303E:7CCCBD:FE8D04:6500FB44.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
SensibleWood/swaggerui-webpack-boilerplate: >+
  Overview

  ===


  This is boilerplate project for running Swagger UI with Webpack. It exists
  because:


  * I wanted an easy way of slamming multiple API specifications into a Swagger
  UI-based project and running it locally.

  * I didn't wanted to manually change the Javascript every time I added an API
  specification.

  * Using NPM/Webpack means my dependencies can be kept up-to-date easily.


  Sure there's other ways of doing this, but still...


  ~There's also a Redoc page - although this is CDN-based as I am lazy.~ I
  removed the Redoc version for the time being.


  Usage

  ===


  To use this project clone and cd into it then:


  ```bash

  npm i

  cp [your Swagger/OpenAPI specifications as YAML] src/specs

  npm run dev

  ```


  :thumbsup:


  Improvements

  ===


  * [ ] Parameterise API specification document name.

  * [ ] Refactor `scripts/rewrite-urls.js` as a Webpack plugin.

pglass/py-openapi-schema-to-json-schema: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A92:7A58:A01483:143AF3D:6500FB6F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
riddhi89/simple-flask-project: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B66:71E4:A95BD2:157CBD3:6500FB6A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Mermade/openapi-gui: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272A:93AA:A5C60B:1509C70:6500FAFA.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Mermade/widdershins: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2732:17A3:9DF862:1412DEC:6500FAFD.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Mermade/oas-kit: >
  # OAS-Kit


  This is the mono-repo for the following related projects


  * [swagger2openapi](packages/swagger2openapi/README.md)

  * [oas-validator](packages/oas-validator/README.md)

  * [oas-linter](packages/oas-linter/README.md)

  * [oas-resolver](packages/oas-resolver/README.md)

  * [oas-schema-walker](packages/oas-schema-walker/README.md)

  * [oas-kit-common](packages/oas-kit-common/README.md)

  * [reftools](packages/reftools/README.md)


  ## Documentation


  * [Main site](https://mermade.github.io/oas-kit)

  *
  [CHANGELOG](https://github.com/Mermade/oas-kit/blob/master/CHANGELOG.md#change-log)


  ## Online converter/validator


  * [OpenAPI-webconverter](https://mermade.org.uk/openapi-converter)


  ## Supported Node.js versions


  Any LTS version. It is **not** recommended to use Node.js 12.17.x,12.18.x or
  12.19.x due to an [http2 bug](https://github.com/nodejs/node/issues/28001).


  ## Development


  * clone the repository

  * `npm i` in the top level directory

  * `npx lerna bootstrap`


  Please try and keep commits related to a single package or piece of
  functionality. Please review the

  [CONTRIBUTING.md](CONTRIBUTING.md) for additional details.


  ## Supporting development


  * [APIs.guru open-collective](https://opencollective.com/openapi-directory)

  * [Linode VPS referral
  link](https://www.linode.com/?r=5734be467cc501b23267cf66d451bc339042ddfa)
OpenAPITools/openapi-generator-cli: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273B:6C7D:238891:48A55C:6500FB00.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
stoplightio/spectral: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AB6:7919:A5095D:14F5092:6500FB86.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
m3-moretv/smogger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B57:03EB:9C66FE:13DDA6D:6500FB50.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
anupsaund/vertx-auto-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2713:2749:7890AC:F5A866:6500FB15.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
mrin9/OpenAPI-Viewer: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B71:7A58:A002FB:1438B21:6500FB5D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
tiangolo/fastapi: "<p align=\"center\">\n  <a href=\"https://fastapi.tiangolo.com\"><img src=\"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" alt=\"FastAPI\"></a>\n</p>\n<p align=\"center\">\n    <em>FastAPI framework, high performance, easy to learn, fast to code, ready for production</em>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/tiangolo/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster\" target=\"_blank\">\n    <img src=\"https://github.com/tiangolo/fastapi/workflows/Test/badge.svg?event=push&branch=master\" alt=\"Test\">\n</a>\n<a href=\"https://coverage-badge.samuelcolvin.workers.dev/redirect/tiangolo/fastapi\" target=\"_blank\">\n    <img src=\"https://coverage-badge.samuelcolvin.workers.dev/tiangolo/fastapi.svg\" alt=\"Coverage\">\n</a>\n<a href=\"https://pypi.org/project/fastapi\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/fastapi?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n</a>\n<a href=\"https://pypi.org/project/fastapi\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/pyversions/fastapi.svg?color=%2334D058\" alt=\"Supported Python versions\">\n</a>\n</p>\n\n---\n\n**Documentation**: <a href=\"https://fastapi.tiangolo.com\" target=\"_blank\">https://fastapi.tiangolo.com</a>\n\n**Source Code**: <a href=\"https://github.com/tiangolo/fastapi\" target=\"_blank\">https://github.com/tiangolo/fastapi</a>\n\n---\n\nFastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints.\n\nThe key features are:\n\n* **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic). [One of the fastest Python frameworks available](#performance).\n* **Fast to code**: Increase the speed to develop features by about 200% to 300%. *\n* **Fewer bugs**: Reduce about 40% of human (developer) induced errors. *\n* **Intuitive**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging.\n* **Easy**: Designed to be easy to use and learn. Less time reading docs.\n* **Short**: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.\n* **Robust**: Get production-ready code. With automatic interactive documentation.\n* **Standards-based**: Based on (and fully compatible with) the open standards for APIs: <a href=\"https://github.com/OAI/OpenAPI-Specification\" class=\"external-link\" target=\"_blank\">OpenAPI</a> (previously known as Swagger) and <a href=\"https://json-schema.org/\" class=\"external-link\" target=\"_blank\">JSON Schema</a>.\n\n<small>* estimation based on tests on an internal development team, building production applications.</small>\n\n## Sponsors\n\n<!-- sponsors -->\n\n<a href=\"https://cryptapi.io/\" target=\"_blank\" title=\"CryptAPI: Your easy to use, secure and privacy oriented payment gateway.\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/cryptapi.svg\"></a>\n<a href=\"https://platform.sh/try-it-now/?utm_source=fastapi-signup&utm_medium=banner&utm_campaign=FastAPI-signup-June-2023\" target=\"_blank\" title=\"Build, run and scale your apps on a modern, reliable, and secure PaaS.\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/platform-sh.png\"></a>\n<a href=\"https://www.buildwithfern.com/?utm_source=tiangolo&utm_medium=website&utm_campaign=main-badge\" target=\"_blank\" title=\"Fern | SDKs and API docs\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/fern.svg\"></a>\n<a href=\"https://www.porter.run\" target=\"_blank\" title=\"Deploy FastAPI on AWS with a few clicks\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/porter.png\"></a>\n<a href=\"https://bump.sh/fastapi?utm_source=fastapi&utm_medium=referral&utm_campaign=sponsor\" target=\"_blank\" title=\"Automate FastAPI documentation generation with Bump.sh\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/bump-sh.png\"></a>\n<a href=\"https://www.deta.sh/?ref=fastapi\" target=\"_blank\" title=\"The launchpad for all your (team's) ideas\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/deta.svg\"></a>\n<a href=\"https://training.talkpython.fm/fastapi-courses\" target=\"_blank\" title=\"FastAPI video courses on demand from people you trust\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/talkpython.png\"></a>\n<a href=\"https://testdriven.io/courses/tdd-fastapi/\" target=\"_blank\" title=\"Learn to build high-quality web apps with best practices\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/testdriven.svg\"></a>\n<a href=\"https://github.com/deepset-ai/haystack/\" target=\"_blank\" title=\"Build powerful search from composable, open source building blocks\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/haystack-fastapi.svg\"></a>\n<a href=\"https://careers.powens.com/\" target=\"_blank\" title=\"Powens is hiring!\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/powens.png\"></a>\n<a href=\"https://databento.com/\" target=\"_blank\" title=\"Pay as you go for market data\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/databento.svg\"></a>\n<a href=\"https://speakeasyapi.dev?utm_source=fastapi+repo&utm_medium=github+sponsorship\" target=\"_blank\" title=\"SDKs for your API | Speakeasy\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/speakeasy.png\"></a>\n\n<!-- /sponsors -->\n\n<a href=\"https://fastapi.tiangolo.com/fastapi-people/#sponsors\" class=\"external-link\" target=\"_blank\">Other sponsors</a>\n\n## Opinions\n\n\"_[...] I'm using **FastAPI** a ton these days. [...] I'm actually planning to use it for all of my team's **ML services at Microsoft**. Some of them are getting integrated into the core **Windows** product and some **Office** products._\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Kabir Khan - <strong>Microsoft</strong> <a href=\"https://github.com/tiangolo/fastapi/pull/26\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_We adopted the **FastAPI** library to spawn a **REST** server that can be queried to obtain **predictions**. [for Ludwig]_\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - <strong>Uber</strong> <a href=\"https://eng.uber.com/ludwig-v0-2/\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_**Netflix** is pleased to announce the open-source release of our **crisis management** orchestration framework: **Dispatch**! [built with **FastAPI**]_\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Kevin Glisson, Marc Vilanova, Forest Monsen - <strong>Netflix</strong> <a href=\"https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_I’m over the moon excited about **FastAPI**. It’s so fun!_\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Brian Okken - <strong><a href=\"https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855\" target=\"_blank\">Python Bytes</a> podcast host</strong> <a href=\"https://twitter.com/brianokken/status/1112220079972728832\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted **Hug** to be - it's really inspiring to see someone build that._\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Timothy Crosley - <strong><a href=\"https://www.hug.rest/\" target=\"_blank\">Hug</a> creator</strong> <a href=\"https://news.ycombinator.com/item?id=19455465\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_If you're looking to learn one **modern framework** for building REST APIs, check out **FastAPI** [...] It's fast, easy to use and easy to learn [...]_\"\n\n\"_We've switched over to **FastAPI** for our **APIs** [...] I think you'll like it [...]_\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Ines Montani - Matthew Honnibal - <strong><a href=\"https://explosion.ai\" target=\"_blank\">Explosion AI</a> founders - <a href=\"https://spacy.io\" target=\"_blank\">spaCy</a> creators</strong> <a href=\"https://twitter.com/_inesmontani/status/1144173225322143744\" target=\"_blank\"><small>(ref)</small></a> - <a href=\"https://twitter.com/honnibal/status/1144031421859655680\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_If anyone is looking to build a production Python API, I would highly recommend **FastAPI**. It is **beautifully designed**, **simple to use** and **highly scalable**, it has become a **key component** in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer._\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Deon Pillsbury - <strong>Cisco</strong> <a href=\"https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-activity-6963242628536487936-trAp/\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n## **Typer**, the FastAPI of CLIs\n\n<a href=\"https://typer.tiangolo.com\" target=\"_blank\"><img src=\"https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg\" style=\"width: 20%;\"></a>\n\nIf you are building a <abbr title=\"Command Line Interface\">CLI</abbr> app to be used in the terminal instead of a web API, check out <a href=\"https://typer.tiangolo.com/\" class=\"external-link\" target=\"_blank\">**Typer**</a>.\n\n**Typer** is FastAPI's little sibling. And it's intended to be the **FastAPI of CLIs**. ⌨️ \U0001F680\n\n## Requirements\n\nPython 3.7+\n\nFastAPI stands on the shoulders of giants:\n\n* <a href=\"https://www.starlette.io/\" class=\"external-link\" target=\"_blank\">Starlette</a> for the web parts.\n* <a href=\"https://pydantic-docs.helpmanual.io/\" class=\"external-link\" target=\"_blank\">Pydantic</a> for the data parts.\n\n## Installation\n\n<div class=\"termy\">\n\n```console\n$ pip install fastapi\n\n---> 100%\n```\n\n</div>\n\nYou will also need an ASGI server, for production such as <a href=\"https://www.uvicorn.org\" class=\"external-link\" target=\"_blank\">Uvicorn</a> or <a href=\"https://github.com/pgjones/hypercorn\" class=\"external-link\" target=\"_blank\">Hypercorn</a>.\n\n<div class=\"termy\">\n\n```console\n$ pip install \"uvicorn[standard]\"\n\n---> 100%\n```\n\n</div>\n\n## Example\n\n### Create it\n\n* Create a file `main.py` with:\n\n```Python\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n<details markdown=\"1\">\n<summary>Or use <code>async def</code>...</summary>\n\nIf your code uses `async` / `await`, use `async def`:\n\n```Python hl_lines=\"9  14\"\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n**Note**:\n\nIf you don't know, check the _\"In a hurry?\"_ section about <a href=\"https://fastapi.tiangolo.com/async/#in-a-hurry\" target=\"_blank\">`async` and `await` in the docs</a>.\n\n</details>\n\n### Run it\n\nRun the server with:\n\n<div class=\"termy\">\n\n```console\n$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n</div>\n\n<details markdown=\"1\">\n<summary>About the command <code>uvicorn main:app --reload</code>...</summary>\n\nThe command `uvicorn main:app` refers to:\n\n* `main`: the file `main.py` (the Python \"module\").\n* `app`: the object created inside of `main.py` with the line `app = FastAPI()`.\n* `--reload`: make the server restart after code changes. Only do this for development.\n\n</details>\n\n### Check it\n\nOpen your browser at <a href=\"http://127.0.0.1:8000/items/5?q=somequery\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/items/5?q=somequery</a>.\n\nYou will see the JSON response as:\n\n```JSON\n{\"item_id\": 5, \"q\": \"somequery\"}\n```\n\nYou already created an API that:\n\n* Receives HTTP requests in the _paths_ `/` and `/items/{item_id}`.\n* Both _paths_ take `GET` <em>operations</em> (also known as HTTP _methods_).\n* The _path_ `/items/{item_id}` has a _path parameter_ `item_id` that should be an `int`.\n* The _path_ `/items/{item_id}` has an optional `str` _query parameter_ `q`.\n\n### Interactive API docs\n\nNow go to <a href=\"http://127.0.0.1:8000/docs\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/docs</a>.\n\nYou will see the automatic interactive API documentation (provided by <a href=\"https://github.com/swagger-api/swagger-ui\" class=\"external-link\" target=\"_blank\">Swagger UI</a>):\n\n![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)\n\n### Alternative API docs\n\nAnd now, go to <a href=\"http://127.0.0.1:8000/redoc\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/redoc</a>.\n\nYou will see the alternative automatic documentation (provided by <a href=\"https://github.com/Rebilly/ReDoc\" class=\"external-link\" target=\"_blank\">ReDoc</a>):\n\n![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)\n\n## Example upgrade\n\nNow modify the file `main.py` to receive a body from a `PUT` request.\n\nDeclare the body using standard Python types, thanks to Pydantic.\n\n```Python hl_lines=\"4  9-12  25-27\"\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\nThe server should reload automatically (because you added `--reload` to the `uvicorn` command above).\n\n### Interactive API docs upgrade\n\nNow go to <a href=\"http://127.0.0.1:8000/docs\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/docs</a>.\n\n* The interactive API documentation will be automatically updated, including the new body:\n\n![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)\n\n* Click on the button \"Try it out\", it allows you to fill the parameters and directly interact with the API:\n\n![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)\n\n* Then click on the \"Execute\" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:\n\n![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)\n\n### Alternative API docs upgrade\n\nAnd now, go to <a href=\"http://127.0.0.1:8000/redoc\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/redoc</a>.\n\n* The alternative documentation will also reflect the new query parameter and body:\n\n![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)\n\n### Recap\n\nIn summary, you declare **once** the types of parameters, body, etc. as function parameters.\n\nYou do that with standard modern Python types.\n\nYou don't have to learn a new syntax, the methods or classes of a specific library, etc.\n\nJust standard **Python 3.7+**.\n\nFor example, for an `int`:\n\n```Python\nitem_id: int\n```\n\nor for a more complex `Item` model:\n\n```Python\nitem: Item\n```\n\n...and with that single declaration you get:\n\n* Editor support, including:\n    * Completion.\n    * Type checks.\n* Validation of data:\n    * Automatic and clear errors when the data is invalid.\n    * Validation even for deeply nested JSON objects.\n* <abbr title=\"also known as: serialization, parsing, marshalling\">Conversion</abbr> of input data: coming from the network to Python data and types. Reading from:\n    * JSON.\n    * Path parameters.\n    * Query parameters.\n    * Cookies.\n    * Headers.\n    * Forms.\n    * Files.\n* <abbr title=\"also known as: serialization, parsing, marshalling\">Conversion</abbr> of output data: converting from Python data and types to network data (as JSON):\n    * Convert Python types (`str`, `int`, `float`, `bool`, `list`, etc).\n    * `datetime` objects.\n    * `UUID` objects.\n    * Database models.\n    * ...and many more.\n* Automatic interactive API documentation, including 2 alternative user interfaces:\n    * Swagger UI.\n    * ReDoc.\n\n---\n\nComing back to the previous code example, **FastAPI** will:\n\n* Validate that there is an `item_id` in the path for `GET` and `PUT` requests.\n* Validate that the `item_id` is of type `int` for `GET` and `PUT` requests.\n    * If it is not, the client will see a useful, clear error.\n* Check if there is an optional query parameter named `q` (as in `http://127.0.0.1:8000/items/foo?q=somequery`) for `GET` requests.\n    * As the `q` parameter is declared with `= None`, it is optional.\n    * Without the `None` it would be required (as is the body in the case with `PUT`).\n* For `PUT` requests to `/items/{item_id}`, Read the body as JSON:\n    * Check that it has a required attribute `name` that should be a `str`.\n    * Check that it has a required attribute `price` that has to be a `float`.\n    * Check that it has an optional attribute `is_offer`, that should be a `bool`, if present.\n    * All this would also work for deeply nested JSON objects.\n* Convert from and to JSON automatically.\n* Document everything with OpenAPI, that can be used by:\n    * Interactive documentation systems.\n    * Automatic client code generation systems, for many languages.\n* Provide 2 interactive documentation web interfaces directly.\n\n---\n\nWe just scratched the surface, but you already get the idea of how it all works.\n\nTry changing the line with:\n\n```Python\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\n...from:\n\n```Python\n        ... \"item_name\": item.name ...\n```\n\n...to:\n\n```Python\n        ... \"item_price\": item.price ...\n```\n\n...and see how your editor will auto-complete the attributes and know their types:\n\n![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)\n\nFor a more complete example including more features, see the <a href=\"https://fastapi.tiangolo.com/tutorial/\">Tutorial - User Guide</a>.\n\n**Spoiler alert**: the tutorial - user guide includes:\n\n* Declaration of **parameters** from other different places as: **headers**, **cookies**, **form fields** and **files**.\n* How to set **validation constraints** as `maximum_length` or `regex`.\n* A very powerful and easy to use **<abbr title=\"also known as components, resources, providers, services, injectables\">Dependency Injection</abbr>** system.\n* Security and authentication, including support for **OAuth2** with **JWT tokens** and **HTTP Basic** auth.\n* More advanced (but equally easy) techniques for declaring **deeply nested JSON models** (thanks to Pydantic).\n* **GraphQL** integration with <a href=\"https://strawberry.rocks\" class=\"external-link\" target=\"_blank\">Strawberry</a> and other libraries.\n* Many extra features (thanks to Starlette) as:\n    * **WebSockets**\n    * extremely easy tests based on HTTPX and `pytest`\n    * **CORS**\n    * **Cookie Sessions**\n    * ...and more.\n\n## Performance\n\nIndependent TechEmpower benchmarks show **FastAPI** applications running under Uvicorn as <a href=\"https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7\" class=\"external-link\" target=\"_blank\">one of the fastest Python frameworks available</a>, only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)\n\nTo understand more about it, see the section <a href=\"https://fastapi.tiangolo.com/benchmarks/\" class=\"internal-link\" target=\"_blank\">Benchmarks</a>.\n\n## Optional Dependencies\n\nUsed by Pydantic:\n\n* <a href=\"https://github.com/JoshData/python-email-validator\" target=\"_blank\"><code>email_validator</code></a> - for email validation.\n* <a href=\"https://docs.pydantic.dev/latest/usage/pydantic_settings/\" target=\"_blank\"><code>pydantic-settings</code></a> - for settings management.\n* <a href=\"https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/\" target=\"_blank\"><code>pydantic-extra-types</code></a> - for extra types to be used with Pydantic.\n\nUsed by Starlette:\n\n* <a href=\"https://www.python-httpx.org\" target=\"_blank\"><code>httpx</code></a> - Required if you want to use the `TestClient`.\n* <a href=\"https://jinja.palletsprojects.com\" target=\"_blank\"><code>jinja2</code></a> - Required if you want to use the default template configuration.\n* <a href=\"https://andrew-d.github.io/python-multipart/\" target=\"_blank\"><code>python-multipart</code></a> - Required if you want to support form <abbr title=\"converting the string that comes from an HTTP request into Python data\">\"parsing\"</abbr>, with `request.form()`.\n* <a href=\"https://pythonhosted.org/itsdangerous/\" target=\"_blank\"><code>itsdangerous</code></a> - Required for `SessionMiddleware` support.\n* <a href=\"https://pyyaml.org/wiki/PyYAMLDocumentation\" target=\"_blank\"><code>pyyaml</code></a> - Required for Starlette's `SchemaGenerator` support (you probably don't need it with FastAPI).\n* <a href=\"https://github.com/esnme/ultrajson\" target=\"_blank\"><code>ujson</code></a> - Required if you want to use `UJSONResponse`.\n\nUsed by FastAPI / Starlette:\n\n* <a href=\"https://www.uvicorn.org\" target=\"_blank\"><code>uvicorn</code></a> - for the server that loads and serves your application.\n* <a href=\"https://github.com/ijl/orjson\" target=\"_blank\"><code>orjson</code></a> - Required if you want to use `ORJSONResponse`.\n\nYou can install all of these with `pip install \"fastapi[all]\"`.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n"
ReDoc-ly/create-openapi-repo: "# create-openapi-repo\n\n[![NPM version][npm-image]][npm-url] [![Dependency Status][daviddm-image]][daviddm-url]\n\n> Generate an organized multi-file OpenAPI repository.\n\n<center>\n\n<img src=\"./logo.png\" width=\"500px\"/>\n\n</center>\n\n## Who?\nYou! Hello.  Do you need to write or contribute to an OpenAPI definition?  If so, read on...\n\n## What?\nWe recommend a docs-like-code approach to OpenAPI definitions:\n- Write it using your favorite text-editor or IDE (we love VSCode).\n- Organize it into multiple files and folders to make it easy to navigate.\n- Store it using source control (such as GitHub).\n- Continuously validate it using our free [openapi-cli tool](https://github.com/redocly/openapi-cli) or our free continuous validation service (coming soon).\n- Bundle it (for a smaller footprint to use in other tools or for tools that do not support a multi-file format).\n\n## Why?\nThere are a few advantages in hosting your API definition on GitHub:\n - Community engagement (PR's and issues -- if you have a public repo)\n - Advertisment in the GitHub community\n - Hosting on GitHub pages (perfect uptime, CDN, Jekyll, custom domains with CNAME)\n - Revision history, branching, CI\n - Review and approval workflows using Pull Requests\n - Fast on-boarding time (developers and tech writers know how to use GitHub :smile:)\n - Fully compatible with Redocly API Reference too\n\n There are also some advantages to a multi-file YAML format OpenAPI definition:\n - Reuse schema objects to keep things DRY (don't repeat yourself) \n - Smaller diffs compared to JSON (especially for markdown descriptions)\n - Easier to navigate\n - Easier to edit with confidence\n\n## Features\nThis generator helps to create a GitHub repo with the following features:\n - Split a big (or small) OpenAPI definition into smaller files organized into folders\n - Bundle it into a single file for deployment\n - Continuous integration/deployment on Travis or Redocly Workflows\n - Code samples as separate files\n - Automate deployment of your OpenAPI definition and docs\n - OpenAPI definition is validated after each commit\n - Live editing in your editor of choice :heart_eyes:\n\n## Structure\n\nYou will have a structure similar to this:\n```\n    ├── .redocly.yaml\n    ├── LICENSE\n    ├── README.md\n    ├── docs\n    │\_\_ ├── favicon.png\n    │\_\_ └── index.html\n    ├── openapi\n    │\_\_ ├── README.md\n    │\_\_ ├── code_samples\n    │\_\_ │\_\_ ├── C#\n    │\_\_ │\_\_ │\_\_ └── echo\n    │\_\_ │\_\_ │\_\_     └── post.cs\n    │\_\_ │\_\_ ├── PHP\n    │\_\_ │\_\_ │\_\_ └── echo\n    │\_\_ │\_\_ │\_\_     └── post.php\n    │\_\_ │\_\_ └── README.md\n    │\_\_ ├── components\n    │\_\_ │\_\_ └── README.md\n    │\_\_ └── paths\n    │\_\_     └── README.md\n    └── package.json\n```\n\nHowever, you can adjust it to any structure you prefer.\n\nThe `openapi` folder is where your OpenAPI definition will live.  Inside there, and the sub-folders, there are `README.md` files to help guide you further. This is also where your entrypoint `openapi.yaml` will live.\n\nThe `components` folder is where you will organize sub-folders such as `schema` to define your schema.\n\nThe `paths` folder is where you will organize your paths. There will be a 'README.md' file in there with suggestions for how to organize it into specially named files (or folders) that use an `@` in place of a `/` (because files cannot have a `/` character in them).  You will also be able to use path parameters by wrapping them in curly braces `{example}`.\n\nThe `.redocly.yaml` file is a universal configuration for various Redocly tools including the lint tool and reference doc engine.\n\n## Commands\n\nThe generated repository includes installing a dependency for our `openapi-cli` tool which supports commands such as `validate`, `bundle`, and more.  There are scripted shortcuts defined in the repository's `package.json`.  \n\n\n## Examples of generated repositories\n- https://github.com/Rebilly/RebillyAPI\n- https://github.com/thingful/openapi-spec\n- https://github.com/TwineHealth/TwineDeveloperDocs\n\n## How to generate your repository\n\nWe assume you already have [node.js](https://nodejs.org/) installed.\n\n- Install `create-openapi-repo` globally:\n```bash\nnpm install -g create-openapi-repo\n```\nor use [`npx`](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b):\n\nWe'll use `npx` in this example.  However, remove `npx` if you installed it globally.\n\n```bash\nnpx create-openapi-repo\n```\n\nYou will be presented with some questions. You can create a new definition or use an existing definition to initialize your project.\n\nPlease note, if you do start a new one, remember to [create a GitHub repo](https://help.github.com/articles/create-a-repo/#create-a-new-repository-on-github) where your OpenAPI definition will live.\n\nIf you use the prior version of this generated repository, please read the following upgrade instructions.\n\n#### Upgrading from a prior version\n\nMigrate your repository from a previous structure of OpenAPI repo to this newer structure with our migration tool. \n\nRun this in the root folder of your repo.\n\n```bash\nnpx create-openapi-repo --migrate-2-3\n```\n\nNote: the migration tool does not migrate plugins automatically. You would need to manually add them to the `transformers` folder. \n\n## Support\n\nThank you for wanting to support us. Here are some ideas how to support us:\n\n* Star us\n* Tell a friend or colleague about us (or Tweet about us)\n* Write an article about it (and let us know) -- open an issue to let us know, with the link.\n* Consider our commercial products if are looking for automation to ease the docs-like code workflow, hosting along with conveniences like custom domains, access controls and previews, API reference documentation, or a full developer portal:  https://redoc.ly\n\n[npm-image]: https://badge.fury.io/js/generator-openapi-repo.svg\n[npm-url]: https://npmjs.org/package/generator-openapi-repo\n[daviddm-image]: https://david-dm.org/Rebilly/generator-openapi-repo.svg?theme=shields.io\n[daviddm-url]: https://david-dm.org/Rebilly/generator-openapi-repo\n"
postmanlabs/openapi-to-postman: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B7F:9660:9CA59D:13E825D:6500FB68.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
hh-h/aiohttp-swagger3: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6E:1B72:767D1D:F20DB9:6500FB42.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
dolmen-go/openapi-preprocessor: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2716:25FA:732499:EB62E9:6500FB2D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
matthewtrask/disapi: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B64:33D2:1DECC2:3D79C1:6500FB53.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
APIs-guru/openapi-directory: "\n\n\n![banner]\n\n[![APIs in collection][numApis-image]][apisDir-link]\n[![OpenAPI definitions][numSpecs-image]][apisDir-link]\n[![Endpoints][endpoints-image]][apisDir-link]\n[![Fixes][fixes-image]][apisDir-link]\n[![Providers][providers-image]][apisDir-link]\n[![Drivers][drivers-image]][apisDir-link]\n\n![oad Actions](https://api.meercode.io/badge/Mermade/oad?type=ci-count&token=y7EdP0Hxb6q8PoG3h2JEmDVQDatZmttj&lastDay=7)\n[![Chat on Slack][slack-image]][slack-link]\n\n[![Share on Twitter][twitter-image]][twitter-link]\n[![Follow on Twitter][twitterFollow-image]][twitterFollow-link]\n<a href=\"#backers\" alt=\"sponsors on Open Collective\"><img src=\"https://opencollective.com/openapi-directory/backers/badge.svg\" /></a> <a href=\"#sponsors\" alt=\"Sponsors on Open Collective\"><img src=\"https://opencollective.com/openapi-directory/sponsors/badge.svg\" /></a> <a href=\"#partners\" alt=\"Partners on Open Collective\"><img src=\"https://opencollective.com/openapi-directory/partner/badge.svg\" /></a>\n\nDirectory of API definitions in [OpenAPI(fka Swagger)](https://openapis.org) [2.0](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md) and [3.x](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md) formats.<BR>\nAPI access to collection: [Go!][apiDoc-link] - We also have RSS feeds for [added](https://api.apis.guru/v2/added.rss) and [updated](http://api.apis.guru/v2/list.rss) APIs.\n\n[![Add API][addAPI-image]][addAPI-link]\n\nOur goal is to create the most comprehensive, standards-compliant and up-to-date directory of machine-readable API definitions, with the following principles:\n- Open source, community driven project.\n- Only publicly available APIs (free or paid).\n- Anyone can add or change an API, not only API owners.\n- All data can be accessed through a [REST API][apiDoc-link].\n\nIf you want to reference this project and you need an icon or even a banner, check our [branding guide](https://github.com/APIs-guru/branding). If you love our logo, we have a [RedBubble store](https://www.redbubble.com/shop/ap/79074109) where you can buy official stickers, t-shirts, mugs etc.\n\nThe project was started by [Ivan Goncharov](https://github.com/IvanGoncharov) of APIs.guru, it is now maintained by [Mike Ralphson](https://github.com/MikeRalphson) of [Mermade Software](https://github.com/mermade). Check out our other [OpenAPI-related projects](https://github.com/search?q=org%3AMermade+openapi).\n\nAPIs.guru provide services and consultancy around the GraphQL and OpenAPI specifications and APIs in general.\nYou can contact us at founders@apis.guru / mike.ralphson@gmail.com\n\n[![Become a backer](https://opencollective.com/openapi-directory/tiers/backer.svg?avatarHeight=36&width=600)](https://opencollective.com/openapi-directory)\n\nWhat does APIs.guru do?\n--------------------------\n* Filter out private and non-reliable APIs\n* [Convert](https://github.com/Mermade/oas-kit) non-OpenAPI formats into OpenAPI 3.x\n* Fix mistakes, ~80% of definitions have some\n* Add additional data, like: logo, categories, …\n* Update definitions on at least a weekly basis\n\nAPI definition acceptance criteria\n----------------------------------\n* Public - anyone can access it as long as they follow some clearly defined steps (subscribe, pay fees, etc.).\n* Persistent - API is made with long-lived goal, and not for a particular event (conference, hackathon, etc.).\n* Useful - API should provide useful functionality not only for its owner.\n\nUpdate procedure\n--------------------------\nAll definitions are automatically updated from their original source.\nYou can see this in the `x-origin` property within each [openapi.yaml](https://github.com/APIs-guru/openapi-directory/search?utf8=%E2%9C%93&q=x-origin+filename%3Aopenapi.yaml) or [swagger.yaml](https://github.com/APIs-guru/openapi-directory/search?utf8=%E2%9C%93&q=x-origin+filename%3Aswagger.yaml) file.\nWe run our update script at least weekly and automatically revalidate before committing.\nIf you see some APIs are not updated for more than 2 weeks please open [an issue](https://github.com/APIs-guru/openapi-directory/issues/new).\n\n[@seriousme](https://github.com/seriousme) kindly runs a backup validation process based on the official OpenAPI-Specification [JSON Schemas](https://github.com/OAI/OpenAPI-Specification/tree/main/schemas) [here](https://github.com/seriousme/openapi-schema-validator/blob/master/test/realworld/failed.md#results-of-real-world-testing).\n\nOwn-Label API Directory\n-----------------------\n\n![Own-Label logo](branding/own-label.png)\n\n**Do you want an 'own-label' or internal version of the OpenAPI Directory to create your own marketplace or keep track and document both your internal APIs and the external API definitions your organisation depends on? If so contact us now!**\n\nExisting integrations\n--------------------------\n\n[![Become a partner](https://opencollective.com/openapi-directory/tiers/partner.svg?avatarHeight=36&width=600)](https://opencollective.com/openapi-directory)\n\n - [HTTP Toolkit](https://httptoolkit.tech/) **Beautiful & open-source tools to debug, test and develop with HTTP(S)**\n - [OpenAPI-Directory-JS](https://github.com/httptoolkit/openapi-directory-js) - The OpenAPI directory precompiled & indexed for JS usage & searching\n - [Apideck](https://apideck.com) - Faster data integration through Unified APIs\n - [Microsoft Kiota](https://microsoft.github.io/kiota/) - Generate an API client to call any OpenAPI described API\n - [API Tracker](https://apitracker.io/) - Aggregates 14,000+ APIs, SDKs, API specifications, integrations and DX profiles. It aims to help developers access the information they need to integrate APIs faster\n - [API Watch](https://www.apiwatch.io) - Keep track of the APIs you use\n - https://pipedream.com/ - The integration platform built for developers\n - https://any-api.com - Documentation and Test Consoles for Public APIs\n - https://datafire.io - Allows you to process and transfer data between APIs, databases, and more\n - [https://sdks.io](https://sdks.io/Search/FindSDKs?Bridge=APIs.guru) - Explore Automatically Generated SDKs\n - [https://cenit.io](https://cenit.io/directory?spec=swagger) - Data integration platform\n - [commandcar](https://github.com/tikalk/commandcar#installing-from-api-models) - Curl on steroids\n - [Material Swagger UI Hub](https://darosh.github.io/angular-swagger-ui-material/hub/) - testing and exploring hub for Material Swagger UI demo\n - [Paw](https://paw.cloud/) - HTTP client for Mac - You can import definitions and directly play with the APIs, [see how](https://paw.cloud/docs/examples/search-apis)\n - [Bitscoop](https://bitscoop.com/) - A better way to create and maintain integrations\n - [WinSwag](https://github.com/SvenEV/WinSwag) - A UWP app for loading Swagger definitions and exploring REST APIs\n - [ReadMe.io](https://preview.readme.io) - Beautiful, personalized, interactive developer hubs\n - [Velosimo](https://connect.velosimo.io/open_api_directory) - Integration platform for eGovernment\n - [Mockcoon](https://mockoon.com/mock-samples/category/all/) - API mock samples for your project\n\nAlso used as test suite in the following projects:\n - [Speakeasy](https://speakeasyapi.dev) - **Generate SDKs Now. Gives your users the DevEx that makes API integrations easy**\n - [ReDoc](https://github.com/Redocly/redoc) - OpenAPI-generated API Reference Documentation\n - [swagger-parser](https://github.com/BigstickCarpet/swagger-parser) - OpenAPI parser and validator for Node and browsers\n - [OpenAPI-schema-validator](https://github.com/seriousme/openapi-schema-validator) - OpenApi schema validation for OpenApi versions v2, v3.0.x and v3.1.x\n - [SwaggerProvider](https://github.com/sergey-tihon/SwaggerProvider) - F# Type Provider for Swagger\n - [ardoq-swagger-addon](https://github.com/ardoq/ardoq-swagger-addon) - Ardoq OpenAPI addon\n - [swagvali](https://github.com/subeeshcbabu/swagvali/) - Module to build validators for OpenAPI Request parameters and Response objects\n - [swagger-search](https://github.com/IG-Group/swagger-search) - An application that collects and indexes swagger docs from your microservices architecture\n\n\nIntegration with 3rd-party services\n--------------------------\nWe discourage you from using Github RAW links or Git directly, the repository structure may change in the future.\nInstead, we strongly recommend you to use our [REST API][apiDoc-link].\n\nLicenses\n--------------------------\nAll API definitions contributed to project by authors are covered by the [CC01.0](https://creativecommons.org/publicdomain/zero/1.0/) license.<br>\nAll API definitions acquired from public sources under the [Fair use](http://en.wikipedia.org/wiki/Fair_use) principle.\n\nDefinition sources\n--------------------------\nSome definitions are taken from Open Source projects:\n - [darklynx/swagger-api-collection](https://github.com/darklynx/swagger-api-collection) - OpenAPI description for Instagram API\n - [Mermade/bbcapis](https://github.com/Mermade/bbcapis) - OpenAPI definitions for the BBC Nitro and iBL APIs\n - [amardeshbd/medium-api-specification](https://github.com/amardeshbd/medium-api-specification) - OpenAPI 2.0 description for Medium API\n - [faragorn/open-api-specs](https://github.com/faragorn/open-api-specs) - OpenAPI definition for the Giphy API\n\n[banner]: https://apis.guru/branding/banner.svg \"APIs.guru\"\n[twitter-image]: https://img.shields.io/twitter/url/http/APIs.guru.svg?style=social\n[twitter-link]: https://twitter.com/intent/tweet?text=http%3A%2F%2FAPIs.guru%20-%20Wikipedia%20for%20%23Web%20%23APIs%20by%20@APIs_guru%20pic.twitter.com/UhlhbMw1NP\n[twitterFollow-image]: https://img.shields.io/twitter/follow/APIs_guru.svg?style=social\n[twitterFollow-link]: https://twitter.com/intent/follow?screen_name=APIs_guru\n[slack-image]: https://img.shields.io/badge/Slack-APIs_Working_Group-brightgreen\n[slack-link]: https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA\n[numApis-image]: https://api.apis.guru/badges/apis_in_collection.svg\n[numSpecs-image]: https://api.apis.guru/badges/openapi_specs.svg\n[endpoints-image]: https://api.apis.guru/badges/endpoints.svg\n[fixes-image]: https://api.apis.guru/badges/fixes.svg\n[providers-image]: https://api.apis.guru/badges/providers.svg\n[drivers-image]: https://api.apis.guru/badges/drivers.svg\n[apisDir-link]: ./APIs\n[addAPI-image]: https://cloud.githubusercontent.com/assets/8336157/15861614/7e31511a-2cd5-11e6-8b79-38ad0f61e598.png\n[addAPI-link]: https://apis.guru/add-api/\n[apiDoc-link]: https://apis.guru/api-doc/\n\n## Contributors\n\nThis project exists thanks to all the people who [contribute](CONTRIBUTING.md).\n<a href=\"https://github.com/APIs-guru/openapi-directory/graphs/contributors\"><img src=\"https://opencollective.com/openapi-directory/contributors.svg?width=890&button=false\" /></a>\n\n## Asynchronous APIs\n\nSee also [AsyncAPI-Directory](https://apis.guru/asyncapi-directory/APIs/)\n\n## Backers\n\nThank you to all our backers! \U0001F64F [Become a backer](https://opencollective.com/openapi-directory#backer).\n\n<a href=\"https://opencollective.com/openapi-directory#backers\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/backers.svg?width=890\"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor](https://opencollective.com/openapi-directory#sponsor).\n\n<a href=\"https://opencollective.com/openapi-directory/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/9/avatar.svg\"></a>\n\n## Partners\n\nSupport this project by becoming a partner. Your logo will be displayed prominently in this project and we will work with you to publicise and showcase your projects. [Become a partner](https://opencollective.com/openapi-directory#partner).\n"
apiaryio/dredd-transactions: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2701:9FA6:7785E2:F40605:6500FB16.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
mrin9/RapiDoc: >+
  <img alt="MrinDoc logo"
  src="https://github.com/rapi-doc/RapiDoc/blob/master/logo.png" width="60px" />



  <p align="center">
      <img src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square"/>
      <img src="https://img.shields.io/github/size/rapi-doc/rapidoc/dist/rapidoc-min.js.svg?colorB=blue&label=minified&style=flat-square">
      <img src="https://img.shields.io/github/size/rapi-doc/rapidoc/dist/rapidoc-min.js.gz.svg?colorB=blue&label=zip&style=flat-square">
      <a href="https://discord.gg/X9evUeFY" alt="Join us on Discord">
          <img src="https://img.shields.io/discord/848913990360629268?style=flat-square" />
      </a>
      <a href="https://www.webcomponents.org/element/rapidoc" alt="published on webcomponents.org">
          <img src="https://img.shields.io/badge/webcomponents.org-rapidoc-blue.svg?style=social"/>
      </a>
  </p>        


  # RapiDoc

  Custom Element for Open-API spec viewing


  Join the [RapiDoc community on Discord](https://discord.gg/X9evUeFY)


  Sponsored by [Zuplo](https://zuplo.link/rapidoc-2) - Get a Stripe-like API
  experience for your customers in minutes - documentation, rate-limiting and
  API-key auth in minutes. 


  ## Features

  - Supports Swagger 2.0, OpenAPI 3.x.x 

  - Works with any framework or with no framework

  - Allows making API calls

  - Better Usability, 
    - all Models and Examples are expanded by default, eliminates the need to click and reveal.
    - Request fields are pre-populated with sample data
    - Takes only one click to make an API call
    - Request and response can be placed side-by-side for easy comparison
  - Branding and Personalization features makes it easy to follow any style
  guide
    - Comes with 2 Themes (Dark and Light)
    - Replace default logo with yours
    - Typography, allows changing fonts
    - Allows changing text-color, button-color, header-color and color of other UI elements
  - Plenty of customization options 
    - Add external contents at the top and bottom of the document,  you may add images, link, text, forms etc
    - Allows disabling API calling feature
    - Hide the header, so the user can't load any other OpenAPI Spec
    - Hide Authentication and provide your own pre-generated api-key 
    - Embed it inside another HTML document
    - Use it inside another framework (react, vue, angular, lit-element)
    - Use JavaScript to change its attributes, and it will react to those changes
    - Style the element with standard css (change padding, position, border, margin )
  - Lightweight and fast

  - Load local json spec from the disk

  - Supported on Chrome, FireFox and Safari. (Not yet tested on Edge)



  ## Documentation

  [Check out the usage and demos](https://rapi-doc.github.io/RapiDoc/)


  ## Examples

  [Examples and Test cases](https://rapi-doc.github.io/RapiDoc/list.html)



  ## Build Process

  ```bash

  # Clone / Download the project then

  npm install


  # build will generate rapidoc-min.js, this is the only file you will need.

  # use it in the script tag of your html <script type="text/javascript"
  src="rapidoc-min.js"></script></body>

  npm run build 


  # for developement use yarn serve (this will start an webserver at port 8080,
  then navigate to localhost:8080) 

  npm run serve

  ```


  ## Roadmap

  - ✅ Upgrade to use `lit 2`

  - Pre Rendering / Server Side Rendering (SSR) of RapiDoc

  - Improve PDF generation of OpenAPI spec Using RapiPDF

  - Create a Command Line interface (CLI) to make it automation friendly

  - Add localization support

  - Follow Web Content Accessibility Guidelines (WCAG 2)

  - Improve Homepage, Documentation and Examples

  - Create groundwork for automated testing

  - Create a live playground (Something like swagger editor)

  - Create a short animation/video to show how RapiDoc/RapiPDF works

swagger-api/swagger-js: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0ABE:93AA:A67184:151FB92:6500FB8B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
swagger-api/validator-badge: >
  # Swagger Validator Badge <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  [![Build
  Status](https://img.shields.io/jenkins/build.svg?jobUrl=https://jenkins.swagger.io/job/oss-swagger-validator-badge-master)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-validator-badge-master)


  This project shows a "valid swagger" badge on your site, supporting
  Swagger/OpenAPI 2.0 and OpenAPI 3.x specifications.  


  There is an online version hosted on http://validator.swagger.io.  


  ### Using Docker


  You can also pull a docker image of the validator directly from
  [DockerHub](https://hub.docker.com/r/swaggerapi/swagger-validator-v2/), e.g.:


  ```

  docker pull swaggerapi/swagger-validator-v2:v2.1.0

  docker run -it -p 8080:8080 --name swagger-validator-v2
  swaggerapi/swagger-validator-v2:v2.1.0

  ```


  Since version `2.0.2` local and non http/https urls are rejected by default,
  along with redirects; this is controllable with docker env variables / java
  system properties:


  ```

  docker run -it -p 8080:8080 -e "REJECT_LOCAL=false" -e "REJECT_REDIRECT=false"
  --name swagger-validator-v2 swaggerapi/swagger-validator-v2:v2.1.0

  ```


  In non docker environments, system properties `rejectLocal` and
  `rejectRedirect` can be used.




  Web UI is reachable at http://localhost:8080/index.html and OpenAPI spec at
  http://localhost:8080/validator/openapi.json




  You can validate OpenAPI specifications version 2.0 (Swagger), 3.0 and 3.1.
  [Swagger
  Parser](https://github.com/swagger-api/swagger-parser/blob/master/README.md)
  is used for semantic validation.

  Depending on `jsonSchemaValidation` query parameter value also JSON Schema
  validation can be executed (default to `true`) 


  Additional parameters allow to customize parsing and validation mode.


  ```

  <img src="https://validator.swagger.io/validator?url={YOUR_URL}">

  ```


  Of course the `YOUR_URL` needs to be addressable by the validator (i.e. won't
  find anything on localhost).  If it validates, you'll get a nice green VALID
  logo.  Failures will give an INVALID logo, and if there are errors parsing the
  specification or reaching it, an ugly red ERROR logo.


  For example, using
  [https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/json/petstore-expanded.json](https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/json/petstore-expanded.json)
  as a source, we get ...


  ![](https://validator.swagger.io/validator?url=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/json/petstore-expanded.json)


  If your specification fails to validate for some reason, or if there is an
  error, you can get more information on why by visiting
  ```https://validator.swagger.io/validator/debug?url={YOUR_URL}```.


  Since the validator uses a browserless back-end to fetch the contents and
  schema, it's not subject to the terrible world of CORS.


  ### Using cURL


  You can also post a spec up to the service with cURL:


  ```bash

  curl -X POST -d @swagger.json -H 'Content-Type:application/json'
  https://validator.swagger.io/validator/debug

  ```


  In this example, `swagger.json` is the swagger definition in JSON format, in
  the CWD.


  If your swagger definition file is in YAML format, the command needs to be
  adapted like so:


  ```bash

  curl --data-binary @swagger.yaml -H 'Content-Type:application/yaml'
  https://validator.swagger.io/validator/debug

  ```


  Note the use of `--data-binary` to avoid stripping newlines, along with a
  different `Content-Type` header.


  ### Note


  All of the above is also applicable to OpenAPI 3.x specifications; for
  example, using
  [https://petstore3.swagger.io/api/v3/openapi.json](https://petstore3.swagger.io/api/v3/openapi.json)
  as a source, we get ...


  ![](https://validator.swagger.io/validator?url=https://petstore3.swagger.io/api/v3/openapi.json)


  Since version 2.1.0 a `/parseByUrl` and `/parseByContent` are available,
  returning a serialized parsed specification, with parsing and result
  configurable by

  parameters, e.g. passing `resolve`, etc. See [Swagger
  Parser](https://github.com/swagger-api/swagger-parser/blob/master/README.md#options).


  ### Running locally


  You can build and run the validator locally:


  ```bash

  mvn package jetty:run

  ```


  And access the validator like such:


  ```

  http://localhost:8080/validator?url={URL}

  ```


  or


  ```

  http://localhost:8080/validator?url=http://petstore.swagger.io/v2/swagger.json

  ```

  ```

  http://localhost:8080/validator?url=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml

  ```


  ## Security contact


  Please disclose any security-related issues or vulnerabilities by emailing
  [security@swagger.io](mailto:security@swagger.io), instead of using the public
  issue tracker.
tiangolo/uvicorn-gunicorn-fastapi-docker: "[![Test](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/workflows/Test/badge.svg)](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/actions?query=workflow%3ATest) [![Deploy](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/workflows/Deploy/badge.svg)](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/actions?query=workflow%3ADeploy)\n\n## Supported tags and respective `Dockerfile` links\n\n* [`python3.11`, `latest` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.11.dockerfile)\n* [`python3.10`, _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.10.dockerfile)\n* [`python3.9`, _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.9.dockerfile)\n* [`python3.8`, _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.8.dockerfile)\n* [`python3.7`, _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.7.dockerfile)\n* [`python3.11-slim` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.11-slim.dockerfile)\n* [`python3.10-slim` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.10-slim.dockerfile)\n* [`python3.9-slim` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.9-slim.dockerfile)\n* [`python3.8-slim` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.8-slim.dockerfile)\n\n## Discouraged tags\n\n* [`python3.9-alpine3.14` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.9-alpine3.14.dockerfile)\n* [`python3.8-alpine3.10` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.8-alpine3.10.dockerfile)\n* [`python3.7-alpine3.8` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.7-alpine3.8.dockerfile)\n\nTo learn more about why Alpine images are discouraged for Python read the note at the end: [\U0001F6A8 Alpine Python Warning](#-alpine-python-warning).\n\n## Deprecated tags\n\n\U0001F6A8 These tags are no longer supported or maintained, they are removed from the GitHub repository, but the last version pushed is still available in Docker Hub.\n\n* `python3.6`\n* `python3.6-alpine3.8`\n\nThe last versions with date tags for Python 3.6 are:\n\n* `python3.6-2022-11-25`\n* `python3.6-alpine3.8-2022-11-25`\n\n---\n\n**Note**: There are [tags for each build date](https://hub.docker.com/r/tiangolo/uvicorn-gunicorn-fastapi/tags). If you need to \"pin\" the Docker image version you use, you can select one of those tags. E.g. `tiangolo/uvicorn-gunicorn-fastapi:python3.7-2019-10-15`.\n\n# uvicorn-gunicorn-fastapi\n\n[**Docker**](https://www.docker.com/) image with [**Uvicorn**](https://www.uvicorn.org/) managed by [**Gunicorn**](https://gunicorn.org/) for high-performance [**FastAPI**](https://fastapi.tiangolo.com/) web applications in **[Python](https://www.python.org/)** with performance auto-tuning. Optionally in a slim version or based on Alpine Linux.\n\n**GitHub repo**: [https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker)\n\n**Docker Hub image**: [https://hub.docker.com/r/tiangolo/uvicorn-gunicorn-fastapi/](https://hub.docker.com/r/tiangolo/uvicorn-gunicorn-fastapi/)\n\n## Description\n\n**FastAPI** has shown to be a Python web framework with [one of the best performances, as measured by third-party benchmarks](https://www.techempower.com/benchmarks/#section=test&runid=a979de55-980d-4721-a46f-77298b3f3923&hw=ph&test=fortune&l=zijzen-7), thanks to being based on and powered by [**Starlette**](https://www.starlette.io/).\n\nThe achievable performance is on par with (and in many cases superior to) **Go** and **Node.js** frameworks.\n\nThis image has an **auto-tuning** mechanism included to start a number of worker processes based on the available CPU cores. That way you can just add your code and get **high performance** automatically, which is useful in **simple deployments**.\n\n## \U0001F6A8 WARNING: You Probably Don't Need this Docker Image\n\nYou are probably using **Kubernetes** or similar tools. In that case, you probably **don't need this image** (or any other **similar base image**). You are probably better off **building a Docker image from scratch** as explained in the docs for [FastAPI in Containers - Docker: Build a Docker Image for FastAPI](https://fastapi.tiangolo.com/deployment/docker/#replication-number-of-processes).\n\n---\n\nIf you have a cluster of machines with **Kubernetes**, Docker Swarm Mode, Nomad, or other similar complex system to manage distributed containers on multiple machines, then you will probably want to **handle replication** at the **cluster level** instead of using a **process manager** (like Gunicorn with Uvicorn workers) in each container, which is what this Docker image does.\n\nIn those cases (e.g. using Kubernetes) you would probably want to build a **Docker image from scratch**, installing your dependencies, and running **a single Uvicorn process** instead of this image.\n\nFor example, your `Dockerfile` could look like:\n\n```Dockerfile\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\nYou can read more about this in the [FastAPI documentation about: FastAPI in Containers - Docker](https://fastapi.tiangolo.com/deployment/docker/#replication-number-of-processes).\n\n## When to Use this Docker Image\n\n### A Simple App\n\nYou could want a process manager like Gunicorn running Uvicorn workers in the container if your application is **simple enough** that you don't need (at least not yet) to fine-tune the number of processes too much, and you can just use an automated default, and you are running it on a **single server**, not a cluster.\n\n### Docker Compose\n\nYou could be deploying to a **single server** (not a cluster) with **Docker Compose**, so you wouldn't have an easy way to manage replication of containers (with Docker Compose) while preserving the shared network and **load balancing**.\n\nThen you could want to have **a single container** with a Gunicorn **process manager** starting **several Uvicorn worker processes** inside, as this Docker image does.\n\n### Prometheus and Other Reasons\n\nYou could also have **other reasons** that would make it easier to have a **single container** with **multiple processes** instead of having **multiple containers** with **a single process** in each of them.\n\nFor example (depending on your setup) you could have some tool like a Prometheus exporter in the same container that should have access to **each of the requests** that come.\n\nIn this case, if you had **multiple containers**, by default, when Prometheus came to **read the metrics**, it would get the ones for **a single container each time** (for the container that handled that particular request), instead of getting the **accumulated metrics** for all the replicated containers.\n\nThen, in that case, it could be simpler to have **one container** with **multiple processes**, and a local tool (e.g. a Prometheus exporter) on the same container collecting Prometheus metrics for all the internal processes and exposing those metrics on that single container.\n\n---\n\nRead more about it all in the [FastAPI documentation about: FastAPI in Containers - Docker](https://fastapi.tiangolo.com/deployment/docker/).\n\n## Technical Details\n\n### Uvicorn\n\n**Uvicorn** is a lightning-fast \"ASGI\" server.\n\nIt runs asynchronous Python web code in a single process.\n\n### Gunicorn\n\nYou can use **Gunicorn** to start and manage multiple Uvicorn worker processes.\n\nThat way, you get the best of concurrency and parallelism in simple deployments.\n\n### FastAPI\n\nFastAPI is a modern, fast (high-performance), web framework for building APIs with Python.\n\nThe key features are:\n\n* **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic).\n* **Fast to code**: Increase the speed to develop features by about 200% to 300% *.\n* **Less bugs**: Reduce about 40% of human (developer) induced errors. *\n* **Intuitive**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging.\n* **Easy**: Designed to be easy to use and learn. Less time reading docs.\n* **Short**: Minimize code duplication. Multiple features from each parameter declaration. Less bugs.\n* **Robust**: Get production-ready code. With automatic interactive documentation.\n* **Standards-based**: Based on (and fully compatible with) the open standards for APIs: <a href=\"https://github.com/OAI/OpenAPI-Specification\" target=\"_blank\">OpenAPI</a> (previously known as Swagger) and <a href=\"http://json-schema.org/\" target=\"_blank\">JSON Schema</a>.\n\n<small>* estimation based on tests on an internal development team, building production applications.</small>\n\n### `tiangolo/uvicorn-gunicorn-fastapi`\n\nThis image will set a sensible configuration based on the server it is running on (the amount of CPU cores available) without making sacrifices.\n\nIt has sensible defaults, but you can configure it with environment variables or override the configuration files.\n\nThere is also a slim version and another one based on Alpine Linux. If you want one of those, use one of the tags from above.\n\n### `tiangolo/uvicorn-gunicorn`\n\nThis image (`tiangolo/uvicorn-gunicorn-fastapi`) is based on [**tiangolo/uvicorn-gunicorn**](https://github.com/tiangolo/uvicorn-gunicorn-docker).\n\nThat image is what actually does all the work.\n\nThis image just installs FastAPI and has the documentation specifically targeted at FastAPI.\n\nIf you feel confident about your knowledge of Uvicorn, Gunicorn and ASGI, you can use that image directly.\n\n### `tiangolo/uvicorn-gunicorn-starlette`\n\nThere is a sibling Docker image: [**tiangolo/uvicorn-gunicorn-starlette**](https://github.com/tiangolo/uvicorn-gunicorn-starlette-docker)\n\nIf you are creating a new [**Starlette**](https://www.starlette.io/) web application and you want to discard all the additional features from FastAPI you should use [**tiangolo/uvicorn-gunicorn-starlette**](https://github.com/tiangolo/uvicorn-gunicorn-starlette-docker) instead.\n\n**Note**: FastAPI is based on Starlette and adds several features on top of it. Useful for APIs and other cases: data validation, data conversion, documentation with OpenAPI, dependency injection, security/authentication and others.\n\n## How to use\n\nYou don't need to clone the GitHub repo.\n\nYou can use this image as a base image for other images.\n\nAssuming you have a file `requirements.txt`, you could have a `Dockerfile` like this:\n\n```Dockerfile\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.11\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n```\n\nIt will expect a file at `/app/app/main.py`.\n\nOr otherwise a file at `/app/main.py`.\n\nAnd will expect it to contain a variable `app` with your FastAPI application.\n\nThen you can build your image from the directory that has your `Dockerfile`, e.g:\n\n```bash\ndocker build -t myimage ./\n```\n\n## Quick Start\n\n### Build your Image\n\n* Go to your project directory.\n* Create a `Dockerfile` with:\n\n```Dockerfile\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.11\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n```\n\n* Create an `app` directory and enter in it.\n* Create a `main.py` file with:\n\n```Python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n* You should now have a directory structure like:\n\n```\n.\n├── app\n│   └── main.py\n└── Dockerfile\n```\n\n* Go to the project directory (in where your `Dockerfile` is, containing your `app` directory).\n* Build your FastAPI image:\n\n```bash\ndocker build -t myimage .\n```\n\n* Run a container based on your image:\n\n```bash\ndocker run -d --name mycontainer -p 80:80 myimage\n```\n\nNow you have an optimized FastAPI server in a Docker container. Auto-tuned for your current server (and number of CPU cores).\n\n### Check it\n\nYou should be able to check it in your Docker container's URL, for example: <a href=\"http://192.168.99.100/items/5?q=somequery\" target=\"_blank\">http://192.168.99.100/items/5?q=somequery</a> or <a href=\"http://127.0.0.1/items/5?q=somequery\" target=\"_blank\">http://127.0.0.1/items/5?q=somequery</a> (or equivalent, using your Docker host).\n\nYou will see something like:\n\n```JSON\n{\"item_id\": 5, \"q\": \"somequery\"}\n```\n\n### Interactive API docs\n\nNow you can go to <a href=\"http://192.168.99.100/docs\" target=\"_blank\">http://192.168.99.100/docs</a> or <a href=\"http://127.0.0.1/docs\" target=\"_blank\">http://127.0.0.1/docs</a> (or equivalent, using your Docker host).\n\nYou will see the automatic interactive API documentation (provided by <a href=\"https://github.com/swagger-api/swagger-ui\" target=\"_blank\">Swagger UI</a>):\n\n![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)\n\n### Alternative API docs\n\nAnd you can also go to <a href=\"http://192.168.99.100/redoc\" target=\"_blank\">http://192.168.99.100/redoc</a> or <a href=\"http://127.0.0.1/redoc\" target=\"_blank\">http://127.0.0.1/redoc</a>(or equivalent, using your Docker host).\n\nYou will see the alternative automatic documentation (provided by <a href=\"https://github.com/Rebilly/ReDoc\" target=\"_blank\">ReDoc</a>):\n\n![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)\n\n## Dependencies and packages\n\nYou will probably also want to add any dependencies for your app and pin them to a specific version, probably including Uvicorn, Gunicorn, and FastAPI.\n\nThis way you can make sure your app always works as expected.\n\nYou could install packages with `pip` commands in your `Dockerfile`, using a `requirements.txt`, or even using [Poetry](https://python-poetry.org/).\n\nAnd then you can upgrade those dependencies in a controlled way, running your tests, making sure that everything works, but without breaking your production application if some new version is not compatible.\n\n### Using Poetry\n\nHere's a small example of one of the ways you could install your dependencies making sure you have a pinned version for each package.\n\nLet's say you have a project managed with [Poetry](https://python-poetry.org/), so, you have your package dependencies in a file `pyproject.toml`. And possibly a file `poetry.lock`.\n\nThen you could have a `Dockerfile` using Docker multi-stage building with:\n\n```Dockerfile\nFROM python:3.9 as requirements-stage\n\nWORKDIR /tmp\n\nRUN pip install poetry\n\nCOPY ./pyproject.toml ./poetry.lock* /tmp/\n\nRUN poetry export -f requirements.txt --output requirements.txt --without-hashes\n\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.11\n\nCOPY --from=requirements-stage /tmp/requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n```\n\nThat will:\n\n* Install poetry and configure it for running inside of the Docker container.\n* Copy your application requirements.\n    * Because it uses `./poetry.lock*` (ending with a `*`), it won't crash if that file is not available yet.\n* Install the dependencies.\n* Then copy your app code.\n\nIt's important to copy the app code *after* installing the dependencies, that way you can take advantage of Docker's cache. That way it won't have to install everything from scratch every time you update your application files, only when you add new dependencies.\n\nThis also applies for any other way you use to install your dependencies. If you use a `requirements.txt`, copy it alone and install all the dependencies on the top of the `Dockerfile`, and add your app code after it.\n\n## Advanced usage\n\n### Environment variables\n\nThese are the environment variables that you can set in the container to configure it and their default values:\n\n#### `MODULE_NAME`\n\nThe Python \"module\" (file) to be imported by Gunicorn, this module would contain the actual application in a variable.\n\nBy default:\n\n* `app.main` if there's a file `/app/app/main.py` or\n* `main` if there's a file `/app/main.py`\n\nFor example, if your main file was at `/app/custom_app/custom_main.py`, you could set it like:\n\n```bash\ndocker run -d -p 80:80 -e MODULE_NAME=\"custom_app.custom_main\" myimage\n```\n\n#### `VARIABLE_NAME`\n\nThe variable inside of the Python module that contains the FastAPI application.\n\nBy default:\n\n* `app`\n\nFor example, if your main Python file has something like:\n\n```Python\nfrom fastapi import FastAPI\n\napi = FastAPI()\n\n\n@api.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n```\n\nIn this case `api` would be the variable with the FastAPI application. You could set it like:\n\n```bash\ndocker run -d -p 80:80 -e VARIABLE_NAME=\"api\" myimage\n```\n\n#### `APP_MODULE`\n\nThe string with the Python module and the variable name passed to Gunicorn.\n\nBy default, set based on the variables `MODULE_NAME` and `VARIABLE_NAME`:\n\n* `app.main:app` or\n* `main:app`\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:80 -e APP_MODULE=\"custom_app.custom_main:api\" myimage\n```\n\n#### `GUNICORN_CONF`\n\nThe path to a Gunicorn Python configuration file.\n\nBy default:\n\n* `/app/gunicorn_conf.py` if it exists\n* `/app/app/gunicorn_conf.py` if it exists\n* `/gunicorn_conf.py` (the included default)\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:80 -e GUNICORN_CONF=\"/app/custom_gunicorn_conf.py\" myimage\n```\n\nYou can use the [config file from the base image](https://github.com/tiangolo/uvicorn-gunicorn-docker/blob/master/docker-images/gunicorn_conf.py) as a starting point for yours.\n\n#### `WORKERS_PER_CORE`\n\nThis image will check how many CPU cores are available in the current server running your container.\n\nIt will set the number of workers to the number of CPU cores multiplied by this value.\n\nBy default:\n\n* `1`\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:80 -e WORKERS_PER_CORE=\"3\" myimage\n```\n\nIf you used the value `3` in a server with 2 CPU cores, it would run 6 worker processes.\n\nYou can use floating point values too.\n\nSo, for example, if you have a big server (let's say, with 8 CPU cores) running several applications, and you have a FastAPI application that you know won't need high performance. And you don't want to waste server resources. You could make it use `0.5` workers per CPU core. For example:\n\n```bash\ndocker run -d -p 80:80 -e WORKERS_PER_CORE=\"0.5\" myimage\n```\n\nIn a server with 8 CPU cores, this would make it start only 4 worker processes.\n\n**Note**: By default, if `WORKERS_PER_CORE` is `1` and the server has only 1 CPU core, instead of starting 1 single worker, it will start 2. This is to avoid bad performance and blocking applications (server application) on small machines (server machine/cloud/etc). This can be overridden using `WEB_CONCURRENCY`.\n\n#### `MAX_WORKERS`\n\nSet the maximum number of workers to use.\n\nYou can use it to let the image compute the number of workers automatically but making sure it's limited to a maximum.\n\nThis can be useful, for example, if each worker uses a database connection and your database has a maximum limit of open connections.\n\nBy default it's not set, meaning that it's unlimited.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:80 -e MAX_WORKERS=\"24\" myimage\n```\n\nThis would make the image start at most 24 workers, independent of how many CPU cores are available in the server.\n\n#### `WEB_CONCURRENCY`\n\nOverride the automatic definition of number of workers.\n\nBy default:\n\n* Set to the number of CPU cores in the current server multiplied by the environment variable `WORKERS_PER_CORE`. So, in a server with 2 cores, by default it will be set to `2`.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:80 -e WEB_CONCURRENCY=\"2\" myimage\n```\n\nThis would make the image start 2 worker processes, independent of how many CPU cores are available in the server.\n\n#### `HOST`\n\nThe \"host\" used by Gunicorn, the IP where Gunicorn will listen for requests.\n\nIt is the host inside of the container.\n\nSo, for example, if you set this variable to `127.0.0.1`, it will only be available inside the container, not in the host running it.\n\nIt's is provided for completeness, but you probably shouldn't change it.\n\nBy default:\n\n* `0.0.0.0`\n\n#### `PORT`\n\nThe port the container should listen on.\n\nIf you are running your container in a restrictive environment that forces you to use some specific port (like `8080`) you can set it with this variable.\n\nBy default:\n\n* `80`\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e PORT=\"8080\" myimage\n```\n\n#### `BIND`\n\nThe actual host and port passed to Gunicorn.\n\nBy default, set based on the variables `HOST` and `PORT`.\n\nSo, if you didn't change anything, it will be set by default to:\n\n* `0.0.0.0:80`\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e BIND=\"0.0.0.0:8080\" myimage\n```\n\n#### `LOG_LEVEL`\n\nThe log level for Gunicorn.\n\nOne of:\n\n* `debug`\n* `info`\n* `warning`\n* `error`\n* `critical`\n\nBy default, set to `info`.\n\nIf you need to squeeze more performance sacrificing logging, set it to `warning`, for example:\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e LOG_LEVEL=\"warning\" myimage\n```\n\n#### `WORKER_CLASS`\n\nThe class to be used by Gunicorn for the workers.\n\nBy default, set to `uvicorn.workers.UvicornWorker`.\n\nThe fact that it uses Uvicorn is what allows using ASGI frameworks like FastAPI, and that is also what provides the maximum performance.\n\nYou probably shouldn't change it.\n\nBut if for some reason you need to use the alternative Uvicorn worker: `uvicorn.workers.UvicornH11Worker` you can set it with this environment variable.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e WORKER_CLASS=\"uvicorn.workers.UvicornH11Worker\" myimage\n```\n\n#### `TIMEOUT`\n\nWorkers silent for more than this many seconds are killed and restarted.\n\nRead more about it in the [Gunicorn docs: timeout](https://docs.gunicorn.org/en/stable/settings.html#timeout).\n\nBy default, set to `120`.\n\nNotice that Uvicorn and ASGI frameworks like FastAPI are async, not sync. So it's probably safe to have higher timeouts than for sync workers.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e TIMEOUT=\"20\" myimage\n```\n\n#### `KEEP_ALIVE`\n\nThe number of seconds to wait for requests on a Keep-Alive connection.\n\nRead more about it in the [Gunicorn docs: keepalive](https://docs.gunicorn.org/en/stable/settings.html#keepalive).\n\nBy default, set to `2`.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e KEEP_ALIVE=\"20\" myimage\n```\n\n#### `GRACEFUL_TIMEOUT`\n\nTimeout for graceful workers restart.\n\nRead more about it in the [Gunicorn docs: graceful-timeout](https://docs.gunicorn.org/en/stable/settings.html#graceful-timeout).\n\nBy default, set to `120`.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e GRACEFUL_TIMEOUT=\"20\" myimage\n```\n\n#### `ACCESS_LOG`\n\nThe access log file to write to.\n\nBy default `\"-\"`, which means stdout (print in the Docker logs).\n\nIf you want to disable `ACCESS_LOG`, set it to an empty value.\n\nFor example, you could disable it with:\n\n```bash\ndocker run -d -p 80:8080 -e ACCESS_LOG= myimage\n```\n\n#### `ERROR_LOG`\n\nThe error log file to write to.\n\nBy default `\"-\"`, which means stderr (print in the Docker logs).\n\nIf you want to disable `ERROR_LOG`, set it to an empty value.\n\nFor example, you could disable it with:\n\n```bash\ndocker run -d -p 80:8080 -e ERROR_LOG= myimage\n```\n\n#### `GUNICORN_CMD_ARGS`\n\nAny additional command line settings for Gunicorn can be passed in the `GUNICORN_CMD_ARGS` environment variable.\n\nRead more about it in the [Gunicorn docs: Settings](https://docs.gunicorn.org/en/stable/settings.html#settings).\n\nThese settings will have precedence over the other environment variables and any Gunicorn config file.\n\nFor example, if you have a custom TLS/SSL certificate that you want to use, you could copy them to the Docker image or mount them in the container, and set [`--keyfile` and `--certfile`](http://docs.gunicorn.org/en/latest/settings.html#ssl) to the location of the files, for example:\n\n```bash\ndocker run -d -p 80:8080 -e GUNICORN_CMD_ARGS=\"--keyfile=/secrets/key.pem --certfile=/secrets/cert.pem\" -e PORT=443 myimage\n```\n\n**Note**: instead of handling TLS/SSL yourself and configuring it in the container, it's recommended to use a \"TLS Termination Proxy\" like [Traefik](https://docs.traefik.io/). You can read more about it in the [FastAPI documentation about HTTPS](https://fastapi.tiangolo.com/deployment/#https).\n\n#### `PRE_START_PATH`\n\nThe path where to find the pre-start script.\n\nBy default, set to `/app/prestart.sh`.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e PRE_START_PATH=\"/custom/script.sh\" myimage\n```\n\n### Custom Gunicorn configuration file\n\nThe image includes a default Gunicorn Python config file at `/gunicorn_conf.py`.\n\nIt uses the environment variables declared above to set all the configurations.\n\nYou can override it by including a file in:\n\n* `/app/gunicorn_conf.py`\n* `/app/app/gunicorn_conf.py`\n* `/gunicorn_conf.py`\n\n### Custom `/app/prestart.sh`\n\nIf you need to run anything before starting the app, you can add a file `prestart.sh` to the directory `/app`. The image will automatically detect and run it before starting everything.\n\nFor example, if you want to add Alembic SQL migrations (with SQLALchemy), you could create a `./app/prestart.sh` file in your code directory (that will be copied by your `Dockerfile`) with:\n\n```bash\n#! /usr/bin/env bash\n\n# Let the DB start\nsleep 10;\n# Run migrations\nalembic upgrade head\n```\n\nand it would wait 10 seconds to give the database some time to start and then run that `alembic` command.\n\nIf you need to run a Python script before starting the app, you could make the `/app/prestart.sh` file run your Python script, with something like:\n\n```bash\n#! /usr/bin/env bash\n\n# Run custom Python script before starting\npython /app/my_custom_prestart_script.py\n```\n\nYou can customize the location of the prestart script with the environment variable `PRE_START_PATH` described above.\n\n### Development live reload\n\nThe default program that is run is at `/start.sh`. It does everything described above.\n\nThere's also a version for development with live auto-reload at:\n\n```bash\n/start-reload.sh\n```\n\n#### Details\n\nFor development, it's useful to be able to mount the contents of the application code inside of the container as a Docker \"host volume\", to be able to change the code and test it live, without having to build the image every time.\n\nIn that case, it's also useful to run the server with live auto-reload, so that it re-starts automatically at every code change.\n\nThe additional script `/start-reload.sh` runs Uvicorn alone (without Gunicorn) and in a single process.\n\nIt is ideal for development.\n\n#### Usage\n\nFor example, instead of running:\n\n```bash\ndocker run -d -p 80:80 myimage\n```\n\nYou could run:\n\n```bash\ndocker run -d -p 80:80 -v $(pwd):/app myimage /start-reload.sh\n```\n\n* `-v $(pwd):/app`: means that the directory `$(pwd)` should be mounted as a volume inside of the container at `/app`.\n    * `$(pwd)`: runs `pwd` (\"print working directory\") and puts it as part of the string.\n* `/start-reload.sh`: adding something (like `/start-reload.sh`) at the end of the command, replaces the default \"command\" with this one. In this case, it replaces the default (`/start.sh`) with the development alternative `/start-reload.sh`.\n\n#### Development live reload - Technical Details\n\nAs `/start-reload.sh` doesn't run with Gunicorn, any of the configurations you put in a `gunicorn_conf.py` file won't apply.\n\nBut these environment variables will work the same as described above:\n\n* `MODULE_NAME`\n* `VARIABLE_NAME`\n* `APP_MODULE`\n* `HOST`\n* `PORT`\n* `LOG_LEVEL`\n\n## \U0001F6A8 Alpine Python Warning\n\nIn short: You probably shouldn't use Alpine for Python projects, instead use the `slim` Docker image versions.\n\n---\n\nDo you want more details? Continue reading \U0001F447\n\nAlpine is more useful for other languages where you build a static binary in one Docker image stage (using multi-stage Docker building) and then copy it to a simple Alpine image, and then just execute that binary. For example, using Go.\n\nBut for Python, as Alpine doesn't use the standard tooling used for building Python extensions, when installing packages, in many cases Python (`pip`) won't find a precompiled installable package (a \"wheel\") for Alpine. And after debugging lots of strange errors you will realize that you have to install a lot of extra tooling and build a lot of dependencies just to use some of these common Python packages. \U0001F629\n\nThis means that, although the original Alpine image might have been small, you end up with a an image with a size comparable to the size you would have gotten if you had just used a standard Python image (based on Debian), or in some cases even larger. \U0001F92F\n\nAnd in all those cases, it will take much longer to build, consuming much more resources, building dependencies for longer, and also increasing its carbon footprint, as you are using more CPU time and energy for each build. \U0001F333\n\nIf you want slim Python images, you should instead try and use the `slim` versions that are still based on Debian, but are smaller. \U0001F913\n\n## Tests\n\nAll the image tags, configurations, environment variables and application options are tested.\n\n## Release Notes\n\n### Latest Changes\n\n* ⬆️ Bump fastapi[all] from 0.87.0 to 0.88.0. PR [#222](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/222) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \U0001F477 Add GitHub Action for Docker Hub description. PR [#221](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/221) by [@tiangolo](https://github.com/tiangolo).\n* ⬆️ Update mypy requirement from ^0.971 to ^0.991. PR [#214](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/214) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update autoflake requirement from ^1.3.1 to ^2.0.0. PR [#215](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/215) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n### 0.7.0\n\nHighlights of this release:\n\n* Support for Python 3.10 and 3.11.\n* Deprecation of Python 3.6.\n    * The last Python 3.6 image tag was pushed and is available in Docker Hub, but it won't be updated or maintained anymore.\n    * The last image with a date tag is `python3.6-2022-11-25`.\n* Upgraded versions of all the dependencies.\n\n#### Features\n\n* ✨ Add support for Python 3.10 and 3.11. PR [#220](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/220) by [@tiangolo](https://github.com/tiangolo).\n* ✨ Add Python 3.9 and Python 3.9 Alpine. PR [#67](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/67) by [@graue70](https://github.com/graue70).\n\n#### Breaking Changes\n\n* \U0001F525 Deprecate and remove Python 3.6. PR [#211](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/211) by [@tiangolo](https://github.com/tiangolo).\n\n#### Upgrades\n\n* ⬆️ Upgrade FastAPI and Uvicorn versions. PR [#212](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/212) by [@tiangolo](https://github.com/tiangolo).\n* ⬆️ Upgrade packages to the last version that supports Python 3.6. PR [#207](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/207) by [@tiangolo](https://github.com/tiangolo).\n\n#### Docs\n\n* \U0001F4DD Add note to discourage Alpine with Python. PR [#122](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/122) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F4DD Add warning for Kubernetes, when to use this image. PR [#121](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/121) by [@tiangolo](https://github.com/tiangolo).\n* ✏ Fix typo, repeated word on README. PR [#96](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/96) by [@shelbylsmith](https://github.com/shelbylsmith).\n\n#### Internal\n\n* ⬆️ Update black requirement from ^20.8b1 to ^22.10. PR [#216](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/216) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update docker requirement from ^5.0.3 to ^6.0.1. PR [#217](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/217) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \U0001F525 Remove old Travis file. PR [#219](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/219) by [@tiangolo](https://github.com/tiangolo).\n* ⬆️ Upgrade CI OS. PR [#218](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/218) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F527 Update Dependabot config. PR [#213](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/213) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Add scheduled CI. PR [#210](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/210) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Add alls-green GitHub Action. PR [#209](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/209) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Do not run double CI, run on push only on master. PR [#208](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/208) by [@tiangolo](https://github.com/tiangolo).\n* ⬆️ Bump actions/setup-python from 4.1.0 to 4.3.0. PR [#201](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/201) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update black requirement from ^19.10b0 to ^20.8b1. PR [#113](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/113) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update docker requirement from ^4.2.0 to ^5.0.3. PR [#125](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/125) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Bump actions/checkout from 2 to 3.1.0. PR [#194](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/194) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update mypy requirement from ^0.770 to ^0.971. PR [#184](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/184) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update isort requirement from ^4.3.21 to ^5.8.0. PR [#116](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/116) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Bump tiangolo/issue-manager from 0.2.0 to 0.4.0. PR [#110](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/110) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Bump actions/setup-python from 1 to 4.1.0. PR [#182](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/182) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update pytest requirement from ^5.4.1 to ^7.0.1. PR [#153](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/153) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \U0001F4CC Add external dependencies and Dependabot to get automatic upgrade PRs. PR [#109](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/109) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Update Latest Changes. PR [#108](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/108) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Allow GitHub workflow dispatch to trigger test and deploy. PR [#93](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/93) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Add latest-changes GitHub action, update issue-manager, add funding. PR [#70](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/70) by [@tiangolo](https://github.com/tiangolo).\n\n### 0.6.0\n\n* Add docs about installing and pinning dependencies. PR [#41](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/41).\n* Add `slim` version. PR [#40](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/40).\n* Update and refactor bringing all the new features from the base image. Includes:\n    * Centralize, simplify, and deduplicate code and setup\n    * Move CI to GitHub actions\n    * Add Python 3.8 (and Alpine)\n    * Add new configs and docs:\n        * `WORKER_CLASS`\n        * `TIMEOUT`\n        * `KEEP_ALIVE`\n        * `GRACEFUL_TIMEOUT`\n        * `ACCESS_LOG`\n        * `ERROR_LOG`\n        * `GUNICORN_CMD_ARGS`\n        * `MAX_WORKERS`\n    * PR [#39](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/39).\n* Disable pip cache during installation. PR [#38](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/38).\n* Migrate local development from Pipenv to Poetry. PR [#34](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/34).\n* Add docs for custom `PRE_START_PATH` env var. PR [#33](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/33).\n\n### 0.5.0\n\n* Refactor tests to use env vars and add image tags for each build date, like `tiangolo/uvicorn-gunicorn-fastapi:python3.7-2019-10-15`. PR [#17](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/17).\n* Upgrade Travis. PR [#9](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/9).\n\n### 0.4.0\n\n* Add support for live auto-reload with an additional custom script `/start-reload.sh`, check the [updated documentation](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker#development-live-reload). PR <a href=\"https://github.com/tiangolo/uvicorn-gunicorn-docker/pull/6\" target=\"_blank\">#6</a> in parent image.\n\n### 0.3.0\n\n* Set `WORKERS_PER_CORE` by default to `1`, as it shows to have the best performance on benchmarks.\n* Make the default web concurrency, when `WEB_CONCURRENCY` is not set, to a minimum of 2 workers. This is to avoid bad performance and blocking applications (server application) on small machines (server machine/cloud/etc). This can be overridden using `WEB_CONCURRENCY`. This applies for example in the case where `WORKERS_PER_CORE` is set to `1` (the default) and the server has only 1 CPU core. PR <a href=\"https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/6\" target=\"_blank\">#6</a> and PR <a href=\"https://github.com/tiangolo/uvicorn-gunicorn-docker/pull/5\" target=\"_blank\">#5</a> in parent image.\n\n### 0.2.0\n\n* Make `/start.sh` run independently, reading and generating used default environment variables. And remove `/entrypoint.sh` as it doesn't modify anything in the system, only reads environment variables. PR <a href=\"https://github.com/tiangolo/uvicorn-gunicorn-docker/pull/4\" target=\"_blank\">#4</a> in parent image.\n\n### 0.1.0\n\n* Add support for `/app/prestart.sh`.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n"
httptoolkit/openapi-directory-js: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5D:2C43:72FFE4:EB05CD:6500FB42.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Frameio/rolodex: >
  # Rolodex


  [![hex.pm
  version](https://img.shields.io/hexpm/v/rolodex.svg)](https://hex.pm/packages/rolodex)
  [![CircleCI](https://circleci.com/gh/Frameio/rolodex.svg?style=svg)](https://circleci.com/gh/Frameio/rolodex)


  Rolodex generates documentation for your Phoenix API.


  Simply annotate your Phoenix controller action functions with `@doc` metadata,
  and Rolodex will turn these descriptions into valid documentation for any
  platform.


  Currently supports:

  - [OpenAPI 3.0](https://swagger.io/specification/)


  ## Disclaimer


  Rolodex is currently under active development! The API is a work in progress
  as we head towards v1.0.


  ## Documentation


  See [https://hexdocs.pm/rolodex](https://hexdocs.pm/rolodex/Rolodex.html)


  ## Installation


  Rolodex is [available in Hex](https://hex.pm/packages/rolodex). Add it to your

  deps in `mix.exs`:


  ```elixir

  def deps do
    [
      {:rolodex, "~> 0.10.0"}
    ]
  end

  ```
quantmind/aio-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B7D:6A5B:AE3758:161A0E2:6500FB68.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
swagger-mock/swagger-mock: >
  # OpenAPI Mock Server


  ![CI](https://github.com/muonsoft/openapi-mock/workflows/CI/badge.svg?branch=master)

  [![Scrutinizer Code
  Quality](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/?branch=master)

  [![Code
  Coverage](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/?branch=master)

  ![GitHub release (latest by
  date)](https://img.shields.io/github/v/release/muonsoft/openapi-mock)


  OpenAPI API mock server with random data generation by specified schemas.


  * OpenAPI 3.x support.

  * Load specification from a local file or URL.

  * JSON and YAML format supported.

  * Generates fake response data by provided schemas or by examples.

  * Content negotiation by Accept header.

  * Can be used as standalone application (Linux and Windows) or can be run via
  Docker container.


  ## Supported features


  | Feature | Support status |

  | --- | --- |

  | generating xml response | basic support ([without xml
  tags](https://swagger.io/docs/specification/data-models/representing-xml/)) |

  | generating json response | supported |

  | generation of [basic
  types](https://swagger.io/docs/specification/data-models/data-types/) |
  supported |

  | generation of
  [enums](https://swagger.io/docs/specification/data-models/enums/) | supported
  |

  | generation of [associative
  arrays](https://swagger.io/docs/specification/data-models/dictionaries/) |
  supported |

  | generation of [combined
  types](https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/)
  | supported (without tag `not` and discriminator) |

  | local reference resolving | supported |

  | remote reference resolving | not supported |

  | URL reference resolving | not supported |

  | validating request data | not supported |

  | force using custom response schema | not supported (schema detected
  automatically) |


  ## Quick start


  Download latest binary and run a server.


  ```bash

  # runs a local server on port 8080

  ./openapi-mock serve --specification-url
  https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml


  # to test that the server successfully ran

  curl 'http://localhost:8080/v1/pets'

  ```


  Alternatively, you can use [Docker](https://www.docker.com/) image.


  ```bash

  # downloads an image

  docker pull muonsoft/openapi-mock


  # runs a docker container with exported port 8080

  docker run -p 8080:8080 -e
  "OPENAPI_MOCK_SPECIFICATION_URL=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml"
  --rm muonsoft/openapi-mock


  # to test that the server successfully ran

  curl 'http://localhost:8080/v1/pets'

  ```


  Also, you can use [Docker Compose](https://docs.docker.com/compose/). Example
  of `docker-compose.yml`


  ```yaml

  version: '3.0'


  services:
    openapi_mock:
      container_name: openapi_mock
      image: muonsoft/openapi-mock
      environment:
        OPENAPI_MOCK_SPECIFICATION_URL: 'https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml'
      ports:
        - "8080:8080"
  ```


  To start up a container run command.


  ```bash

  docker-compose up -d

  ```


  ## Usage guide


  * [Console commands](docs/usage_guide.md#console-commands)

  * [Setting up a configuration](docs/usage_guide.md#setting-up-a-configuration)

  * [Configuration file example](docs/usage_guide.md#configuration-file-example)

  * [Configuration options](docs/usage_guide.md#configuration-options)


  ## License


  This project is licensed under the MIT License - see the LICENSE file for
  details.
tiangolo/full-stack-fastapi-couchbase: "## \U0001F6A8 DEPRECATION WARNING \U0001F6A8\n\nI'm currently not actively using Couchbase nor this generator for any project.\n\nYou might still find some internal pieces of code useful for your own use cases, but I won't be able to fix bugs and add features.\n\nIf you are starting a new project from scratch, check the alternatives at the [FastAPI docs: Project Generation](https://fastapi.tiangolo.com/project-generation/).\n\nYou are still free to use this project if you want to, you might still find some internal pieces of code useful for your own use case. And if you already have a project generated with it that's fine as well (and you probably already updated it to suit your needs).\n\n# Full Stack FastAPI Couchbase - project generator\n\n[![Build Status](https://travis-ci.org/tiangolo/full-stack-fastapi-couchbase.svg?branch=master)](https://travis-ci.org/tiangolo/full-stack-fastapi-couchbase)\n\n### To have in mind\n\nHere are some extra thoughts you might want to consider if you decide to go with Couchbase and/or this project generator.\n\n#### Pros\n\nCouchbase has a great set of features that is not easily or commonly found in alternatives.\n\nIt's a distributed database, so, if you have a cluster of several nodes with the data replicated, you don't have a single point of failure.\n\nIt provides very high performance.\n\nIt has built-in full-text search integrated (using Bleve). It's possible to make all the records be automatically indexed in the search engine without additional code or extra components.\n\nIt can be connected/integrated with the Couchbase Sync Gateway, that can be used to synchronize a subset of documents (records) with mobile devices. And with some effort, it can be connected with PouchBD for frontend synchronization (although not querying and/or searching from the frontend, as would be possible with CouchDB).\n\n#### Cons\n\nThe documentation is very scarce. This is sadly a big problem. Many features are not well documented, or not documented at all.\n\nMany configurations are not documented and have to be inferred from comments in forums, reading source code, or checking the configurations for the C client and trying different query parameters in URLs, that becomes quite error prone.\n\nCouchbase didn't seem to be designed to be integrated into CI systems as in this project (or alternatives), at least until the last time I used it. It expects all the set up to be done once via the web UI, not automated. The official Docker image can't be configured. So, this project does all the configuration by sending the HTTP requests from the backend code to the container replicating the HTTP requests done in the web UI. But those steps are not documented, there's no \"official\" way to configure and start it without using the web UI, so the integration with CI could be error prone.\n\nThe Couchbase Sync Gateway official Docker image is not designed to be configured much either, so, the `Dockerfile` included in this project adds a good amount of custom logic to support that, but that's not really official.\n\nAs it uses N1QL, a flavor of SQL, and there's no easy integration with Python, you have to do all the operations in N1QL strings and integrate them with your own code. Without editor support, completion, nor syntax checks for N1QL.\n\n---\n\nGenerate a backend and frontend stack using Python, including interactive API documentation.\n\n[![Screenshot](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)](https://github.com/tiangolo/full-stack-fastapi-couchbase)\n\n## Features\n\n* Full **Docker** integration (Docker based).\n* Docker Swarm Mode deployment.\n* **Docker Compose** integration and optimization for local development.\n* **Production ready** Python web server using Uvicorn and Gunicorn.\n* Python **[FastAPI](https://github.com/tiangolo/fastapi)** backend:\n    * **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic).\n    * **Intuitive**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging.\n    * **Easy**: Designed to be easy to use and learn. Less time reading docs.\n    * **Short**: Minimize code duplication. Multiple features from each parameter declaration.\n    * **Robust**: Get production-ready code. With automatic interactive documentation.\n    * **Standards-based**: Based on (and fully compatible with) the open standards for APIs: <a href=\"https://github.com/OAI/OpenAPI-Specification\" target=\"_blank\">OpenAPI</a> and <a href=\"http://json-schema.org/\" target=\"_blank\">JSON Schema</a>.\n    * [**Many other features**](https://github.com/tiangolo/fastapi) including automatic validation, serialization, interactive documentation, authentication with OAuth2 JWT tokens, etc.\n* **Secure password** hashing by default.\n* **JWT token** authentication.\n* **CORS** (Cross Origin Resource Sharing).\n* **Celery** worker that can import and use code from the rest of the backend selectively (you don't have to install the complete app in each worker).\n* **NoSQL Couchbase** database that supports direct synchronization via Couchbase Sync Gateway for offline-first applications.\n* **Full Text Search** integrated, using Couchbase.\n* REST backend tests based on Pytest, integrated with Docker, so you can test the full API interaction, independent on the database. As it runs in Docker, it can build a new data store from scratch each time (so you can use ElasticSearch, MongoDB, or whatever you want, and just test that the API works).\n* Easy Python integration with **Jupyter** Kernels for remote or in-Docker development with extensions like Atom Hydrogen or Visual Studio Code Jupyter.\n* **Email notifications** for account creation and password recovery, compatible with:\n    * Mailgun\n    * SparkPost\n    * SendGrid\n    * ...any other provider that can generate standard SMTP credentials.\n* **Vue** frontend:\n    * Generated with Vue CLI.\n    * **JWT Authentication** handling.\n    * Login view.\n    * After login, main dashboard view.\n    * Main dashboard with user creation and edition.\n    * Self user edition.\n    * **Vuex**.\n    * **Vue-router**.\n    * **Vuetify** for beautiful material design components.\n    * **TypeScript**.\n    * Docker server based on **Nginx** (configured to play nicely with Vue-router).\n    * Docker multi-stage building, so you don't need to save or commit compiled code.\n    * Frontend tests ran at build time (can be disabled too).\n    * Made as modular as possible, so it works out of the box, but you can re-generate with Vue CLI or create it as you need, and re-use what you want.\n* **Flower** for Celery jobs monitoring.\n* Load balancing between frontend and backend with **Traefik**, so you can have both under the same domain, separated by path, but served by different containers.\n* Traefik integration, including Let's Encrypt **HTTPS** certificates automatic generation.\n* GitLab **CI** (continuous integration), including frontend and backend testing.\n\n## How to use it\n\nGo to the directory where you want to create your project and run:\n\n```bash\npip install cookiecutter\ncookiecutter https://github.com/tiangolo/full-stack-fastapi-couchbase\n```\n\n### Generate passwords\n\nYou will be asked to provide passwords and secret keys for several components. Open another terminal and run:\n\n```bash\nopenssl rand -hex 32\n# Outputs something like: 99d3b1f01aa639e4a76f4fc281fc834747a543720ba4c8a8648ba755aef9be7f\n```\n\nCopy the contents and use that as password / secret key. And run that again to generate another secure key.\n\n\n### Input variables\n\nThe generator (cookiecutter) will ask you for some data, you might want to have at hand before generating the project.\n\nThe input variables, with their default values (some auto generated) are:\n\n* `project_name`: The name of the project\n* `project_slug`: The development friendly name of the project. By default, based on the project name\n* `domain_main`: The domain in where to deploy the project for production (from the branch `production`), used by the load balancer, backend, etc. By default, based on the project slug.\n* `domain_staging`: The domain in where to deploy while staging (before production) (from the branch `master`). By default, based on the main domain.\n\n* `docker_swarm_stack_name_main`: The name of the stack while deploying to Docker in Swarm mode for production. By default, based on the domain.\n* `docker_swarm_stack_name_staging`: The name of the stack while deploying to Docker in Swarm mode for staging. By default, based on the domain.\n\n* `secret_key`: Backend server secret key. Use the method above to generate it.\n* `first_superuser`: The first superuser generated, with it you will be able to create more users, etc. By default, based on the domain.\n* `first_superuser_password`: First superuser password. Use the method above to generate it.\n* `backend_cors_origins`: Origins (domains, more or less) that are enabled for CORS (Cross Origin Resource Sharing). This allows a frontend in one domain (e.g. `https://dashboard.example.com`) to communicate with this backend, that could be living in another domain (e.g. `https://api.example.com`). It can also be used to allow your local frontend (with a custom `hosts` domain mapping, as described in the project's `README.md`) that could be living in `http://dev.example.com:8080` to communicate with the backend at `https://stag.example.com`. Notice the `http` vs `https` and the `dev.` prefix for local development vs the \"staging\" `stag.` prefix. By default, it includes origins for production, staging and development, with ports commonly used during local development by several popular frontend frameworks (Vue with `:8080`, React, Angular).\n* `smtp_port`: Port to use to send emails via SMTP. By default `587`.\n* `smtp_host`: Host to use to send emails, it would be given by your email provider, like Mailgun, Sparkpost, etc.\n* `smtp_user`: The user to use in the SMTP connection. The value will be given by your email provider.\n* `smtp_password`: The password to be used in the SMTP connection. The value will be given by the email provider.\n* `smtp_emails_from_email`: The email account to use as the sender in the notification emails, it would be something like `info@your-custom-domain.com`.\n \n* `couchbase_user`: Couchbase main user to be used by the application (code). By default `admin`.\n* `couchbase_password`: Password of the main user, for the backend code. Generate it with the method above.\n* `couchbase_sync_gateway_cors`: List of CORS origins that the Sync Gateway should allow to talk to directly. Similar to `backend_cors_origins`.\n* `couchbase_sync_gateway_user`: User to be created for the Couchbase Sync Gateway. This is what allows synchronization using the CouchDB protocol, with Couchbase Lite in mobile apps and PouchDB in the web and hybrid mobile apps.\n* `couchbase_sync_gateway_password`: Couchbase Sync Gateway password. Generate it with the method above.\n \n* `traefik_constraint_tag`: The tag to be used by the internal Traefik load balancer (for example, to divide requests between backend and frontend) for production. Used to separate this stack from any other stack you might have. This should identify each stack in each environment (production, staging, etc).\n* `traefik_constraint_tag_staging`: The Traefik tag to be used while on staging. \n\n* `traefik_public_network`: This assumes you have another separate publicly facing Traefik at the server / cluster level. This is the network that main Traefik lives in.\n* `traefik_public_constraint_tag`: The tag that should be used by stack services that should communicate with the public.\n\n* `flower_auth`: Basic HTTP authentication for flower, in the form`user:password`. By default: \"`root:changethis`\".\n\n* `sentry_dsn`: Key URL (DSN) of Sentry, for live error reporting. If you are not using it yet, you should, is open source. E.g.: `https://1234abcd:5678ef@sentry.example.com/30`.\n\n* `docker_image_prefix`: Prefix to use for Docker image names. If you are using GitLab Docker registry it would be based on your code repository. E.g.: `git.example.com/development-team/my-awesome-project/`.\n* `docker_image_backend`: Docker image name for the backend. By default, it will be based on your Docker image prefix, e.g.: `git.example.com/development-team/my-awesome-project/backend`. And depending on your environment, a different tag will be appended ( `prod`, `stag`, `branch` ). So, the final image names used will be like: `git.example.com/development-team/my-awesome-project/backend:prod`.\n* `docker_image_celeryworker`: Docker image for the celery worker. By default, based on your Docker image prefix.\n* `docker_image_frontend`: Docker image for the frontend. By default, based on your Docker image prefix.\n* `docker_image_sync_gateway`: Docker image for the Sync Gateway. By default, based on your Docker image prefix.\n\n## How to deploy\n\nThis stack can be adjusted and used with several deployment options that are compatible with Docker Compose, but it is designed to be used in a cluster controlled with pure Docker in Swarm Mode with a Traefik main load balancer proxy handling automatic HTTPS certificates, using the ideas from <a href=\"https://dockerswarm.rocks\" target=\"_blank\">DockerSwarm.rocks</a>.\n\nPlease refer to <a href=\"https://dockerswarm.rocks\" target=\"_blank\">DockerSwarm.rocks</a> to see how to deploy such a cluster in 20 minutes.\n\n## More details\n\nAfter using this generator, your new project (the directory created) will contain an extensive `README.md` with instructions for development, deployment, etc. You can pre-read [the project `README.md` template here too](./{{cookiecutter.project_slug}}/README.md).\n\n## Sibling project generators\n\n* Based on PostgreSQL: [https://github.com/tiangolo/full-stack-fastapi-postgresql](https://github.com/tiangolo/full-stack-fastapi-postgresql).\n\n## Release Notes\n\n### Latest Changes\n\n* Fix Windows line endings for shell scripts after project generation with Cookiecutter hooks. PR [#28](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/28).\n* Remove `package-lock.json` to let everyone lock their own versions (depending on OS, etc).\n* Simplify Traefik labels for services. PR [#27](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/27).\n* Fix Flower Docker configuration. PR [#24](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/24).\n* Update testing scripts and typo.\n* Add normal user Pytest fixture. PR [#23](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/23).\n* Update Dockerfiles to use Couchbase from Debian image. PR [#20](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/20) by [@Gjacquenot](https://github.com/Gjacquenot).\n* Use new Pydantic types. PR [#21](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/21) by [@tehtbl](https://github.com/tehtbl).\n\n### 0.4.0\n\n* Fix security on resetting a password. Receive `password` and `token` as body, not query. PR [#16](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/16).\n\n* Forward arguments from script to `pytest` inside container.\n\n* Update Jupyter Lab installation and util script/environment variable for local development.\n\n### 0.3.0\n\n* PR <a href=\"https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/15\" target=\"_blank\">#15</a>:\n    * Update CRUD utils to use types better.\n    * Simplify Pydantic model names, from `UserInCreate` to `UserCreate`, etc.\n    * Upgrade packages.\n    * Add new generic \"Items\" models, crud utils, endpoints, and tests. To facilitate re-using them to create new functionality. As they are simple and generic (not like Users), it's easier to copy-paste and adapt them to each use case.\n    * Update endpoints/*path operations* to simplify code and use new utilities, prefix and tags in `include_router`.\n    * Update testing utils.\n    * Update linting rules, relax vulture to reduce false positives.\n    * Add full text search for items.\n    * Update project README.md with tips about how to start with backend.\n\n### 0.2.1\n\n* Fix frontend hijacking /docs in development. Using latest https://github.com/tiangolo/node-frontend with custom Nginx configs in frontend. <a href=\"https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/14\" target=\"_blank\">PR #14</a>.\n\n* Update generated README. Minor typos.\n\n* Update Couchbase installation, to include Couchbase command line tools.\n\n* Set `/start-reload.sh` as a command override for development by default.\n\n### 0.2.0\n\n**<a href=\"https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/7\" target=\"_blank\">PR #7</a>**:\n\n* Simplify and update backend `Dockerfile`s.\n* Refactor and simplify backend code, improve naming, imports, modules and \"namespaces\".\n* Improve and simplify Vuex integration with TypeScript accessors.\n* Standardize frontend components layout, buttons order, etc.\n* Add local development scripts (to develop this project generator itself).\n* Add logs to startup modules to detect errors early.\n* Improve FastAPI dependency utilities, to simplify and reduce code (to require a superuser).\n* Fix/update logic to update users.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n"
tiangolo/full-stack-fastapi-postgresql: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0ABC:71E4:A9978B:158456D:6500FB97.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fsprojects/SwaggerProvider: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5B:28BA:762391:F1334F:6500FB3C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
cebe/yii2-app-api: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2719:1B72:7662D6:F1D71B:6500FB23.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
cdimascio/express-openapi-validator: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  271B:17CB:780429:F50139:6500FB1F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
cebe/yii2-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272C:4C8C:82CCE3:10A3F3D:6500FB24.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
cdimascio/generator-express-no-stress: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  271C:63DC:80190D:104D7A2:6500FB20.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
dansharisan/larapiauth: >-
  {"message":"Not
  Found","documentation_url":"https://docs.github.com/rest/repos/contents#get-a-repository-readme"}
cdimascio/generator-express-no-stress-typescript: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2721:1D02:76E839:F2EB75:6500FB20.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
namsor/namsor-r-sdk2: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B73:5F2B:A980CA:157ABDD:6500FB5F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
lezhnev74/openapi-psr7-validator: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B53:0E33:21AA3B:44F049:6500FB4F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Pylons/pyramid_openapi3: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272D:5F2B:A911C5:156C908:6500FB02.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Redocly/create-openapi-repo: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2733:2A1E:A2F28D:14AA7CA:6500FB04.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
mrin9/RapiPdf: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5E:3B7D:9BE4E0:13CB648:6500FB5D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Redocly/redoc: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273A:5E42:9D7C14:13FDF1D:6500FB05.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
deepmap/oapi-codegen: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2731:1B72:7669B8:F1E581:6500FB2B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
sugarkubes/generators: "# Rest/GraphQL APIs + React Components Generator \U0001F525\n\n[![Buy Ligit License](https://s3.us-west-1.wasabisys.com/public.sugarkubes/ligit_embed.svg)](https://ligit.dev)\n[![Follow on Twitter](https://img.shields.io/twitter/follow/andrewpierno.svg?label=follow)](https://twitter.com/andrewpierno)\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/sugarkubes/generators.svg)](http://isitmaintained.com/project/sugarkubes/generators \"Average time to resolve an issue\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/sugarkubes/generators.svg)](http://isitmaintained.com/project/sugarkubes/generators \"Percentage of issues still open\")\n[![npm package](https://img.shields.io/npm/v/sugar-generate/latest.svg)](https://www.npmjs.com/package/sugar-generate)\n[![NPM Downloads](https://img.shields.io/npm/dt/sugar-generate.svg?style=flat)](https://npmcharts.com/compare/sugar-generate?minimal=true)\n\n\n![Sugar Generator - API Edition](https://github.com/sugarkubes/generators/blob/master/logo.png?raw=true)\n\n[![App Demo](https://img.youtube.com/vi/E7_ABK7nZT8/0.jpg)](https://www.youtube.com/watch?v=E7_ABK7nZT8)\n\n\nThis project is sponsored by\n\n[![SponsoredBy.dev](https://api.sponsoredby.dev/img/d8c4307b-ba42-400e-b475-9487c76d15c8.png)](https://api.sponsoredby.dev/link/d8c4307b-ba42-400e-b475-9487c76d15c8)\n\n# Quick Start\n\n\n1. Install the npm module\n\n```sh\n# install\nnpm i -g sugar-generate\n```\n\n2. Create a json schema save, this to **monkey.json**\n\n\n```json\n{\n  \"name\": \"monkey\",\n  \"schema\": {\n    \"name\": {\n      \"type\": \"String\",\n      \"default\": \"\"\n    },\n    \"alive\": {\n      \"type\": \"Boolean\",\n      \"default\": false\n    },\n    \"age\": {\n      \"type\": \"Number\",\n      \"default\": false\n    }\n  }\n}\n```\n\n3. Generate your api and app\n\n```sh\nsugar-generate \\\n--schema monkey.json \\\n--destination ./my-monkeys\n```\n\nBoom, you now have:\n\nAPI:\n- GraphQL API\n- REST API\n- Working Tests\n\nAPP:\n- React create item form\n- React table that supports\n  - search\n  - sort\n  - filter\n  - pagination\n  - edit item\n  - create item\n\n\n### Start the API\n\n```sh\ncd ./my-monkeys/api\nnpm i\nnpm run start\n\n# http://localhost:7777\n```\n\n### Start the APP\n\n```sh\ncd ./my-monkeys/app\nnpm i\nnpm run dev\n\n# http://localhost:3000\n```\n\n### Behold Magic\n\nA fully functioning react table and form with searching sorting filtering, editing, adding, global search, download, and refresh.\n\n![SugarKubes Generated App](https://github.com/sugarkubes/generators/blob/master/table-component.png?raw=true)\n\n# Links\n\n[GraphQL is on localhost:7777/graphql](http://localhost:7777/graphql)\n\n[Swagger is on localhost:7777](http://localhost:7777)\n\n[APP is on localhost:3000](http://localhost:3000)\n\n[API is on localhost:7777](http://localhost:3000)\n\n# Documentation\n\n[API Documentation (generated back end)](https://github.com/sugarkubes/generators/wiki/API)\n\n\n[App Documentation (generated front end)](https://github.com/sugarkubes/generators/wiki/APP)\n\n## Experimental Embeddable Components\n\n**What if you could remotely update your components without having to push new code?**\n\nThats one question we're exploring with the experimental embeddable react components. There are of course cool ways to serve single pages as serverless functions but what's cooler would be a way for even non-technical people to update a database schema and a form or table in real time without writing any code.\n\n\n- Each component comes out in an embeddable format under */embed*\n- TBD - How to easily deploy these and use them.\n-\n\n\n## Updates\n\n- 8/5/19 support for mongo arrays in documents\n"
ErikWittern/swagger-snippet: >
  # OpenAPI Snippet

  **Generates code snippets from Open API (previously Swagger) documents.**


  This package takes as input an OpenAPI v2.0 or v3.0.x document. It translates
  the document into an [HTTP Archive 1.2 request
  object](http://www.softwareishard.com/blog/har-12-spec/#request). It uses the
  [HTTP Snippet](https://github.com/Mashape/httpsnippet) library to generate
  code snippets for every API endpoint (URL path + HTTP method) defined in the
  specification in various languages & tools (`cURL`, `Node`, `Python`, `Ruby`,
  `Java`, `Go`, `C#`...), or for selected endpoints.


  ## Installation


  ```bash

  npm i openapi-snippet

  ```


  ## Build OpenAPI Snippet (for use in browser)

  Clone this repository. Install required dependencies:


  ```bash

  npm i

  ```


  Build a minified version of OpenAPI Snippet (`openapisnippet.min.js`):


  ```bash

  npm run build

  ```


  ## Usage


  ### As a module


  ```javascript

  const OpenAPISnippet = require('openapi-snippet')


  // define input:

  const openApi = ... // Open API document

  const targets = ['node_unirest', 'c'] // array of targets for code snippets.
  See list below...


  try {
    // either, get snippets for ALL endpoints:
    const results = OpenAPISnippet.getSnippets(openApi, targets) // results is now array of snippets, see "Output" below.

    // ...or, get snippets for a single endpoint:
    const results2 = OpenAPISnippet.getEndpointSnippets(openApi, '/users/{user-id}/relationship', 'get', targets)
  } catch (err) {
    // do something with potential errors...
  }

  ```


  ### Within the browser


  Include the `openapisnippet.min.js` file created after building the the
  library (see above) in your HTML page:


  ```html

  <script type="text/javascript" src="path/to/openapisnippet.min.js"></script>

  ```


  Use OpenAPI Snippet, which now defines the global variable `OpenAPISnippet`.



  ## Output

  The output for every endpoint is an object, containing the `method`, `url`, a
  human-readable `description`, and the corresponding `resource` - all of these
  values stem from the OpenAPI document. In addition, within the `snippets`
  list, an object containing a code snippet for every chosen target is provided.
  As of version `0.4.0`, the snippets include exemplary payload data.


  If `getSnippets` is used, an array of the above described objects is returned.


  For example:


  ```js

  [
    // ...
    {
      "method": "GET",
      "url": "https://api.instagram.com/v1/users/{user-id}/relationship",
      "description": "Get information about a relationship to another user.",
      "resource": "relationship",
      "snippets": [
        {
          "id": "node",
          "title": "Node + Native",
          "content": "var http = require(\"https\");\n\nvar options = {..."
        }
      ]
    }
    // ...
  ]

  ```


  ## Targets

  Currently, OpenAPI Snippet supports the following targets (depending on the
  HTTP Snippet library):


  * `c_libcurl` (default)

  * `csharp_restsharp` (default)

  * `go_native` (default)

  * `java_okhttp`

  * `java_unirest` (default)

  * `javascript_jquery`

  * `javascript_xhr` (default)

  * `node_native` (default)

  * `node_request`

  * `node_unirest`

  * `objc_nsurlsession` (default)

  * `ocaml_cohttp` (default)

  * `php_curl` (default)

  * `php_http1`

  * `php_http2`

  * `python_python3` (default)

  * `python_requests`

  * `ruby_native` (default)

  * `shell_curl` (default)

  * `shell_httpie`

  * `shell_wget`

  * `swift_nsurlsession` (default)


  If only the language is provided (e.g., `c`), the default library will be
  selected.



  License: MIT
airtasker/spot: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  270D:2701:777D9C:F430BB:6500FB14.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
42Crunch/vscode-openapi: >
  # OpenAPI extension for Visual Studio Code


  This [Visual Studio Code](https://code.visualstudio.com/) (VS Code)
  [extension](https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi)
  adds rich support for the [OpenAPI
  Specification](https://github.com/OAI/OpenAPI-Specification) (OAS) (formerly
  known as Swagger Specification) in JSON or YAML format. The features include,
  for example, SwaggerUI and ReDoc preview, IntelliSense, linting, schema
  enforcement, code navigation, definition links, snippets, static security
  analysis, and more!


  The extension also integrates with [API Contract Security
  Audit](https://docs.42crunch.com/latest/content/concepts/api_contract_security_audit.htm)
  by 42Crunch, so that you can check the quality of your API definition directly
  in VS Code.


  Both OAS v2 and v3 are supported.


  ## Table of contents


  - [OpenAPI extension for Visual Studio
  Code](#openapi-extension-for-visual-studio-code)
    - [Table of contents](#table-of-contents)
    - [Quick start](#quick-start)
    - [Use the extension while editing your API](#use-the-extension-while-editing-your-api)
      - [Create new OpenAPI files](#create-new-openapi-files)
      - [Navigate API definition](#navigate-api-definition)
      - [Add new elements in the OpenAPI explorer](#add-new-elements-in-the-openapi-explorer)
      - [Use IntelliSense](#use-intellisense)
      - [Jump to a reference](#jump-to-a-reference)
      - [Sort entries in the navigation pane](#sort-entries-in-the-navigation-pane)
      - [Preview OpenAPI documentation](#preview-openapi-documentation)
      - [Execute operations with "Try it"](#execute-operations-with-try-it-beta)
    - [Use the extension to audit the security of your API](#use-the-extension-to-audit-the-security-of-your-api)
      - [Navigate the issues in the audit report](#navigate-the-issues-in-the-audit-report)
      - [Fix issues](#fix-issues)
        - [Individual fixes](#individual-fixes)
        - [Bulk fixes](#bulk-fixes)
    - [Miscellaneous commands](#miscellaneous-commands)
    - [Integration with 42Crunch Platform](#integration-with-42crunch-platform)
    - [Known issues](#known-issues)
    - [Feedback](#feedback)

  ## Quick start


  After installing the plugin, open any JSON or YAML file that contains an
  OpenAPI definition in VS Code. The plugin automatically detects that this is
  an OpenAPI file, and the OpenAPI button <img
  src="https://raw.githubusercontent.com/42Crunch/vscode-openapi/master/images/OpenAPI%20button.PNG"
  width=20 height=19> is shown in the left-hand panel.


  ![OpenAPI Explorer](images/OpenAPI%20Explorer.PNG)


  ## Use the extension while editing your API


  OpenAPI extension makes it easier and faster to navigate your OpenAPI
  definitions, especially when they get longer.


  You can home in on elements in the OpenAPI explorer view, or jump directly to
  the target of a reference in the API. You can also add new elements to your
  API directly in the OpenAPI explorer directly where they are needed. Filling
  in the details is quicker with IntelliSense support for OpenAPI elements.


  ### Create new OpenAPI files


  1. Press **Ctrl+Shift+P** on Windows or Linux, or **Cmd+Shift+P** on a Mac.

  2. In the command prompt, start typing `new openapi`, and click the
  corresponding command to create either an OAS v2 or v3 template file.

  3. Use the OpenAPI explorer to populate the template with new paths and other
  elements as needed.

  4. Save the file to your disk to fully enable IntelliSense.


  ![Create new OpenAPI file from a
  template](https://github.com/42Crunch/vscode-openapi/blob/master/images/New%20OpenAPI%20file.gif?raw=true)


  ### Navigate API definition


  1. Open an OpenAPI file.

  2. Click the OpenAPI button to switch to the OpenAPI explorer view.

  3. Expand the sections and elements in the file as needed, and click the ones
  you want to jump to in the editor.


  ![Navigation inside the OpenAPI
  file](https://github.com/42Crunch/vscode-openapi/blob/master/images/Naviation.gif?raw=true)


  ### Add new elements in the OpenAPI explorer


  1. In OpenAPI explorer pane, go to the section where you want to add a new
  element, and click the **...** menu.

  2. Click the item you want to add from the dropdown list.


  ![Add new API path and
  verb](https://github.com/42Crunch/vscode-openapi/blob/master/images/Add%20paths%20and%20verbs.gif?raw=true)


  ### Use IntelliSense


  As you start typing OpenAPI elements or their values, the context-sensitive
  list of available options is displayed in the IntelliSense menu. In JSON
  OpenAPI files, just type double-quote (`"`) to show the menu, and type further
  to filter the list. In YAML OpenAPI files, start typing the property name.


  You can also use the corresponding VS Code hotkey (**Ctrl+Space** on Windows,
  **Cmd+Space** on Mac) to open the IntelliSense menu.


  ![IntelliSense for OpenAPI
  editing](https://github.com/42Crunch/vscode-openapi/blob/master/images/Intellisense.gif?raw=true)


  ### Jump to a reference


  Use Go to Definition to locate the targets of references easily. To jump to
  view the definition from a reference in your API, either **Ctrl+click** a
  reference, or right-click a reference and click **Go to Definition** in the
  shortcut menu.


  ![Go to
  definition](https://github.com/42Crunch/vscode-openapi/blob/master/images/Go%20to%20Definition.gif?raw=true)


  ### Sort entries in the navigation pane


  By default, entries in the OpenAPI Explorer pane are sorted alphabetically. If
  you want to instead have them sorted in the order they are in the OpenAPI
  file, change the corresponding setting:


  1. On the **File** menu, click **Preferences > Settings**.

  2. Expand the **Extensions** section and click **OpenAPI**.

  3. Clear the checkbox **Alphabetically sort contents of OpenAPI explorer
  outlines**.


  ### Preview OpenAPI documentation


  You can get a documentation-style preview of the API you are editing by
  clicking the Preview button <img src="images/Preview_button.png" width=19 />
  at the top right:


  ![OpenAPI Preview Pane](images/OpenAPI_preview_pane.gif)


  Our extension supports two popular OpenAPI documentation generators:
  [SwaggerUI](https://swagger.io/tools/swagger-ui/) and
  [ReDoc](https://github.com/Redocly/redoc).


  To change the default OpenAPI Preview rendering engine:


  1. On the **File** menu, click **Preferences > Settings**.

  2. Expand the **Extensions** section and click **OpenAPI**.

  3. Pick the option of your choice from the **Default Preview Rendered**
  dropdown list.


  ![OpenAPI Preview Pane](images/Change_OpenAPI_Preview_engine.jpg)


  ### Execute operations with "Try it" (beta)


  With "Try it" you can invoke operations defined in your OpenAPI directly from
  VS Code.


  To do it click on "Try it" code lens which is displayed right below the HTTP
  verb ("get", "post", etc) of your operation and in the examples section.


  When using "Try it" from the examples, the value of the example will be used
  as the payload for the request. Otherwise payload will be generated based on
  the request JSON Schema, or the first example available.


  ![TryIt view](images/tryit.png)


  Try it is a new feature, and has number of limitations:


  - Only OpenAPI 3.x is supported. Try it is not available in Swagger/OpenAPI
  2.0 files.

  - Sending files is not supported

  - Try it works best with small textual responses, such as JSON. Binary/image
  responses will be shown as text


  ### Generate JSON Schema using based on the response content


  "Try it" can be used to generate JSON Schema based on the body of the
  response. To do it, select

  "Tools" tab in the TryIt response view and click "Generate schema" button.


  ![TryIt response tools](images/tryit-schema.png)


  ## Use the extension to audit the security of your API


  You can use OpenAPI extension to check the quality of your API as you work on
  it. You can run the audit directly from VS Code by clicking the **42C** button
  in the upper right corner.


  To run Security Audit from VS Code, you need a token. On the first time, you
  are asked to provide your email address. When you supply the address, the
  extension requests the token to be sent to your mailbox. Once you get the
  token, paste it in the prompt in VS Code, and you are all set. From now on,
  all you need to do is to click the button to run the audit.


  ### Navigate the issues in the audit report


  After the audit finishes, you get the audit report directly in the VS Code
  view, side by side with your code. Depending on your API definition, the
  report might be long, so here are some handy ways to navigate the found
  issues.


  1. To scroll through all issues and their details, use the text panel on the
  right.


  ![Perform REST API Security
  Audit](https://github.com/42Crunch/vscode-openapi/blob/master/images/Perform%20REST%20API%20Security%20Audit.gif?raw=true)


  2. Hover on an element that is underlined or marked with three dots
  (recommendations) in your code to see what the issues in that spot are. If you
  click on view the descriptions of only these issues, the rest of details are
  filtered out from the text panel, so you have less to scroll through.


  ![Details for specific
  issues](https://github.com/42Crunch/vscode-openapi/blob/master/images/Details%20for%20specific%20issues.gif?raw=true)


  3. For a quick overall look, check the counts in the Status Bar. The different
  icons match the severity of the issue:


  - Error: critical or high

  - Warning: medium

  - Info: low


  ![List of API Sec
  Issues](https://github.com/42Crunch/vscode-openapi/blob/master/images/List%20of%20API%20Sec%20Issues.gif?raw=true)


  4. Click the icons in the Status Bar to open the PROBLEMS panel and scroll
  through the issue titles. The issues are ordered from most to least severe, so
  it is easy for fix the worst offenders first. Note that recommendations are
  not listed in the PROBLEMS panel.

  5. Click on an issue in the PROBLEMS panel to jump to view it inline in your
  API definition.


  ### Fix issues


  Many of the issues reported by the Security Audit have Fixes associated with
  them. These are code snippets that you can get inserted into the OpenAPI file
  and then customize with the appropriate value.


  #### Individual fixes


  1. Perform the Security Audit by clicking the **42c** button.

  2. When you click some of the error lines in your OpenAPI file, you will see
  the QuickFix icon show up on the left of the line.

  3. Click the icon and select the QuickFix to apply.

  4. Tweak the values in the inserted code snippet as you see fit.


  ![Quick Fixes in VSCode](/images/Quick_Fixes_in_VSCode.gif)


  #### Bulk fixes


  If your OpenAPI file contains multiple similar issues - for example, a
  parameter with the same name is missing the pattern definition - you can fix
  all such occurrences in one go:


  1. Fix the first occurrence and supply the proper values in the code snippet.

  2. Go to the next occurrence and use the bulk QuickFix. This bulk QuickFix
  will reuse the values that you used previously for the parameter with the same
  name.


  ![Bulk Fixes in VSCode](/images/VSCode_OpenAPI_bulk_security_fixes.gif)


  ## Miscellaneous commands


  - You can load results of Security Audit from a file for a currently open
  OpenAPI file by running command `42Crunch: Load Security Audit report from
  file` from the command palette


  ## Integration with 42Crunch Platform


  This extension features optional integration with [42Crunch
  Platform](https://platform.42crunch.com/). To enable it please configure your
  credentials by running `42Crunch: Update platform credentials` command from
  the command palette.


  ## Known issues


  - For new files, IntelliSense does not work until you save the file. File
  extension must be `.json` or `.yaml`.

  - When running 42 Crunch Conformance Scan on a host with incorrect clock, the
  scan can fail with the message `cannot send the scan report : rpc error: code
  = InvalidArgument desc = invalid input`, to resolve the issue make sure your
  clock is correctly set.


  ## Feedback


  When you have a minute **PLEASE** submit your feedback and feature requests at
  [this superquick survey](https://www.surveymonkey.com/r/L7R69JR).


  Submit your bug reports at [GitHub project
  Issues](https://github.com/42Crunch/vscode-openapi/issues).


  And, needless to say, your reviews at [VS Code
  marketplace](https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi&ssr=false#review-details)
  mean the world to us!
mnf-group/openapimux: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5D:0720:AAA74D:159F2F0:6500FB59.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
leosussan/fastapi-gino-postgres: >
  # fastapi-gino-arq-uvicorn

  High-performance Async REST API, in Python. FastAPI + GINO + Arq + Uvicorn
  (powered by Redis & PostgreSQL).


  ## Get Started

  ### Run Locally

  _NOTE: You must have PostgreSQL & Redis running locally._


  1. Clone this Repository. `git clone
  https://github.com/leosussan/fastapi-gino-arq-uvicorn.git`

  2. Run `pipenv install --dev` from root. (Run `pip install pipenv` first, if
  necessary.)

  3. Make a copy of `.dist.env`, rename to `.env`. Fill in PostgreSQL, Redis
  connection vars.

  4. Generate DB Migrations: `alembic revision --autogenerate`. It will be
  applied when the application starts. You can trigger manually with `alembic
  upgrade head`.

  5. Run:
      - FastAPI Application:
          * _For Active Development (w/ auto-reload):_ Run locally with `pipenv run uvicorn app.main:app --reload `
          * _For Debugging (compatible w/ debuggers, no auto-reload):_ Configure debugger to run `python app/main.py`.
      - Background Task Worker:
          * _For Active Development:_ Run with `pipenv run arq app.worker.Worker --watch ./`

  ### Run Locally with Docker-Compose

  1. Clone this Repository. `git clone
  https://github.com/leosussan/fastapi-gino-arq-uvicorn.git`

  2. Generate a DB Migration: `alembic revision --autogenerate`.*

  3. Run locally using docker-compose. `docker-compose -f
  docker-compose.local.yml -f docker-compose.worker.yml -f docker-compose.yml up
  --build`.


  *`app/settings/prestart.sh` will run migrations for you before the app starts.


  ### Build Your Application

  * Create routes in `/app/routes`, import & add them to the `ROUTERS` constant
  in  `/app/main.py`

  * Create database models to `/app/models/orm`, add them to
  `/app/models/orm/migrations/env.py` for migrations

  * Create pydantic models in `/app/models/pydantic`

  * Store complex db queries in `/app/models/orm/queries`

  * Store complex tasks in `app/tasks`.

  * Add / edit globals to `/.env`, expose & import them from
  `/app/settings/globals.py`
      * Use any coroutine as a background function: store a reference in the `ARQ_BACKGROUND_FUNCTIONS` env.
      * Set `SENTRY_DSN` in your environment to enable Sentry.
  * Define code to run before launch (migrations, setup, etc) in
  `/app/settings/prestart.sh`


  ## Features

  ### Core Dependencies

  * **FastAPI:** touts performance on-par with NodeJS & Go + automatic Swagger +
  ReDoc generation. 

  * **GINO:** built on SQLAlchemy core. Lightweight, simple, asynchronous ORM
  for PostgreSQL.

  * **Arq:** Asyncio + Redis = fast, resource-light job queuing & RPC.

  * **Uvicorn:** Lightning-fast, asynchronous ASGI server.

  * **Optimized Dockerfile:** Optimized Dockerfile for ASGI applications, from
  https://github.com/tiangolo/uvicorn-gunicorn-docker.


  #### Additional Dependencies

  * **Pydantic:** Core to FastAPI. Define how data should be in pure, canonical
  python; validate it with pydantic. 

  * **Alembic:** Handles database migrations. Compatible with GINO.

  * **SQLAlchemy_Utils:** Provides essential handles & datatypes. Compatible
  with GINO.

  * **Sentry:** Open-source, cloud-hosted error + event monitoring.

  * **PostgreSQL:** Robust, fully-featured, scalable, open-source.

  * **Redis:** Fast, simple, broker for the Arq task queue.
Cornutum/tcases: >
  # Tcases: A Model-Based Test Case Generator #


  [![Maven](https://img.shields.io/badge/maven-4.0.2-green.svg)](https://search.maven.org/search?q=tcases-shell)

  [![Javadoc](https://img.shields.io/badge/javadoc-4.0.2-green.svg)](https://javadoc.io/doc/org.cornutum.tcases/tcases-shell)


  ## What's New? ##
    * The latest version ([Tcases 4.0.2](ReleaseNotes.md#402)) is now available at the Maven Central Repository.
      See [*How To Download Tcases*](HowToDownload.md) for download instructions.

    * Having trouble with Tcases? Check out [these tips](./Troubleshooting-FAQs.md).

    * Got a question? Need some guidance? Start a [discussion](https://github.com/Cornutum/tcases/discussions).

  ## What Does It Do? ##


  Tcases is a tool for designing tests. It doesn't matter what kind of system
  you are testing -- UI, command line,

  [REST-ful
  API](tcases-openapi/README.md#tcases-for-openapi-from-rest-ful-to-test-ful),
  or backend.  Nor does it matter

  what level of the system you are testing -- unit, subsystem, or full system.
  You can use Tcases to design your tests in any of

  these situations. With Tcases, you define the input space for your
  system-under-test and the level of coverage that you

  want. Then Tcases generates a minimal set of test cases that meets your
  requirements.


  Tcases is primarily a tool for black-box test design. For such tests, the
  concept of "coverage" is different from structural

  testing criteria such as line coverage, branch coverage, etc. Instead, Tcases
  is guided by coverage of the input space of your

  system.


  Tcases gives you a way to define the input space for your system in a form
  that is concise but comprehensive. Then Tcases allows

  you to control the number of test cases in your sample subset by specifying
  the level of coverage you want. You can start with a

  basic level of coverage, and Tcases will generate a small set of test cases
  that touches every significant element of the input

  space. Then you can improve your tests by selectively adding coverage in
  specific high-risk areas. For example, you can specify

  pairwise coverage or higher-order combinations of selected input variables.


  ## How Does It Work? ##


  First, you create a system input definition, a document that defines your
  system as a set of functions. For each system

  function, the system input definition defines the variables that characterize
  the function input space. If you are testing a Web

  service API, you can even [generate a system input definition
  automatically](tcases-openapi/README.md#tcases-for-openapi-from-rest-ful-to-test-ful)

  from an OpenAPI definition.


  Then, you can create a generator definition. That's another document that
  defines the coverage you want for each system

  function. The generator definition is optional. You can skip this step and
  still get a basic level of coverage.


  Finally, you run Tcases. Tcases is a Java program that you can run from the
  command line or using the

  [Tcases Maven
  Plugin](http://www.cornutum.org/tcases/docs/tcases-maven-plugin/). The command
  line version of Tcases comes with built-in

  support for running using a shell script or an ant target. Using your input
  definition and your generator definition, Tcases

  generates a system test definition. The system test definition is a document
  that lists, for each system function, a set of test

  cases that provides the specified level of coverage. Each test case defines a
  specific value for every function input

  variable. Tcases generates not only valid input values that define successful
  test cases but also invalid values for the tests

  cases that are needed to verify expected error handling.


  Of course, the system test definition is not something you can execute
  directly. (Unless it was

  [derived automatically from an OpenAPI
  definition](tcases-openapi/README.md#how-do-you-run-generated-api-test-cases)!)

  But it follows a well-defined schema, which means you can use a variety of
  transformation tools to convert it into a form that

  is suitable for testing your system. For example, Tcases comes with a built-in
  transformer that converts a system test

  definition into a Java source code template for a JUnit or TestNG test class.


  ## Get Started! ##

    * **The Lowdown**
      * [Tcases: The Complete Guide](./Tcases-Guide.md#tcases-the-complete-guide)
      * [Tcases for OpenAPI](tcases-openapi/README.md#tcases-for-openapi-from-rest-ful-to-test-ful): Testing a REST-ful API? Generate test cases directly from your OpenAPI v3 definition.
      * [The Tcases Maven Plugin](http://www.cornutum.org/tcases/docs/tcases-maven-plugin/)

    * **Helpful Guides**
      * [How To Download Using Maven](HowToDownload.md)
      * [How To Setup a Tcases Web Service](./Tcases-Web-Service.md)
      * [Using The Tcases API](./Using-Tcases-API.md)
      * [Troubleshooting FAQ](./Troubleshooting-FAQs.md#troubleshooting-faqs)
      * [Release Notes](ReleaseNotes.md)

    * **More Info**
      * [Model-Driven Testing Using Tcases](ModelDrivenTestingForAgileTeams.md)
      * Javadoc: [Tcases API](http://www.cornutum.org/tcases/docs/api/index.html)

  ## Contributors ##


  Thanks to the following people, who have contributed significant improvements
  to Tcases.

    * [Kerry Kimbrough](https://github.com/kerrykimbrough) (project founder)
    * [Juglar](https://github.com/juglar)
    * [Thibault Kruse](https://github.com/tkruse)
wrannaman/generators: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E55B:451B:AB37D0:15B7C2C:6500FBA4.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fukamachi/apispec: >
  # apispec


  [![Build
  Status](https://travis-ci.org/fukamachi/apispec.svg?branch=master)](https://travis-ci.org/fukamachi/apispec)

  [![Coverage
  Status](https://coveralls.io/repos/fukamachi/apispec/badge.svg?branch=master)](https://coveralls.io/r/fukamachi/apispec)


  A Common Lisp library for handling Web API specifications. This allows to
  validate and parse HTTP request headers, parameters and bodies with OpenAPI3
  specification.


  ## Warning


  This software is still ALPHA quality. The APIs will be likely to change.


  ## Prerequisite


  * [libyaml](http://pyyaml.org/wiki/LibYAML) for loading OpenAPI spec files.


  ## Usage


  ### Loading specification file


  ```common-lisp

  (defvar *spec*
    (apispec:load-from-file #P"docs/api.yaml"))

  (apispec:spec-version *spec*)

  ;=> "3.0.2"

  ```


  ### Getting the operation


  ```common-lisp

  (defvar *router* (apispec:spec-router *spec*))


  (apispec:find-route *router* :GET "/users/12")

  ;=> #<APISPEC/CLASSES/OPERATION:OPERATION {1003DDB073}>

  ```


  ### Parsing and Validating HTTP requests


  ```common-lisp

  (import '(lack.request:request-query-parameters
            lack.request:request-body-parameters
            lack.request:request-cookies
            apispec:request-path-parameters))

  ;; Clack application

  (defvar *app*
    (lambda (env)
      (multiple-value-bind (operation path-parameters)
          (apispec:find-route (spec-router *spec*)
                              (getf env :request-method)
                              (getf env :path-info))
        ;; Getting Lack.Request
        (let ((request (apispec:validate-request operation env
                                                 :path-parameters path-parameters)))
          ;; Write the main application here.

          ;; Accessors for getting each parameters.
          (request-query-parameters request)  ;=> Query parameters (alist)
          (request-body-parameters request)   ;=> Body parameters (alist)
          (request-path-parameters request)   ;=> Path parameters (alist)
          (request-cookies)                   ;=> Cookie parameters (alist)

          ))))

  ;; Start the server

  (clack:clackup *app*)

  ```


  ### Validating and Encoding HTTP responses


  ```common-lisp

  (import 'lack.response:make-response)


  (apispec:validate-response operation
                             (make-response 200
                                            '(:content-type "application/json")
                                            '(("id" . 3)
                                              ("name" . "初音ミク")
                                              ("is_admin" . nil))))
  ;=> (200 (:CONTENT-TYPE "application/json")
  ("{\"id\":3,\"name\":\"初音ミク\",\"is_admin\":false}"))

  ```


  ### Custom Encoder for standard objects


  ```common-lisp

  (import 'lack.response:make-response)


  ;; Custom class

  (defclass user ()
    ((id :initarg :id)
     (name :initarg :name)
     (is-admin :initarg :is-admin)))

  ;; Define APISPEC:ENCODE-OBJECT for the class

  (defmethod apispec:encode-object ((user user))
    `(("id" . ,(slot-value user 'id))
      ("name" . ,(slot-value user 'name))
      ("is_admin" . ,(slot-value user 'is-admin))))

  (defvar *yukari*
    (make-instance 'user
                   :id 14
                   :name "結月ゆかり"
                   :is-admin nil))

  (apispec:validate-response operation
                             (make-response 200
                                            '(:content-type "application/json")
                                            *yukari*))
  ;=> (200 (:CONTENT-TYPE "application/json")
  ("{\"id\":14,\"name\":\"結月ゆかり\",\"is_admin\":false}"))

  ```


  ## Examples


  See [examples/](examples/).


  ## See Also


  * [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification)

  * [Lack](https://github.com/fukamachi/lack)


  ## Author


  * Eitaro Fukamachi (e.arrows@gmail.com)


  ## Copyright


  Copyright (c) 2019 Eitaro Fukamachi (e.arrows@gmail.com)


  ## License


  Licensed under the BSD 3-Clause License.
sphinx-contrib/openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AAB:77E6:A4AF82:14E1236:6500FB81.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
VanMoof/gopenapi: "= GOpenAPI\n\nimage:https://circleci.com/gh/VanMoof/gopenapi.svg?style=svg&circle-token=3af6268b2c8da20c22632261882d358e3027c045[\"CircleCI\", link=\"https://circleci.com/gh/VanMoof/gopenapi\"]\n\nAn OpenAPI utility for Go.\nThis project aims to bring support of OpenAPI v3.\n\n== Usage\n\n```bash\n$ gopenapi [command] [arg]\n```\n\n=== Generating Specifications From Code\n\n```bash\ngopenapi generate spec [optional path] [flags]\n```\n\n==== Args\n\n```bash\n[optional path]   Optionally specify the directory in which to search. Accepts absolute paths. Relative paths are relative to the current directory. (default \".\")\n```\n\n==== Flags\n\n```bash\n-f, --format string   The format of the output. May be json or yaml (default \"json\")\n-o, --output string   Where the output should be directed. May be '-' (stdout) or a path to a file (default \"-\")\n```\n\n==== Format\n\nCode is annotated with different types of comments that help generate the spec.\n\nThe comment contains a keyword that specifies the type of the OpenAPI element.\n\nThe content of the comment should be a valid YAML OpenAPI element\n\n===== Info\n\nBegin a comment with `gopenapi:info` and follow up with a YAML representation of the OpenAPI Info element.\n\nThis element is then set to the `info` property of the specification.\n\n```go\npackage main\n\n/*\ngopenapi:info\ntitle: The App Name\nversion: 1.0\ndescription: |-\n  The app description\ncontact:\n  name: Jimbob Jones\n  url: https://jones.com\n  email: jimbob@jones.com\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\n*/\nfunc main() {\n}\n```\n\n===== Path\n\nBegin a comment with `gopenapi:path` and follow up with a YAML representation of the OpenAPI PathItem element.\n\nThis element is then appended to the `paths` property of the specification.\n\n```go\npackage main\n\n/*\ngopenapi:path\n/ping:\n  get:\n    responses:\n      200:\n        description: |-\n          The default response of \"ping\"\n        content:\n          text/plain:\n            example: pong\n*/\nfunc ControllerFunc() {\n}\n```\n\n===== Object Schema\n\nAnnotate a struct with a `gopenapi:objectSchema`.\n\nThe generated ObjectSchema element will be appended to the `components.schemas` property of the specification.\n\n```go\n//gopenapi:objectSchema\ntype RootModel struct {\n\tIntField    int64  `json:\"intField\"`\n\tStringField string `json:\"stringField\"`\n}\n\n// This struct will be ignored\ntype IgnoredModel struct {\n}\n\n//gopenapi:objectSchema\ntype AliasedModels []*AliasedModel // This alias will appear as a schema too\n\n//gopenapi:objectSchema\ntype AliasedModel struct {\n\tIgnoredField string `json:\"-\"` // This field will be ignored\n\tTimeField    time.Time\n}\n\n```\n\n===== Parameter\n\nAnnotate a `const` or a `var` with a `gopenapi:parameter`.\n\nThe annotated field will be appended to the `components.parameters` property of the specification.\n\n```go\n/*\ngopenapi:parameter\nin: path\nrequired: true\ncontent:\n  text/plain:\n    example: 30\n*/\nconst Limit = \"limit\"\n```\n\nThe name of the field (`Limit`) will be the parameter identifier and the value of the field (`limit`) will be the name of the parameter."
playpauseandstop/rororo: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2700:2A1E:A3787B:14BB9E0:6500FB71.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
wI2L/fizz: "\n<h1 align=\"center\">Fizz</h1>\n<p align=\"center\"><img src=\"images/lemon.png\" height=\"200px\" width=\"auto\" alt=\"Gin Fizz\"></p><p align=\"center\">Fizz is a wrapper for <strong>Gin</strong> based on <strong><a href=\"https://github.com/loopfz/gadgeto/tree/master/tonic\">gadgeto/tonic</a></strong>.</p>\n<p align=\"center\">It generates wrapping gin-compatible handlers that do all the repetitive work and wrap the call to your handlers. It can also generates an <i>almost</i> complete <strong>OpenAPI 3</strong> specification of your API.</p>\n<p align=\"center\">\n   <a href=\"https://pkg.go.dev/github.com/wI2L/fizz?tab=doc\"><img src=\"https://img.shields.io/static/v1?label=godev&message=reference&color=00add8&logo=go\"></a>\n   <a href=\"https://goreportcard.com/report/wI2L/fizz\"><img src=\"https://goreportcard.com/badge/github.com/wI2L/fizz\"></a>\n   <a href=\"https://github.com/wI2L/fizz/actions\"><img src=\"https://github.com/wI2L/fizz/workflows/CI/badge.svg\"></a>\n   <a href=\"https://codecov.io/gh/wI2L/fizz\"><img src=\"https://codecov.io/gh/wI2L/fizz/branch/master/graph/badge.svg\"/></a>\n   <a href=\"https://github.com/wI2L/fizz/releases\"><img src=\"https://img.shields.io/github/v/tag/wI2L/fizz?color=blueviolet&label=version&sort=semver\"></a>\n   <a href=\"LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"></a>\n   <a href=\"https://github.com/avelino/awesome-go\"><img src=\"https://awesome.re/mentioned-badge.svg\"></a>\n<br>\n</p>\n\n---\n\n### Getting started\n\nTo create a Fizz instance, you can pass an existing *Gin* engine to `fizz.NewFromEngine`, or use `fizz.New` that will use a new default *Gin* engine.\n\n```go\nengine := gin.Default()\nengine.Use(...) // register global middlewares\n\nf := fizz.NewFromEngine(engine)\n```\n\nA Fizz instance implements the `http.HandlerFunc` interface, which means it can be used as the base handler of your HTTP server.\n```go\nsrv := &http.Server{\n   Addr:    \":4242\",\n   Handler: f,\n}\nsrv.ListenAndServe()\n```\n\n### Handlers\n\nFizz abstracts the `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `OPTIONS`, `HEAD` and `TRACE` methods of a *Gin* engine. These functions accept a variadic list of handlers as the last parameter, but since Fizz relies on *tonic* to retrieve the informations required to generate the *OpenAPI* specification of the operation, **only one of the handlers registered MUST be wrapped with Tonic**.\n\nIn the following example, the `BarHandler` is a simple middleware that will be executed before the `FooHandler`, but the generator will use the input/output type of the `FooHandler` to generate the specification of the operation.\n\n```go\nfunc BarHandler(c *gin.Context) { ... }\nfunc FooHandler(*gin.Context, *Foo) (*Bar, error) { ... }\n\nfizz := fizz.New()\nfizz.GET(\"/foo/bar\", nil, BarHandler, tonic.Handler(FooHandler, 200))\n```\n\nHowever, registering only standard handlers that follow the `gin.HandlerFunc` signature is accepted, but the *OpenAPI* generator will ignore the operation and it won't appear in the specification.\n\n### Operation informations\n\nTo enrich an operation, you can pass a list of optional `OperationOption` functions as the second parameters of the `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `OPTIONS` and `HEAD` methods.\n\n```go\n// Set the default response description.\n// A default status text will be created from the code if it is omitted.\nfizz.StatusDescription(desc string)\n\n// Set the summary of the operation.\nfizz.Summary(summary string)\nfizz.Summaryf(format string, a ...interface{})\n\n// Set the description of the operation.\nfizz.Description(desc string)\nfizz.Descriptionf(format string, a ...interface{})\n\n// Override the ID of the operation.\n// Must be a unique string used to identify the operation among\n// all operations described in the API.\nfizz.ID(id string)\n\n// Mark the operation as deprecated.\nfizz.Deprecated(deprecated bool)\n\n// Add an additional response to the operation.\n// The example argument will populate a single example in the response schema.\n// For populating multiple examples, use fizz.ResponseWithExamples.\n// Notice that example and examples fields are mutually exclusive.\n// model, header, and example may be `nil`.\nfizz.Response(statusCode, desc string, model interface{}, headers []*ResponseHeader, example interface{})\n\n// ResponseWithExamples is a variant of Response that supports providing multiple examples.\n// Examples argument will populate multiple examples in the response schema.\n// For populating a single example, use fizz.Response.\n// Notice that example and examples fields are mutually exclusive.\n// model, header, and examples may be `nil`.\nfizz.ResponseWithExamples(statusCode, desc string, model interface{}, headers []*ResponseHeader, examples map[string]interface{})\n\n// Add an additional header to the default response.\n// Model can be of any type, and may also be `nil`,\n// in which case the string type will be used as default.\nfizz.Header(name, desc string, model interface{})\n\n// Override the binding model of the operation.\nfizz.InputModel(model interface{})\n\n// Overrides the top-level security requirement of an operation.\n// Note that this function can be used more than once to add several requirements.\nfizz.Security(security *openapi.SecurityRequirement)\n\n// Add an empty security requirement to this operation to make other security requirements optional.\nfizz.WithOptionalSecurity()\n\n// Remove any top-level security requirements for this operation.\nfizz.WithoutSecurity()\n\n// Add a Code Sample to the operation.\nfizz.XCodeSample(codeSample *XCodeSample)\n\n// Mark the operation as internal. The x-internal flag is interpreted by third-party tools and it only impacts the visual documentation rendering.\nfizz.XInternal()\n```\n\n**NOTES:**\n* `fizz.InputModel` allows to override the operation input regardless of how the handler implementation really binds the request parameters. It is the developer responsibility to ensure that the binding matches the OpenAPI specification.\n* The first argument of the `fizz.Reponse` method which represents an HTTP status code is of type *string* because the spec accept the value `default`. See the [Responses Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#responsesObject) documentation for more informations.\n\nTo help you declare additional headers, predefined variables for Go primitives types that you can use as the third argument of the `fizz.Header` method are available:\n```go\nvar (\n   Integer  int32\n   Long     int64\n   Float    float32\n   Double   float64\n   String   string\n   Byte     []byte\n   Binary   []byte\n   Boolean  bool\n   DateTime time.Time\n)\n```\n\n### Groups\n\nExactly like you would do with *Gin*, you can create a group of routes using the method `Group`. Unlike *Gin* own method, Fizz's one takes two other optional arguments, `name` and `description`. These parameters will be used to create a tag in the **OpenAPI** specification that will be applied to all the routes added to the group.\n\n```go\ngrp := f.Group(\"/subpath\", \"MyGroup\", \"Group description\", middlewares...)\n```\nIf the `name` parameter is empty, the tag won't be created and it won't be used.\n\nSubgroups of subgroups can be created to an infinite depth, according yo your needs.\n\n```go\nfoo := f.Group(\"/foo\", \"Foo\", \"Foo group\")\n\n// all routes registered on group bar will have\n// a relative path starting with /foo/bar\nbar := f.Group(\"/bar\", \"Bar\", \"Bar group\")\n\n// /foo/bar/{barID}\nbar.GET(\"/:barID\", nil, tonic.Handler(MyBarHandler, 200))\n```\n\nThe `Use` method can be used with groups to register middlewares after their creation.\n```go\ngrp.Use(middleware1, middleware2, ...)\n```\n\n## Tonic\n\nThe subpackage *tonic* handles path/query/header/body parameters binding in a single consolidated input object which allows you to remove all the boilerplate code that retrieves and tests the presence of various parameters. The *OpenAPI* generator make use of the input/output types informations of a tonic-wrapped handler reported by *tonic* to document the operation in the specification.\n\nThe handlers wrapped with *tonic* must follow the following signature.\n```go\nfunc(*gin.Context, [input object ptr]) ([output object], error)\n```\nInput and output objects are both optional, as such, the minimal accepted signature is:\n```go\nfunc(*gin.Context) error\n```\n\nTo wrap a handler with *tonic*, use the `tonic.Handler` method. It takes a function that follow the above signature and a default status code and return a `gin.HandlerFunc` function that can be used when you register a route with Fizz of *Gin*.\n\nOutput objects can be of any type, and will be marshalled to the desired media type.\nNote that the input object **MUST always be a pointer to a struct**, or the tonic wrapping will panic at runtime.\n\nIf you use closures as handlers, please note that they will all have the same name, and the generator will return an error. To overcome this problem, you have to explicitely set the ID of an operation when you register the handler.\n\n```go\nfunc MyHandler() gin.HandlerFunc {\n   return tonic.Handler(func(c *gin.Context) error {}, 200)\n}\n\nfizz.GET(\"/foo\", []fizz.OperationOption{\n   fizz.ID(\"MyOperationID\")\n}, MyHandler())\n```\n\n### Location tags\n\n*tonic* uses three struct tags to recognize the parameters it should bind to the input object of your tonic-wrapped handlers:\n- `path`: bind from the request path\n- `query`: bind from the request query string\n- `header`: bind from the request headers\n\nThe fields that doesn't use one of these tags will be considered as part of the request body.\n\nThe value of each struct tag represents the name of the field in each location, with options.\n```go\ntype MyHandlerParams struct {\n   ID  int64     `path:\"id\"`\n   Foo string    `query:\"foo\"`\n   Bar time.Time `header:\"x-foo-bar\"`\n}\n```\n\n*tonic* will automatically convert the value extracted from the location described by the tag to the appropriate type before binding.\n\n**NOTE**: A path parameter is always required and will appear required in the spec regardless of the `validate` tag content.\n\n### Additional tags\n\nYou can use additional tags. Some will be interpreted by *tonic*, others will be exclusively used to enrich the *OpenAPI* specification.\n\n| name          | description                                                                                                                                                                                                                                                                           |\n| ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `default`     | *tonic* will bind this value if none was passed with the request. This should not be used if a field is also required. Read the [documentation](https://swagger.io/docs/specification/describing-parameters/) (section _Common Mistakes_) for more informations about this behaviour. |\n| `description` | Add a description of the field in the spec.                                                                                                                                                                                                                                           |\n| `deprecated`  | Indicates if the field is deprecated. Accepted values are `1`, `t`, `T`, `TRUE`, `true`, `True`, `0`, `f`, `F`, `FALSE`. Invalid value are considered to be false.                                                                                                                    |\n| `enum`        | A coma separated list of acceptable values for the parameter.                                                                                                                                                                                                                         |\n| `example`     | An example value to be used in OpenAPI specification. See [section below](#Providing-Examples-for-Custom-Types) for the demonstration on how to provide example for custom types.                                                                                                     |\n| `format`      | Override the format of the field in the specification. Read the [documentation](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#dataTypeFormat) for more informations.                                                                                     |\n| `validate`    | Field validation rules. Read the [documentation](https://godoc.org/gopkg.in/go-playground/validator.v8) for more informations.                                                                                                                                                        |\n| `explode`     | Specifies whether arrays should generate separate parameters for each array item or object property (limited to query parameters with *form* style). Accepted values are `1`, `t`, `T`, `TRUE`, `true`, `True`, `0`, `f`, `F`, `FALSE`. Invalid value are considered to be false.     |\n\n### JSON/XML\n\nThe JSON/XML encoders usually omit a field that has the tag `\"-\"`. This behaviour is reproduced by the *OpenAPI* generator ; a field with this tag won't appear in the properties of the schema.\n\nIn the following example, the field `Input` is used only for binding request body parameters and won't appear in the output encoding while `Output` will be marshaled but will not be used for parameters binding.\n```go\ntype Model struct {\n\tInput  string `json:\"-\"`\n\tOutput string `json:\"output\" binding:\"-\"`\n}\n```\n\n### Request body\n\nIf you want to make a request body field mandatory, you can use the tag `validate:\"required\"`. The validator used by *tonic* will ensure that the field is present.\nTo be able to make a difference between a missing value and the zero value of a type, use a pointer.\n\nTo explicitly ignore a parameter from the request body, use the tag `binding:\"-\"`.\n\nNote that the *OpenAPI* generator will ignore request body parameters for the routes with a method that is one of `GET`, `DELETE` or `HEAD`.\n   > GET, DELETE and HEAD are no longer allowed to have request body because it does not have defined semantics as per [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3).\n\t[*source*](https://swagger.io/docs/specification/describing-request-body/)\n\n### Schema validation\n\nThe *OpenAPI* generator recognize some tags of the [go-playground/validator.v8](https://gopkg.in/go-playground/validator.v8) package and translate those to the [properties of the schema](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#properties) that are taken from the [JSON Schema definition](http://json-schema.org/latest/json-schema-validation.html#rfc.section.6).\n\nThe supported tags are: [len](https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Length), [max](https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Maximum), [min](https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Mininum), [eq](https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Equals), [gt](https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Greater_Than), [gte](https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Greater_Than_or_Equal), [lt](https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Less_Than), [lte](https://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Less_Than_or_Equal).\n\nBased on the type of the field that carry the tag, the fields `maximum`, `minimum`, `minLength`, `maxLength`, `minItems`, `maxItems`, `minProperties` and `maxProperties` of its **JSON Schema** will be filled accordingly.\n\n## OpenAPI specification\n\nTo serve the generated OpenAPI specification in either `JSON` or `YAML` format, use the handler returned by the `fizz.OpenAPI` method.\n\nTo enrich the specification, you can provide additional informations. Head to the [OpenAPI 3 spec](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#infoObject) for more informations about the API informations that you can specify, or take a look at the type `openapi.Info` in the file [`openapi/spec.go`](openapi/spec.go#L25).\n\n```go\nf := fizz.New()\ninfos := &openapi.Info{\n   Title:       \"Fruits Market\",\n   Description: `This is a sample Fruits market server.`,\n   Version:     \"1.0.0\",\n}\nf.GET(\"/openapi.json\", nil, f.OpenAPI(infos, \"json\"))\n```\n**NOTE**: The generator will never panic. However, it is strongly recommended to call `fizz.Errors` to retrieve and handle the errors that may have occured during the generation of the specification before starting your API.\n\n#### Servers information\n\nIf the OpenAPI specification refers to an API that is not hosted on the same domain, or using a path prefix not included in the spec, you will have to declare server information. This can be achieved using the `f.Generator().SetServers` method.\n\n```go\nf := fizz.New()\nf.Generator().SetServers([]*openapi.Server{\n   {\n      Description: \"Fruits Market - production\",\n      URL:         \"https://example.org/api/1.0\",\n   },\n})\n```\n\n#### Security schemes\n\nIf your API requires authentication, you have to declare the security schemes that can be used by the operations. This can be achieved using the `f.Generator().SetSecuritySchemes` method.\n\n```go\nf := fizz.New()\nf.Generator().SetSecuritySchemes(map[string]*openapi.SecuritySchemeOrRef{\n   \"apiToken\": {\n      SecurityScheme: &openapi.SecurityScheme{\n         Type: \"apiKey\",\n         In:   \"header\",\n         Name: \"x-api-token\",\n      },\n   },\n})\n```\n\nOnce defined, the security schemes will be available for all operations. You can override them on an per-operation basis using the `fizz.Security()` function.\n\n```go\nfizz.Security(&openapi.SecurityRequirement{\n   \"apiToken\": []string{},\n})\n```\n\n#### Components\n\nThe output types of your handlers are registered as components within the generated specification. By default, the name used for each component is composed of the package and type name concatenated using _CamelCase_ style, and does not contain the full import path. As such, please ensure that you don't use the same type name in two eponym package in your application.\n\nThe names of the components can be customized in two different ways.\n\n##### Global override\n\nOverride the name of a type globally before registering your handlers. This has the highest precedence.\n```go\nf := fizz.New()\nf.Generator().OverrideTypeName(reflect.TypeOf(T{}), \"OverridedName\")\n```\n\n##### Interface\n\nImplements the `openapi.Typer` interface on your types.\n```go\nfunc (*T) TypeName() string { return \"OverridedName\" }\n```\n**WARNING:** You **MUST** not rely on the method receiver to return the name, because the method will be called on a new instance created by the generator with the `reflect` package.\n\n#### Custom schemas\n\nThe spec generator creates OpenAPI schemas for your types based on their [reflection kind](https://golang.org/pkg/reflect/#Kind).\nIf you want to control the output schema of a type manually, you can implement the `DataType` interface for this type.\n\nFor example, given a UUID version 4 type, declared as a struct, that should appear as a string with a custom format.\n```go\ntype UUIDv4 struct { ... }\n\nfunc (*UUIDv4) Format() string { return \"uuid\" }\nfunc (*UUIDv4) Type() string { return \"string\" }\n```\n\nThe schema of the type will look like the following instead of describing all the fields of the struct.\n```json\n{\n   \"type\": \"string\",\n   \"format\": \"uuid\"\n}\n```\n\nIf you want to override the `nullable` property of a type, you can implement the `Nullable` interface for this type.\n\nFor example, if [`sql.NullString`](https://pkg.go.dev/database/sql#NullString) is not referenced by a pointer in your model but you still want it to be \"nullable\":\n\n```go\ntype NullString sql.NullString\n\nfunc (NullString) Nullable() bool { return true }\n```\n\n**WARNING:** You **MUST** not rely on the method receivers to return the type and format, because these methods will be called on a new instance created by the generator with the `reflect` package.\n\nYou can also override manually the type and format using `OverrideDataType()`. This has the highest precedence.\n```go\nfizz.Generator().OverrideDataType(reflect.TypeOf(&UUIDv4{}), \"string\", \"uuid\")\n```\n\n##### Native and imported types support\n\nFizz supports some native and imported types. A schema with a proper type and format will be generated automatically, removing the need for creating your own custom schema.\n\n* [`time.Time`](https://golang.org/pkg/time/#Time)\n* [`time.Duration`](https://golang.org/pkg/time/#Duration)\n* [`net.URL`](https://golang.org/pkg/net/url/#URL)\n* [`net.IP`](https://golang.org/pkg/net/#IP)\n\nNote that, according to the doc, the inherent version of the address is a semantic property, and thus cannot be determined by Fizz. Therefore, the format returned is simply `ip`. If you want to specify the version, you can use the tags `format:\"ipv4\"` or `format:\"ipv6\"`.\n* [`uuid.UUID`](https://godoc.org/github.com/gofrs/uuid#UUID)\n\n#### Markdown\n\n> Throughout the specification description fields are noted as supporting CommonMark markdown formatting. Where OpenAPI tooling renders rich text it MUST support, at a minimum, markdown syntax as described by CommonMark 0.27. Tooling MAY choose to ignore some CommonMark features to address security concerns.\n[*source*](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#rich-text-formatting)\n\nTo help you write markdown descriptions in Go, a simple builder is available in the sub-package `markdown`. This is quite handy to avoid conflicts with backticks that are both used in Go for litteral multi-lines strings and code blocks in markdown.\n\n#### Providing Examples for Custom Types\nTo be able to provide examples for custom types, they must implement the `json.Marshaler` and/or `yaml.Marshaler` and the following interface:\n```go\ntype Exampler interface {\n       ParseExample(v string) (interface{}, error)\n}\n```\n\nIf the custom type implements the interface, Fizz will pass the value from the `example` tag to the `ParseExample` method and use the return value as the example in the OpenAPI specification.\n\n## Known limitations\n\n- Since *OpenAPI* is based on the *JSON Schema* specification itself, objects (Go maps) with keys that are not of type `string` are not supported and will be ignored during the generation of the specification.\n- Recursive embedding of the same type is not supported, at any level of recursion. The generator will warn and skip the offending fields.\n   ```go\n   type A struct {\n      Foo int\n      *A   // ko, embedded and same type as parent\n      A *A // ok, not embedded\n      *B   // ok, different type\n   }\n\n   type B struct {\n      Bar string\n      *A // ko, type B is embedded in type A\n      *C // ok, type C does not contains an embedded field of type A\n   }\n\n   type C struct {\n      Baz bool\n   }\n   ```\n\n## Examples\n\nA simple runnable API is available in `examples/market`.\n```shell\ngo build\n./market\n# Retrieve the specification marshaled in JSON.\ncurl -i http://localhost:4242/openapi.json\n```\n\n## Credits\n\nFizz is based on [gin-gonic/gin](https://github.com/gin-gonic/gin) and use [gadgeto/tonic](https://github.com/loopfz/gadgeto/tree/master/tonic). :heart:\n\n<p align=\"right\"><img src=\"https://forthebadge.com/images/badges/built-with-swag.svg\"></p>\n"
leosussan/fastapi-gino-arq-uvicorn: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B4F:71E4:A93D9D:1578E9D:6500FB4F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
dgouyette/play-api-refiner: >+
  [![Build
  status](https://api.travis-ci.com/dgouyette/play-api-refined.svg?branch=develop)](https://travis-ci.com/dgouyette/play-api-refined?branch=develop)

  [![codecov](https://codecov.io/gh/dgouyette/play-api-refined/branch/develop/graph/badge.svg)](https://codecov.io/gh/dgouyette/play-api-refined)

  [![License](https://img.shields.io/:license-MIT-blue.svg)](https://opensource.org/licenses/MIT)



  # Play API Refined


  A tiny library to generate OpenAPI  documentation and json schema based on
  Refined's case classes.



  ## Setup


  In order to use play-json-org.dgouyette.refined you need to add the following
  lines to your `build.sbt`:


  ```scala

  resolvers += Resolver.bintrayRepo("dgouyette", "maven")


  libraryDependencies += "org.dgouyette" %% "api-refiner" % "1.0.0-M1"

  ```


  ## Usage


  ### Play Json Refined  errors 


  To return json errors based on org.dgouyette.refined classes you must import :


  ````scala

  import org.org.dgouyette.json.RefinedRuntimeValidator._

  ````


  ### Json Schema generation


  ```scala


  case class CollectionStringNonEmpty(e : List[String] Refined NonEmpty)

  JsonSchema.asJsValue[CollectionStringNonEmpty] // =>
  {"e":{"minLength":1,"type":"array","items":{"type":"string"}}}


  ```


  ### Json Schema on Client Error 


  ```scala

  case class LoginDTO(email  : String Refined NonEmpty, password : String
  Refined NonEmpty)



  @Singleton

  class HomeController @Inject()(bp: BodyParserWithJsonSchema) extends
  AbstractController(cc) {
    implicit val loginSchema = JsonSchema.asJsValue[LoginDTO]
    implicit val dtoSchema = JsonSchema.asJsValue[SimpleDTO]
    
    def login(): Action[LoginDTO] = Action(bp.jsonRefined(LoginDTO.fmt, loginSchema)) {
      implicit request =>
      Ok
    }
  }

  ``` 


  With a bad client request : 


  `curl -X POST http://localhost:9000/login -d '{"email" :"","password" :"" }'`


  You will have this error 


  ```json

  {
      "obj.email": [
          {
              "msg": [
                  "Predicate isEmpty() did not fail."
              ],
              "args": []
          }
      ],
      "_schema": {
          "password": {
              "minLength": 1,
              "type": "string"
          },
          "email": {
              "minLength": 1,
              "type": "string"
          }
      },
      "obj.password": [
          {
              "msg": [
                  "Predicate isEmpty() did not fail."
              ],
              "args": []
          }
      ]
  }

  ```


  ## Generate OpenAPI (Swagger) Documentation


  OpenAPIController : 

  ````scala

  def json: Action[Unit] = Action(parse.empty) {
      implicit  req =>
       Ok(OpenAPI.fromRoutesFile("conf/routes"))
    }
  ````


  conf/routes

  ```

  POST        /login                           controllers.HomeController.login

  GET         /doc/json                       
  controllers.OpenAPIController.json

  ```


  ![OpenAPI Documentation](openAPI.png)

ErikWittern/openapi-snippet: >
  # OpenAPI Snippet

  **Generates code snippets from Open API (previously Swagger) documents.**


  This package takes as input an OpenAPI v2.0 or v3.0.x document. It translates
  the document into an [HTTP Archive 1.2 request
  object](http://www.softwareishard.com/blog/har-12-spec/#request). It uses the
  [HTTP Snippet](https://github.com/Mashape/httpsnippet) library to generate
  code snippets for every API endpoint (URL path + HTTP method) defined in the
  specification in various languages & tools (`cURL`, `Node`, `Python`, `Ruby`,
  `Java`, `Go`, `C#`...), or for selected endpoints.


  ## Installation


  ```bash

  npm i openapi-snippet

  ```


  ## Build OpenAPI Snippet (for use in browser)

  Clone this repository. Install required dependencies:


  ```bash

  npm i

  ```


  Build a minified version of OpenAPI Snippet (`openapisnippet.min.js`):


  ```bash

  npm run build

  ```


  ## Usage


  ### As a module


  ```javascript

  const OpenAPISnippet = require('openapi-snippet')


  // define input:

  const openApi = ... // Open API document

  const targets = ['node_unirest', 'c'] // array of targets for code snippets.
  See list below...


  try {
    // either, get snippets for ALL endpoints:
    const results = OpenAPISnippet.getSnippets(openApi, targets) // results is now array of snippets, see "Output" below.

    // ...or, get snippets for a single endpoint:
    const results2 = OpenAPISnippet.getEndpointSnippets(openApi, '/users/{user-id}/relationship', 'get', targets)
  } catch (err) {
    // do something with potential errors...
  }

  ```


  ### Within the browser


  Include the `openapisnippet.min.js` file created after building the the
  library (see above) in your HTML page:


  ```html

  <script type="text/javascript" src="path/to/openapisnippet.min.js"></script>

  ```


  Use OpenAPI Snippet, which now defines the global variable `OpenAPISnippet`.



  ## Output

  The output for every endpoint is an object, containing the `method`, `url`, a
  human-readable `description`, and the corresponding `resource` - all of these
  values stem from the OpenAPI document. In addition, within the `snippets`
  list, an object containing a code snippet for every chosen target is provided.
  As of version `0.4.0`, the snippets include exemplary payload data.


  If `getSnippets` is used, an array of the above described objects is returned.


  For example:


  ```js

  [
    // ...
    {
      "method": "GET",
      "url": "https://api.instagram.com/v1/users/{user-id}/relationship",
      "description": "Get information about a relationship to another user.",
      "resource": "relationship",
      "snippets": [
        {
          "id": "node",
          "mimeType": "application/json",  // Only set for methods with a request body
          "title": "Node + Native",
          "content": "var http = require(\"https\");\n\nvar options = {..."
        }
      ]
    }
    // ...
  ]

  ```


  ## Targets

  Currently, OpenAPI Snippet supports the following
  [targets](https://github.com/Kong/httpsnippet/tree/master/src/targets)
  (depending on the HTTP Snippet library):


  * `c_libcurl` (default)

  * `csharp_restsharp` (default)

  * `csharp_httpclient`

  * `go_native` (default)

  * `java_okhttp`

  * `java_unirest` (default)

  * `javascript_jquery`

  * `javascript_xhr` (default)

  * `node_native` (default)

  * `node_request`

  * `node_unirest`

  * `objc_nsurlsession` (default)

  * `ocaml_cohttp` (default)

  * `php_curl` (default)

  * `php_http1`

  * `php_http2`

  * `python_python3` (default)

  * `python_requests`

  * `ruby_native` (default)

  * `shell_curl` (default)

  * `shell_httpie`

  * `shell_wget`

  * `swift_nsurlsession` (default)


  If only the language is provided (e.g., `c`), the default library will be
  selected.



  License: MIT
openapi-contrib/openapi3-generator: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B68:9AE9:A07D0B:146080C:6500FB66.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
networknt/json-schema-validator: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6B:0D50:B7DAF8:174624D:6500FB61.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
networknt/light-codegen: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B7C:3B7D:9BE912:13CBEE6:6500FB61.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
sunrise-php/http-router: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AAC:71E4:A98173:15818FE:6500FB89.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
RuntimeTools/chai-openapi-response-validator: >
  # OpenAPI Validators


  [![Build
  Status](https://travis-ci.com/RuntimeTools/OpenAPIValidators.svg?branch=master)](https://travis-ci.com/RuntimeTools/OpenAPIValidators)

  ![dependencies](https://img.shields.io/david/RuntimeTools/OpenAPIValidators)

  ![style](https://img.shields.io/badge/code%20style-airbnb-ff5a5f.svg)

  [![codecov](https://codecov.io/gh/RuntimeTools/OpenAPIValidators/branch/master/graph/badge.svg)](https://codecov.io/gh/RuntimeTools/OpenAPIValidators)


  Chai and Jest support for asserting that HTTP responses satisfy an OpenAPI
  spec.


  ## Problem


  If your server's behaviour doesn't match your API documentation, then you need
  to correct your server, your documentation, or both. The sooner you know the
  better.


  ## Solution


  These plugin let you automatically test whether your server's behaviour and
  documentation match. They extend Chai and Jest to support the [OpenAPI
  standard](https://swagger.io/docs/specification/about/) for documenting REST
  APIs. In your JavaScript tests, you can simply assert
  `expect(responseObject).toSatisfyApiSpec()`



  ### [Chai OpenAPI Response
  Validator](https://github.com/RuntimeTools/OpenAPIValidators/tree/master/packages/chai-openapi-response-validator#readme):


  [![downloads](https://img.shields.io/npm/dm/chai-openapi-response-validator)](https://www.npmjs.com/package/chai-openapi-response-validator)

  [![npm](https://img.shields.io/npm/v/chai-openapi-response-validator.svg)](https://www.npmjs.com/package/chai-openapi-response-validator)



  ###
  [jest-openapi](https://github.com/RuntimeTools/OpenAPIValidators/tree/master/packages/jest-openapi#readme)


  [![downloads](https://img.shields.io/npm/dm/jest-openapi)](https://www.npmjs.com/package/jest-openapi)

  [![npm](https://img.shields.io/npm/v/jest-openapi.svg)](https://www.npmjs.com/package/jest-openapi)
ahx/openapi_first: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  270B:63DC:800B62:104BB78:6500FB13.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
pace/bricks: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A8F:6A5B:AE3D7E:161AD7C:6500FB6E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
kiwicom/schemathesis: >
  Schemathesis

  ============


  |Build| |Coverage| |Version| |Python versions| |Docs| |Chat| |License|


  Schemathesis is a tool for testing your web applications built with Open API /
  Swagger or GraphQL specifications.


  It reads the application schema and generates test cases which will ensure
  that your application is compliant with its schema.


  The application under test could be written in any language, the only thing
  you need is a valid API schema in a supported format.


  **Supported specification versions**:


  - Swagger 2.0

  - Open API 3.0.x

  - GraphQL June 2018


  More API specifications will be added in the future.


  Built with:


  - `hypothesis`_


  - `hypothesis_jsonschema`_


  - `hypothesis_graphql`_


  - `pytest`_


  Inspired by wonderful `swagger-conformance
  <https://github.com/olipratt/swagger-conformance>`_ project.


  **Docs**: https://schemathesis.readthedocs.io/en/stable/


  **Gitter**: https://gitter.im/kiwicom/schemathesis


  If you are looking for more information:


  - `An article
  <https://code.kiwi.com/schemathesis-property-based-testing-for-api-schemas-52811fd2b0a4>`_
  about Schemathesis by **@Stranger6667**

  - `A video <https://youtu.be/1lo7idI7uq8>`_ from FlaskCon 2020 by **@hultner**


  Installation

  ------------


  To install Schemathesis via ``pip`` run the following command:


  .. code:: bash

      pip install schemathesis

  Usage

  -----


  There are two basic ways to use Schemathesis:


  - `Command Line Interface
  <https://github.com/kiwicom/schemathesis#command-line-interface>`_

  - `Writing tests in Python <https://github.com/kiwicom/schemathesis#in-code>`_


  CLI is pretty simple to use and requires no coding, in-code approach gives
  more flexibility.


  Command Line Interface

  ~~~~~~~~~~~~~~~~~~~~~~


  The ``schemathesis`` command can be used to perform Schemathesis test cases:


  .. code:: bash

      schemathesis run https://example.com/api/swagger.json

  .. image::
  https://github.com/kiwicom/schemathesis/blob/master/img/schemathesis.gif


  If your application requires authorization then you can use ``--auth`` option
  for Basic Auth and ``--header`` to specify

  custom headers to be sent with each request.


  To filter your tests by endpoint name, HTTP method, Open API tags or
  operationId you could use ``-E``, ``-M``, ``-T``, ``-O`` options respectively.


  CLI supports passing options to ``hypothesis.settings``. All of them are
  prefixed with ``--hypothesis-``:


  .. code:: bash

      schemathesis run --hypothesis-max-examples=1000 https://example.com/api/swagger.json

  To speed up the testing process Schemathesis provides ``-w/--workers`` option
  for concurrent test execution:


  .. code:: bash

      schemathesis run -w 8 https://example.com/api/swagger.json

  In the example above all tests will be distributed among 8 worker threads.


  If you'd like to test your web app (Flask or AioHTTP or FastAPI for example)
  then there is ``--app`` option for you:


  .. code:: bash

      schemathesis run --app=importable.path:app /swagger.json

  You need to specify an importable path to the module where your app instance
  resides and a variable name after ``:`` that points

  to your app. **Note**, app factories are not supported. The schema location
  could be:


  - A full URL;

  - An existing filesystem path;

  - In-app endpoint with schema.


  This method is significantly faster for WSGI apps, since it doesn't involve
  network.


  For the full list of options, run:


  .. code:: bash

      schemathesis --help
      # Or
      schemathesis run --help

  Docker

  ~~~~~~


  Schemathesis CLI also available as a docker image


  .. code:: bash

      docker run kiwicom/schemathesis:stable run http://example.com/schema.json

  To run it against localhost server add ``--network=host`` parameter:


  .. code:: bash

      docker run --network="host" kiwicom/schemathesis:stable run http://127.0.0.1/schema.json

  Pre-run CLI hook

  ################


  Sometimes you need to execute custom code before the CLI run, for example
  setup an environment,

  register custom string format strategies or modify Schemathesis behavior in
  runtime you can use ``--pre-run`` hook:


  .. code:: bash

      schemathesis --pre-run importable.path.to.module run https://example.com/api/swagger.json

  **NOTE**. This option should be passed before the ``run`` part.


  The passed value will be processed as an importable Python path, where you can
  execute your code.

  An example - https://github.com/kiwicom/schemathesis#custom-string-strategies


  Registering custom checks for CLI

  #################################


  To add a new check for the Schemathesis CLI there is a special function


  .. code:: python

      import schemathesis

      @schemathesis.register_check
      def new_check(response, case):
          # some awesome assertions!
          pass

  The registered check should accept a ``response`` with ``requests.Response`` /
  ``schemathesis.utils.WSGIResponse`` type and

  ``case`` with ``schemathesis.models.Case`` type.


  After registration, your checks will be available in Schemathesis CLI and you
  can use them via ``-c`` command line option.


  .. code:: bash

      schemathesis --pre-run module.with.checks run -c new_check https://example.com/api/swagger.json

  Additionally, checks may return ``True`` to skip the check under certain
  conditions. For example, you may only want to run checks when the

  response code is ``200``.


  .. code:: python

      import schemathesis

      @schemathesis.register_check
      def conditional_check(response, case):
          if response.status_code == 200:
              # some awesome assertions!
          else:
              # check not relevant to this response, skip test
              return True

  In-code

  ~~~~~~~


  To examine your application with Schemathesis you need to:


  - Setup & run your application, so it is accessible via the network;

  - Write a couple of tests in Python;

  - Run the tests via ``pytest``.


  Suppose you have your application running on ``http://0.0.0.0:8080`` and its

  schema is available at ``http://0.0.0.0:8080/swagger.json``.


  A basic test, that will verify that any data, that fit into the schema will
  not cause any internal server error could

  look like this:


  .. code:: python

      # test_api.py
      import requests
      import schemathesis

      schema = schemathesis.from_uri("http://0.0.0.0:8080/swagger.json")

      @schema.parametrize()
      def test_no_server_errors(case):
          # `requests` will make an appropriate call under the hood
          response = case.call()  # use `call_wsgi` if you used `schemathesis.from_wsgi`
          # You could use built-in checks
          case.validate_response(response)
          # Or assert the response manually
          assert response.status_code < 500


  It consists of four main parts:


  1. Schema preparation; ``schemathesis`` package provides multiple ways to
  initialize the schema - ``from_path``, ``from_dict``, ``from_uri``,
  ``from_file`` and ``from_wsgi``.


  2. Test parametrization; ``@schema.parametrize()`` generates separate tests
  for all endpoint/method combination available in the schema.


  3. A network call to the running application; ``case.call`` does it.


  4. Verifying a property you'd like to test; In the example, we verify that any
  app response will not indicate a server-side error (HTTP codes 5xx).


  **NOTE**. Look for ``from_wsgi`` usage `below
  <https://github.com/kiwicom/schemathesis#wsgi>`_


  Run the tests:


  .. code:: bash

      pytest test_api.py

  **Other properties that could be tested**:


  - Any call will be processed in <50 ms - you can verify the app performance;

  - Any unauthorized access will end with 401 HTTP response code;


  Each test function should have the ``case`` fixture, that represents a single
  test case.


  Important ``Case`` attributes:


  - ``method`` - HTTP method

  - ``formatted_path`` - full endpoint path

  - ``headers`` - HTTP headers

  - ``query`` - query parameters

  - ``body`` - request body


  You can use them manually in network calls or can convert to a dictionary
  acceptable by ``requests.request``:


  .. code:: python

      import requests

      schema = schemathesis.from_uri("http://0.0.0.0:8080/swagger.json")

      @schema.parametrize()
      def test_no_server_errors(case):
          kwargs = case.as_requests_kwargs()
          response = requests.request(**kwargs)


  For each test, Schemathesis will generate a bunch of random inputs acceptable
  by the schema.

  This data could be used to verify that your application works in the way as
  described in the schema or that schema describes expected behavior.


  By default, there will be 100 test cases per endpoint/method combination.

  To limit the number of examples you could use ``hypothesis.settings``
  decorator on your test functions:


  .. code:: python

      from hypothesis import settings

      @schema.parametrize()
      @settings(max_examples=5)
      def test_something(client, case):
          ...

  To narrow down the scope of the schemathesis tests it is possible to filter by
  method or endpoint:


  .. code:: python

      @schema.parametrize(method="GET", endpoint="/pet")
      def test_no_server_errors(case):
          ...

  The acceptable values are regexps or list of regexps (matched with
  ``re.search``).


  WSGI applications support

  ~~~~~~~~~~~~~~~~~~~~~~~~~


  Schemathesis supports making calls to WSGI-compliant applications instead of
  real network calls, in this case

  the test execution will go much faster.


  .. code:: python

      app = Flask("test_app")

      @app.route("/schema.json")
      def schema():
          return {...}

      @app.route("/v1/users", methods=["GET"])
      def users():
          return jsonify([{"name": "Robin"}])

      schema = schemathesis.from_wsgi("/schema.json", app)

      @schema.parametrize()
      def test_no_server_errors(case):
          response = case.call_wsgi()
          assert response.status_code < 500

  Explicit examples

  ~~~~~~~~~~~~~~~~~


  If the schema contains parameters examples, then they will be additionally
  included in the generated cases.

  Schemathesis supports the use of both OpenAPI ``example`` and ``examples``
  (more information available in the `OpenAPI documentation
  <https://swagger.io/docs/specification/adding-examples/>`_).

  Note that ``examples`` were added in OpenAPI 3, but Schemathesis supports this
  feature for OpenAPI 2 using ``x-examples``.


  .. code:: yaml

      paths:
        get:
          parameters:
          - in: body
            name: body
            required: true
            schema: '#/definitions/Pet'

      definitions:
        Pet:
          additionalProperties: false
          example:
            name: Doggo
          properties:
            name:
              type: string
          required:
          - name
          type: object


  With this Swagger schema example, there will be a case with body ``{"name":
  "Doggo"}``.  Examples handled with

  ``example`` decorator from Hypothesis, more info about its behavior is
  `here`_.


  If you'd like to test only examples provided in the schema, you could utilize
  ``--hypothesis-phases=explicit`` CLI option:


  .. code:: bash

      $ schemathesis run --hypothesis-phases=explicit https://example.com/api/swagger.json

  Or add this decorator to your test if you use Schemathesis in your Python
  tests:


  .. code:: python

      from hypothesis import settings, Phase

      ...
      @schema.parametrize()
      @settings(phases=[Phase.explicit])
      def test_api(case):
          ...

  **NOTE**. Schemathesis supports examples in individual properties.

  See below:


  .. code:: yaml

      ...
      paths:
        /users:
          parameters:
            - in: query
              name: foo
              schema:
                type: object
                properties:
                  prop1:
                    type: string
                    example: prop1 example    # SUPPORTED!
          post:
            requestBody:
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      foo:
                        type: string
                        example: bar          # SUPPORTED!

  Direct strategies access

  ~~~~~~~~~~~~~~~~~~~~~~~~


  For convenience you can explore the schemas and strategies manually:


  .. code:: python

      >>> import schemathesis
      >>> schema = schemathesis.from_uri("http://0.0.0.0:8080/petstore.json")
      >>> endpoint = schema["/pet"]["POST"]
      >>> strategy = endpoint.as_strategy()
      >>> strategy.example()
      Case(
          path='/pet',
          method='POST',
          path_parameters={},
          headers={},
          cookies={},
          query={},
          body={
              'name': '\x15.\x13\U0008f42a',
              'photoUrls': ['\x08\U0009f29a', '\U000abfd6\U000427c4', '']
          },
          form_data={}
      )

  Schema instances implement ``Mapping`` protocol.


  **NOTE**. Paths are relative to the schema's base path (``host`` +
  ``basePath`` in Open API 2.0 and ``server.url`` in Open API 3.0):


  .. code:: python

      # your ``basePath`` is ``/api/v1``
      >>> schema["/pet"]["POST"]  # VALID
      >>> schema["/api/v1/pet"]["POST"]  # INVALID

  Lazy loading

  ~~~~~~~~~~~~


  If you have a schema that is not available when the tests are collected, for
  example it is build with tools

  like ``apispec`` and requires an application instance available, then you can
  parametrize the tests from a pytest fixture.


  .. code:: python

      # test_api.py
      import schemathesis

      schema = schemathesis.from_pytest_fixture("fixture_name")

      @schema.parametrize()
      def test_api(case):
          ...

  In this case the test body will be used as a sub-test via ``pytest-subtests``
  library.


  **NOTE**: the used fixture should return a valid schema that could be created
  via ``schemathesis.from_dict`` or other

  ``schemathesis.from_`` variations.


  Extending schemathesis

  ~~~~~~~~~~~~~~~~~~~~~~


  If you're looking for a way to extend ``schemathesis`` or reuse it in your own
  application, then ``runner`` module might be helpful for you.

  It can run tests against the given schema URI and will do some simple checks
  for you.


  .. code:: python

      from schemathesis import runner

      events = runner.prepare("http://127.0.0.1:8080/swagger.json")
      for event in events:
          # do something with event

  ``runner.prepare`` creates a generator that yields events of different kinds -
  ``BeforeExecution``, ``AfterExecution``, etc.

  They provide a lot of useful information about what happens during tests, but
  handling of these events is your responsibility.

  You can take some inspiration from Schemathesis `CLI implementation
  <https://github.com/kiwicom/schemathesis/blob/master/src/schemathesis/cli/__init__.py#L230>`_.

  See full description of events in the `source code
  <https://github.com/kiwicom/schemathesis/blob/master/src/schemathesis/runner/events.py>`_.


  If you want to use Schemathesis CLI with your custom checks, look at `this
  section
  <https://github.com/kiwicom/schemathesis/tree/dd/deprecate-execute#registering-custom-checks-for-cli>`_


  The built-in checks list includes the following:


  - Not a server error. Asserts that response's status code is less than 500;

  - Status code conformance. Asserts that response's status code is listed in
  the schema;

  - Content type conformance. Asserts that response's content type is listed in
  the schema;

  - Response schema conformance. Asserts that response's content conforms to the
  declared schema;


  You can provide your custom checks to the execute function, the check is a
  callable that accepts one argument of ``requests.Response`` type.


  .. code:: python

      from datetime import timedelta
      from schemathesis import runner, models

      def not_too_long(response, case: models.Case):
          assert response.elapsed < timedelta(milliseconds=300)

      events = runner.prepare("http://127.0.0.1:8080/swagger.json", checks=[not_too_long])
      for event in events:
          # do something with event

  Custom string strategies

  ########################


  Some string fields could use custom format and validators,

  e.g. ``card_number`` and Luhn algorithm validator.


  For such cases it is possible to register custom strategies:


  1. Create ``hypothesis.strategies.SearchStrategy`` object

  2. Optionally provide predicate function to filter values

  3. Register it via ``schemathesis.register_string_format``


  .. code-block:: python

      strategy = strategies.from_regex(r"\A4[0-9]{15}\Z").filter(luhn_validator)
      schemathesis.register_string_format("visa_cards", strategy)

  Unittest support

  ################


  Schemathesis supports Python's built-in ``unittest`` framework out of the box,

  you only need to specify strategies for ``hypothesis.given``:


  .. code-block:: python

      from unittest import TestCase
      from hypothesis import given
      import schemathesis

      schema = schemathesis.from_uri("http://0.0.0.0:8080/petstore.json")
      new_pet_strategy = schema["/v2/pet"]["POST"].as_strategy()

      class TestSchema(TestCase):

          @given(case=new_pet_strategy)
          def test_pets(self, case):
              response = case.call()
              assert response.status_code < 500

  Schema validation

  #################


  To avoid obscure and hard to debug errors during test runs Schemathesis
  validates input schemas for conformance with the relevant spec.

  If you'd like to disable this behavior use ``--validate-schema=false`` in CLI
  and ``validate_schema=False`` argument in loaders.


  Local development

  -----------------


  First, you need to prepare a virtual environment with `poetry`_.

  Install ``poetry`` (check out the `installation guide`_) and run this command
  inside the project root:


  .. code:: bash

      poetry install

  For simpler local development Schemathesis includes a ``aiohttp``-based server
  with the following endpoints in Swagger 2.0 schema:


  - ``/api/success`` - always returns ``{"success": true}``

  - ``/api/failure`` - always returns 500

  - ``/api/slow`` - always returns ``{"slow": true}`` after 250 ms delay

  - ``/api/unsatisfiable`` - parameters for this endpoint are impossible to
  generate

  - ``/api/invalid`` - invalid parameter definition. Uses ``int`` instead of
  ``integer``

  - ``/api/flaky`` - returns 1/1 ratio of 200/500 responses

  - ``/api/multipart`` - accepts multipart data

  - ``/api/teapot`` - returns 418 status code, that is not listed in the schema

  - ``/api/text`` - returns ``plain/text`` responses, which are not declared in
  the schema

  - ``/api/malformed_json`` - returns malformed JSON with ``application/json``
  content type header



  To start the server:


  .. code:: bash

      ./test_server.sh 8081

  It is possible to configure available endpoints via ``--endpoints`` option.

  The value is expected to be a comma separated string with endpoint names
  (``success``, ``failure``, ``slow``, etc):


  .. code:: bash

      ./test_server.sh 8081 --endpoints=success,slow

  Then you could use CLI against this server:


  .. code:: bash

      schemathesis run http://127.0.0.1:8081/schema.yaml
      ================================== Schemathesis test session starts =================================
      platform Linux -- Python 3.7.4, schemathesis-0.12.2, hypothesis-4.39.0, hypothesis_jsonschema-0.9.8
      rootdir: /
      hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/.hypothesis/examples')
      Schema location: http://127.0.0.1:8081/schema.yaml
      Base URL: http://127.0.0.1:8081
      Specification version: Swagger 2.0
      collected endpoints: 2

      GET /api/slow .                                                                               [ 50%]
      GET /api/success .                                                                            [100%]

      ============================================== SUMMARY ==============================================

      not_a_server_error            2 / 2 passed          PASSED

      ========================================= 2 passed in 0.29s =========================================


  Running tests

  ~~~~~~~~~~~~~


  You could run tests via ``tox``:


  .. code:: bash

      tox -p all -o

  or ``pytest`` in your current environment:


  .. code:: bash

      pytest test/ -n auto

  Contributing

  ------------


  Any contribution in development, testing or any other area is highly
  appreciated and useful to the project.


  Please, see the `CONTRIBUTING.rst`_ file for more details.


  Python support

  --------------


  Schemathesis supports Python 3.6, 3.7 and 3.8.


  License

  -------


  The code in this project is licensed under `MIT license`_.

  By contributing to ``schemathesis``, you agree that your contributions

  will be licensed under its MIT license.


  .. |Build| image::
  https://github.com/kiwicom/schemathesis/workflows/build/badge.svg
     :target: https://github.com/kiwicom/schemathesis/actions
  .. |Coverage| image::
  https://codecov.io/gh/kiwicom/schemathesis/branch/master/graph/badge.svg
     :target: https://codecov.io/gh/kiwicom/schemathesis/branch/master
     :alt: codecov.io status for master branch
  .. |Version| image:: https://img.shields.io/pypi/v/schemathesis.svg
     :target: https://pypi.org/project/schemathesis/
  .. |Python versions| image::
  https://img.shields.io/pypi/pyversions/schemathesis.svg
     :target: https://pypi.org/project/schemathesis/
  .. |License| image:: https://img.shields.io/pypi/l/schemathesis.svg
     :target: https://opensource.org/licenses/MIT
  .. |Chat| image:: https://img.shields.io/gitter/room/kiwicom/schemathesis.svg
     :target: https://gitter.im/kiwicom/schemathesis
     :alt: Gitter
  .. |Docs| image::
  https://readthedocs.org/projects/schemathesis/badge/?version=stable
     :target: https://schemathesis.readthedocs.io/en/stable/?badge=stable
     :alt: Documentation Status

  .. _hypothesis: https://hypothesis.works/

  .. _hypothesis_jsonschema: https://github.com/Zac-HD/hypothesis-jsonschema

  .. _hypothesis_graphql: https://github.com/Stranger6667/hypothesis-graphql

  .. _pytest: http://pytest.org/en/latest/

  .. _poetry: https://github.com/sdispater/poetry

  .. _installation guide: https://github.com/sdispater/poetry#installation

  .. _here:
  https://hypothesis.readthedocs.io/en/latest/reproducing.html#providing-explicit-examples

  .. _CONTRIBUTING.rst:
  https://github.com/kiwicom/schemathesis/blob/master/CONTRIBUTING.rst

  .. _MIT license: https://opensource.org/licenses/MIT
springdoc/springdoc-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AAD:0B2D:1E93BB:3EACC5:6500FB82.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
cxxxr/apispec: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273E:28DF:74E421:EE9A29:6500FB28.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
openapi4j/openapi4j: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A8B:4841:ADA3CF:16002E5:6500FB6E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
namuan/http-rider: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B77:0E33:21B93E:450F19:6500FB60.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
p1c2u/openapi-core: >
  ************

  openapi-core

  ************


  .. image:: https://img.shields.io/pypi/v/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core
  .. image:: https://travis-ci.org/python-openapi/openapi-core.svg?branch=master
       :target: https://travis-ci.org/python-openapi/openapi-core
  .. image::
  https://img.shields.io/codecov/c/github/python-openapi/openapi-core/master.svg?style=flat
       :target: https://codecov.io/github/python-openapi/openapi-core?branch=master
  .. image:: https://img.shields.io/pypi/pyversions/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core
  .. image:: https://img.shields.io/pypi/format/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core
  .. image:: https://img.shields.io/pypi/status/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core

  About

  #####


  Openapi-core is a Python library that adds client-side and server-side support

  for the `OpenAPI v3.0
  <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md>`__

  and `OpenAPI v3.1
  <https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md>`__
  specification.



  Key features

  ############


  * **Validation** and **unmarshalling** of request and response data (including
  webhooks)

  * **Integration** with popular libraries (Requests, Werkzeug) and frameworks
  (Django, Falcon, Flask, Starlette)

  * Customization with media type **deserializers** and format **unmarshallers**

  * **Security** data providers (API keys, Cookie, Basic and Bearer HTTP
  authentications)



  Documentation

  #############


  Check documentation to see more details about the features. All documentation
  is in the "docs" directory and online at `openapi-core.readthedocs.io
  <https://openapi-core.readthedocs.io>`__



  Installation

  ############


  Recommended way (via pip):


  .. code-block:: console

     pip install openapi-core

  Alternatively you can download the code and install from the repository:


  .. code-block:: console

     pip install -e git+https://github.com/python-openapi/openapi-core.git#egg=openapi_core


  First steps

  ###########


  Firstly create your specification object.


  .. code-block:: python

     from openapi_core import Spec

     spec = Spec.from_file_path('openapi.json')

  Now you can use it to validate and unmarshal against requests and/or
  responses. 


  .. code-block:: python

     from openapi_core import unmarshal_request

     # raises error if request is invalid
     result = unmarshal_request(request, spec=spec)

  Retrieve validated and unmarshalled request data


  .. code-block:: python

     # get parameters
     path_params = result.parameters.path
     query_params = result.parameters.query
     cookies_params = result.parameters.cookies
     headers_params = result.parameters.headers
     # get body
     body = result.body
     # get security data
     security = result.security

  Request object should implement OpenAPI Request protocol. Check `Integrations
  <https://openapi-core.readthedocs.io/en/latest/integrations.html>`__ to find
  oficially supported implementations.


  For more details read about `Unmarshalling
  <https://openapi-core.readthedocs.io/en/latest/unmarshalling.html>`__ process.


  If you just want to validate your request/response data without unmarshalling,
  read about `Validation
  <https://openapi-core.readthedocs.io/en/latest/validation.html>`__ instead.



  Related projects

  ################

  * `openapi-spec-validator
  <https://github.com/python-openapi/openapi-spec-validator>`__
     Python library that validates OpenAPI Specs against the OpenAPI 2.0 (aka Swagger), OpenAPI 3.0 and OpenAPI 3.1 specification. The validator aims to check for full compliance with the Specification.
  * `openapi-schema-validator
  <https://github.com/python-openapi/openapi-schema-validator>`__
     Python library that validates schema against the OpenAPI Schema Specification v3.0 and OpenAPI Schema Specification v3.1.
  * `bottle-openapi-3 <https://github.com/cope-systems/bottle-openapi-3>`__
     OpenAPI 3.0 Support for the Bottle Web Framework
  * `pyramid_openapi3 <https://github.com/niteoweb/pyramid_openapi3>`__
     Pyramid addon for OpenAPI3 validation of requests and responses.
  * `tornado-openapi3 <https://github.com/correl/tornado-openapi3>`__
     Tornado OpenAPI 3 request and response validation library.


  License

  #######


  The project is under the terms of BSD 3-Clause License.
APIs-guru/aws2openapi: >
  # aws2openapi

  Amazon Web Services API description to OpenAPI 3.0 specification


  ## Work in progress - beta quality


  ### Handles all current (v2) AWS json and xml specifications


  Resultant OpenApi specifications pass
  [multiple](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.yaml)
  [validators](https://github.com/Mermade/oas-kit)


  ![screenshot](https://raw.githubusercontent.com/APIs-guru/aws2openapi/main/docs/screenshot.png)


  The results of this converter can be found
  [here](https://github.com/APIs-guru/openapi-directory/tree/master/APIs/amazonaws.com)


  ### TODO **help wanted**


  * ~~Fix input header parameter selectivity~~

  * ~~Process protocol:ec2~~

  * ~~Authentication~~ You will have to calculate HMAC headers manually

  * ~~pagination~~

  * ~~Examples~~

  * ~~Waiters~~ (as vendor extension)

  * Test against live endpoints

  * Verify output header mappings

  * Test path-with-fragment hack works

  * Test paths with hardcoded ?parameters work

  * Validate xml-handling keyword translations
meeshkan/meeshkan: >
  # HMT


  [![CircleCI](https://circleci.com/gh/meeshkan/hmt.svg?style=shield)](https://circleci.com/gh/meeshkan/hmt)

  [![PyPI](https://img.shields.io/pypi/dm/hmt.svg)](https://pypi.org/project/hmt/)

  [![Code style:
  black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://black.readthedocs.io/)

  [![License:
  MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)


  The HTTP Mocking Toolkit (HMT) is a tool that mocks HTTP APIs for use in
  sandboxes as well as for automated and exploratory testing. It uses a
  combination of API definitions, recorded traffic and code in order to make
  crafting mocks as enjoyable as possible.


  [Chat with us on Gitter](https://gitter.im/hmt/community) to let us know about
  questions, problems or ideas!


  ## What's in this document


  - [Installation](#installation)

  - [Getting started with HMT](#getting-started-with-hmt)
    - [Tutorial](#tutorial)
  - [Collect recordings of API traffic](#collect-recordings-of-api-traffic)

  - [Build a HMT spec from recordings](#build-a-hmt-spec-from-recordings)
    - [Building modes](#building-modes)
  - [Mock server traffic using a HMT
  spec](#mock-server-traffic-using-a-hmt-spec)

  - [Development](#development)
    - [Getting started](#getting-started)
    - [Tests](#tests)
    - [Type-checking](#type-checking)
    - [Automated builds](#automated-builds)
    - [Publishing HMT as a PyPi package](#publishing-hmt-as-a-pypi-package)
  - [Contributing](#contributing)
    - [Code of Conduct](#code-of-conduct)

  ## Installation

  Install via [pip](https://pip.pypa.io/en/stable/installing/) (requires
  **Python 3.6+**):


  ```bash

  pip install hmt

  ```


  macOS users can install HMT with [Homebrew](https://brew.sh/):


  ```sh

  brew tap meeshkan/tap

  brew install hmt

  ```


  Debian and Ubuntu users can install HMT with `apt`:


  ```sh

  echo "deb [trusted=yes] https://dl.bintray.com/meeshkan/apt all main" | tee -a
  /etc/apt/sources.list

  apt-get -qq update && apt-get install hmt

  ```



  ## Getting started with HMT


  The basic HMT flow is **collect, build and mock.**

  1. First, **collect** data from recorded server traffic and/or OpenAPI specs.

  1. Then, **build** a schema that unifies these various data sources.

  1. Finally, use this schema to create a **mock** server of an API.


  ### Tutorial


  The quickest way to get an overview of HMT is to complete our interactive
  tutorial. It walks you through the collect, build, and mock flow - while also
  covering the concepts necessary for development.


  _Note: This tutorial has been tested on Python 3.6, 3.7, and 3.8._


  After installing HMT, you can begin the tutorial by invoking from the command
  line:


  ```bash

  $ hmt tutorial

  ```


  Once you've run this, you should see:


  ```bash
      __              __ 
     / /_  ____ ___  / /_
    / __ \/ __ `__ \/ __/
   / / / / / / / / / /_
  /_/ /_/_/ /_/ /_/\__/



  The tutorial!!

  Press ENTER to continue...

  ```


  If not, it's probably our fault. Please let us know by [filing an issue on
  this repo](https://github.com/meeshkan/hmt/issues).


  ## Collect recordings of API traffic


  Let's look at how to build a HMT spec. First, you have to **collect**
  recordings of server traffic and/or OpenAPI server specs.


  To record API traffic, the HMT CLI provides a `record` mode that captures API
  traffic using a proxy.


  ```bash

  $ hmt record

  ```


  This command starts HMT as a reverse proxy on the default port of `8000` and
  creates two directories: `logs` and `specs`. 


  With [curl](https://curl.haxx.se/), for example, you can use HMT as a proxy
  like so:


  ```bash

  $ curl http://localhost:8000/http://api.example.com

  ```


  By default, the recording proxy treats the path as the target URL. It then
  writes a [`.jsonl`](https://jsonlines.org) file containing logs of all server
  traffic to the `logs` directory.  All logs are created in the
  [`http-types`](https://github.com/meeshkan/http-types) format. This is because
  HMT's `build` tool expects all recordings to be represented in a `.jsonl` file
  containing recordings represented in the `http-types` format.


  For more information about recording, including direct file writing and kafka
  streaming, see the [recording documentation](./docs/RECORD.md).


  ## Build a HMT spec from recordings


  Using the HMT CLI, you can **build** an OpenAPI schema from a single `.jsonl`
  file, in addition to any existing OpenAPI specs that describe how your service
  works.


  ```bash

  $ hmt build --input-file path/to/recordings.jsonl 

  ```


  _Note: The input file should be in [JSON Lines](http://jsonlines.org/) format
  and every line should be in [http-types](https://hmt.github.io/http-types/)
  JSON format. For an example input file, see
  [recordings.jsonl](./resources/recordings.jsonl)._


  Optionally, you can also specify an output directory using the `--out` flag
  followed by the path to this directory. By default, HMT will build the new
  OpenAPI specifications in the `specs` directory. 


  Use dash (`--input-file -`) to read from standard input:


  ```bash

  $ hmt build --input-file - < recordings.jsonl

  ```

  ### Building modes

  You can use a mode flag to indicate how the OpenAPI spec should be built, for
  example:


  ```bash

  hmt build --input-file path/to/recordings.jsonl --mode gen

  ```


  Supported modes are:

  * gen [default] - infer a schema from the recorded data

  * replay - replay the recorded data based on exact matching


  For more information about building, including mixing together the two modes
  and editing the created OpenAPI schema, see the [building
  documentation](./docs/BUILD.md).


  ## Mock server traffic using a HMT spec


  You can use an OpenAPI spec, such as the one created with `hmt build`, to
  create a **mock** server using HMT.


  ```bash

  $ hmt mock path/to/dir/

  ```


  _Note: You can specify a path to the directory your OpenAPI spec is in or a
  path to one specific file._


  For more information about mocking, including adding custom middleware and
  modifying the mocking schema JIT via an admin API, see the [mocking
  documentation](./docs/MOCK.md).


  ## Development


  Here are some useful tips for building and running HMT from source. 


  If you run into any issues, please [reach out to our team on
  Gitter](https://gitter.im/HMT/community).


  ### Getting started


  1. Clone this repository: `git clone https://github.com/meeshkan/hmt`

  1. Create a virtual environment: `python3 -m venv .venv && source
  .venv/bin/activate`

  1. Install dependencies: `pip install --upgrade -e '.[dev]'`

  1. Install [`pre-commit`](https://pre-commit.com/) hooks to automatically
  format code as a git hook: `pre-commit install`


  ### Tests


  Run all checks:


  ```bash

  $ python setup.py test

  ```


  #### `pytest`


  Run [tests/](https://github.com/meeshkan/hmt/tree/master/tests/) with
  `pytest`:


  ```bash

  pytest

  # or

  python setup.py test

  ```


  Configuration for `pytest` is found in
  [pytest.ini](https://github.com/meeshkan/hmt/tree/master/pytest.ini).


  #### Formatting


  Formatting is checked by the above mentioned `python setup.py test` command.


  To fix formatting:


  ```sh

  $ python setup.py format

  ```


  #### `flake8`


  Run style checks:


  ```bash

  $ flake8 .

  ```


  #### `pyright`


  You can run type-checking by installing
  [pyright](https://github.com/microsoft/pyright) globally:


  ```bash

  $ npm -i -g pyright

  ```


  And then running:


  ```bash

  $ pyright --lib

  $ # or

  $ python setup.py typecheck

  ```


  Using the [Pyright
  extension](https://marketplace.visualstudio.com/items?itemName=ms-pyright.pyright)
  is recommended for development in VS Code.


  ### Automated builds


  Configuration for CircleCI [build
  pipeline](https://app.circleci.com/github/HMT/hmt/pipelines) can be found in
  [.circleci/config.yml](https://github.com/meeshkan/hmt/tree/master/.circleci/config.yml).


  ### Publishing HMT as a PyPi package


  To publish HMT as a PyPi package, complete the following steps:


  1. Bump the version in
  [setup.py](https://github.com/meeshkan/hmt/tree/master/setup.py) if the
  version is the same as in the published
  [package](https://pypi.org/project/hmt/). Commit and push.

  1. Run `python setup.py test` to check that everything works

  1. To build and upload the package, run `python setup.py upload`. Insert PyPI
  credentials to upload the package to `PyPI`. The command will also run `git
  tag` to tag the commit as a release and push the tags to remote.


  > To see what the different commands do, see `Command` classes in
  [setup.py](https://github.com/meeshkan/hmt/tree/master/setup.py).


  ## Contributing


  Thanks for your interest in contributing! Please take a look at our
  [development guide](#development) for notes on how to develop the package
  locally.  A great way to start contributing is to [file an
  issue](https://github.com/meeshkan/hmt/issue) or [make a pull
  request](https://github.com/meeshkan/hmt/pulls).


  ### Code of Conduct


  Please note that this project is governed by the [HMT Community Code of
  Conduct](https://github.com/meeshkan/code-of-conduct). By participating, you
  agree to abide by its terms.
APIDevTools/swagger-cli: >
  Swagger/OpenAPI CLI

  ============================


  [![Cross-Platform
  Compatibility](https://apitools.dev/img/badges/os-badges.svg)](https://github.com/APIDevTools/swagger-cli/actions)

  [![Build
  Status](https://github.com/APIDevTools/swagger-cli/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-cli/actions)


  [![Dependencies](https://david-dm.org/APIDevTools/swagger-cli.svg)](https://david-dm.org/APIDevTools/swagger-cli)

  [![Coverage
  Status](https://coveralls.io/repos/github/APIDevTools/swagger-cli/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-cli?branch=master)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-cli.svg)](https://www.npmjs.com/package/@apidevtools/swagger-cli)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-cli.svg)](LICENSE)

  [![Buy us a
  tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-cli)




  Features

  --------------------------

  - Validate Swagger/OpenAPI files in **JSON or YAML** format

  - Supports multi-file API definitions via `$ref` pointers

  - Bundle multiple Swagger/OpenAPI files into one combined file




  Related Projects

  --------------------------

  - [Swagger Parser](https://github.com/APIDevTools/swagger-parser)

  - [Swagger Express
  Middleware](https://github.com/APIDevTools/swagger-express-middleware)




  Installation

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/):


  ```bash

  npm install -g @apidevtools/swagger-cli

  ```




  Usage

  --------------------------


  ```

  swagger-cli <command> [options] <file>


  Commands:
      validate                Validates an API definition in Swagger 2.0 or OpenAPI 3.0 format

      bundle                  Bundles a multi-file API definition into a single file

  Options:
      -h, --help              Show help for any command
      -v, --version           Output the CLI version number
      -d, --debug [filter]    Show debug output, optionally filtered (e.g. "*", "swagger:*", etc.)
  ```



  ### Validate an API


  The `swagger-cli validate` command will validate your Swagger/OpenAPI
  definition against the [Swagger 2.0
  schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json)
  or [OpenAPI 3.0
  Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.json). 
  It also performs additional validations against the
  [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md),
  which will catch some things that aren't covered by the schema, such as
  duplicate parameters, invalid MIME types, etc.


  The command will exit with a non-zero code if the API is invalid.


  ```

  swagger-cli validate [options] <file>


  Options:
      --no-schema             Do NOT validate against the Swagger/OpenAPI JSON schema

      --no-spec               Do NOT validate against the Swagger/OpenAPI specification
  ```


  #### Git pre-commit hook


  There is a useful Python tool called [pre-commit](https://pre-commit.com/)
  that can be used to execute a wide suite of pre-commit checks. The
  `swagger-cli validate` command can be integrated as part of a git pre-commit
  hook by adding the following configuration to the `repos` entry of an existing
  `.pre-commit-config.yaml` file.


  ```

  -   repo: https://github.com/APIDevTools/swagger-cli
      rev: v2.2.1
      hooks:
      - id: swagger-validation
        args: ["validate", "<path to root swagger>"]
  ```


  The intention is to point to single root swagger that references multiple
  swagger definitions. The above hook will execute the `swagger-cli validation`
  against the root swagger anytime that a file matching the pattern
  `.*swagger.*\.(json|yaml|yml)` is modified. Any failures in this validation
  will prevent the git commit from being processed.


  ### Combine Multiple Files


  The Swagger and OpenAPI specs allows you to split your API definition across
  multiple files using [`$ref`
  pointers](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#reference-object)
  to reference each file. You can use the `swagger-cli bundle` command to
  combine all of those referenced files into a single file, which is useful for
  distribution or interoperation with other tools.


  By default, the `swagger-cli bundle` command tries to keep the output file
  size as small as possible, by only embedding each referenced file _once_.  If
  the same file is referenced multiple times, then any subsequent references are
  simply modified to point to the _single_ inlined copy of the file.  If you
  want to produce a bundled file without _any_ `$ref` pointers, then add the
  `--dereference` option.  This will result in a larger file size, since
  multiple references to the same file will result in that file being embedded
  multiple times.


  If you don't specify the `--outfile` option, then the bundled API will be
  written to stdout, which means you can pipe it to other commands.


  The result of this method by default is written as JSON. It can be changed to
  YAML with the `--type` option, by passing the `yaml` value.


  ```

  swagger-cli bundle [options] <file>


  Options:
      -o, --outfile <file>        The output file

      -r, --dereference           Fully dereference all $ref pointers

      -f, --format <spaces>       Formats the output using the given number of spaces
                                  (the default is 2 spaces)

      -t, --type <filetype>       Defines the output file type. The valid values are: json, yaml
                                  (the default is JSON)

      -w, --wrap <column>         Set the line length for YAML strings
                                  (the default is no wrapping)
  ```




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [Open an
  issue](https://github.com/APIDevTools/swagger-cli/issues) on GitHub and
  [submit a pull request](https://github.com/APIDevTools/swagger-cli/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-cli.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`




  License

  --------------------------

  Swagger CLI is 100% free and open-source, under the [MIT license](LICENSE).
  Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in
  production, then we ask that you [**buy the world a
  tree**](https://plant.treeware.earth/APIDevTools/swagger-cli) to thank us for
  our work. By contributing to the Treeware forest you’ll be creating employment
  for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![Travis
  CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
APIDevTools/swagger-express-middleware: >
  Swagger Express Middleware

  ============================

  ### Swagger 2.0 middleware and mocks for Express.js


  [![Cross-Platform
  Compatibility](https://apitools.dev/img/badges/os-badges.svg)](https://github.com/APIDevTools/swagger-express-middleware/actions)

  [![Build
  Status](https://github.com/APIDevTools/swagger-express-middleware/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-express-middleware/actions)


  [![Coverage
  Status](https://coveralls.io/repos/github/APIDevTools/swagger-express-middleware/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-express-middleware)

  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://apis.guru/browse-apis/)

  [![Dependencies](https://david-dm.org/APIDevTools/swagger-express-middleware.svg)](https://david-dm.org/APIDevTools/swagger-express-middleware)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-express-middleware.svg)](https://www.npmjs.com/package/@apidevtools/swagger-express-middleware)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-express-middleware.svg)](LICENSE)

  [![Buy us a
  tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-express-middleware)




  Features

  --------------------------

  - **Supports Swagger 2.0 specs in JSON or YAML** <br>

  Swagger Express Middleware uses
  [Swagger-Parser](https://github.com/APIDevTools/swagger-parser) to parse,
  validate, and dereference Swagger files.  You can even split your spec into
  multiple different files using `$ref` pointers.


  - **Thoroughly tested**<br>

  Over 1,000 unit tests and integration tests with 100% code coverage.  Tested
  on [**over 1,500 real-world APIs**](https://apis.guru/browse-apis/) from
  Google, Microsoft, Facebook, Spotify, etc.  All tests are run on Mac, Linux,
  and Windows using all LTS versions of Node.


  - [**Mock
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/mock.html)<br>

  **Fully-functional mock** implementations for every operation in your API,
  including data persistence, all with **zero code!**  This is a great way to
  test-drive your API as you write it, or for quick demos and POCs.  You can
  even extend the mock middleware with your own logic and data to fill in any
  gaps.


  - [**Metadata
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/metadata.html)<br>

  Annotates each request with all the relevant information from the Swagger
  definition.  The path, the operation, the parameters, the security
  requirements - they're all easily accessible at `req.swagger`.


  - [**Parse Request
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/parseRequest.html)<br>

  Parses incoming requests and converts everything into the correct data types,
  according to your Swagger API definition.


  - [**Validate Request
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/validateRequest.html)<br>

  Ensures that every request complies with your Swagger API definition, or
  returns the appropriate HTTP error codes if needed.  Of course, you can catch
  any validation errors and handle them however you want.


  - [**CORS
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/CORS.html)<br>

  Adds the appropriate CORS headers to each request and automatically responds
  to CORS preflight requests, all in compliance with your Swagger API
  definition.


  - [**Files
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/files.html)<br>

  Serves the Swagger API file(s) in JSON or YAML format so they can be used with
  front-end tools like [Swagger UI](http://www.swagger.io), [Swagger
  Editor](http://editor.swagger.io), and [Postman](http://getpostman.com).




  Installation and Use

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/).


  ```bash

  npm install @apidevtools/swagger-express-middleware

  ```

  Then use it in your [Node.js](http://nodejs.org/) script like this:


  ```javascript

  const express = require('express');

  const createMiddleware = require('@apidevtools/swagger-express-middleware');


  let app = express();


  createMiddleware('PetStore.yaml', app, function(err, middleware) {
      // Add all the Swagger Express Middleware, or just the ones you need.
      // NOTE: Some of these accept optional options (omitted here for brevity)
      app.use(
          middleware.metadata(),
          middleware.CORS(),
          middleware.files(),
          middleware.parseRequest(),
          middleware.validateRequest(),
          middleware.mock()
      );

      app.listen(8000, function() {
          console.log('The PetStore sample is now running at http://localhost:8000');
      });
  });

  ```




  Samples & Walkthroughs

  --------------------------

  Swagger Express Middleware comes two samples that use the [Swagger Pet Store
  API](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/PetStore.yaml).


  #### Sample 1

  This sample demonstrates the most simplistic usage of Swagger Express
  Middleware. It simply creates a new Express Application and adds all of the
  Swagger middleware without changing any options, and without adding any custom
  middleware.


  * [Source
  Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample1.js)

  *
  [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/running.html)



  #### Sample 2

  This sample demonstrates a few more advanced features of Swagger Express
  Middleware, such as setting a few options, initializing the mock data store,
  and adding custom middleware logic.


  * [Source
  Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample2.js)

  *
  [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/walkthrough2.html)




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [Open an
  issue](https://github.com/APIDevTools/swagger-express-middleware/issues) on
  GitHub and [submit a pull
  request](https://github.com/APIDevTools/swagger-express-middleware/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-express-middleware.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`


  4. **Run the sample app**<br>

  `npm start`




  License

  --------------------------

  Swagger Express Middleware is 100% free and open-source, under the [MIT
  license](LICENSE). Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in
  production, then we ask that you [**buy the world a
  tree**](https://plant.treeware.earth/APIDevTools/swagger-express-middleware)
  to thank us for our work. By contributing to the Treeware forest you’ll be
  creating employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![Travis
  CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
APIDevTools/swagger-parser: >
  Swagger 2.0 and OpenAPI 3.0 parser/validator

  ============================


  [![Build
  Status](https://github.com/APIDevTools/swagger-parser/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-parser/actions)

  [![Coverage
  Status](https://coveralls.io/repos/github/APIDevTools/swagger-parser/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-parser)

  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://apis.guru/browse-apis/)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-parser.svg)](https://www.npmjs.com/package/@apidevtools/swagger-parser)

  [![Dependencies](https://david-dm.org/APIDevTools/swagger-parser.svg)](https://david-dm.org/APIDevTools/swagger-parser)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-parser.svg)](LICENSE)

  [![Buy us a
  tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-parser)


  [![OS and Browser
  Compatibility](https://apitools.dev/img/badges/ci-badges-with-ie.svg)](https://github.com/APIDevTools/swagger-parser/actions)


  [![Online
  Demo](https://apitools.dev/swagger-parser/online/img/demo.svg)](https://apitools.dev/swagger-parser/online/)




  Features

  --------------------------

  - Parses Swagger specs in **JSON** or **YAML** format

  - Validates against the [Swagger 2.0
  schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json)
  or [OpenAPI 3.0
  Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.json)

  -
  [Resolves](https://apitools.dev/swagger-parser/docs/swagger-parser.html#resolveapi-options-callback)
  all `$ref` pointers, including external files and URLs

  - Can
  [bundle](https://apitools.dev/swagger-parser/docs/swagger-parser.html#bundleapi-options-callback)
  all your Swagger files into a single file that only has _internal_ `$ref`
  pointers

  - Can
  [dereference](https://apitools.dev/swagger-parser/docs/swagger-parser.html#dereferenceapi-options-callback)
  all `$ref` pointers, giving you a normal JavaScript object that's easy to work
  with

  - **[Tested](https://github.com/APIDevTools/swagger-parser/actions)** in
  Node.js and all modern web browsers on Mac, Windows, and Linux

  - Tested on **[over 1,500 real-world APIs](https://apis.guru/browse-apis/)**
  from Google, Microsoft, Facebook, Spotify, etc.

  - Supports [circular
  references](https://apitools.dev/swagger-parser/docs/#circular-refs), nested
  references, back-references, and cross-references

  - Maintains object reference equality &mdash; `$ref` pointers to the same
  value always resolve to the same object instance




  Related Projects

  --------------------------

  - [Swagger CLI](https://github.com/APIDevTools/swagger-cli)

  - [Swagger Express
  Middleware](https://github.com/APIDevTools/swagger-express-middleware)




  Example

  --------------------------


  ```javascript

  SwaggerParser.validate(myAPI, (err, api) => {
    if (err) {
      console.error(err);
    }
    else {
      console.log("API name: %s, Version: %s", api.info.title, api.info.version);
    }
  });

  ```


  Or use `async`/`await` or
  [Promise](http://javascriptplayground.com/blog/2015/02/promises/) syntax
  instead. The following example is the same as above:


  ```javascript

  try {
    let api = await SwaggerParser.validate(myAPI);
    console.log("API name: %s, Version: %s", api.info.title, api.info.version);
  }

  catch(err) {
    console.error(err);
  }

  ```


  For more detailed examples, please see the [API
  Documentation](https://apitools.dev/swagger-parser/docs/)




  Installation

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/):


  ```bash

  npm install @apidevtools/swagger-parser

  ```




  Usage

  --------------------------

  When using Swagger Parser in Node.js apps, you'll probably want to use
  **CommonJS** syntax:


  ```javascript

  const SwaggerParser = require("@apidevtools/swagger-parser");

  ```


  When using a transpiler such as [Babel](https://babeljs.io/) or
  [TypeScript](https://www.typescriptlang.org/), or a bundler such as
  [Webpack](https://webpack.js.org/) or [Rollup](https://rollupjs.org/), you can
  use **ECMAScript modules** syntax instead:


  ```javascript

  import * as SwaggerParser from '@apidevtools/swagger-parser';

  ```




  Browser support

  --------------------------

  Swagger Parser supports recent versions of every major web browser.  Older
  browsers may require [Babel](https://babeljs.io/) and/or
  [polyfills](https://babeljs.io/docs/en/next/babel-polyfill).


  To use Swagger Parser in a browser, you'll need to use a bundling tool such as
  [Webpack](https://webpack.js.org/), [Rollup](https://rollupjs.org/),
  [Parcel](https://parceljs.org/), or [Browserify](http://browserify.org/). Some
  bundlers may require a bit of configuration, such as setting `browser: true`
  in
  [rollup-plugin-resolve](https://github.com/rollup/rollup-plugin-node-resolve).




  API Documentation

  --------------------------

  Full API documentation is available [right
  here](https://apitools.dev/swagger-parser/docs/)




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [Open an
  issue](https://github.com/APIDevTools/swagger-parser/issues) on GitHub and
  [submit a pull request](https://github.com/APIDevTools/swagger-parser/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. __Clone this repo__<br>

  `git clone https://github.com/APIDevTools/swagger-parser.git`


  2. __Install dependencies__<br>

  `npm install`


  3. __Run the build script__<br>

  `npm run build`


  4. __Run the tests__<br>

  `npm test`


  5. __Check the code coverage__<br>

  `npm run coverage`


  License

  --------------------------

  Swagger Parser is 100% free and open-source, under the [MIT license](LICENSE).
  Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in
  production, then we ask that you [**buy the world a
  tree**](https://plant.treeware.earth/APIDevTools/swagger-parser) to thank us
  for our work. By contributing to the Treeware forest you’ll be creating
  employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![GitHub](https://apitools.dev/img/badges/github.svg)](https://github.com/open-source)

  [![NPM](https://apitools.dev/img/badges/npm.svg)](https://www.npmjs.com/)

  [![Coveralls](https://apitools.dev/img/badges/coveralls.svg)](https://coveralls.io)
Apicurio/apicurio-studio: >
  ![Verify Build
  Workflow](https://github.com/Apicurio/apicurio-studio/workflows/Verify%20Build%20Workflow/badge.svg)


  # The apicurio-studio project (Open Source API Design Studio)


  ## Summary


  This is the official Git repository for the apicurio studio project: 
  http://www.apicur.io/


  The apicurio studio project is a standalone API design studio that can be used
  to create

  new or edit existing API designs (using the OpenAPI specification).


  ## Get the code


  The easiest way to get started with the code is to [create your own
  fork](http://help.github.com/forking/)

  of this repository, and then clone your fork:

  ```bash
    $ git clone git@github.com:<you>/apicurio-studio.git
    $ cd apicurio-studio
    $ git remote add upstream git://github.com/apicurio/apicurio-studio.git
  ```

  At any time, you can pull changes from the upstream and merge them onto your
  master:

  ```bash
    $ git checkout master               # switches to the 'master' branch
    $ git pull upstream master          # fetches all 'upstream' changes and merges 'upstream/master' onto your 'master' branch
    $ git push origin                   # pushes all the updates to your fork, which should be in-sync with 'upstream'
  ```

  The general idea is to keep your 'master' branch in-sync with the
  'upstream/master'.


  ## Building apicurio-studio


  ### Requirements

  - Maven 3.x

  - Java 8 or 11 (recommended)


  The following command compiles all the code, installs the JARs into your local
  Maven repository, and runs all of the unit tests:

  ```bash
    $ mvn clean install
  ```

  ## Quickstart (i.e. How To Run It)


  The fastest way to get started using Apicurio Studio is to use the Quickstart.
  The Apicurio Studio bits required for this mode are produced as part 

  of the full maven build - you can find it in.  To start up the Dev Mode, once
  the project has been built, follow the instructions under the
  [quickstart](./distro/quickstart/QUICKSTART.md) directory.


  This will start the required Quarkus components on your local machine and you
  can access the UI at [http://localhost:8080](http://localhost:8080).


  ## Contribute fixes and features


  Apicurio Studio is open source, and we welcome anybody who wants to
  participate and contribute!


  Please follow [Setting your development
  environment](https://apicurio-studio.readme.io/docs/setting-up-a-development-environment)
  guide to setup your local machine for development.  The guide assumes the use
  of the Eclipse IDE for Java

  development (backend) but is not required - developers should be able to adapt
  the instructions to their particular

  environment.


  An additional way that is less dependent on Eclipse is described in [this
  manual](DEV_MODE.md).


  If you want to fix a bug or make any changes, please [log an issue in
  GitHub](https://github.com/apicurio/apicurio-studio/issues) describing the bug

  or new feature. Then we highly recommend making the changes on a topic branch
  named with the JIRA issue number. For example, this command creates

  a branch for the APISTUDIO-1234 issue:

  ```bash
    $ git checkout -b apicurio-studio-1234
  ```

  After you're happy with your changes and a full build (with unit tests) runs
  successfully, commit your

  changes on your topic branch. Then it's time to check for and pull any recent
  changes that were made in

  the official repository:

  ```bash
    $ git checkout master               # switches to the 'master' branch
    $ git pull upstream master          # fetches all 'upstream' changes and merges 'upstream/master' onto your 'master' branch
    $ git checkout apicurio-studio-1234   # switches to your topic branch
    $ git rebase master                 # reapplies your changes on top of the latest in master
                                        # (i.e., the latest from master will be the new base for your changes)
  ```

  If the pull grabbed a lot of changes, you should rerun your build to make sure
  your changes are still good.

  You can then either [create patches](http://progit.org/book/ch5-2.html) (one
  file per commit, saved in `~/apicurio-studio-1234`) with

  ```bash
    $ git format-patch -M -o ~/apicurio-studio-1234 orgin/master
  ```

  and upload them to the JIRA issue, or you can push your topic branch and its
  changes into your public fork repository

  ```bash
    $ git push origin apicurio-studio-1234         # pushes your topic branch into your public fork of apicurio-studio
  ```

  and [generate a pull-request](http://help.github.com/pull-requests/) for your
  changes.


  We prefer pull-requests, because we can review the proposed changes, comment
  on them,

  discuss them with you, and likely merge the changes right into the official
  repository.


  Please try to create one commit per feature or fix, generally the easiest way
  to do this is via [git
  squash](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits).

  This makes reverting changes easier, and avoids needlessly polluting the
  repository history with checkpoint commits.


  ## Code Formatting


  When you are hacking on some apicurio-studio code, we'd really appreciate it
  if you followed the

  apicurio-studio coding standards.  If you're using Eclipse, you can find a
  code formatter config

  file here:

  ```

  tools/src/eclipse/apicurio-eclipse-formatter.xml

  ```

  You should be able to import that guy straight into Eclipse by going to

  *Window->Preferences :: Java/Code Style/Formatter*
Azure/autorest: >
  # <img align="center" src="./docs/images/logo.png"> AutoRest


  The **AutoRest** tool generates client libraries for accessing RESTful web
  services. Input to _AutoRest_ is a spec that describes the REST API using the
  [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) format.


  [Release notes](./docs/releases)


  ## Packages


  | Name                                            |
  Changelog                       |
  Latest                                                       |
  Next                                                              |

  | ----------------------------------------------- |
  ------------------------------- |
  ------------------------------------------------------------ |
  ----------------------------------------------------------------- |

  | Core functionality                              |

  | [autorest][autorest_src]                        |
  [Changelog][autorest_chg]       |
  ![](https://img.shields.io/npm/v/autorest)                   |
  ![](https://img.shields.io/npm/v/autorest/next)                   |

  | [@autorest/core][core_src]                      |
  [Changelog][core_chg]           |
  ![](https://img.shields.io/npm/v/@autorest/core)             |
  ![](https://img.shields.io/npm/v/@autorest/core/next)             |

  | [@autorest/modelerfour][modelerfour_src]        |
  [Changelog][modelerfour_chg]    |
  ![](https://img.shields.io/npm/v/@autorest/modelerfour)      |
  ![](https://img.shields.io/npm/v/@autorest/modelerfour/next)      |

  | Language generators                             |

  | [@autorest/csharp][csharp_src]                  |
  [Changelog][csharp_chg]         |
  ![](https://img.shields.io/npm/v/@autorest/csharp)          
  |                                                                   |

  | [@autorest/go][go_src]                          |
  [Changelog][go_chg]             |
  ![](https://img.shields.io/npm/v/@autorest/go)              
  |                                                                   |

  | [@autorest/java][java_src]                      |
  [Changelog][java_chg]           |
  ![](https://img.shields.io/npm/v/@autorest/java)            
  |                                                                   |

  | [@autorest/powershell][powershell_src]          |
  [Changelog][powershell_chg]     |
  ![](https://img.shields.io/npm/v/@autorest/powershell)      
  |                                                                   |

  | [@autorest/python][python_src]                  |
  [Changelog][python_chg]         |
  ![](https://img.shields.io/npm/v/@autorest/python)          
  |                                                                   |

  | [@autorest/swift][swift_src]                    |
  [Changelog][swift_chg]          |
  ![](https://img.shields.io/npm/v/@autorest/swift)           
  |                                                                   |

  | [@autorest/typescript][typescript_src]          |
  [Changelog][typescript_chg]     |
  ![](https://img.shields.io/npm/v/@autorest/typescript)      
  |                                                                   |

  | Internal packages                               |

  | [@autorest/codemodel][codemodel_src]            |
  [Changelog][codemodel_chg]      |
  ![](https://img.shields.io/npm/v/@autorest/codemodel)        |
  ![](https://img.shields.io/npm/v/@autorest/codemodel/next)        |

  | [@autorest/common][common_src]                  |
  [Changelog][common_chg]         |
  ![](https://img.shields.io/npm/v/@autorest/common)           |
  ![](https://img.shields.io/npm/v/@autorest/common/next)           |

  | [@autorest/configuration][configuration_src]    |
  [Changelog][configuration_chg]  |
  ![](https://img.shields.io/npm/v/@autorest/configuration)    |
  ![](https://img.shields.io/npm/v/@autorest/configuration/next)    |

  | [@autorest/extension-base][extension_base_src]  |
  [Changelog][extension_base_chg] |
  ![](https://img.shields.io/npm/v/@autorest/extension-base)   |
  ![](https://img.shields.io/npm/v/@autorest/extension-base/next)   |

  | [@azure-tools/extension][extension_src]         |
  [Changelog][extension_chg]      |
  ![](https://img.shields.io/npm/v/@azure-tools/extension)     |
  ![](https://img.shields.io/npm/v/@azure-tools/extension/next)     |

  | [@azure-tools/codegen][codegen_src]             |
  [Changelog][codemodel_chg]      |
  ![](https://img.shields.io/npm/v/@azure-tools/codegen)       |
  ![](https://img.shields.io/npm/v/@azure-tools/codegen/next)       |

  | [@azure-tools/openapi][openapi_src]             |
  [Changelog][openapi_chg]        |
  ![](https://img.shields.io/npm/v/@azure-tools/openapi)       |
  ![](https://img.shields.io/npm/v/@azure-tools/openapi/next)       |

  | [@azure-tools/deduplication][deduplication_src] |
  [Changelog][deduplication_chg]  |
  ![](https://img.shields.io/npm/v/@azure-tools/deduplication) |
  ![](https://img.shields.io/npm/v/@azure-tools/deduplication/next) |

  | [@azure-tools/datastore][datastore_src]         |
  [Changelog][datastore_chg]      |
  ![](https://img.shields.io/npm/v/@azure-tools/datastore)     |
  ![](https://img.shields.io/npm/v/@azure-tools/datastore/next)     |

  | [@azure-tools/oai2-to-oai3][oai2-to-oai3_src]   |
  [Changelog][oai2-to-oai3_chg]   |
  ![](https://img.shields.io/npm/v/@azure-tools/oai2-to-oai3)  |
  ![](https://img.shields.io/npm/v/@azure-tools/oai2-to-oai3/next)  |

  | [@azure-tools/jsonschema][jsonschema_src]       |
  [Changelog][jsonschema_chg]     |
  ![](https://img.shields.io/npm/v/@azure-tools/jsonschema)    |
  ![](https://img.shields.io/npm/v/@azure-tools/jsonschema/next)    |


  [autorest_src]: packages/apps/autorest

  [core_src]: packages/extensions/core

  [modelerfour_src]: packages/extensions/modelerfour

  [csharp_src]: https://github.com/Azure/autorest.csharp

  [python_src]: https://github.com/Azure/autorest.python

  [go_src]: https://github.com/Azure/autorest.go

  [java_src]: https://github.com/Azure/autorest.java

  [swift_src]: https://github.com/Azure/autorest.swift

  [typescript_src]: https://github.com/Azure/autorest.typescript

  [powershell_src]: https://github.com/Azure/autorest.powershell

  [codemodel_src]: packages/libs/codemodel

  [common_src]: packages/libs/common

  [configuration_src]: packages/libs/configuration

  [extension_base_src]: packages/libs/extension-base

  [oai2-to-oai3_src]: packages/libs/oai2-to-oai3_src

  [extension_src]: packages/libs/extension

  [codegen_src]: packages/libs/codegen

  [openapi_src]: packages/libs/openapi

  [deduplication_src]: packages/libs/deduplication

  [datastore_src]: packages/libs/datastore

  [jsonschema_src]: packages/libs/oai2-to-oai3

  [autorest_chg]: packages/apps/autorest/CHANGELOG.md

  [core_chg]: packages/extensions/core/CHANGELOG.md

  [modelerfour_chg]: packages/extensions/modelerfour/CHANGELOG.md

  [csharp_chg]: https://github.com/Azure/autorest.csharp

  [python_chg]:
  https://github.com/Azure/autorest.python/blob/autorestv3/ChangeLog.md

  [go_chg]: https://github.com/Azure/autorest.go

  [java_chg]: https://github.com/Azure/autorest.java/releases

  [swift_chg]: https://github.com/Azure/autorest.swift

  [typescript_chg]: https://github.com/Azure/autorest.typescript

  [powershell_chg]: https://github.com/Azure/autorest.powershell/releases

  [codemodel_chg]: packages/libs/codemodel/CHANGELOG.md

  [common_chg]: packages/libs/common/CHANGELOG.md

  [configuration_chg]: packages/libs/configuration/CHANGELOG.md

  [extension_base_chg]: packages/libs/extension-base/CHANGELOG.md

  [extension_chg]: packages/libs/extension/CHANGELOG.md

  [codegen_chg]: packages/libs/codegen/CHANGELOG.md

  [openapi_chg]: packages/libs/openapi/CHANGELOG.md

  [deduplication_chg]: packages/libs/deduplication/CHANGELOG.md

  [datastore_chg]: packages/libs/datastore/CHANGELOG.md

  [oai2-to-oai3_chg]: packages/libs/oai2-to-oai3/CHANGELOG.md

  [jsonschema_chg]: packages/libs/jsonschema/CHANGELOG.md


  ## Support Policy


  AutoRest is an open source tool -- if you need assistance, first check the
  documentation. If you find a bug or need some help, feel free to submit an
  [issue](https://github.com/Azure/autorest/issues)


  ## Getting Started using AutoRest ![image](./docs/images/normal.png)


  View our [docs readme][docs_readme] as a starting point to find both general
  information and language-generator specific information


  ## Contributing


  ### Contributing guide


  Check our [internal developer docs](./docs/developer/readme.md) to learn about
  our development process, how to propose bugfixes and improvements, and how to
  build and test your changes to Autorest.


  ### Code of Conduct


  This project has adopted the [Microsoft Open Source Code of
  Conduct](https://opensource.microsoft.com/codeofconduct/). For more
  information see the [Code of Conduct
  FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact
  [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional
  questions or comments.


  <!--LINKS-->


  [docs_readme]: docs/readme.md
CacheControl/hippie-swagger: >
  ![hippie-swagger](http://i.imgur.com/icjd94P.png)


  _"The confident hippie"_


  [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)

  [![Build
  Status](https://github.com/cachecontrol/hippie-swagger/workflows/Node.js%20CI/badge.svg?branch=master)](https://github.com/cachecontrol/hippie-swagger/workflows/Node.js%20CI/badge.svg?branch=master)

  [![npm
  version](https://badge.fury.io/js/hippie-swagger.svg)](https://badge.fury.io/js/hippie-swagger)


  ## Synopsis


  ```hippie-swagger``` is a tool for testing RESTful APIs.  In addition to
  validating api behavior, it will fail tests when swagger documentation is
  missing or inaccurate.


  As the test suite runs, any request or response details *not* matching the
  swagger file will throw an appropriate exception, failing the spec.  This
  ensures the swagger definition accurately describes application behavior,
  keeping documentation in sync with reality.


  ```hippie-swagger``` uses [hippie](https://github.com/vesln/hippie) under the
  hood, an excellent API testing tool.


  ## Features


  * All [hippie](https://github.com/vesln/hippie) features included

  * All aspects of swagger file validated; parameters, request/response body,
  paths, etc.

  * Checks for extra parameters, paths, headers, etc not mentioned in the
  swagger file

  * Ensures swagger file accurately describes API behavior

  * Accurate, human readable assertion messages


  ## Installation


  ```

  npm install hippie-swagger --save-dev

  ```


  ## Basic Usage


  ```js

  var hippie = require('hippie-swagger'),
      swagger = require('./my-dereferenced-swagger-file'); // see example for how to dereference swagger

  hippie(app, swagger)

  .get('/users/{username}')

  .pathParams({
    username: 'cachecontrol'
  })

  .expectStatus(200)

  .expectValue('user.first', 'John')

  .expectHeader('cache-control', 'no-cache')

  .end(function(err, res, body) {
    if (err) throw err;
  });

  ```


  ## Usage

  * See [hippie](https://github.com/vesln/hippie) documentation for a
  description of the base api

  * When specifying a url(.get, .post, .patch, .url, etc), use the [swagger
  path](http://swagger.io/specification/#pathsObject)

  * Provide any path variables using [pathParams](#pathparams)


  These aside, use hippie as you normally would; see the
  [example](example/index.js).


  ## Methods


  ### #constructor (Object app, Object swagger, Object [options])


  Test an HTTP app (like express) directly


  ```js

  hippie(app, swagger, options)

  .get('/projects')

  .end(fn);

  ```


  ### #constructor (Object swagger, Object [options])


  Test a remote HTTP app using a fully qualified url


  ```js

  hippie(swagger, options)

  .get('http://localhost:3000/projects')

  .end(fn);

  ```


  ### #pathParams(Object hash)


  Replaces variables contained in the swagger path.


  ```js

  hippie(app, swagger)

  .get('/projects/{projectId}/tasks/{taskId}')

  .pathParams({
    projectId: 123,
    taskId: 99
  })

  .end(fn);

  ```


  ## Options


  To customize behavior, an ```options``` hash may be passed to the
  constructor.  Typically, ```options``` only need to be specified in situations
  where the test covers responses to improper requests (e.g. validating the
  application returns a 422 when a required parameter is not provided).


  ```js

  var options = {
    validateResponseSchema: true,
    validateParameterSchema: true,
    errorOnExtraParameters: true,
    errorOnExtraHeaderParameters: false
  };

  hippie(app, swagger, options)

  ```


  ```validateResponseSchema``` - Validate the server's response against the
  swagger json-schema definition (default: ```true```)


  ```validateParameterSchema``` - Validate the request parameters against the
  swagger json-schema definition (default: ```true```)


  ```validateRequiredParameters``` - Validate that required parameters were
  provided  (default: ```true```)


  ```errorOnExtraParameters``` - Throw an error if a parameter is missing from
  the swagger file  (default: ```true```)


  ```errorOnExtraHeaderParameters``` - Throw an error if a request header is
  missing from the swagger file.  By default this is turned off, because it
  results in every request needing to specify the "Content-Type" and "Accept"
  headers, which quickly becomes verbose. (default: ```false```)



  ## Example

  See the [example](example/index.js) folder


  ## Validations


  When hippie-swagger detects it is interacting with the app in ways not
  specified in the swagger file, it will throw an error and fail the test.  The
  idea is to use hippie's core features to write API tests as per usual, and
  hippie-swagger will only interject if the swagger contract is violated.


  Below are list of some of the validations that hippie-swagger checks for:


  ### Paths

  ```js

  hippie(app, swagger)

  .get('/pathNotMentionedInSwagger')

  .end(fn);

  // path does not exist in swagger file; throws:

  //    Swagger spec does not define path: pathNotMentionedInSwagger

  ```


  ### Parameter format

  ```js

  hippie(app, swagger)

  .get('/users/{userId}')

  .pathParams({
    userId: 'string-value',
  })

  .end(fn);

  // userId provided as a string, but swagger specifies it as an integer;
  throws:

  //    Invalid format for parameter {userId}

  ```


  ### Required Parameters

  ```js

  hippie(app, swagger)

  .get('/users/{username}')

  .end(fn);

  // "username" is marked 'required' in swagger file; throws:

  //    Missing required parameter in path: username

  ```


  ### Extraneous Parameters

  ```js

  hippie(app, swagger)

  .get('/users')

  .qs({ page: 2, limit: 30 })

  .end(fn);

  // "page" missing from swagger file; throws:

  //    Error: query parameter not mentioned in swagger spec: "page", available
  params: limit

  ```


  ### Response format

  ```js

  hippie(app, swagger)

  .get('/users')

  .end(fn);

  // body failed to validate against swagger file's "response" schema; throws:

  //    Response from /users failed validation: [failure description]

  ```


  ### Method validation

  ```js

  hippie(app, swagger)

  .post('/users')

  .end(fn);

  // "post" method not mentioned in swagger file; throws:

  //    Swagger spec does not define method: "post" in path /users

  ```


  ### Post body format

  ```js

  hippie(app, swagger)

  .post('/users')

  .send({"bogus":"post-body"})

  .end(fn);


  // post body fails to validate against swagger file's "body" parameter;
  throws:

  //    Invalid format for parameter {body}, received: {"bogus":"post-body"}

  ```


  ### Form Url-Encoded Parameters

  ```js

  hippie(app, swagger)

  .form()

  .post('/users')

  .send({})

  .end(fn);


  // "username" is {required: true, in: formData} in swagger; throws:

  //    Missing required parameter in formData: username

  ```


  ### Multipart Forms

  ```js

  hippie(app, swagger)

  .header('Content-Type','multipart/form-data')

  .send()

  .post('/users/upload')

  .end(fn);


  // "fileUpload" is {required: true, in: formData, type: file} in swagger;
  throws:

  //    Missing required parameter in formData: fileUpload

  ```


  ## Troubleshooting


  The most common mistake is forgetting to dereference the swagger file:


  ```js

  "'Error: cant resolve reference ...'

  ```


  Dereferencing can be accomplished using
  [swagger-parser](https://github.com/BigstickCarpet/swagger-parser/blob/master/docs/swagger-parser.md#dereferenceapi-options-callback). 
  The [example](example/index.js) gives a demonstration.


  ## Contributing


  To run the `hippie-swagger` tests:


  ```

  npm test

  ```


  ## License

  [ISC](./LICENSE)
SabzCity/libgo: "# libgo   \n[![GoDoc](https://pkg.go.dev/badge/github.com/GeniusesGroup/libgo)](https://pkg.go.dev/github.com/GeniusesGroup/libgo)\n[![Go Report](https://goreportcard.com/badge/github.com/GeniusesGroup/libgo)](https://goreportcard.com/report/github.com/GeniusesGroup/libgo)\n\nAn **application** developing **framework** provide ZeroOps(zero operations), edge computing, ... that let you develope both server and client applications in Go without need to think more about any fundamental requirements, Just develope business services and user interfaces (now just graphical interface - gui), build apps as OS images or OS applications and easily just run first server node and let it distributes by many factors with inside logics not need external decision makers (automating software deployment) like Kubernetes(K8s).\n\nIn other word, `libgo` abbreviation of `Go language library` is a repository wrapper to store all implementation of GeniusesGroup and others protocols and algorithms to make a digital software more easily in better performance.\nYou can use all packages exported APIs, go generator mechanism or by [library CLI](#CLI) to access some useful APIs from command line easily.\n\n## Goals\n- Provide complete framework to develope any purpose distributed application with **low||no code**.\n- No(minimum) dependency on any other repositories.\n- Compile an application as **Unikernel** instead of regular OSs binaries.\n- Develope high available and distributed software without any admin in any infrastructure layers (DevOps culture goal).\n- Let service developers act Lean and Agile in their organization.\n- [Reinvent the wheel](https://en.wikipedia.org/wiki/Reinventing_the_wheel)\n\n## Not Goals\n- \n\n## Installation\n- Make project directory and suggest use your internet domain name for it.\n- initialize project version control. If you use git run `git init` or `git clone ${repository path}`.\n- init go project by `git init` and `go mod init`\n- add `libgo` to your project dependency\n- install `libgo` with `lang_eng` or your desire language\n- initialize the project with desire domain e.g. `google.com`\n- build your organization app by `libgo build` or by `go build` with desire tags and target OS and hardwares.\n- run your desire version from /bin/ directory. Strongly suggest run app by systemd on linux or other app manager on other OS.\n\nor easily run the following command under your project, just replace your domain name.\n```\nmkdir {domain}\ngit init\ngo mod init\ngo get -u github.com/GeniusesGroup/libgo\ngo install github.com/GeniusesGroup/libgo -tags \"lang_eng\"\nlibgo app init -d={domain}\nlibgo build\n```\n\n## Commands (CLA)\nlibgo has a the command-line client for the some generator APIs implement in [modules](./modules/). It provides simple access to all APIs functions to make an application, a GUI app, ....\n\nYou can get list of all commands and their helps with `libgo help`. We just list some of important commands here that you can run them from within a Go module or any where in your project directory:\n- **Initialize a project:** `libgo app init -d=[internet-domain]`\n- **Add new domain module:** `libgo domain new -n=[domain-name]`\n\n## Build tags\n- **dev_mode**: first check and change `AppMode_Dev` const in protocol package to desire behavior\n- **tcp_listener**:\n\n### Developing hints\n- Complete manifest in main package of service.\n- Add other data to main package if needed.\n- Implement protocols logic by autogenerate some codes not write them manually.\n- Don't think about network when you develope a business service logic. Use `st protocol.Stream` as stream data not network stream and don't remove it even don't need it from `Process` method arguments.\n\n## Protocols\nYou can find protocol descriptions in its directory as now [protocol](./protocol/), [society](./society/), [ISO](./iso/)    \nRead more about each protocol or library in its [RFC](https://github.com/GeniusesGroup/RFCs)\nAs [suggest here](https://github.com/golang/go/issues/48087) to comply with the standards we add [protocol](./protocol) package and all other libgo packages implement this package. You can implement these protocols in your own way if our packages can't satisfied you or your requirements.   \nA standard is a formalized protocol accepted by most of the parties that implement it. A protocol is not a set of rules. A protocol is the thing those rules describe the rules of. This is why programs implement a protocol and comply with a standard.\n\n### Industry Protocols\n- Insurance     >> ACCORD\n- Health Care   >> HL7\n- Retail        >> GS1\n- HR            >> HRXML\n\n## GIT\nGit is not the best version control mechanism for a software project, but it is the most use one.\n\n### Some useful commands\n- Make project version control by ```git init```\n- Clone exiting repo by ```git clone ${repository path}```.\n- Add libgo to project as submodule by ```git submodule add -b master https://github.com/GeniusesGroup/libgo```\n- Clone existing project with just latest commits not all one ```git clone ${repository path} --recursive --shallow-submodules```\n- Change libgo version by ```git checkout tag/${tag}``` or update by ```git submodule update -f --init --remote --checkout --recursive``` if needed.\n\n## Go\n### Some useful commands\n- go build -race\n- go tool compile -S {{file-name}}.go > {{file-name}}_C.S\n- go tool objdump {{file-name}}.o > {{file-name}}_O.S\n- go build -gcflags=-m {{file-name}}.go\n- go run -gcflags='-m -m' {{file-name}}.go\n- go build -ldflags \"-X version=0.1\"\n\n### build tags\nSome functionality in files that have build tags `//go:build tag_name` or `// +build tag_name` in the first line just build when you provided in build time like `go build -tags \"dev_mode tcp_listener\"`. Build tag declarations must be at the very top of a .go files. Nothing, not even comments, can be above build tags. We prefer `go:build` over `+build` because as [describe in the proposal](https://go.googlesource.com/proposal/+/master/design/draft-gobuild.md#transition) but below chart is how to declare in `+build` style.\n\n| Build Tag Syntax\t            | Build Tag Sample\t                        | Boolean Statement     |\n| :---:                         | :---:                                     | :---:                 |\n| Space-separated elements\t    | // +build pro enterprise\t                | pro OR enterprise     |\n| Comma-separated elements      | // +build pro,enterprise\t                | pro AND enterprise    |\n| New line separated elements   | // +build pro<br />// +build enterprise   | pro AND enterprise    |\n| Exclamation point elements    | // +build !pro\t                        | NOT pro               |\n\n## Contribute Rules\n- Write benchmarks and tests codes in different files as `{{file-name}}_test.go` and `{{file-name}}_bench_test.go`\n\n## Enterprise\nContact us by [this](mailto:ict@geniuses.group) or [this](mailto:omidhekayati@gmail.com) if you need enterprise support for developing high available and distributed software. See features available in enterprise package:\n- Develope exclusive features in very short time\n- Bug fixing quickly\n- \n\n## Good Idea, Bad implementation!\n- [SQLc](sqlc.dev)\n- [EntGo](https://entgo.io/)\n- [go-zero](https://github.com/zeromicro/go-zero) e.g. (microservice system), (fully compatible with net/http), (middlewares are supported), ...\nor [really relativetime?? Why not monotonic time??](https://github.com/zeromicro/go-zero/blob/master/core/timex/relativetime.go)\n\n## Related Projects\n- [Clive is an operating system designed to work in distributed and cloud computing environments.](https://github.com/fjballest/clive)\n\n## Abbreviations & Definitions\n- **UI**: (any) User Interface\n    - **GUI**: Graphic User Interface\n    - **VUI**: Voice User Interface\n    - **CLI**: Command Line Interface\n    - **CLA**: Command Line Arguments\n- **Modules**: a kind of collection of packages\n- **Packages**: a kind of collection of files\n- **dp**: domain protocol\n- **init**: initialize call just after an object allocate.\n- **reinit**: re-initialize call when allocated object want to reuse immediately or pass to a pool to reuse later. It will prevent memory leak by remove any references in the object.\n- **deinit**: de-initialize call just before an object want to de-allocated (GC).\n- **open**:\n- **reset**:\n- **close**:\n"
Swagger2Markup/swagger2markup: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2718:09A2:AFA480:1640C25:6500FB0C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Swagger2Markup/swagger2markup-gradle-plugin: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2738:6A5B:ADCBCF:160C4B5:6500FB0D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
aress31/swurg: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2721:1D02:76E208:F2DEC5:6500FB1A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
frankiesardo/route-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B58:8148:7560C5:EFE83B:6500FB3B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
gedaiu/swaggerize: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5F:4DCD:7DFB82:100AAC8:6500FB3D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
grpc-ecosystem/grpc-gateway: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B53:1B72:767BD6:F20B00:6500FB40.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
microsoft/OpenAPI.NET: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B70:055A:AB01EC:15B2D08:6500FB57.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
microsoft/OpenAPI.NET.OData: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B74:93AA:A6318F:151789C:6500FB57.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
rswag/rswag: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A89:13B9:B4441:172AAB:6500FB6B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
LucyBot-Inc/api-spec-converter: >
  # api-spec-converter

  > This project is looking for a new maintainer! Let us know if you're
  interested in taking it over.


  [![Share on Twitter][twitter-image]][twitter-link]


  [![Chat on gitter][gitter-image]][gitter-link]

  [![NPM version][npm-image]][npm-link]

  [![Build status][travis-image]][travis-link]


  [![Dependency status][deps-image]][deps-link]

  [![devDependency status][devdeps-image]][devdeps-link]


  Convert between API description formats such as [Swagger](http://swagger.io/)
  and [RAML](http://raml.org/)


  **Currently only supports conversion to OpenAPI(fka Swagger) 2.0 format, and
  from OpenAPI 2.0 to OpenAPI 3.0.x**


  You can also use the online version at
  https://lucybot-inc.github.io/api-spec-converter/.


  ## Installation


  ### Command Line

  > Problems? See [issue
  #132](https://github.com/LucyBot-Inc/api-spec-converter/issues/132)

  ```bash

  npm install -g api-spec-converter

  ```


  ### NodeJS/Browser

  ```bash

  npm install --save api-spec-converter

  ```


  ## Usage


  ### Command Line

  ```bash

  $ api-spec-converter -h

    Usage: api-spec-converter [options] <URL|filename>

    Convert API descriptions between popular formats.

    Supported formats:
      * swagger_1
      * swagger_2
      * openapi_3
      * api_blueprint
      * io_docs
      * google
      * raml
      * wadl

    Options:

      -h, --help              output usage information
      -V, --version           output the version number
      -f, --from <format>     Specifies format to convert
      -t, --to <format>       Specifies output format
      -s, --syntax [syntax]   Specifies output data syntax: json or yaml. Defaults to json
      -o, --order [sortOrder] Specifies top fields ordering: openapi or alpha. Defaults to openapi
      -c, --check             Check if result is valid spec
      -d, --dummy             Fill missing required fields with dummy data
  ```


  Example:

  ```bash

  $ api-spec-converter --from=swagger_1 --to=swagger_2 --syntax=yaml
  --order=alpha
  https://raw.githubusercontent.com/LucyBot-Inc/api-spec-converter/master/test/input/swagger_1/petstore/pet.json
  > swagger.json

  ```


  ### NodeJS


  ### Options

  * `from` - source format (see formats below)

  * `to` - desired format (see formats below)

  * `source` - Filename, URL, or JS object for the source

  ### Simple example:

  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  }, function(err, converted) {
    console.log(converted.stringify());
    // For yaml and/or OpenApi field order output replace above line
    // with an options object like below
    //   var  options = {syntax: 'yaml', order: 'openapi'}
    //   console.log(converted.stringify(options));
  })

  ```

  ### Callback vs Promises

  This library has full support for both callback and promises.

  All async functions return promises but also will execute callback if
  provided.


  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })

  .then(function(converted) {
    console.log(converted.stringify());
  });

  ```

  ### Advanced features:

  ```js

  var Converter = require('api-spec-converter');

  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })
    .then(function(converted) {
      // [Optional] Fill missing fields with dummy values
      converted.fillMissing();

      // [Optional] Validate converted spec
      return converted.validate()
        .then(function (result) {
          if (result.errors)
            return console.error(JSON.stringify(errors, null, 2));
          if (result.warnings)
            return console.error(JSON.stringify(warnings, null, 2));

          fs.writeFileSync('swagger2.json', converted.stringify());
        });
    });
  ```


  ### Browser

  ```js

  <script
  src="node_modules/api-spec-converter/dist/api-spec-converter.js"></script>

  APISpecConverter.convert(...)

  ```


  ## Supported Formats


  * [Swagger
  1.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/1.2.md)
  (swagger_1)

  * [OpenAPI(fka Swagger)
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  (swagger_2)

  * [OpenAPI
  3.0.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  (openapi_3)

  * [I/O Docs](https://github.com/mashery/iodocs) (io_docs)

  * [API
  Blueprint](https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md)
  (api_blueprint)

  * [Google API
  Discovery](https://developers.google.com/discovery/v1/reference/apis) (google)

  * [RAML](http://raml.org/spec.html) (raml)

  * [WADL](http://www.w3.org/Submission/wadl/) (wadl)



  ## Conversion Table


  |from:            
  |swagger_1|swagger_2|openapi_3|io_docs|api_blueprint|google|raml|wadl|

  -------------------|:-------:|:-------:|:-----:|:-----:|:-----------:|:----:|:--:|:--:|

  |to swagger_1      |  n/a    |         |       |       |             |     
  |    |    |

  |to swagger_2      | :white_check_mark: |    n/a  | :white_check_mark:  |
  :white_check_mark: | :white_check_mark: | :white_check_mark: |
  :white_check_mark: | :white_check_mark: |

  |to openapi_3      |   :eight_spoked_asterisk:     | :white_check_mark: | 
  n/a  |   :eight_spoked_asterisk:  | :eight_spoked_asterisk: | 
  :eight_spoked_asterisk:   | :eight_spoked_asterisk:  |
  :eight_spoked_asterisk:  |

  |to io_docs        |         |         |       |  n/a  |             |     
  |    |    |

  |to api_blueprint  |         |         |       |       |    n/a      |     
  |    |    |

  |to google         |         |         |       |       |             |  n/a
  |    |    |

  |to raml           |         |         |       |       |             |      |
  n/a|    |

  |to wadl           |         |         |       |       |             |     
  |    | n/a|


  #### Key

  * :white_check_mark: - direct conversion

  * :eight_spoked_asterisk: - conversion via swagger_2


  ## Contributing

  Contributions are welcome and encouraged.


  ### Testing

  Please add a test case if you're adding features or fixing bugs. To run the
  tests:


  ```bash

  npm test

  ```


  In case you need to override the expected outputs, due to a justified and
  verified change, run this:

  ```bash

  WRITE_GOLDEN=true npm test

  ```

  ### Releases

  ```

  npm run browserify

  git commit -a -m "Build browser distribution"

  npm version minor # or major/patch

  npm publish

  git push --follow-tags

  ```


  [twitter-image]:
  https://img.shields.io/twitter/url/http/lucybot.github.io/api-spec-converter.svg?style=social

  [twitter-link]:
  https://twitter.com/intent/tweet?text=Convert+between+API+description+formats+such+as+Swagger+and+RAML:&url=http%3A%2F%2Flucybot.github.io%2Fapi-spec-converter

  [gitter-image]:
  https://img.shields.io/gitter/room/lucybot/api-spec-converter.svg

  [gitter-link]: https://gitter.im/lucybot/api-spec-converter

  [npm-image]: https://img.shields.io/npm/v/api-spec-converter.svg

  [npm-link]: https://npmjs.org/package/api-spec-converter

  [travis-image]:
  https://img.shields.io/travis/LucyBot-Inc/api-spec-converter.svg

  [travis-link]: https://travis-ci.org/LucyBot-Inc/api-spec-converter

  [deps-image]: https://img.shields.io/david/lucybot/api-spec-converter.svg

  [deps-link]: https://david-dm.org/lucybot/api-spec-converter

  [devdeps-image]:
  https://img.shields.io/david/dev/lucybot/api-spec-converter.svg

  [devdeps-link]:
  https://david-dm.org/lucybot/api-spec-converter#info=devDependencies
flasgger/flasgger: >
  # Flasgger

  ## Easy Swagger UI for your Flask API


  [![Build
  Status](https://travis-ci.com/flasgger/flasgger.svg?branch=master)](https://travis-ci.com/flasgger/flasgger)

  [![Code
  Health](https://landscape.io/github/rochacbruno/flasgger/master/landscape.svg?style=flat)](https://landscape.io/github/rochacbruno/flasgger/master)

  [![Coverage
  Status](https://coveralls.io/repos/github/rochacbruno/flasgger/badge.svg?branch=master)](https://coveralls.io/github/rochacbruno/flasgger?branch=master)

  [![PyPI](https://img.shields.io/pypi/v/flasgger.svg)](https://pypi.python.org/pypi/flasgger)
   <a target="_blank" href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=rochacbruno%40gmail%2ecom&amp;lc=BR&amp;item_name=Flasgger&amp;no_note=0&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHostedGuest"><img alt='Donate with Paypal' src='http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif' /></a>


  ![flasgger](docs/flasgger.png)


  Flasgger is a Flask extension to **extract
  [OpenAPI-Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)**
  from all Flask views registered in your API.


  Flasgger also comes with **[SwaggerUI](http://swagger.io/swagger-ui/)
  embedded** so you can access
  [http://localhost:5000/apidocs](localhost:5000/apidocs) and visualize and
  interact with your API resources.


  Flasgger also **provides validation** of the incoming data, using the same
  specification it can validates if the data received as as a POST, PUT, PATCH
  is valid against the schema defined using **YAML**, **Python dictionaries** or
  **Marshmallow Schemas**.


  Flasgger can work with simple function views or MethodViews using docstring as
  specification, or using `@swag_from` decorator to get specification from
  **YAML** or **dict** and also provides **SwaggerView** which can use
  **Marshmallow Schemas**  as specification.


  Flasgger is compatible with `Flask-RESTful` so you can use `Resources` and
  `swag` specifications together, take a look at [restful
  example.](examples/restful.py)


  Flasgger also supports `Marshmallow APISpec` as base template for
  specification, if you are using APISPec from Marshmallow take a look at
  [apispec example.](examples/apispec_example.py)


  Table of Contents

  =================


  * [Top Contributors](#top-contributors)

  * [Examples and demo app](#examples-and-demo-app)
    * [Docker](#docker)
  * [Installation](#installation)

  * [Getting started](#getting-started)
    * [Using docstrings as specification](#using-docstrings-as-specification)
    * [Using external YAML files](#using-external-yaml-files)
    * [Using dictionaries as raw specs](#using-dictionaries-as-raw-specs)
    * [Using Marshmallow Schemas](#using-marshmallow-schemas)
    * [Using <strong>Flask RESTful</strong> Resources](#using-flask-restful-resources)
    * [Auto-parsing external YAML docs and MethodViews](#auto-parsing-external-yaml-docs-and-methodviews)
    * [Handling multiple http methods and routes for a single function](#handling-multiple-http-methods-and-routes-for-a-single-function)
  * [Use the same data to validate your API POST
  body.](#use-the-same-data-to-validate-your-api-post-body)
       * [Custom validation](#custom-validation)
       * [Validation Error handling](#validation-error-handling)
  * [Get defined schemas as python
  dictionaries](#get-defined-schemas-as-python-dictionaries)

  * [HTML sanitizer](#html-sanitizer)

  * [Swagger UI and templates](#swagger-ui-and-templates)

  * [OpenAPI 3.0 Support](#openapi-30-support)
    * [Externally loading Swagger UI and jQuery JS/CSS](#externally-loading-swagger-ui-and-jquery-jscss)
  * [Initializing Flasgger with default
  data.](#initializing-flasgger-with-default-data)
    * [Getting default data at runtime](#getting-default-data-at-runtime)
    * [Behind a reverse proxy](#behind-a-reverse-proxy)
  * [Customize default configurations](#customize-default-configurations)
    * [Extracting Definitions](#extracting-definitions)
    * [Python2 Compatibility](#python2-compatibility)

  Created by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc)


  # Top Contributors


  [![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/0)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/0)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/1)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/1)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/2)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/2)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/3)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/3)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/4)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/4)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/5)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/5)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/6)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/6)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/7)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/7)


  # Examples and demo app


  There are some [example applications](examples/) and you can also play with
  examples in [Flasgger demo app](http://flasgger.pythonanywhere.com/)


  > NOTE: all the examples apps are also test cases and run automatically in
  Travis CI to ensure quality and coverage.


  ## Docker


  The examples and demo app can also be built and run as a Docker
  image/container:


  ```

  docker build -t flasgger .

  docker run -it --rm -p 5000:5000 --name flasgger flasgger

  ```

  Then access the Flasgger demo app at http://localhost:5000 .


  # Installation


  > under your virtualenv do:


  Ensure you have latest setuptools

  ```

  pip install -U setuptools

  ```


  then install beta version (recommended)


  ```

  pip install flasgger==0.9.7b2

  ```


  or (latest stable for legacy apps)


  ```

  pip install flasgger==0.9.5

  ```


  or (dev version)


  ```

  pip install https://github.com/flasgger/flasgger/tarball/master

  ```


  > NOTE: If you want to use **Marshmallow Schemas** you also need to run `pip
  install marshmallow apispec`


  ## How to run tests


  (You may see the command in [.travis.yml](./.travis.yml) for `before_install`
  part)


  In your virtualenv:


  ```

  pip install -r requirements.txt

  pip install -r requirements-dev.txt

  make test

  ```


  # Getting started


  ## Using docstrings as specification


  Create a file called for example `colors.py`


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger


  app = Flask(__name__)

  swagger = Swagger(app)


  @app.route('/colors/<palette>/')

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      This is using docstrings for specifications.
      ---
      parameters:
        - name: palette
          in: path
          type: string
          enum: ['all', 'rgb', 'cmyk']
          required: true
          default: all
      definitions:
        Palette:
          type: object
          properties:
            palette_name:
              type: array
              items:
                $ref: '#/definitions/Color'
        Color:
          type: string
      responses:
        200:
          description: A list of colors (may be filtered by palette)
          schema:
            $ref: '#/definitions/Palette'
          examples:
            rgb: ['red', 'green', 'blue']
      """
      all_colors = {
          'cmyk': ['cyan', 'magenta', 'yellow', 'black'],
          'rgb': ['red', 'green', 'blue']
      }
      if palette == 'all':
          result = all_colors
      else:
          result = {palette: all_colors.get(palette)}

      return jsonify(result)

  app.run(debug=True)

  ```


  Now run:


  ```

  python colors.py

  ```


  And go to: [http://localhost:5000/apidocs/](http://localhost:5000/apidocs/)


  You should get:


  ![colors](docs/colors.png)


  ## Using external YAML files


  Save a new file `colors.yml`


  ```yaml

  Example endpoint returning a list of colors by palette

  In this example the specification is taken from external YAML file

  ---

  parameters:
    - name: palette
      in: path
      type: string
      enum: ['all', 'rgb', 'cmyk']
      required: true
      default: all
  definitions:
    Palette:
      type: object
      properties:
        palette_name:
          type: array
          items:
            $ref: '#/definitions/Color'
    Color:
      type: string
  responses:
    200:
      description: A list of colors (may be filtered by palette)
      schema:
        $ref: '#/definitions/Palette'
      examples:
        rgb: ['red', 'green', 'blue']
  ```



  lets use the same example changing only the view function.


  ```python

  from flasgger import swag_from


  @app.route('/colors/<palette>/')

  @swag_from('colors.yml')

  def colors(palette):
      ...
  ```


  If you do not want to use the decorator you can use the docstring `file:`
  shortcut.


  ```python

  @app.route('/colors/<palette>/')

  def colors(palette):
      """
      file: colors.yml
      """
      ...
  ```



  ## Using dictionaries as raw specs


  Create a Python dictionary as:


  ```python

  specs_dict = {
    "parameters": [
      {
        "name": "palette",
        "in": "path",
        "type": "string",
        "enum": [
          "all",
          "rgb",
          "cmyk"
        ],
        "required": "true",
        "default": "all"
      }
    ],
    "definitions": {
      "Palette": {
        "type": "object",
        "properties": {
          "palette_name": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Color"
            }
          }
        }
      },
      "Color": {
        "type": "string"
      }
    },
    "responses": {
      "200": {
        "description": "A list of colors (may be filtered by palette)",
        "schema": {
          "$ref": "#/definitions/Palette"
        },
        "examples": {
          "rgb": [
            "red",
            "green",
            "blue"
          ]
        }
      }
    }
  }

  ```


  Now take the same function and use the dict in the place of YAML file.


  ```python

  @app.route('/colors/<palette>/')

  @swag_from(specs_dict)

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      In this example the specification is taken from specs_dict
      """
      ...
  ```


  ## Using Marshmallow Schemas


  > FIRST: `pip install marshmallow apispec`


  > USAGE #1: `SwaggerView`


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger, SwaggerView, Schema, fields



  class Color(Schema):
      name = fields.Str()

  class Palette(Schema):
      pallete_name = fields.Str()
      colors = fields.Nested(Color, many=True)

  class PaletteView(SwaggerView):
      parameters = [
          {
              "name": "palette",
              "in": "path",
              "type": "string",
              "enum": ["all", "rgb", "cmyk"],
              "required": True,
              "default": "all"
          }
      ]
      responses = {
          200: {
              "description": "A list of colors (may be filtered by palette)",
              "schema": Palette
          }
      }

      def get(self, palette):
          """
          Colors API using schema
          This example is using marshmallow schemas
          """
          all_colors = {
              'cmyk': ['cyan', 'magenta', 'yellow', 'black'],
              'rgb': ['red', 'green', 'blue']
          }
          if palette == 'all':
              result = all_colors
          else:
              result = {palette: all_colors.get(palette)}
          return jsonify(result)

  app = Flask(__name__)

  swagger = Swagger(app)


  app.add_url_rule(
      '/colors/<palette>',
      view_func=PaletteView.as_view('colors'),
      methods=['GET']
  )


  app.run(debug=True)


  ```


  > USAGE #2: `Custom Schema from flasgger`


  - `Body` - support all fields in marshmallow

  - `Query` - support simple fields in marshmallow (Int, String and etc)

  - `Path` - support only int and str


  ```python

  from flask import Flask, abort

  from flasgger import Swagger, Schema, fields

  from marshmallow.validate import Length, OneOf


  app = Flask(__name__)

  Swagger(app)


  swag = {"swag": True,
          "tags": ["demo"],
          "responses": {200: {"description": "Success request"},
                        400: {"description": "Validation error"}}}


  class Body(Schema):
      color = fields.List(fields.String(), required=True, validate=Length(max=5), example=["white", "blue", "red"])

      def swag_validation_function(self, data, main_def):
          self.load(data)

      def swag_validation_error_handler(self, err, data, main_def):
          abort(400, err)


  class Query(Schema):
      color = fields.String(required=True, validate=OneOf(["white", "blue", "red"]))

      def swag_validation_function(self, data, main_def):
          self.load(data)

      def swag_validation_error_handler(self, err, data, main_def):
          abort(400, err)

      swag_in = "query"


  @app.route("/color/<id>/<name>", methods=["POST"], **swag)

  def index(body: Body, query: Query, id: int, name: str):
      return {"body": body, "query": query, "id": id, "name": name}

  if __name__ == "__main__":
      app.run(debug=True)
  ```



  > NOTE: take a look at `examples/validation.py` for a more complete example.



  > NOTE: when catching arguments in path rule always use explicit types, bad:
  ``/api/<username>`` good: ``/api/<string:username>``



  ## Using **Flask RESTful** Resources


  Flasgger is compatible with Flask-RESTful you only need to install `pip
  install flask-restful` and then:


  ```python

  from flask import Flask

  from flasgger import Swagger

  from flask_restful import Api, Resource


  app = Flask(__name__)

  api = Api(app)

  swagger = Swagger(app)


  class Username(Resource):
      def get(self, username):
          """
          This examples uses FlaskRESTful Resource
          It works also with swag_from, schemas and spec_dict
          ---
          parameters:
            - in: path
              name: username
              type: string
              required: true
          responses:
            200:
              description: A single user item
              schema:
                id: User
                properties:
                  username:
                    type: string
                    description: The name of the user
                    default: Steven Wilson
          """
          return {'username': username}, 200


  api.add_resource(Username, '/username/<username>')


  app.run(debug=True)

  ```


  ## Auto-parsing external YAML docs and `MethodView`s


  Flasgger can be configured to auto-parse external YAML API docs.  [Set a
  `doc_dir`](https://github.com/rochacbruno/flasgger/blob/aaef05c17cc559d01b7436211093463642eb6ae2/examples/parsed_view_func.py#L16)
  in your `app.config['SWAGGER']` and Swagger will load API docs by looking in
  `doc_dir` for YAML files stored by endpoint-name and method-name.  For
  example, `'doc_dir': './examples/docs/'` and a file
  `./examples/docs/items/get.yml` will provide a Swagger doc for `ItemsView`
  method `get`.


  Additionally, when using **Flask RESTful** per above, by passing `parse=True`
  when constructing `Swagger`, Flasgger will use 
  `flask_restful.reqparse.RequestParser`, locate all `MethodView`s and parsed
  and validated data will be stored in `flask.request.parsed_data`.


  ## Handling multiple http methods and routes for a single function


  You can separate specifications by endpoint or methods


  ```python

  from flasgger.utils import swag_from


  @app.route('/api/<string:username>', endpoint='with_user_name',
  methods=['PUT', 'GET'])

  @app.route('/api/', endpoint='without_user_name')

  @swag_from('path/to/external_file.yml', endpoint='with_user_name')

  @swag_from('path/to/external_file_no_user_get.yml',
  endpoint='without_user_name', methods=['GET'])

  @swag_from('path/to/external_file_no_user_put.yml',
  endpoint='without_user_name', methods=['PUT'])

  def fromfile_decorated(username=None):
      if not username:
          return "No user!"
      return jsonify({'username': username})
  ```


  And the same can be achieved with multiple methods in a `MethodView` or
  `SwaggerView` by

  registering the `url_rule` many times. Take a look at `examples/example_app`



  # Use the same data to validate your API POST body.


  Setting `swag_from`'s _validation_ parameter to `True` will validate incoming
  data automatically:


  ```python

  from flasgger import swag_from


  @swag_from('defs.yml', validation=True)

  def post():
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  Using `swagger.validate` annotation is also possible:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('UserSchema')

  def post():
      '''
      file: defs.yml
      '''
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  Yet you can call `validate` manually:


  ```python

  from flasgger import swag_from, validate


  @swag_from('defs.yml')

  def post():
      validate(request.json, 'UserSchema', 'defs.yml')
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  It is also possible to define `validation=True` in `SwaggerView` and also use

  `specs_dict` for validation.


  Take a look at `examples/validation.py` for more information.


  All validation options can be found at
  http://json-schema.org/latest/json-schema-validation.html


  ### Custom validation


  By default Flasgger will use
  [python-jsonschema](https://python-jsonschema.readthedocs.io/en/latest/)

  to perform validation.


  Custom validation functions are supported as long as they meet the
  requirements:
   - take two, and only two, positional arguments:
      - the data to be validated as the first; and
      - the schema to validate against as the second argument
   - raise any kind of exception when validation fails.

  Any return value is discarded.



  Providing the function to the Swagger instance will make it the default:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app, validation_function=my_validation_function)

  ```


  Providing the function as parameter of `swag_from` or `swagger.validate`

  annotations or directly to the `validate` function will force it's use

  over the default validation function for Swagger:


  ```python

  from flasgger import swag_from


  @swag_from('spec.yml', validation=True, validation_function=my_function)

  ...

  ```


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('Pet', validation_function=my_function)

  ...

  ```


  ```python

  from flasgger import validate


  ...

      validate(
          request.json, 'Pet', 'defs.yml', validation_function=my_function)
  ```


  ### Validation Error handling


  By default Flasgger will handle validation errors by aborting the

  request with a 400 BAD REQUEST response with the error message.


  A custom validation error handling function can be provided to

  supersede default behavior as long as it meets the requirements:
   - take three, and only three, positional arguments:
      - the error raised as the first;
      - the data which failed validation as the second; and
      - the schema used in to validate as the third argument


  Providing the function to the Swagger instance will make it the default:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app, validation_error_handler=my_handler)

  ```


  Providing the function as parameter of `swag_from` or `swagger.validate`

  annotations or directly to the `validate` function will force it's use

  over the default validation function for Swagger:


  ```python

  from flasgger import swag_from


  @swag_from(
      'spec.yml', validation=True, validation_error_handler=my_handler)
  ...

  ```


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('Pet', validation_error_handler=my_handler)

  ...

  ```


  ```python

  from flasgger import validate


  ...

      validate(
          request.json, 'Pet', 'defs.yml',
          validation_error_handler=my_handler)
  ```


  Examples of use of a custom validation error handler function can be

  found at [example
  validation_error_handler.py](examples/validation_error_handler.py)


  # Get defined schemas as python dictionaries


  You may wish to use schemas you defined in your Swagger specs as dictionaries

  without replicating the specification. For that you can use the `get_schema`

  method:


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger, swag_from


  app = Flask(__name__)

  swagger = Swagger(app)


  @swagger.validate('Product')

  def post():
      """
      post endpoint
      ---
      tags:
        - products
      parameters:
        - name: body
          in: body
          required: true
          schema:
            id: Product
            required:
              - name
            properties:
              name:
                type: string
                description: The product's name.
                default: "Guarana"
      responses:
        200:
          description: The product inserted in the database
          schema:
            $ref: '#/definitions/Product'
      """
      rv = db.insert(request.json)
      return jsonify(rv)

  ...


  product_schema = swagger.get_schema('product')

  ```


  This method returns a dictionary which contains the Flasgger schema id,

  all defined parameters and a list of required parameters.


  # HTML sanitizer


  By default Flasgger will try to sanitize the content in YAML definitions

  replacing every ```\n``` with ```<br>``` but you can change this behaviour

  setting another kind of sanitizer.


  ```python

  from flasgger import Swagger, NO_SANITIZER


  app =Flask()

  swagger = Swagger(app, sanitizer=NO_SANITIZER)

  ```


  You can write your own sanitizer


  ```python

  swagger = Swagger(app, sanitizer=lambda text: do_anything_with(text))

  ```


  There is also a Markdown parser available, if you want to be able to render

  Markdown in your specs description use **MK_SANITIZER**



  # Swagger UI and templates


  You can override the `templates/flasgger/index.html` in your application and

  this template will be the `index.html` for SwaggerUI. Use
  `flasgger/ui2/templates/index.html`

  as base for your customization.


  Flasgger supports Swagger UI versions 2 and 3, The version 3 is still
  experimental but you

  can try setting `app.config['SWAGGER']['uiversion']`.


  ```python

  app = Flask(__name__)

  app.config['SWAGGER'] = {
      'title': 'My API',
      'uiversion': 3
  }

  swagger = Swagger(app)


  ```


  # OpenAPI 3.0 Support


  There is experimental support for OpenAPI 3.0 that should work when using
  SwaggerUI 3. To use OpenAPI 3.0, set `app.config['SWAGGER']['openapi']` to a
  version that the current SwaggerUI 3 supports such as `'3.0.2'`.


  For an example of this that uses `callbacks` and `requestBody`, see the
  [callbacks example](examples/callbacks.py).


  ## Externally loading Swagger UI and jQuery JS/CSS


  Starting with Flasgger 0.9.2 you can specify external URL locations for
  loading the JavaScript and CSS for the Swagger and jQuery libraries loaded in
  the Flasgger default templates.  If the configuration properties below are
  omitted, Flasgger will serve static versions it includes - these versions may
  be older than the current Swagger UI v2 or v3 releases.


  The following example loads Swagger UI and jQuery versions from unpkg.com:


  ```

  swagger_config = Swagger.DEFAULT_CONFIG

  swagger_config['swagger_ui_bundle_js'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js'

  swagger_config['swagger_ui_standalone_preset_js'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js'

  swagger_config['jquery_js'] = '//unpkg.com/jquery@2.2.4/dist/jquery.min.js'

  swagger_config['swagger_ui_css'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui.css'

  Swagger(app, config=swagger_config)

  ```


  # Initializing Flasgger with default data.


  You can start your Swagger spec with any default data providing a template:


  ```python

  template = {
    "swagger": "2.0",
    "info": {
      "title": "My API",
      "description": "API for my data",
      "contact": {
        "responsibleOrganization": "ME",
        "responsibleDeveloper": "Me",
        "email": "me@me.com",
        "url": "www.me.com",
      },
      "termsOfService": "http://me.com/terms",
      "version": "0.0.1"
    },
    "host": "mysite.com",  # overrides localhost:500
    "basePath": "/api",  # base bash for blueprint registration
    "schemes": [
      "http",
      "https"
    ],
    "operationId": "getmyData"
  }


  swagger = Swagger(app, template=template)


  ```


  And then the template is the default data unless some view changes it. You

  can also provide all your specs as template and have no views. Or views in

  external APP.


  ## Getting default data at runtime


  Sometimes you need to get some data at runtime depending on dynamic values ex:
  you want to check `request.is_secure` to decide if `schemes` will be `https`
  you can do that by using `LazyString`.


  ```py

  from flask import Flask

  from flasgger import, Swagger, LazyString, LazyJSONEncoder


  app = Flask(__init__)


  # Set the custom Encoder (Inherit it if you need to customize)

  app.json_encoder = LazyJSONEncoder



  template = dict(
      info={
          'title': LazyString(lambda: 'Lazy Title'),
          'version': LazyString(lambda: '99.9.9'),
          'description': LazyString(lambda: 'Hello Lazy World'),
          'termsOfService': LazyString(lambda: '/there_is_no_tos')
      },
      host=LazyString(lambda: request.host),
      schemes=[LazyString(lambda: 'https' if request.is_secure else 'http')],
      foo=LazyString(lambda: "Bar")
  )

  Swagger(app, template=template)


  ```


  The `LazyString` values will be evaluated only when `jsonify` encodes the
  value at runtime, so you have access to Flask `request, session, g, etc..` and
  also may want to access a database.


  ## Behind a reverse proxy


  Sometimes you're serving your swagger docs behind an reverse proxy (e.g.
  NGINX).  When following the [Flask
  guidance](http://flask.pocoo.org/snippets/35/),

  the swagger docs will load correctly, but the "Try it Out" button points to
  the wrong place.  This can be fixed with the following code:


  ```python

  from flask import Flask, request

  from flasgger import Swagger, LazyString, LazyJSONEncoder


  app = Flask(__name__)

  app.json_encoder = LazyJSONEncoder


  template = dict(swaggerUiPrefix=LazyString(lambda :
  request.environ.get('HTTP_X_SCRIPT_NAME', '')))

  swagger = Swagger(app, template=template)


  ```


  # Customize default configurations


  Custom configurations such as a different specs route or disabling Swagger UI
  can be provided to Flasgger:


  ```python

  swagger_config = {
      "headers": [
      ],
      "specs": [
          {
              "endpoint": 'apispec_1',
              "route": '/apispec_1.json',
              "rule_filter": lambda rule: True,  # all in
              "model_filter": lambda tag: True,  # all in
          }
      ],
      "static_url_path": "/flasgger_static",
      # "static_folder": "static",  # must be set by user
      "swagger_ui": True,
      "specs_route": "/apidocs/"
  }


  swagger = Swagger(app, config=swagger_config)


  ```


  ## Extracting Definitions


  Definitions can be extracted when `id` is found in spec, example:


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger


  app = Flask(__name__)

  swagger = Swagger(app)


  @app.route('/colors/<palette>/')

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      ---
      parameters:
        - name: palette
          in: path
          type: string
          enum: ['all', 'rgb', 'cmyk']
          required: true
          default: all
      responses:
        200:
          description: A list of colors (may be filtered by palette)
          schema:
            id: Palette
            type: object
            properties:
              palette_name:
                type: array
                items:
                  schema:
                    id: Color
                    type: string
          examples:
            rgb: ['red', 'green', 'blue']
      """
      all_colors = {
          'cmyk': ['cyan', 'magenta', 'yellow', 'black'],
          'rgb': ['red', 'green', 'blue']
      }
      if palette == 'all':
          result = all_colors
      else:
          result = {palette: all_colors.get(palette)}

      return jsonify(result)

  app.run(debug=True)

  ```


  In this example you do not have to pass `definitions` but need to add `id` to

  your schemas.


  ## Python2 Compatibility


  Version `0.9.5.*` will be the last version that supports Python2. 

  Please direct discussions to
  [#399](https://github.com/flasgger/flasgger/issues/399). 
inaka/cowboy_swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2705:2749:78BD7A:F604A2:6500FB43.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
kogosoftwarellc/open-api: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B60:2C43:730659:EB132E:6500FB49.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
krakenjs/hapi-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B63:5055:7B1728:FAF47E:6500FB4D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
mitraman/rapido-web: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5B:2679:A65EF7:1519087:6500FB58.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
pyopenapi/pyswagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B73:5F2B:A995C9:157D6DE:6500FB71.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
trailsjs/sails-swagger: >
  # sails-swagger


  [![NPM version][npm-image]][npm-url]

  [![Build status][ci-image]][ci-url]

  [![Dependency Status][daviddm-image]][daviddm-url]

  [![Code Climate][codeclimate-image]][codeclimate-url]



  [swagger.io](http://swagger.io/) (v2.0) hook for Sails. The application's
  models, controllers, and routes are aggregated and transformed into a Swagger
  Document. Supports the Swagger 2.0 specification.


  ## Install


  ```sh

  $ npm install sails-swagger --save

  ```


  ## Configuration

  ```js

  // config/swagger.js

  module.exports.swagger = {
    /**
     * require() the package.json file for your Sails app.
     */
    pkg: require('../package'),
    ui: {
      url: 'http://swagger.balderdash.io'
    }
  };

  ```


  ## Usage

  After installing and configuring swagger, you can find the docs output on the
  [/swagger/doc](http://localhost:1337/swagger/doc) route.


  You may also specify additional swagger endpoints by specifying the swagger
  spec in config/routes.js


  ```

  /**
   * Route Mappings
   * @file config/routes.js
   * (sails.config.routes)
   *
   * Your routes map URLs to views and controllers.
   */

  module.exports.routes = {

      /***************************************************************************
       *                                                                          *
       * Make the view located at `views/homepage.ejs` (or `views/homepage.jade`, *
       * etc. depending on your default view engine) your home page.              *
       *                                                                          *
       * (Alternatively, remove this and add an `index.html` file in your         *
       * `assets` directory)                                                      *
       *                                                                          *
       ***************************************************************************/

      '/': {
          view: 'homepage'
      },

      /***************************************************************************
       *                                                                          *
       * Custom routes here...                                                    *
       *                                                                          *
       * If a request to a URL doesn't match any of the custom routes above, it   *
       * is matched against Sails route blueprints. See `config/blueprints.js`    *
       * for configuration options and examples.                                  *
       *                                                                          *
       ***************************************************************************/
      'get /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['GET', 'POST'],
              summary: ' Get Groups ',
              description: 'Get Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'List of Groups',
                      schema: 'Group', // api/model/Group.js,
                      type: 'array'
                  }
              },
              parameters: []

          }
      },
      'put /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['PUT', 'POST'],
              summary: 'Update Groups ',
              description: 'Update Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'Updated Group',
                      schema: 'Group' // api/model/Group.js
                  }
              },
              parameters: [
                  'Group' // api/model/Group.js
              ]

          }
      }
  };



  ```


  ## License

  MIT


  ## Maintained By

  [<img src='http://i.imgur.com/Y03Jgmf.png' height='64px'>](http://langa.io)


  [sails-version-image]: https://goo.gl/gTUV5x

  [sails-url]: http://sailsjs.org

  [npm-image]: https://img.shields.io/npm/v/sails-swagger.svg?style=flat

  [npm-url]: https://npmjs.org/package/sails-swagger

  [ci-image]:
  https://img.shields.io/travis/langateam/sails-swagger/master.svg?style=flat

  [ci-url]: https://travis-ci.org/langateam/sails-swagger

  [daviddm-image]:
  http://img.shields.io/david/langateam/sails-swagger.svg?style=flat

  [daviddm-url]: https://david-dm.org/langateam/sails-swagger

  [codeclimate-image]:
  https://img.shields.io/codeclimate/github/langateam/sails-swagger.svg?style=flat

  [codeclimate-url]: https://codeclimate.com/github/langateam/sails-swagger
zalando-stups/play-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E56C:7A58:A069D9:1445CFF:6500FBAC.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
zalando-stups/swagger1st: >-
  {"message":"API rate limit exceeded for 20.171.51.39. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E55C:9AE9:A0E68C:146DE99:6500FBAC.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
tfranzel/drf-spectacular: >
  ===============

  drf-spectacular

  ===============


  |build-status| |codecov| |docs| |pypi-version| |pypi-dl|


  Sane and flexible `OpenAPI 3.0`_ schema generation for `Django REST
  framework`_.


  This project has 3 goals:
      1. Extract as much schema information from DRF as possible.
      2. Provide flexibility to make the schema usable in the real world (not only toy examples).
      3. Generate a schema that works well with the most popular client generators.

  The code is a heavily modified fork of the

  `DRF OpenAPI generator
  <https://github.com/encode/django-rest-framework/blob/master/rest_framework/schemas/openapi.py/>`_,

  which is/was lacking all of the below listed features.


  Features
      - Serializers modelled as components. (arbitrary nesting and recursion supported)
      - `@extend_schema <https://drf-spectacular.readthedocs.io/en/latest/drf_spectacular.html#drf_spectacular.utils.extend_schema>`_ decorator for customization of APIView, Viewsets, function-based views, and ``@action``
          - additional parameters
          - request/response serializer override (with status codes)
          - polymorphic responses either manually with ``PolymorphicProxySerializer`` helper or via ``rest_polymorphic``'s PolymorphicSerializer)
          - ... and more customization options
      - Authentication support (DRF natives included, easily extendable)
      - Custom serializer class support (easily extendable)
      - ``SerializerMethodField()`` type via type hinting or ``@extend_schema_field``
      - i18n support
      - Tags extraction
      - Request/response/parameter examples
      - Description extraction from ``docstrings``
      - Vendor specification extensions (``x-*``) in info, operations, parameters, components, and security schemes
      - Sane fallbacks
      - Sane ``operation_id`` naming (based on path)
      - Schema serving with ``SpectacularAPIView`` (Redoc and Swagger-UI views are also available)
      - Optional input/output serializer component split
      - Callback operations
      - Included support for:
          - `django-polymorphic <https://github.com/django-polymorphic/django-polymorphic>`_ / `django-rest-polymorphic <https://github.com/apirobot/django-rest-polymorphic>`_
          - `SimpleJWT <https://github.com/jazzband/djangorestframework-simplejwt>`_
          - `DjangoOAuthToolkit <https://github.com/jazzband/django-oauth-toolkit>`_
          - `djangorestframework-jwt <https://github.com/jpadilla/django-rest-framework-jwt>`_ (tested fork `drf-jwt <https://github.com/Styria-Digital/django-rest-framework-jwt>`_)
          - `dj-rest-auth <https://github.com/iMerica/dj-rest-auth>`_ (maintained fork of `django-rest-auth <https://github.com/Tivix/django-rest-auth>`_)
          - `djangorestframework-camel-case <https://github.com/vbabiy/djangorestframework-camel-case>`_ (via postprocessing hook ``camelize_serializer_fields``)
          - `django-filter <https://github.com/carltongibson/django-filter>`_
          - `drf-nested-routers <https://github.com/alanjds/drf-nested-routers>`_
          - `djangorestframework-recursive <https://github.com/heywbj/django-rest-framework-recursive>`_
          - `djangorestframework-dataclasses <https://github.com/oxan/djangorestframework-dataclasses>`_
          - `django-rest-framework-gis <https://github.com/openwisp/django-rest-framework-gis>`_


  For more information visit the `documentation
  <https://drf-spectacular.readthedocs.io/>`_.


  License

  -------


  Provided by `T. Franzel <https://github.com/tfranzel>`_. `Licensed under
  3-Clause BSD
  <https://github.com/tfranzel/drf-spectacular/blob/master/LICENSE>`_.


  Requirements

  ------------


  -  Python >= 3.6

  -  Django (2.2, 3.2, 4.0, 4.1, 4.2)

  -  Django REST Framework (3.10.3, 3.11, 3.12, 3.13, 3.14)


  Installation

  ------------


  Install using ``pip``\ ...


  .. code:: bash

      $ pip install drf-spectacular

  then add drf-spectacular to installed apps in ``settings.py``


  .. code:: python

      INSTALLED_APPS = [
          # ALL YOUR APPS
          'drf_spectacular',
      ]


  and finally register our spectacular AutoSchema with DRF.


  .. code:: python

      REST_FRAMEWORK = {
          # YOUR SETTINGS
          'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
      }

  drf-spectacular ships with sane `default settings
  <https://drf-spectacular.readthedocs.io/en/latest/settings.html>`_

  that should work reasonably well out of the box. It is not necessary to

  specify any settings, but we recommend to specify at least some metadata.


  .. code:: python

      SPECTACULAR_SETTINGS = {
          'TITLE': 'Your Project API',
          'DESCRIPTION': 'Your project description',
          'VERSION': '1.0.0',
          'SERVE_INCLUDE_SCHEMA': False,
          # OTHER SETTINGS
      }

  .. _self-contained-ui-installation:


  Self-contained UI installation

  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


  Certain environments have no direct access to the internet and as such are
  unable

  to retrieve Swagger UI or Redoc from CDNs. `drf-spectacular-sidecar`_ provides

  these static files as a separate optional package. Usage is as follows:


  .. code:: bash

      $ pip install drf-spectacular[sidecar]

  .. code:: python

      INSTALLED_APPS = [
          # ALL YOUR APPS
          'drf_spectacular',
          'drf_spectacular_sidecar',  # required for Django collectstatic discovery
      ]
      SPECTACULAR_SETTINGS = {
          'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
          'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
          'REDOC_DIST': 'SIDECAR',
          # OTHER SETTINGS
      }


  Release management

  ^^^^^^^^^^^^^^^^^^


  *drf-spectacular* deliberately stays below version *1.x.x* to signal that
  every

  new version may potentially break you. For production we strongly recommend
  pinning the

  version and inspecting a schema diff on update.


  With that said, we aim to be extremely defensive w.r.t. breaking API changes.
  However,

  we also acknowledge the fact that even slight schema changes may break your
  toolchain,

  as any existing bug may somehow also be used as a feature.


  We define version increments with the following semantics. *y-stream*
  increments may contain

  potentially breaking changes to both API and schema. *z-stream* increments
  will never break the

  API and may only contain schema changes that should have a low chance of
  breaking you.



  Take it for a spin

  ------------------


  Generate your schema with the CLI:


  .. code:: bash

      $ ./manage.py spectacular --color --file schema.yml
      $ docker run -p 80:8080 -e SWAGGER_JSON=/schema.yml -v ${PWD}/schema.yml:/schema.yml swaggerapi/swagger-ui

  If you also want to validate your schema add the ``--validate`` flag. Or serve
  your schema directly

  from your API. We also provide convenience wrappers for ``swagger-ui`` or
  ``redoc``.


  .. code:: python

      from drf_spectacular.views import SpectacularAPIView, SpectacularRedocView, SpectacularSwaggerView
      urlpatterns = [
          # YOUR PATTERNS
          path('api/schema/', SpectacularAPIView.as_view(), name='schema'),
          # Optional UI:
          path('api/schema/swagger-ui/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),
          path('api/schema/redoc/', SpectacularRedocView.as_view(url_name='schema'), name='redoc'),
      ]

  Usage

  -----


  *drf-spectacular* works pretty well out of the box. You might also want to set
  some metadata for your API.

  Just create a ``SPECTACULAR_SETTINGS`` dictionary in your ``settings.py`` and
  override the defaults.

  Have a look at the `available settings
  <https://drf-spectacular.readthedocs.io/en/latest/settings.html>`_.


  The toy examples do not cover your cases? No problem, you can heavily
  customize how your schema will be rendered.


  Customization by using ``@extend_schema``

  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


  Most customization cases should be covered by the ``extend_schema`` decorator.
  We usually get

  pretty far with specifying ``OpenApiParameter`` and splitting request/response
  serializers, but

  the sky is the limit.


  .. code:: python

      from drf_spectacular.utils import extend_schema, OpenApiParameter, OpenApiExample
      from drf_spectacular.types import OpenApiTypes

      class AlbumViewset(viewset.ModelViewset):
          serializer_class = AlbumSerializer

          @extend_schema(
              request=AlbumCreationSerializer,
              responses={201: AlbumSerializer},
          )
          def create(self, request):
              # your non-standard behaviour
              return super().create(request)

          @extend_schema(
              # extra parameters added to the schema
              parameters=[
                  OpenApiParameter(name='artist', description='Filter by artist', required=False, type=str),
                  OpenApiParameter(
                      name='release',
                      type=OpenApiTypes.DATE,
                      location=OpenApiParameter.QUERY,
                      description='Filter by release date',
                      examples=[
                          OpenApiExample(
                              'Example 1',
                              summary='short optional summary',
                              description='longer description',
                              value='1993-08-23'
                          ),
                          ...
                      ],
                  ),
              ],
              # override default docstring extraction
              description='More descriptive text',
              # provide Authentication class that deviates from the views default
              auth=None,
              # change the auto-generated operation name
              operation_id=None,
              # or even completely override what AutoSchema would generate. Provide raw Open API spec as Dict.
              operation=None,
              # attach request/response examples to the operation.
              examples=[
                  OpenApiExample(
                      'Example 1',
                      description='longer description',
                      value=...
                  ),
                  ...
              ],
          )
          def list(self, request):
              # your non-standard behaviour
              return super().list(request)

          @extend_schema(
              request=AlbumLikeSerializer,
              responses={204: None},
              methods=["POST"]
          )
          @extend_schema(description='Override a specific method', methods=["GET"])
          @action(detail=True, methods=['post', 'get'])
          def set_password(self, request, pk=None):
              # your action behaviour
              ...

  More customization

  ^^^^^^^^^^^^^^^^^^


  Still not satisifed? You want more! We still got you covered.

  Visit `customization
  <https://drf-spectacular.readthedocs.io/en/latest/customization.html>`_ for
  more information.



  Testing

  -------


  Install testing requirements.


  .. code:: bash

      $ pip install -r requirements.txt

  Run with runtests.


  .. code:: bash

      $ ./runtests.py

  You can also use the excellent `tox`_ testing tool to run the tests

  against all supported versions of Python and Django. Install tox

  globally, and then simply run:


  .. code:: bash

      $ tox

  .. _Django REST framework: https://www.django-rest-framework.org/

  .. _OpenAPI 3.0: https://spec.openapis.org/oas/v3.0.3

  .. _tox: https://tox.wiki/

  .. _drf-spectacular-sidecar:
  https://github.com/tfranzel/drf-spectacular-sidecar


  .. |build-status| image::
  https://github.com/tfranzel/drf-spectacular/actions/workflows/ci.yml/badge.svg
     :target: https://github.com/tfranzel/drf-spectacular/actions/workflows/ci.yml
  .. |pypi-version| image:: https://img.shields.io/pypi/v/drf-spectacular.svg
     :target: https://pypi.org/project/drf-spectacular/
  .. |codecov| image::
  https://codecov.io/gh/tfranzel/drf-spectacular/branch/master/graph/badge.svg
     :target: https://codecov.io/gh/tfranzel/drf-spectacular
  .. |docs| image:: https://readthedocs.org/projects/drf-spectacular/badge/
     :target: https://drf-spectacular.readthedocs.io/
  .. |pypi-dl| image:: https://img.shields.io/pypi/dm/drf-spectacular
     :target: https://pypi.org/project/drf-spectacular/
madkote/fastapi-plugins: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5B:2679:A657A9:1518196:6500FB52.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
RuntimeTools/OpenAPIValidators: "# OpenAPI Validators\n\n[![Build Status](https://travis-ci.com/openapi-library/OpenAPIValidators.svg?branch=master)](https://travis-ci.com/openapi-library/OpenAPIValidators)\n![dependencies](https://img.shields.io/david/openapi-library/OpenAPIValidators)\n![style](https://img.shields.io/badge/code%20style-airbnb-ff5a5f.svg)\n[![codecov](https://codecov.io/gh/openapi-library/OpenAPIValidators/branch/master/graph/badge.svg)](https://codecov.io/gh/openapi-library/OpenAPIValidators)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/openapi-library/OpenAPIValidators/blob/master/CONTRIBUTING.md)\n\nUse Jest or Chai to assert that HTTP responses satisfy an OpenAPI spec.\n\n## Problem \U0001F615\n\nIf your server's behaviour doesn't match your API documentation, then you need to correct your server, your documentation, or both. The sooner you know the better.\n\n## Solution \U0001F604\n\nThese test plugins let you automatically test whether your server's behaviour and documentation match. They extend Jest and Chai to support the [OpenAPI standard](https://swagger.io/docs/specification/about/) for documenting REST APIs. In your JavaScript tests, you can simply assert `expect(responseObject).toSatisfyApiSpec()`\n\n### [jest-openapi](https://github.com/openapi-library/OpenAPIValidators/tree/master/packages/jest-openapi#readme)\n\n[![downloads](https://img.shields.io/npm/dm/jest-openapi)](https://www.npmjs.com/package/jest-openapi)\n[![npm](https://img.shields.io/npm/v/jest-openapi.svg)](https://www.npmjs.com/package/jest-openapi)\n\n### [Chai OpenAPI Response Validator](https://github.com/openapi-library/OpenAPIValidators/tree/master/packages/chai-openapi-response-validator#readme)\n\n[![downloads](https://img.shields.io/npm/dm/chai-openapi-response-validator)](https://www.npmjs.com/package/chai-openapi-response-validator)\n[![npm](https://img.shields.io/npm/v/chai-openapi-response-validator.svg)](https://www.npmjs.com/package/chai-openapi-response-validator)\n\n## Contributors ✨\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/rwalle61\"><img src=\"https://avatars1.githubusercontent.com/u/18170169?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Richard Waller</b></sub></a><br /><a href=\"#maintenance-rwalle61\" title=\"Maintenance\">\U0001F6A7</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=rwalle61\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=rwalle61\" title=\"Documentation\">\U0001F4D6</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/pulls?q=is%3Apr+reviewed-by%3Arwalle61\" title=\"Reviewed Pull Requests\">\U0001F440</a></td>\n    <td align=\"center\"><a href=\"https://github.com/JonnySpruce\"><img src=\"https://avatars3.githubusercontent.com/u/30812276?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jonny Spruce</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=JonnySpruce\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=JonnySpruce\" title=\"Documentation\">\U0001F4D6</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/pulls?q=is%3Apr+reviewed-by%3AJonnySpruce\" title=\"Reviewed Pull Requests\">\U0001F440</a></td>\n    <td align=\"center\"><a href=\"https://github.com/AlexDobeck\"><img src=\"https://avatars2.githubusercontent.com/u/10519388?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alex Dobeck</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=AlexDobeck\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3AAlexDobeck\" title=\"Bug reports\">\U0001F41B</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BenGu3\"><img src=\"https://avatars2.githubusercontent.com/u/7105857?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ben Guthrie</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=BenGu3\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3ABenGu3\" title=\"Bug reports\">\U0001F41B</a></td>\n    <td align=\"center\"><a href=\"https://martijnvegter.com/\"><img src=\"https://avatars3.githubusercontent.com/u/25134477?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Martijn Vegter</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=mvegter\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ludeknovy\"><img src=\"https://avatars1.githubusercontent.com/u/13610612?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ludek</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=ludeknovy\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3Aludeknovy\" title=\"Bug reports\">\U0001F41B</a></td>\n    <td align=\"center\"><a href=\"https://github.com/tgiardina\"><img src=\"https://avatars1.githubusercontent.com/u/37459104?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tommy Giardina</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=tgiardina\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3Atgiardina\" title=\"Bug reports\">\U0001F41B</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n"
meeshkan/hmt: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B65:0B2D:1E624C:3E481F:6500FB54.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
theoomoregbee/sails-hook-swagger-generator: >
  # Swagger Generator Sails Hook

  [![Travis](https://img.shields.io/travis/theoomoregbee/sails-hook-swagger-generator.svg)](https://travis-ci.org/theoomoregbee/sails-hook-swagger-generator)

  [![npm](https://img.shields.io/npm/v/sails-hook-swagger-generator.svg)](https://www.npmjs.com/package/sails-hook-swagger-generator)

  [![npm](https://img.shields.io/npm/l/sails-hook-swagger-generator.svg)]()

  [![npm](https://img.shields.io/npm/dt/sails-hook-swagger-generator.svg)](https://www.npmjs.com/package/sails-hook-swagger-generator)

  [![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)



  This helps to create swagger documentation json which is based entirely on
  Swagger/OpenAPI specification (see [here](https://swagger.io/specification/)).

  The hook produces specification based upon OAS 3.0.


  ![](screenshot/swagger-doc.gif)



  ## Installation

  ```sh

  $ npm install sails-hook-swagger-generator --save

  ```



  ## Demo

  Copy the content of [generatedSwagger](test/fixtures/generatedSwagger.json)
  and paste it in [Swagger Online Editor](https://editor.swagger.io/).



  ## Usage

  Simply by lifting your sails app `sails lift`, after lifting or starting the
  app,there should be `swagger.json` within **./swagger** folder.


  > make sure ./swagger folder is already existing.


  Check the **./swagger/swagger.json** for generated swagger documentation json,
  then head to [Swagger Editor](https://editor.swagger.io/).


  ## Generated Output


  By default, the Swagger Generator Sails Hook generates:

  1. Full automatic documentation for all Sails Blueprint routes;

  1. Documentation for all Sails
     [actions2](https://sailsjs.com/documentation/concepts/actions-and-controllers#?actions-2)
     actions with routes configured in `config/routes.js`; and
  1. Listing of all routes configured in `config/routes.js` (full details cannot
  be inferred
     for custom routes without additional information being provided - see below).
  1. Creation of default tags for paths based upon Sails Model and Controller
  `globalId`'s.


  ## Use with [Swagger UI](https://github.com/swagger-api/swagger-ui)


  See
  [#28](https://github.com/theoomoregbee/sails-hook-swagger-generator/issues/28)


  ## Adding/Customising Generated Output


  Documentation detail and customisation of most aspects of the generated
  Swagger can be achieved by adding:

  1. Top-level configuration to `config/swaggergenerator.js`. This provides
  direct JSON
     used as the template for the output Swagger/OpenAPI.
  1. Objects with the key `swagger` to custom route configuration, controller
  files, action
     functions, model definitions and model attribute definitions. The `swagger` element must be of type
     [SwaggerActionAttribute](./lib/interfaces.ts#L55) for actions (based on OpenApi.Operation)
     or [SwaggerModelSchemaAttribute](./lib/interfaces.ts#L66) for model schemas (based on OpenApi.UpdatedSchema).
  1. JSDoc ([swagger-jsdoc](https://github.com/Surnet/swagger-jsdoc)) `@swagger`
  comments
     to controller/action files and model files.

  Top-level Swagger/OpenAPI definitions for `tags` and `components` may be added
  in all `swagger` objects

  above and in all JSDoc `@swagger` documentation comments. This enables the
  definition of top-level elements.


  See below for details.


  ## Configurations


  It comes with some default settings which can be overridden by creating
  `config/swaggergenerator.js`:

  ```javascript

  module.exports['swagger-generator'] = {
      disabled: false,
      swaggerJsonPath: './swagger/swagger.json',
      swagger: {
          openapi: '3.0.0',
          info: {
              title: 'Swagger Json',
              description: 'This is a generated swagger json for your sails project',
              termsOfService: 'http://example.com/terms',
              contact: {name: 'Theophilus Omoregbee', url: 'http://github.com/theo4u', email: 'theo4u@ymail.com'},
              license: {name: 'Apache 2.0', url: 'http://www.apache.org/licenses/LICENSE-2.0.html'},
              version: '1.0.0'
          },
          servers: [
              { url: 'http://localhost:1337/' }
          ],
          externalDocs: {url: 'https://theoomoregbee.github.io/'}
      },
      defaults: {
          responses: {
              '200': { description: 'The requested resource' },
              '404': { description: 'Resource not found' },
              '500': { description: 'Internal server error' }
          }
      },
      excludeDeprecatedPutBlueprintRoutes: true,
      includeRoute: function(routeInfo) { return true; },
      updateBlueprintActionTemplates: function(blueprintActionTemplates) { ... },
      postProcess: function(specifications) { ... }
  };

  ```


  Notes on the use of configuration:


  * `disabled` attribute is used to disable the module (e.g you may want to
  disable it on production).

  * `swaggerJsonPath` where to generate the `swagger.json` file to; defaults to
  `sails.config.appPath + '/swagger/swagger.json'`
     and output file will not be written if empty/null/undefined (see `postProcess` below for alternate save mechanism).
  * `swagger` object is template for the Swagger/OpenAPI output. It defaults to
  the minimal content above.
     Check Swagger/OpenAPI specification for more, in case you want to extend it.
     Generally, this hook provides sensible defaults for as much as possible but you may
     override them in this location or in any of the mechanisms explained below.
  * `defaults` object should contain the `responses` element; defaults to the
  above if not specified.

  * `excludeDeprecatedPutBlueprintRoutes` should
    [deprecated](https://sailsjs.com/documentation/reference/blueprint-api/update#?notes) `PUT` blueprint
    routes be excluded from generated Swagger output; defaults to `true`.
  * `includeRoute` function used to filter routes to be included in generated
  Swagger output; see advanced section below.

  * `updateBlueprintActionTemplates` allows customisation of the templates used
  to generate Swagger for blueprints; see advanced section below.

  * `postProcess` allows an alternate mechanism for saving and/or modification
  of the generated Swagger output before it is written to
     the output file; see advanced section below.


  ## Custom Route Configuration


  Documentation detail and customisation of most aspects of the generated
  Swagger for

  [custom
  routes](https://sailsjs.com/documentation/concepts/routes/custom-routes) may
  be achieved by:


  1. Adding an object with the key `swagger` (must be of type
  [SwaggerActionAttribute](./lib/interfaces.ts#L55) for actions, based on
  OpenApi.Operation) to individual route configurations in `config/routes.js`.

  1. Adding an object with the key `swagger` (must be of type
  [SwaggerControllerAttribute](./lib/interfaces.ts#L76)) to the exports of a
  controller file, standalone action file or actions2 file.

  1. Adding an object with the key `swagger` (must be of type
  [SwaggerModelAttribute](./lib/interfaces.ts#L87)) to the exports of a model
  file.

  1. Adding JSDoc `@swagger` comments to Sails
    [model files](https://sailsjs.com/documentation/concepts/models-and-orm/models),
    [controller files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?controllers),
    [standalone action files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?standalone-actions) or
    [actions2 files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?actions-2); specifically:
      - JSDoc `@swagger` documentation under the `/{actionName}` path for the route (controllers/actions), or
      - JSDoc `@swagger` documentation under the `/{blueprintAction}` path for the route (models), or
      - JSDoc `@swagger` documentation under `tags` and `components` paths for adding to the top-level Swagger/OpenAPI definitions.


  ### Custom Route Configuration in `config/routes.js`


  If you want to add extra configuration to a route, it can be done via the
  `config/routes.js`, since Sails uses different [route
  targets](https://sailsjs.com/documentation/concepts/routes/custom-routes#?route-target),
  we can leverage the route object target to extend/override our swagger
  configuration by adding an object with a key `swagger`.


  For example, in `config/routes.js`:

  ```javascript

  {
    'post /user/login': {
      controller: 'UserController',
      action: 'login',
      swagger: {
        summary: 'Authentication',
        description: 'This is for authentication of any user',
        tags: [ 'Tag Name' ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  email: { type: 'string' },
                  password: { type: 'string', format: 'password' }
                },
                required: [ 'email', 'password' ],
              }
            }
          }
        },
        parameters: [{
          in: 'query',
          name: 'firstName',
          required: true,
          schema: { type: 'string' },
          description: 'This is a custom required parameter'
        }],
        responses: {
          '200': {
            description: 'The requested resource',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: { '$ref': '#/components/schemas/someDataType' },
                  },
                },
              },
          },
          '404': { description: 'Resource not found' },
          '500': { description: 'Internal server error' }
        }
      }
    }
  }

  ```


  ### Custom Route Configuration in Controller or Action files


  Documentation detail and customisation of most aspects of the generated
  Swagger may be added to

  [controller
  files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?controllers),

  [standalone action
  files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?standalone-actions)
  or

  [actions2
  files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?actions-2)
  as follows:


  1. Adding an object with the key `swagger` added to a controller file action
  function.

  1. Adding an object with the key `swagger` to the exports of a controller
  file, standalone
     action file or actions2 file:
     - For controller files, actions are referenced by adding objects keyed on `swagger.actions.{actionName}`
       name. See [UserController.js](./api/controllers/UserController.js);
     - For standalone action or actions2 files, placing content in the
       `swagger.actions.{actionFileName|actions2FileName}` object. See
       [actions2.js](./api/controllers/subdir/actions2.js)
       ***Note**: `actionFileName|actions2FileName` must correspond to the filename*;
     - For all controller/action files, adding per-action documentation to be
       applied to **all** actions using the key `swagger.actions.allActions`
       e.g. use this to apply common tags to all actions for a controller.
     - Adding documentation under `tags` and `components` elements for adding to the
       top-level Swagger/OpenAPI definitions. See example in either
       [UserController.js](./api/controllers/UserController.js)
       or [actions2.js](./api/controllers/subdir/actions2.js).
  1. Adding JSDoc `@swagger` comments to controller file, standalone action file
  or actions2 file:
     - JSDoc `@swagger` documentation under the `/{actionName}` path for the controller file actions,
     - JSDoc `@swagger` documentation under the `/{actionFileName|actions2FileName}` path for standalone action or actions2 files,
     - JSDoc `@swagger` documentation under the `/allActions` path to be applied to **all** actions for the controller, or
     - JSDoc `@swagger` documentation under `tags` and `components` paths for adding to the top-level Swagger/OpenAPI definitions.

  An `exclude` property, set to `true`, may be added to any `swagger` element or
  `@swagger` JSDoc

  action documentation to exclude that action from the generated Swagger. See
  example in

  [NomodelController.js](api/controllers/NomodelController.js).


  The Swagger definition for each action is merged in the order above to form
  the final

  definition, with `config/routes.js` taking highest precendence and **earlier**
  definitions

  above taking precedence over later.


  #### For actions2 files:

  1. Inputs are parsed to generate parameter documentation.

  2. Exits are parsed to generate response documentation.

  3. Both may be customised/overridden by specifying parameters and/or responses
  in the `swagger` object
     in actions2 file.
  4. Inputs may also add an object with the key `meta.swagger` to document the
  attributes
     Swagger/OpenAPI **schema** associated with the input value. See example in
     [actions2.js](./api/controllers/subdir/actions2.js).
  5. Inputs may be excluded from the generated Swagger by setting
  `meta.swagger.exclude` to `true`.

  6. Inputs may specify *where* the input should be included within the
  generated Swagger using the key
     `meta.swagger.in`. The values `query`/`header`/`path`/`cookie` may be used to produce Swagger operation
     parameters and the value `body` may be used to produce `requestBody` schema properties
     (valid for PUT/POST/PATCH operations only).

  For example, for a route configured as:

  ```javascript

  module.exports.routes = {
      '/api/v1/auth/tokens': 'AuthController.tokens',
  };

  ```


  The `tokens` action might be documented in a Controller
  `api/controllers/AuthController.js` as follows:

  ```javascript

  function tokens(req, res) {
      ...
  }


  module.exports = {
      tokens: tokens,
      swagger: {
        actions: {
          tokens: {
              tags: [ 'Auth' ],
              description: 'Route description...'
          }
        }
        tags: [
               {
                  name: 'Auth',
                  description: 'Module description ...',
               }
          ],
        components: {
          ...
        }
      }
  };

  ```


  Or, alternately using JSDoc:

  ```javascript

  /**
   * @swagger
   *
   * /tokens:
   *   description: Route description...
   *   tags:
   *     - Auth
   * tags:
   *   - name: Auth
   *     description: Module description...
   */
  function tokens(req, res) {
      ...
  }


  module.exports = {
      tokens: tokens
  };

  ```


  ## Blueprint Route Configuration


  Documentation detail and customisation of most aspects of the generated
  Swagger for

  [blueprint
  routes](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes)
  may be achieved by:


  1. Adding an object with the key `swagger` to individual models e.g.
  `api/models/modelName.js`:
     - Adding documentation to the model's Swagger **schema** using the key `swagger.modelSchema`
       e.g. use this to apply detailed documentation via the `description` field;
     - In additon to the model's schema, the key `swagger.modelSchema` may be used to specify
       tag names (as a `string[]`) to be assigned all blueprint actions for the model.
       This is a *non-standard* convenience function i.e. in Swagger/OpenAPI you need to
       explicitly add tags to **each/every** OpenAPI.Operation;
     - Adding per-action documentation by adding objects keyed on
       `swagger.actions.{blueprintAction}` name;
     - Adding action documentation to **all** actions using the key `swagger.actions.allActions`
       e.g. use this to apply common `externalDocs` to all blueprint actions for the model; or
     - Adding documentation under `swagger.tags` and `swagger.components` elements for adding to the top-level Swagger/OpenAPI definitions.
  1. Adding documentation-specific fields to model attributes (supports
  `description`, `moreInfoUrl` and `example`).
     Note that applicable Sails [attributes](https://sailsjs.com/documentation/concepts/models-and-orm/attributes),
     [automigrations](https://sailsjs.com/documentation/concepts/models-and-orm/attributes#?automigrations) and
     [validations](https://sailsjs.com/documentation/concepts/models-and-orm/validations) are also parsed.
  1. Adding an object with the key `meta.swagger` to individual model attributes
  to document
     the attributes Swagger/OpenAPI **schema**. See example in [Pet.js](./api/models/Pet.js).
  1. Adding JSDoc `@swagger` comments to model files:
     - JSDoc `@swagger` documentation under the `/{globalId}` to add documentation to
       the model's Swagger **schema** (or tags as noted above),
     - JSDoc `@swagger` documentation under the `/{blueprintAction}` to add per-action
       documentation for the
       [model blueprint actions](https://sailsjs.com/documentation/concepts/blueprints/blueprint-actions),
     - JSDoc `@swagger` documentation under the `/allActions` path to be applied to **all**
       blueprint actions for the model, or
     - JSDoc `@swagger` documentation under `tags` and `components` paths for adding to the
       top-level Swagger/OpenAPI definitions.

  An `exclude` property, set to `true`, may be added to any `swagger` element of
  `@swagger` JSDoc

  action documentation to exclude the model *completely* (exclude the
  **schema**) or a specific

  blueprint action from the generated Swagger. See example in
  [OldPet.js](api/models/OldPet.js).


  Individual model attributes may be excluded from the generated Swagger by
  setting

  `meta.swagger.exclude` to `true`. See example in [Pet.js](api/models/Pet.js).


  OpenAPI 3 specifies the ***Any Type*** by the absence of the `type` property
  in a schema;

  this may be achieved by setting a model attribute's `meta.swagger.type` value
  to `null`.

  See example in [User.js](api/models/User.js).


  The Swagger definition for each action is merged in the order above to form
  the final

  definition, with `config/routes.js` taking highest precendence and **earlier**
  definitions

  above taking precedence over later.


  For example, in a model `api/models/User.js`:


  ```javascript

  /**
   * @swagger
   *
   * /User:
   *   tags:
   *     - Tag Name
   * /findone:
   *   externalDocs:
   *     url: https://docs.com/here
   */
  module.exports = {
    attributes: {
      uid: {
        type: 'string',
        example: '012345',
        description: 'A unique identifier',
      }
    },
    swagger: {
      actions: {
        create: { ... },
      },
      modelSchema: { ... },
      tags: [...]
      components: {...}
    }
  };

  ```


  Note that following parameters are added to the `components/parameters` if
  they are not

  provided in `config/swaggergenerator.js` (expressed as OpenAPI references):


  ```javascript

  [
    { $ref: '#/components/parameters/WhereQueryParam' },
    { $ref: '#/components/parameters/LimitQueryParam' },
    { $ref: '#/components/parameters/SkipQueryParam' },
    { $ref: '#/components/parameters/SortQueryParam' },
    { $ref: '#/components/parameters/SelectQueryParam' },
    { $ref: '#/components/parameters/PopulateQueryParam' },
  ]

  ```


  Note that when generating Swagger/OpenAPI documentation for blueprint routes,
  the hook also

  generates:


  1. Schemas for **models**, which may be referenced using the form `{ $ref:
  '#/components/schemas/modelName' }`.

  2. Parameters for model **primary keys**, which may be referenced using the
  form `{ $ref: '#/components/parameters/ModelPKParam-modelName' }`.


  These may be re-used (referenced) if/as applicable within custom route
  documentation.



  ## Handling Top-Level Swagger Defintions (Tags and Components)


  You are able to add to the top-level Swagger/OpenAPI definitions for `tags`
  and `components` in all `swagger` objects

  detailed above and in all JSDoc `@swagger` documention comments.


  All `swagger` objects may contain the elements `tags` and `components`(*except
  the ones specified in `config.routes.js*) e.g.


  ```javascript

  {
    tags: [
      {
        name: 'Test Module',
        description: 'Module description ...',
        externalDocs: { url: 'https://docs.com/test' }
      }
    ],
    components: {
      schemas: {
        test: { ... }
      }
    }
  }

  ```


  Similarly, JSDoc `@swagger` tags may define `tags` and `components`:


  ```javascript

  /**
   * @swagger
   *
   * tags:
   *   - name: Test Module
   *     description: |
   *       Module description
   *       (continued).
   *
   *       Another paragraph.
   *
   *     externalDocs:
   *       url: https://docs.com/test
   *       description: Refer to these docs
   *
   * components:
   *   schemas:
   *     test:
   *       ...
   */
  ```


  ### Tags Handling


  Tags are added to the top-level Swagger/OpenAPI definitions as follows:

  1. If a tags with the specified name **does not** exist, it is added.

  1. Where a tag with the specified name **does** exist, elements _of that tag_
  that do not exist are added
     e.g. `description` and `externalDocs` elements.

  Note that a final *clean-up* phase is run after processing, which performs the
  following:

  1. Removal of unreferenced tags; and

  2. Creation of tags referenced but are not defined.


  ### Component Element Handling


  Elements of components are added to the top-level Swagger/OpenAPI definitions
  as follows:

  1. Elements of the component definition reference (schemas, parameters, etc)
  are added where
     they **do not exist**.
  1. Existing elements are **not** overwritten or merged.


  For example, the element `components.schemas.pet` will be added as part of a
  merge process,

  but the contents of multiple definitions of `pet` **will not** be merged.


  The following elements (from the OpenAPI 3 specification) are handled:

  ```javascript

  let componentDefinitionReference = {
      // Reusable schemas (data models)
      schemas: {},
      // Reusable path, query, header and cookie parameters
      parameters: {},
      // Security scheme definitions (see Authentication)
      securitySchemes: {},
      // Reusable request bodies
      requestBodies: {},
      // Reusable responses, such as 401 Unauthorized or 400 Bad Request
      responses: {},
      // Reusable response headers
      headers: {},
      // Reusable examples
      examples: {},
      // Reusable links
      links: {},
      // Reusable callbacks
      callbacks: {},
  };

  ```



  ## Advanced Filtering/Processing of Generated Swagger


  Three mechanisms are provided to enable advancing filtering of the Swagger
  generation process:

  1. An `includeRoute()` function used to filter routes to be included in
  generated Swagger output.

  1. An `updateBlueprintActionTemplates()` function allows customisation of the
  templates used to generate Swagger for blueprints.

  1. A `postProcess()` function allows an alternate mechanism for saving and/or
  modification of the generated Swagger output before it is written to the
  output file.


  Each is configured in `config/swaggergenerator.js`.


  ### Route Information


  This hook parses all routes, custom and blueprint, before commencing the
  generation of the Swagger output.

  Each route is described by a `SwaggerRouteInfo` object

  (see defintion [here](./lib/interfaces.ts#L184)):


  ```typescript

  export interface SwaggerRouteInfo {
    middlewareType: MiddlewareType; //< one of action|blueprint

    verb: HTTPMethodVerb; //< one of all|get|post|put|patch|delete
    path: string; //< full Sails URL as per sails.getUrlFor() including prefix
    variables: string[]; //< list of ALL variables extracted from path e.g. `/pet/:id` --> `id`
    optionalVariables: string[]; //< list of optional variables from path e.g. `/pet/:id?`

    action: string; //< either blueprint action (e.g. 'find') or action identity (e.g. 'subdir/reporting/run')
    actionType: ActionType; //< one of blueprint|shortcutBlueprint|controller|standalone|actions2|function
    actions2Machine?: Sails.Actions2Machine; //< for actionType === 'actions2', details of the action2 machine

    model?: SwaggerSailsModel; //< reference to Sails Model (blueprints only)
    associationAliases?: string[]; //< association attribute names (relevant blueprint routes only)

    defaultTagName?: string; //< default tag name for route, if any, based on Sails Model or Controller

    swagger?: SwaggerActionAttribute; //< per-route Swagger (OpenApi Operation)
  }

  ```


  Other interfaces for models, `swagger` elements etc may be found in
  [interfaces.ts](./lib/interfaces.ts).



  ### Route Filtering


  The `includeRoute(routeInfo): boolean` function may be used to select which
  routes are included in the generated Swagger output.


  For example:

  ```javascript

  module.exports['swagger-generator'] = {
    includeRoute: (routeInfo) => {
      let c = routeInfo.controller;
      if(!c) return true;
      if(c.toLowerCase().startsWith('user')) return true;
      return false;
    }
  }

  ```


  ### Customising Blueprint Action Templates


  The templates used for generating Swagger for each Sails blueprint action
  route may be

  customised / modified / added to using the `updateBlueprintActionTemplates`
  config option

  e.g. to support custom blueprint actions/routes.


  For example:

  ```javascript

  module.exports['swagger-generator'] = {
    updateBlueprintActionTemplates: function(blueprintActionTemplates) {
      blueprintActionTemplates.search = { ... };
      return blueprintActionTemplates;
    }
  }

  ```


  The `blueprintActionTemplates` object contains keys of the blueprint **action
  names**

  and values as per the following example (refer to the

  [source code](lib/type-formatter.js#L70) for the default templates):


  ```javascript

  let blueprintActionTemplates = {
    findone: {
      summary: 'Get {globalId} (find one)',
      description: 'Look up the **{globalId}** record with the specified ID.',
      externalDocs: {
        url: 'https://sailsjs.com/documentation/reference/blueprint-api/find-one',
        description: 'See https://sailsjs.com/documentation/reference/blueprint-api/find-one'
      },
      parameters: [
        'primaryKeyPathParameter', // special case; filtered and substituted during generation phase
        { $ref: '#/components/parameters/LimitQueryParam' },
      ],
      resultDescription: 'Responds with a single **{globalId}** record as a JSON dictionary',
      notFoundDescription: 'Response denoting **{globalId}** record with specified ID **NOT** found',
      // if functions, each called with (blueprintActionTemplate, routeInfo, pathEntry)
      modifiers: ['addSelectQueryParam', exampleModifierFunctionRef],
    },
    ...
  };

  ```


  Note that:

  1. For summary and description strings the value `{globalId}` is replaced with
  the applicable Sails model value.

  1. Parameters values are Swagger definitions, with the exception of the
  *special* string value
     `primaryKeyPathParameter`, which may be used to include a reference to a model's primary key.
  1. Modifiers are used to apply custom changes to the generated Swagger, noting
  that:
     - String values are predefined in `generatePaths()` (refer to the [source code](lib/generators.js#L246));
       valid  modifiers are:
       - `addPopulateQueryParam`
       - `addSelectQueryParam`
       - `addOmitQueryParam`
       - `addModelBodyParam`
       - `addModelBodyParamUpdate`
       - `addResultOfArrayOfModels`
       - `addAssociationPathParam`
       - `addAssociationFKPathParam`
       - `addAssociationResultOfArray`
       - `addResultOfModel`
       - `addResultNotFound`
       - `addResultValidationError`
       - `addFksBodyParam`
       - `addShortCutBlueprintRouteNote`
     - Functions are called as `func(blueprintActionTemplate, routeInfo, pathEntry, tags, components)`
       where
       - `blueprintActionTemplate` the blueprint action template (see above) to which the modifier relates
       - `routeInfo` the route information object (see above) for which the Swagger is being generated
       - `pathEntry` the generated Swagger path entry to be modified
       - `tags` the generated Swagger **tag** definitions to be modified/extended
       - `components` the generated Swagger **component** definitions to be modified/extended

  ### Post-processing Generated Swagger Output


  The final generated Swagger output may be post-processed before it is written
  to

  the output file using a post-processing function specified as the
  `postProcess` config option.


  For situations where saving the generated swagger documentation JSON to a file
  is

  not desired/appropriate, the `postProcess` config option may be used to
  specify

  an alternate save mechanism.


  Note that if `swaggerJsonPath` config option is empty/null/undefined the
  output file will not be written.


  For example:

  ```javascript

  module.exports['swagger-generator'] = {
    postProcess: function(specifications) {
      let sch = specifications.components.schemas;
      Object.keys(sch).map(k => {
        sch[k].description = sck[k].description.toUpperCase();
      });
    }
  }

  ```



  ## Testing


  * Clone this repository


  * Install all development dependencies


  ```sh
   npm install
  ```

  * Then run test


  ```sh

  npm test

  ```


  ## Contribute


  Fork this repo and push in your ideas.

  Do not forget to add a bit of test(s) of what value you adding.

  * stick to conventional commit message
  [here](https://conventionalcommits.org/) or read more [angular
  commit](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit)
  pattern

  * While developing, you can run the below command to start nodemon watch too
  run linting and testing on `.ts` changes


  ```sh

  npm run dev

  ```


  ## Changelog


  See the different releases
  [here](https://github.com/theo4u/sails-hook-swagger-generator/releases)


  ## License


  MIT License (MIT)
ccouzens/keycloak-openapi: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2706:8116:81015D:106D5B5:6500FB1F.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
muonsoft/openapi-mock: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B5B:2679:A6658A:1519E05:6500FB5E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
mockoon/mockoon: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273B:6C7D:240D7E:49B391:6500FB5C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
canvural/php-openapi-faker: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272A:1555:7C0E37:FD35EE:6500FB1E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
jimschubert/intellij-openapi-generator: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B64:671B:24E451:4BDDBC:6500FB44.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
rithvikvibhu/GHLocalApi: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A88:5F2B:A98E3D:157C754:6500FB6B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
abersheeran/index.py: >-
  {"message":"API rate limit exceeded for 20.171.133.141. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more
  details.)","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
stoplightio/studio: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AAA:0720:AADCAF:15A6059:6500FB87.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
hummingbird-me/api-docs: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B60:2C43:730093:EB072E:6500FB43.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
unchase/Unchase.OpenAPI.Connectedservice: "![Logo](img/Unchase-OpenAPI-Swagger-Connected-Service-Logo.png)\n\n[Unchase OpenAPI (Swagger) Connected Service](https://marketplace.visualstudio.com/items?itemName=Unchase.unchaseOpenAPIConnectedService) is a Visual Studio 2017/2019/2022 extension to generate `C#` (`TypeScript`) `HttpClient` (or `C#` `Controllers`) code for `OpenAPI` (formerly [`Swagger API`](https://swagger.io/docs/specification/about/)) web service with [NSwag](https://github.com/RSuter/NSwag).\n\n> Starting from Visual Studio Community 2019 v16.1.3 extensions based on `Microsoft Connected Services` now work fine.\n\n> The project is developed and maintained by [Nikolay Chebotov (**Unchase**)](https://github.com/unchase).\n\n## Getting Started\n\n#### **[Read How-To on medium.com](https://medium.com/@unchase/how-to-generate-c-or-typescript-client-code-for-openapi-swagger-specification-d882d59e3b77)**\n\nInstall from `Tools -> Extensions and Updates` menu inside [Visual Studio](https://visualstudio.microsoft.com/vs/) 2017 (for [VisualStudio](https://visualstudio.microsoft.com/vs/) 2019: `Extensions -> Manage Extensions`) or [download](http://vsixgallery.com/extensions/Unchase.OpenAPI.ConnectedService.63199638-6211-4285-ba8f-75b1f0326c2a/extension.vsix)  as `VSIX` package from VSGallery or [download](https://marketplace.visualstudio.com/items?itemName=unchase.unchaseOpenAPIConnectedService)  as `VSIX` package from [Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=Unchase.unchaseopenapiconnectedservice):\n\n![Adding Unchase OpenAPI (Swagger) Connected Service in Visual Studio](img/Unchase-OpenAPI-Swagger-Connected-Service.gif)\n\n## Builds status\n\n|Status|Value|\n|:----|:---:|\n|Build|[![Build status](https://ci.appveyor.com/api/projects/status/90oewanfh32fjcr6)](https://ci.appveyor.com/project/unchase/unchase.openapi.connectedservice)\n|Buid History|![Build history](https://buildstats.info/appveyor/chart/unchase/unchase-openapi-connectedservice)\n|GitHub Release|[![GitHub release](https://img.shields.io/github/release/unchase/Unchase.OpenAPI.Connectedservice.svg)](https://github.com/unchase/Unchase.OpenAPI.Connectedservice/releases/latest)\n|GitHub Release Date|[![GitHub Release Date](https://img.shields.io/github/release-date/unchase/Unchase.OpenAPI.Connectedservice.svg)](https://github.com/unchase/Unchase.OpenAPI.Connectedservice/releases/latest)\n|GitHub Release Downloads|[![Github Releases](https://img.shields.io/github/downloads/unchase/Unchase.OpenAPI.Connectedservice/total.svg)](https://github.com/unchase/Unchase.OpenAPI.Connectedservice/releases/latest)\n|VS Marketplace|[![VS Marketplace](http://vsmarketplacebadge.apphb.com/version-short/unchase.UnchaseOpenAPIConnectedService.svg)](https://marketplace.visualstudio.com/items?itemName=unchase.unchaseOpenAPIConnectedService)\n|VS Marketplace Downloads|[![VS Marketplace Downloads](http://vsmarketplacebadge.apphb.com/downloads-short/unchase.UnchaseOpenAPIConnectedService.svg)](https://marketplace.visualstudio.com/items?itemName=unchase.unchaseOpenAPIConnectedService)\n|VS Marketplace Installs|[![VS Marketplace Installs](http://vsmarketplacebadge.apphb.com/installs-short/unchase.UnchaseOpenAPIConnectedService.svg)](https://marketplace.visualstudio.com/items?itemName=unchase.unchaseOpenAPIConnectedService)\n\n## Features\n\n- Generate `C#` or `TypeScript` clients/proxies (client code) from Swagger 2.0 and OpenAPI 3.0 specifications\n- Generate `C#` ASP.NET Controller from Swagger 2.0 and OpenAPI 3.0 specifications\n- **Experimental**: Generate `C#` or `TypeScript` clients/proxies (client code) or ASP.NET Controller from OData specification converted to OpenAPI based on [OpenAPI.NET.OData](https://github.com/microsoft/OpenAPI.NET.OData)\n- Generate `.nswag` file for using in [`NSwagStudio`](https://github.com/NSwag/NSwag/wiki/NSwagStudio) (no need to install for generating)\n- Add required dependencies for the `C#` client (before generating):\n\t- Library targeting .NET Standard 1.4+:\n\t\t1. Newtonsoft.Json ([NuGet](https://www.nuget.org/packages/Newtonsoft.Json))\n\t\t2. System.Net.Http ([NuGet](https://www.nuget.org/packages/System.Net.Http))\n\t\t3. System.ComponentModel.Annotations ([NuGet](https://www.nuget.org/packages/System.ComponentModel.Annotations))\n\t- Library targeting the full .NET:\n\t\t1. Newtonsoft.Json ([NuGet](https://www.nuget.org/packages/Newtonsoft.Json))\n\t\t2. System.Runtime.Serialization (GAC)\n\t\t3. System.ComponentModel.DataAnnotations (GAC)\n\t- Library targeting PCL 259 (Portable Class Library):\n\t\t1. Newtonsoft.Json ([NuGet](https://www.nuget.org/packages/Newtonsoft.Json))\n\t\t2. Microsoft.Net.Http ([NuGet](https://www.nuget.org/packages/Microsoft.Net.Http))\n\t\t3. Portable.DataAnnotations ([NuGet](https://www.nuget.org/packages/Portable.DataAnnotations))\n- Add Required dependences for the `C#` controller (before generating):\n\t1. Microsoft.AspNetCore.Mvc ([NuGet](https://www.nuget.org/packages/Microsoft.AspNetCore.MVC))\n- **Command** to open generated `.nswag` and `.nswag.json` files in [NSWagStudio](https://github.com/NSwag/NSwag/wiki/NSwagStudio)\n- **Command** to compare `.nswag.json` specification file with another `.nswag.json` specification file (or specification given by `endpoint`)\n- Storage of the last 10 endpoints (specification path)\n\n## Settings Meaning\n\nMeaning of the Unchase [OpenAPI (Swagger) Connected Service](https://marketplace.visualstudio.com/items?itemName=unchase.unchaseOpenAPIConnectedService) settings according to [NSwagStudio](https://github.com/NSwag/NSwag/wiki/NSwagStudio):\n\n![Unchase OpenAPI (Swagger) Connected Service settings meaning](img/Unchase-OpenAPI-Swagger-Connected-Service-Settings-Meaning.png)\n\n## Exclude type names\n\nSince [v1.4.0](https://github.com/unchase/Unchase.OpenAPI.Connectedservice/releases/tag/v1.4.0) you can exclude type names in separate Window for C# client code generation:\n\n![Unchase OpenAPI (Swagger) Connected Service - exclude type names](img/Csharp-Client-Generation-Exclude-Type-Names.png)\n\n## Generate code from OData specification converted to OpenAPI specification\n\nSince [v1.5.0](https://github.com/unchase/Unchase.OpenAPI.Connectedservice/releases/tag/v1.4.0) you can generate code from OData specification converted to OpenAPI specification:\n\n![Unchase OpenAPI (Swagger) Connected Service - generate from OData](img/Csharp-Client-Generation-OData.png)\n\n## Custom Commands\n\n### `Open in NSwagStudio` Command\n\nSince *v1.1.** have been added menu command embedded in Visual Studio Solution Explorer context menu lets you open generated `.nswag` and `.nswag.json` files in [NSwagStudio](https://github.com/NSwag/NSwag/wiki/NSwagStudio).\n\nThis extension is for those times where you generate `.nswag` and `.nswag.json` files and you want to be able to quickly open it in [NSwagStudio](https://github.com/NSwag/NSwag/wiki/NSwagStudio).\n\n#### Prerequisite\n\n> In order to use this extension, you must have [Visual Studio](https://visualstudio.microsoft.com/vs/) 2017/2019, this connected service as well as [NSwagStudio](https://github.com/NSwag/NSwag/wiki/NSwagStudio) installed.\n\n#### Solution Explorer\n\nYou can open `.nswag` and `.nswag.json` files in [NSWagStudio](https://github.com/NSwag/NSwag/wiki/NSwagStudio) by simply right-clicking it in Solution Explorer and select **Open in NSwagStudio**:\n\n![Open in NSwagStudio menu Command](img/OpenWithNSwagCommandMenu.png)\n\n#### Path to NSwagStudio.exe\n\nIf you installed [NSwagStudio](https://github.com/NSwag/NSwag/wiki/NSwagStudio) at a non-default location, a prompt will ask for the path to `NSwagStudio.exe`.\n\nYou can always change the location in *Tools -> Options -> Web -> Unchase OpenAPI (Swagger) Connected Service*:\n\n![Open in NSwagStudio Option](img/UnchaseOpenAPIConnectedServiceCommandsOptions1.png)\n\n### `Compare OpenAPI-specifications...` Command\n\nSince *v1.2.** have been added menu command embedded in Visual Studio Solution Explorer context menu lets you compare generated `.nswag.json` specification-file with another `.nswag.json` specification-file (or with specification given by `endpoint`).\n\nThis extension is for those times where you generate `.nswag.json` file and you want to quickly compare it with another specification or specification given by `endpoint`.\n\n#### Prerequisite\n\n> In order to use this extension, you must have [Visual Studio](https://visualstudio.microsoft.com/vs/) 2017/2019 as well as this connected service.\n\n#### Solution Explorer\n\nYou can compare `.nswag.json` specification-file with another `.nswag.json` specification-file (or with specification given by `endpoint`) by simply selecting one or two files and right-clicking them in Solution Explorer and select **Compare OpenAPI-specifications...**:\n\n![Compare OpenAPI Specifications Command](img/CompareOpenAPISpecificationsOneFileCommandMenu.png) ![Compare OpenAPI Specifications Command](img/CompareOpenAPISpecificationsTwoFilesCommandMenu.png)\n\n#### Path to the specification `Endpoint`\n\nYou can always change the specification Endpoint to compare with in *Tools -> Options -> Web -> Unchase OpenAPI (Swagger) Connected Service*:\n\n![Compare OpenAPI Specifications Option](img/UnchaseOpenAPIConnectedServiceCommandsOptions2.png)\n\n#### Compare View\n\n![Compare OpenAPI Specifications Command result](img/CompareOpenAPISpecificationsCommandResult.png)\n\n## HowTos\n\n- [ ] Add HowTos in a future\n- [ ] ... [request for HowTo you need](https://github.com/unchase/Unchase.OpenAPI.Connectedservice/issues/new?title=DOC)\n\n## Troubleshooting\n\n### Can't open .nswag file in NSwagStudio\n\n- You can use **Open in NSwagStudio** menu command\n- If generated code corrupted, try to open `.nswag` file in [`NSwagStudio`](https://github.com/RSuter/NSwag/wiki/NSwagStudio) (Windows GUI for editing .*nswag files)\n- If it doesn't open, try to create new `.nswag` file in [`NSwagStudio`](https://github.com/RSuter/NSwag/wiki/NSwagStudio) for the same API service link and check the differences\n\n### Installation completes but I can't see the Service in the list of connected services (Visual Studio 2019)\n\n- Relevant [bug report](https://developercommunity.visualstudio.com/content/problem/468751/vs2019-preview-cannot-install-connected-service-ex.html). `Connected Services` restored in the v16.1.3 update to [Visual Studio](https://visualstudio.microsoft.com/vs/) 2019.\n\n## Roadmap\n\nSee the [changelog](CHANGELOG.md) for the further development plans and version history.\n\n## Feedback\n\nPlease feel free to add your [review](https://marketplace.visualstudio.com/items?itemName=unchase.unchaseOpenAPIConnectedService&ssr=false#review-details), [request a feature](https://github.com/unchase/Unchase.OpenAPI.Connectedservice/issues/new?title=FEATURE), [ask a question](https://marketplace.visualstudio.com/items?itemName=unchase.unchaseOpenAPIConnectedService&ssr=false#qna) or [report a bug](https://github.com/unchase/Unchase.OpenAPI.Connectedservice/issues/new?title=BUG) including in connected service: \n\n![Unchase OpenAPI Connected Service Report a Bug](img/Unchase-OpenAPI-Connected-Service-ReportBug.png)\n\nThank you in advance!\n\n## Thank me!\n\nIf you like what I am doing and you would like to thank me, please consider:\n\n[![Buy me a coffe!](img/buymeacoffe.png)](https://www.buymeacoffee.com/nikolaychebotov)\n\nThank you for your support!\n\n----------\n\nCopyright &copy; 2019 [Nikolay Chebotov (**Unchase**)](https://github.com/unchase) - Provided under the [Apache License 2.0](LICENSE.md).\n\n"
OpenAPITools/openapi-diff: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2737:33D2:1D99FD:3CCF92:6500FAFF.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
danielgtaylor/restish: >
  ![Restish
  Logo](https://user-images.githubusercontent.com/106826/82109918-ec5b2300-96ee-11ea-9af0-8515329d5965.png)


  [![Works With
  Restish](https://img.shields.io/badge/Works%20With-Restish-ff5f87)](https://rest.sh/)
  [![User
  Guide](https://img.shields.io/badge/Docs-Guide-5fafd7)](https://rest.sh/#/guide)
  [![CI](https://github.com/danielgtaylor/restish/workflows/CI/badge.svg?branch=main)](https://github.com/danielgtaylor/restish/actions?query=workflow%3ACI+branch%3Amain++)
  [![codecov](https://codecov.io/gh/danielgtaylor/restish/branch/main/graph/badge.svg)](https://codecov.io/gh/danielgtaylor/restish)
  [![Docs](https://img.shields.io/badge/godoc-reference-5fafd7)](https://pkg.go.dev/github.com/danielgtaylor/restish?tab=subdirectories)
  [![Go Report
  Card](https://goreportcard.com/badge/github.com/danielgtaylor/restish)](https://goreportcard.com/report/github.com/danielgtaylor/restish)


  [Restish](https://rest.sh/) is a CLI for interacting with
  [REST](https://apisyouwonthate.com/blog/rest-and-hypermedia-in-2019)-ish HTTP
  APIs with some nice features built-in — like always having the latest API
  resources, fields, and operations available when they go live on the API
  without needing to install or update anything.

  Check out [how Restish compares to cURL &
  HTTPie](https://rest.sh/#/comparison).


  See the [user guide](https://rest.sh/#/guide) for how to install Restish and
  get started.


  Features include:


  - HTTP/2 ([RFC 7540](https://tools.ietf.org/html/rfc7540)) with TLS by
  _default_ with fallback to HTTP/1.1

  - Generic head/get/post/put/patch/delete verbs like `curl` or
  [HTTPie](https://httpie.org/)

  - Generated commands for CLI operations, e.g. `restish my-api list-users`
    - Automatically discovers API descriptions
      - [RFC 8631](https://tools.ietf.org/html/rfc8631) `service-desc` link relation
      - [RFC 5988](https://tools.ietf.org/html/rfc5988#section-6.2.2) `describedby` link relation
    - Supported formats
      - OpenAPI [3.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md) / [3.1](https://spec.openapis.org/oas/v3.1.0.html) and [JSON Schema](https://json-schema.org/)
    - Automatic configuration of API auth if advertised by the API
    - Shell command completion for Bash, Fish, Zsh, Powershell
  - Automatic pagination of resource collections via [RFC
  5988](https://tools.ietf.org/html/rfc5988) `prev` and `next` hypermedia links

  - API endpoint-based auth built-in with support for profiles:
    - HTTP Basic
    - API key via header or query param
    - OAuth2 client credentials flow (machine-to-machine, [RFC 6749](https://tools.ietf.org/html/rfc6749))
    - OAuth2 authorization code (with PKCE [RFC 7636](https://tools.ietf.org/html/rfc7636)) flow
    - On the fly authorization through external tools for custom API signature mechanisms
  - Content negotiation, decoding & unmarshalling built-in:
    - JSON ([RFC 8259](https://tools.ietf.org/html/rfc8259), <https://www.json.org/>)
    - YAML (<https://yaml.org/>)
    - CBOR ([RFC 7049](https://tools.ietf.org/html/rfc7049), <http://cbor.io/>)
    - MessagePack (<https://msgpack.org/>)
    - Amazon Ion (<http://amzn.github.io/ion-docs/>)
    - Gzip ([RFC 1952](https://tools.ietf.org/html/rfc1952)), Deflate ([RFC 1951](https://datatracker.ietf.org/doc/html/rfc1951)), and Brotli ([RFC 7932](https://tools.ietf.org/html/rfc7932)) content encoding
  - Standardized
  [hypermedia](https://smartbear.com/learn/api-design/what-is-hypermedia/)
  parsing into queryable/followable response links:
    - HTTP Link relation headers ([RFC 5988](https://tools.ietf.org/html/rfc5988#section-6.2.2))
    - [HAL](http://stateless.co/hal_specification.html)
    - [Siren](https://github.com/kevinswiber/siren)
    - [Terrifically Simple JSON](https://github.com/mpnally/Terrifically-Simple-JSON)
    - [JSON:API](https://jsonapi.org/)
  - Local caching that respects [RFC 7234](https://tools.ietf.org/html/rfc7234)
  `Cache-Control` and `Expires` headers

  - CLI
  [shorthand](https://github.com/danielgtaylor/openapi-cli-generator/tree/master/shorthand#cli-shorthand-syntax)
  for structured data input (e.g. for JSON)

  - [Shorthand query](https://github.com/danielgtaylor/shorthand#querying)
  response filtering & projection

  - Colorized prettified readable output

  - Fast native zero-dependency binary


  Articles:


  - [A CLI for REST
  APIs](https://dev.to/danielgtaylor/a-cli-for-rest-apis-part-1-104b)

  - [Mapping OpenAPI to the
  CLI](https://dev.to/danielgtaylor/mapping-openapi-to-the-cli-37pb)


  This project started life as a fork of [OpenAPI CLI
  Generator](https://github.com/danielgtaylor/openapi-cli-generator).
schemathesis/schemathesis: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A91:03EB:9C8F24:13E2CE3:6500FB75.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
BRIKEV/express-jsdoc-swagger: "![npm](https://img.shields.io/npm/v/express-jsdoc-swagger)\n![Node.js Package](https://github.com/BRIKEV/express-jsdoc-swagger/workflows/Build/badge.svg)\n[![Known Vulnerabilities](https://snyk.io/test/github/BRIKEV/express-jsdoc-swagger/badge.svg)](https://snyk.io/test/github/BRIKEV/express-jsdoc-swagger)\n[![Maintainability](https://api.codeclimate.com/v1/badges/6d5565df0c9c10e75b59/maintainability)](https://codeclimate.com/github/BRIKEV/express-jsdoc-swagger/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/6d5565df0c9c10e75b59/test_coverage)](https://codeclimate.com/github/BRIKEV/express-jsdoc-swagger/test_coverage)\n![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)\n![npm](https://img.shields.io/npm/dm/express-jsdoc-swagger)\n\n# express-jsdoc-swagger\n\nWith this library, you can document your express endpoints using swagger [OpenAPI 3 Specification](https://swagger.io/specification/) without writing YAML or JSON. You can write comments similar to `jsdoc` on each endpoint, and the dependecy is going to create the swagger UI.\n\n## Table of Contents\n\n1. [Prerequisites](#Prerequisites)\n2. [Installation](#Installation)\n3. [Basic Usage](#Basic-Usage)\n4. [Basic Examples](#Basic-Examples)\n\t- [Advanced examples](https://github.com/BRIKEV/express-jsdoc-swagger/tree/master/examples)\n\t- [Official docs](https://brikev.github.io/express-jsdoc-swagger-docs/#/)\n5. [Validator](#Validator)\n6. [VSCode extension](https://marketplace.visualstudio.com/items?itemName=brikev.express-jsdoc-swagger-snippets)\n\n## Prerequisites\n\nThis library assumes you are using:\n\n1. [NodeJS](https://nodejs.org)\n2. [Express.js](http://www.expressjs.com)\n\n## Installation\n\n```\nnpm i express-jsdoc-swagger\n```\n\n## Basic Usage\n\n```javascript\n// index.js file\nconst express = require('express');\nconst expressJSDocSwagger = require('express-jsdoc-swagger');\n\nconst options = {\n  info: {\n    version: '1.0.0',\n    title: 'Albums store',\n    license: {\n      name: 'MIT',\n    },\n  },\n  security: {\n    BasicAuth: {\n      type: 'http',\n      scheme: 'basic',\n    },\n  },\n  // Base directory which we use to locate your JSDOC files\n  baseDir: __dirname,\n  // Glob pattern to find your jsdoc files (multiple patterns can be added in an array)\n  filesPattern: './**/*.js',\n  // URL where SwaggerUI will be rendered\n  swaggerUIPath: '/api-docs',\n  // Expose OpenAPI UI\n  exposeSwaggerUI: true,\n  // Expose Open API JSON Docs documentation in `apiDocsPath` path.\n  exposeApiDocs: false,\n  // Open API JSON Docs endpoint.\n  apiDocsPath: '/v3/api-docs',\n  // Set non-required fields as nullable by default\n  notRequiredAsNullable: false,\n  // You can customize your UI options.\n  // you can extend swagger-ui-express config. You can checkout an example of this\n  // in the `example/configuration/swaggerOptions.js`\n  swaggerUiOptions: {},\n  // multiple option in case you want more that one instance\n  multiple: true,\n};\n\nconst app = express();\nconst PORT = 3000;\n\nexpressJSDocSwagger(app)(options);\n\n/**\n * GET /api/v1\n * @summary This is the summary of the endpoint\n * @return {object} 200 - success response\n */\napp.get('/api/v1', (req, res) => res.json({\n  success: true,\n}));\n\napp.listen(PORT, () => console.log(`Example app listening at http://localhost:${PORT}`));\n```\n\n## Basic Examples\n\n1. Basic configuration options.\n\n```javascript\nconst options = {\n  info: {\n    version: '1.0.0',\n    title: 'Albums store',\n    license: {\n      name: 'MIT',\n    },\n  },\n  security: {\n    BasicAuth: {\n      type: 'http',\n      scheme: 'basic',\n    },\n  },\n  baseDir: __dirname,\n  // Glob pattern to find your jsdoc files (multiple patterns can be added in an array)\n  filesPattern: './**/*.js',\n};\n```\n\n2. Components definition\n\n```javascript\n/**\n * A song type\n * @typedef {object} Song\n * @property {string} title.required - The title\n * @property {string} artist - The artist\n * @property {number} year - The year - double\n */\n```\n\n3. Endpoint which returns a `Songs` model array in the response.\n\n```javascript\n/**\n * GET /api/v1/albums\n * @summary This is the summary of the endpoint\n * @tags album\n * @return {array<Song>} 200 - success response - application/json\n */\napp.get('/api/v1/albums', (req, res) => (\n  res.json([{\n    title: 'abum 1',\n  }])\n));\n```\n\n3. Endpoint PUT with body and path params which returns a `Songs` model array in the response.\n\n```javascript\n/**\n * PUT /api/v1/albums/{id}\n * @summary Update album\n * @tags album\n * @param {string} name.path - name param description\n * @param {Song} request.body.required - songs info\n * @return {array<Song>} 200 - success response - application/json\n */\napp.put('/api/v1/albums/:id', (req, res) => (\n  res.json([{\n    title: 'abum 1',\n  }])\n));\n```\n\n4. Basic endpoint definition with tags, params and basic authentication\n\n```javascript\n/**\n * GET /api/v1/album\n * @summary This is the summary of the endpoint\n * @security BasicAuth\n * @tags album\n * @param {string} name.query.required - name param description\n * @return {object} 200 - success response - application/json\n * @return {object} 400 - Bad request response\n */\napp.get('/api/v1/album', (req, res) => (\n  res.json({\n    title: 'abum 1',\n  })\n));\n```\n\n5. Basic endpoint definition with code example for response body\n\n```javascript\n/**\n * GET /api/v1/albums\n * @summary This is the summary of the endpoint\n * @tags album\n * @return {array<Song>} 200 - success response - application/json\n * @example response - 200 - success response example\n * [\n *   {\n *     \"title\": \"Bury the light\",\n *     \"artist\": \"Casey Edwards ft. Victor Borba\",\n *     \"year\": 2020\n *   }\n * ]\n */\napp.get('/api/v1/albums', (req, res) => (\n  res.json([{\n    title: 'track 1',\n  }])\n));\n```\n\nYou can find more examples [here](https://github.com/BRIKEV/express-jsdoc-swagger/tree/master/examples), or visit our [documentation](https://brikev.github.io/express-jsdoc-swagger-docs/#/).\n\n\n## Validator\n\nWe developed a new package works as a validator of your API endpoints and the documentation you create with this package. This package is [express-oas-validator](https://github.com/BRIKEV/express-oas-validator).\n\n**Example**\n\nInstall using the node package registry:\n\n```\nnpm install --save express-oas-validator\n```\n\nWe have to wait until we have the full swagger schema to initiate the validator.\n\n```js\n// validator.js\nconst { init } = require('express-oas-validator');\n\nconst validators = instance => new Promise((resolve, reject) => {\n  instance.on('finish', (swaggerDef) => {\n    const { validateRequest, validateResponse } = init(swaggerDef);\n    resolve({ validateRequest, validateResponse });\n  });\n\n  instance.on('error', (error) => {\n    reject(error);\n  });\n});\n\nmodule.exports = validators;\n\n```\n\nYou can check out this also in our [example folder](https://github.com/BRIKEV/express-jsdoc-swagger/tree/master/examples/validator).\n\n```js\n// index.js\nconst express = require('express');\nconst expressJSDocSwagger = require('express-jsdoc-swagger');\nconst validator = require('./validator');\n\nconst options = {\n  info: {\n    version: '1.0.0',\n    title: 'Albums store',\n    license: {\n      name: 'MIT',\n    },\n  },\n  filesPattern: './**.js',\n  baseDir: __dirname,\n};\n\nconst app = express();\nconst instance = expressJSDocSwagger(app)(options);\n\nconst serverApp = async () => {\n  const { validateRequest, validateResponse } = await validator(instance);\n  app.use(express.urlencoded({ extended: true }));\n  app.use(express.json());\n  /**\n   * A song\n   * @typedef {object} Song\n   * @property {string} title.required - The title\n   * @property {string} artist - The artist\n   * @property {integer} year - The year\n   */\n\n  /**\n   * POST /api/v1/songs\n   * @param {Song} request.body.required - song info\n   * @return {object} 200 - song response\n   */\n  app.post('/api/v1/songs', validateRequest(), (req, res) => res.send('You save a song!'));\n\n  /**\n   * POST /api/v1/name\n   * @param {string} request.body.required - name body description\n   * @return {object} 200 - song response\n   */\n  app.post('/api/v1/name', (req, res, next) => {\n    try {\n      // Validate response\n      validateResponse('Error string', req);\n      return res.send('Hello World!');\n    } catch (error) {\n      return next(error);\n    }\n  });\n\n  /**\n   * GET /api/v1/authors\n   * @summary This is the summary or description of the endpoint\n   * @param {string} name.query.required - name param description - enum:type1,type2\n   * @param {array<string>} license.query - name param description\n   * @return {object} 200 - success response - application/json\n   */\n  app.get('/api/v1/authors', validateRequest({ headers: false }), (req, res) => (\n    res.json([{\n      title: 'album 1',\n    }])\n  ));\n\n  // eslint-disable-next-line no-unused-vars\n  app.use((err, req, res, next) => {\n    res.status(err.status).json(err);\n  });\n\n  return app;\n};\n\nconst PORT = process.env.PORT || 4000;\n\nserverApp()\n  .then(app => \n    app.listen(PORT, () =>\n      console.log(`Listening PORT: ${PORT}`)\n    ))\n  .catch((err) => {\n    console.error(err);\n    process.exit(1);\n  });\n```\n\nYou can visit our [documentation](https://brikev.github.io/express-jsdoc-swagger-docs/#/validator).\n\n## Contributors ✨\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bri06\"><img src=\"https://avatars0.githubusercontent.com/u/24435223?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Briam Martinez Escobar</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=bri06\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/kjmesc\"><img src=\"https://avatars2.githubusercontent.com/u/12685053?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kevin Julián Martínez Escobar</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=kevinccbsg\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/hoonga\"><img src=\"https://avatars3.githubusercontent.com/u/10708927?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Heung-yeon Oh</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=hoonga\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/LonelyPrincess\"><img src=\"https://avatars1.githubusercontent.com/u/17673317?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sara Hernández</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=LonelyPrincess\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"http://servatj.me\"><img src=\"https://avatars0.githubusercontent.com/u/3521485?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josep Servat</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=servatj\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/thuydx55\"><img src=\"https://avatars2.githubusercontent.com/u/1469984?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nick Dong</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=thuydx55\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Stosiu\"><img src=\"https://avatars1.githubusercontent.com/u/10252063?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aleksander Stós</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=Stosiu\" title=\"Code\">\U0001F4BB</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kdankert\"><img src=\"https://avatars0.githubusercontent.com/u/46489624?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kjell Dankert</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=kdankert\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/juliendu11\"><img src=\"https://avatars0.githubusercontent.com/u/18739442?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>juliendu11</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=juliendu11\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://me.io\"><img src=\"https://avatars.githubusercontent.com/u/45731?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mohamed Meabed</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=meabed\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ofarukaydin\"><img src=\"https://avatars.githubusercontent.com/u/32788963?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Faruk Aydın</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=ofarukaydin\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dahlmo\"><img src=\"https://avatars.githubusercontent.com/u/23076026?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dahlmo</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=dahlmo\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gandazgul\"><img src=\"https://avatars.githubusercontent.com/u/108850?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Carlos Ravelo</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=gandazgul\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/paulish\"><img src=\"https://avatars.githubusercontent.com/u/1762032?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Paul Ishenin</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=paulish\" title=\"Code\">\U0001F4BB</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/sbingner\"><img src=\"https://avatars.githubusercontent.com/u/354533?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sam Bingner</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=sbingner\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://stackoverflow.com/users/5059657/alexander-staroselsky\"><img src=\"https://avatars.githubusercontent.com/u/34102969?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alexander Staroselsky</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=alexstaroselsky\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"http://joelabrahamsson.com\"><img src=\"https://avatars.githubusercontent.com/u/218986?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Joel Abrahamsson</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=joelabrahamsson\" title=\"Code\">\U0001F4BB</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n"
domaindrivendev/Swashbuckle.WebApi: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273E:28DF:74E9A7:EEA583:6500FB2E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
contiamo/restful-react: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273A:7DD3:78528E:F5B1A7:6500FB28.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
cellular/oazapfts: "# \U0001F37B oazapfts!\n\n[![CI](https://github.com/cellular/oazapfts/actions/workflows/ci.yml/badge.svg)](https://github.com/cellular/oazapfts/actions/workflows/ci.yml)\n\nGenerate TypeScript clients to tap into OpenAPI servers.\n\n![](https://avatars.githubusercontent.com/u/119607625?s=200&v=4)\n\n## Features\n\n- **AST-based**:\n  Unlike other code generators `oazapfts` does not use templates to generate code but uses TypeScript's built-in API to generate and pretty-print an abstract syntax tree.\n- **Fast**: The CLI does not use any of the common Java-based tooling, so the code generation is super fast.\n- **Single file**: All functions and types are co-located in one single self-contained file.\n- **Tree-shakeable**: Individually exported functions allow you to bundle only the ones you actually use.\n- **Human friendly signatures**: The generated API methods don't leak any HTTP-specific implementation details. For example, all optional parameters are grouped together in one object, no matter whether they end up in the headers, path or query-string.\n\n## Installation\n\n```\nnpm install oazapfts\n```\n\n> **Note**\n> With version 3.0.0 oazapfts has become a runtime dependency and the generated code does no longer include all the fetch logic.\n\n## Usage\n\n```\noazapfts <spec> [filename]\n\nOptions:\n--exclude, -e tag to exclude\n--include, -i tag to include\n--optimistic\n--useEnumType\n```\n\nWhere `<spec>` is the URL or local path of an OpenAPI or Swagger spec (in either json or yml) and `<filename>` is the location of the `.ts` file to be generated. If the filename is omitted, the code is written to stdout.\n\n### Options\n\n- `--optimistic` generare a client in [optimistic mode](#optimistic-mode)\n\n- `--useEnumType` generate enums instead of union types\n\n## Consuming the generated API\n\nFor each operation defined in the spec the generated API will export a function with a name matching the `operationId`. If no ID is specified, a reasonable name is generated from the HTTP verb and the path.\n\n```ts\nimport * as api from \"./my-generated-api.ts\";\nconst res = api.getPetById(1);\n```\n\n> **Note**\n> If your API is large, and you want to take advantage of tree-shaking to exclude unused code, use individual named imports instead:\n\n```ts\nimport { getPetById } from \"./my-generated-api.ts\";\n```\n\n## Fetch options\n\nThe **last argument** of each function is an optional [`RequestOpts`](https://github.com/oazapfts/oazapfts/blob/27b296c6fc28fec4869f1b7e1a4a5585ebbd5ee9/src/runtime/index.ts#L5) object that can be used to pass options to the `fetch` call, for example to pass additional `headers` or an `AbortSignal` to cancel the request later on.\n\n```ts\nconst res = getPetById(1, {\n  credentials: \"include\",\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n});\n```\n\nYou can also use this to override the default `baseUrl` or to provide a custom `fetch` implementation.\n\n> **Note**\n> Instead of passing custom options to each function call, consider [overwriting the global defaults](#overriding-the-defaults).\n\n## Optimistic vs. explicit responses\n\nOazapfts supports two different modes to handle results,\nan [explicit](#explicit-mode) mode (the default) and an [optimistic](#optimistic-mode) mode, that makes the response handling less verbose.\n\n## Explicit mode\n\nBy default, each function returns an `ApiResponse` object that exposes the `status` code, response `headers` and the `data`.\n\n> **Note**\n> This mode is best suited for APIs that return different types for different response codes or APIs where you need to access not only the response body, but also the response headers. If your API is simple, and you don't need this flexibility, consider using the [optimistic mode](#optimistic-mode) instead.\n\nIn explicit mode, each function returns a Promise for an `ApiResponse` which is an object with a `status` and a `data` property, holding the HTTP status code and the properly typed data from the response body.\n\nSince an operation can return different types depending on the status code, the actual return type is a _union_ of all possible responses, discriminated by their status.\n\nConsider the following code generated from the `petstore.json` example:\n\n```ts\n/**\n * Find pet by ID\n */\nexport function getPetById(petId: number, opts?: Oazapfts.RequestOpts) {\n  return oazapfts.fetchJson<\n    | {\n        status: 200;\n        data: Pet;\n      }\n    | {\n        status: 400;\n        data: string;\n      }\n    | {\n        status: 404;\n      }\n  >(`/pet/${encodeURIComponent(petId)}`, {\n    ...opts,\n  });\n}\n```\n\nIn this case, the `data` property is typed as `Pet|string`. We can use a type guard to narrow down the type to `Pet`:\n\n```ts\nconst res = await api.getPetById(1);\nif (res.status === 200) {\n  const pet = res.data;\n  // pet is properly typed as Pet\n}\nif (res.status === 404) {\n  const message = res.data;\n  // message is a string\n} else {\n  // handle the error\n}\n```\n\nThe above code can be simplified by using the `handle` helper:\n\n```ts\nimport { handle } from \"oazapfts\";\n\nawait handle(api.getPetById(1), {\n  200(pet) {\n    // pet is properly typed as Pet\n  },\n  404(message) {\n    // message is as string\n  },\n});\n```\n\nThe helper will throw an `HttpError` error for any unhandled status code, unless you add a `default` handler:\n\n```ts\nawait handle(api.getPetById(1), {\n  200(pet) {\n    // ...\n  },\n  default(status, data) {\n    // handle error\n  },\n});\n```\n\n## Optimistic mode\n\nYou can opt into the _optimistic mode_ by using the `--optimistic` command line argument.\n\nIn this mode, each function will return a Promise for the happy path, i.e. the type specified for the first `2xx` response.\n\nLooking back at our Pet Store example from above, consuming the response is now much easier and less verbose:\n\n```ts\nconst pet = await api.getPetById(1);\n// pet is now typed as Pet!\n```\n\nIn case of a response other than `200` the promise will be rejected with a `HttpError`.\n\n## Mixing both modes\n\nSometimes you might want to use the optimistic mode for some of your API calls, but need the full `ApiResponse` for others.\n\nIn that case, you can use the `ok`-helper function to selectively apply optimistic response handling:\n\n```ts\nimport { ok } from \"oazapfts\";\n\nconst pet = await ok(api.getPetById(1));\n```\n\n## Overriding the defaults\n\nThe generated file exports a `defaults` constant that can be used to override the `basePath`, provide a custom `fetch` implementation or to send additional `headers` with each request. Basically, you can set a default for any [fetch option](https://developer.mozilla.org/en-US/docs/Web/API/fetch#options) you want.\n\n```ts\nimport * as api from \"./api.ts\";\nimport nodeFetch from \"node-fetch\";\n\n// Override the spec's basePath\napi.defaults.basePath = \"https://example.com/api\";\n\n// Send this header with each request\napi.defaults.headers = {\n  access_token: \"secret\",\n};\n\n// Include credentials in CORS requests, too\napi.defaults.credentials = \"include\";\n\n// Use this instead of the global fetch\napi.defaults.fetch = nodeFetch;\n```\n\n## Alternatives and integrations\n\nIf this library doesn't fit your needs, take a look at [openapi-typescript-codegen](https://github.com/ferdikoomen/openapi-typescript-codegen) which follows a similar philosophy but creates many individual files instead of one single self-contained file.\n\nIf your frontend uses React, take a look at [react-api-query](https://www.npmjs.com/package/react-api-query) which makes it easy to use an oazapfts client with React hooks in a convenient and type-safe way.\n\n## About the name\n\nThe name comes from a combination of syllables **oa** (OpenAPI) and **ts** (TypeScript) and is [pronounced \U0001F5E3](https://www.youtube.com/watch?v=chvb-K95rBE) like the Bavarian _O'zapt'is!_ (it's tapped), the famous words that mark the beginning of the Oktoberfest.\n\n# License\n\nMIT\n"
openapi-library/OpenAPIValidators: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B79:2794:9B4565:13B57BA:6500FB6D.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
google/gnostic: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B68:4C8C:82E9F9:10A7B4A:6500FB40.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
tyrchen/quenya: >
  # Quenya


  __Disclaimer: Quenya is under active development and is at its early stage.
  Please DO NOT use it in prod environment. Use with cautions.__


  Quenya is a framework to build high-quality REST API applications based on
  extended [OpenAPI
  spec](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md).
  For the Quenya extension, see [here](docs/quenya_extension.md). With the OAPI
  spec, Quenya can generate high-quality code for many parts of the API
  pipeline:


  - Preprocessors:
    - [x] request validator: validate the request params
    - [ ] auth handler: process authentication for the API endpoints
    - [ ] access controller: process authorization for the API endpoints
  - API handlers:
    - [x] fake API handler to generate a fake response for mocking purpose
    - [ ] gRPC handler to act as a proxy between your client and your gRPC server (require extended OpenAPI grammar)
  - Postprocessors:
    - [x] response validator to validate the response body and headers (for dev/testing purpose)

  Quenya will also generate property testing, it will use `Plug.Test` and
  `StreamData` to build tests. Requests (url, query, request headers and request
  body) will be generated and then sent to generated `Router`, then it will use
  the response schema to validate the result. Currently the testing only covers
  happy path.


  Quenya will also provide a set of modules, plugs, test helpers to help you
  build REST APIs easily.


  ## How to use Quenya


  ### Install CLI


  First of all, install Quenya CLI:


  ```bash

  $ mix archive.install hex quenya_installer

  Resolving Hex dependencies...

  Dependency resolution completed:

  New:
    quenya_installer 0.3.0
  * Getting quenya_installer (Hex package)


  20:22:15.605 [info]  erl_tar: removed leading '/' from member names


  All dependencies are up to date

  Compiling 5 files (.ex)

  Generated quenya_installer app

  Generated archive "quenya_installer-0.3.0.ez" with MIX_ENV=prod

  Are you sure you want to install "quenya_installer-0.3.0.ez"? [Yn]

  * creating /Users/tchen/.mix/archives/quenya_installer-0.3.0

  ```


  ### Generate APP from an existing OAPI spec


  Once you finished installing quenya CLI, you can build a API app with quenya:


  ```bash

  $ cd /tmp

  $ curl
  https://raw.githubusercontent.com/tyrchen/quenya/master/parser/test/fixture/petstore.yml
  > petstore.yml

  $ mix quenya.new petstore.yml petstore

  * creating petstore/config/config.exs

  * creating petstore/config/dev.exs

  * creating petstore/config/prod.exs

  * creating petstore/config/staging.exs

  * creating petstore/config/test.exs

  * creating petstore/lib/petstore/application.ex

  * creating petstore/lib/petstore.ex

  * creating petstore/mix.exs

  * creating petstore/README.md

  * creating petstore/.formatter.exs

  * creating petstore/.gitignore

  * creating petstore/test/test_helper.exs


  Fetch and install dependencies? [Yn]

  * running mix deps.get

  * running mix deps.compile


  We are almost there! The following steps are missing:

      $ cd petstore

  You can run your app inside IEx (Interactive Elixir) as:

      $ iex -S mix


  ```


  This will create a new elixir app, copy your spec file (or spec folder) to
  `priv/spec/main.yml`, and generate API code based on the spec.


  ### Running the app


  Now you can run the app:


  ```bash

  $ cd petstore/

  $ mix compile.quenya # this command will generate/regenerate code on /gen and
  /test/gen folders

  $ iex -S mix

  Erlang/OTP 23 [erts-11.1.3] [source] [64-bit] [smp:16:16] [ds:16:16:10]
  [async-threads:1] [hipe] [dtrace]


  Compiling 44 files (.ex)

  Generated petstore app

  Interactive Elixir (1.11.2) - press Ctrl+C to exit (type h() ENTER for help)

  ```


  Just run a few commands without writing even a single line of code, you have
  an API app ready to use. Try open `http://localhost:4000/swagger`. You will
  see an API playground with standard Swagger UI:


  ![](docs/images/swagger.jpg)


  It's great but nothing special. Now, try to invoke one of the APIs, say `GET
  /pet/findByStatus`:


  ![](docs/images/swagger_call.jpg)


  Amazing! Don't believe what you saw? Try with this command:


  ```bash

  curl -X POST "http://localhost:4000/pet" -H  "accept: application/json" -H 
  "Content-Type: application/json" -d "{\"name\":\"doggie\",\"photoUrls\":[\"bad
  url\"]}" -i

  HTTP/1.1 400 Bad Request

  cache-control: max-age=0, private, must-revalidate

  content-length: 33

  date: Mon, 30 Nov 2020 04:45:37 GMT

  server: Cowboy


  Expected to be a valid image_uri.

  ```


  According to [petstore.yml](test/fixture/petstore.yml), request body must be a
  Pet type, and `name` / `photoUrls` are required. `photoUrls` shall be an array
  of string, with format as `image_url` (an extended format by quenya). Quenya
  will validate requests by its schema so here we need a valid url. Let's
  correct this:


  ```bash

  $ curl -X POST "http://localhost:4000/pet" -H  "accept: application/json" -H 
  "Content-Type: application/json" -d
  "{\"name\":\"doggie\",\"photoUrls\":[\"https://source.unsplash.com/random\"]}"
  -i

  HTTP/1.1 200 OK

  cache-control: max-age=0, private, must-revalidate

  content-length: 376

  content-type: application/json; charset=utf-8

  date: Mon, 30 Nov 2020 04:51:03 GMT

  server: Cowboy


  {"category":{"id":683,"name":"Dtlir6vgkz6UeAwK5q4._9--A.--._V_mjp.K--3T.0-e_.7-_qfRmfu"},"id":928,"name":"758Yhl_jx_Rt_fi5fz_JtE_k__JY2J__Tt9Y1","photoUrls":["https://source.unsplash.com/random/400x400","https://source.unsplash.com/random/400x400"],"status":"sold","tags":[{"id":480,"name":"iusto"},{"id":64,"name":"error"},{"id":658,"name":"modi"},{"id":313,"name":"nihil"}]}

  ```


  ### Running the tests


  Quenya generates property tests for all your API endpoints based on OAPI spec,
  so before coding your own API handler into the repo, you'd like to be more
  test-driven, try `mix test` now:


  ```bash

  $ mix test

  Compiling 42 files (.ex)

  Generated petstore app

  ....................


  Finished in 2.7 seconds

  20 properties, 2 failures

  ```


  Note these tests covers all success cases. In future, we will try to cover all
  failed cases in Quenya.


  ### How much code Quenya generated for you?


  If you have `tokei` installed, you can have a basic idea on how much code
  Quenya generated for you:


  ```bash

  $ tokei gen test

  -------------------------------------------------------------------------------
   Language            Files        Lines         Code     Comments       Blanks
  -------------------------------------------------------------------------------
   Elixir                 83         8152         7060            0         1092
  -------------------------------------------------------------------------------
   Total                  83         8152         7060            0         1092
  -------------------------------------------------------------------------------

  ```


  That's 8k LoC for the petstore spec. The more APIs you defined, the more
  Quenya will do for you. Once we have most of the parts of Quenya built, this
  number will be much bigger.


  ### What's under the hood?


  Now you have a basic feeling on what's going on. By default, Quenya will
  generate an API router based on API spec, with a convenient swagger UI. For
  each route defined in the spec, Quenya will generate a Plug for it. And a Plug
  is a pipeline which will execute in this order:


  - preprocessors: any Plug to be executed before the actual route handler.
  Here, RequestValidator Plug will help to validate request params against the
  schema.

  - handlers: handlers for the route. This is what you shall put your actual API
  logic, but for mocking purpose, Quenya generates a fake handler which meets
  the response schema. In future, Quenya will support gRPC handler which will be
  very useful if what you need is a grpc proxy (think
  [grpc-gateway](https://github.com/grpc-ecosystem/grpc-gateway)).

  - postprocessors: any Plug to be executed before sending the response. Quenya
  can generate a ResponseValidator if you need it. It's good for dev/staging
  purpose. By default it won't generate it.


  Quenya consists of 3 parts:


  1. quenya_installer: help with Quenya project generation (the CLI you just
  used).

  2. quenya_builder: a code generator to generate API implementation based on
  extended OpenAPI v3 spec. Every time you run `mix compile`, Quenya will
  rebuild the spec to code (need improvement here).

  3. quenya: a library consist of utility functions, tests and a playground to
  play with API or API stub.


  ## What's the generated code?


  If you look at the `gen` folder in the newly generated app, you'll find all
  your routes and routers are organized by `operationId`:


  ```bash

  $ tree -L 1

  .

  ├── Petstore.Gen.ApiRouter.ex

  ├── Petstore.Gen.Router.ex

  ├── addPet

  ├── createUser

  ├── createUsersWithArrayInput

  ├── createUsersWithListInput

  ├── deleteOrder

  ├── deletePet

  ├── deleteUser

  ├── findPetsByStatus

  ├── findPetsByTags

  ├── getInventory

  ├── getOrderById

  ├── getPetById

  ├── getUserByName

  ├── loginUser

  ├── logoutUser

  ├── placeOrder

  ├── updatePet

  ├── updatePetWithForm

  ├── updateUser

  └── uploadFile


  20 directories, 2 files

  ```


  The main router will serve swagger and forward the path (extracted from the
  spec) to the API router:


  ```elixir

  defmodule Petstore.Gen.Router do
    @moduledoc false
    use Plug.Router
    use Plug.ErrorHandler
    require Logger
    alias Quenya.Plug.SwaggerPlug
    plug Plug.Logger, log: :info
    plug Plug.Static, at: "/public", from: {:quenya, "priv/swagger"}

    plug :match
    plug Plug.Parsers, parsers: [:json], pass: ["application/json"], json_decoder: Jason
    plug :dispatch

    def handle_errors(conn, %{kind: _kind, reason: %{message: msg}, stack: _stack}) do
      Plug.Conn.send_resp(conn, conn.status, msg)
    end

    def handle_errors(conn, %{kind: kind, reason: reason, stack: stack}) do
      Logger.warn(
        "Internal error:\n kind: #{inspect(kind)}\n reason: #{inspect(reason)}\n stack: #{
          inspect(stack)
        }"
      )

      Plug.Conn.send_resp(conn, conn.status, "Internal server error")
    end

    get("/swagger/main.json", to: SwaggerPlug, init_opts: [app: :petstore])
    get("/swagger", to: SwaggerPlug, init_opts: [spec: "/swagger/main.json"])
    forward "/", to: Petstore.Gen.ApiRouter, init_opts: []
  end

  ```


  The API router contains code for all routes, for example:


  ```elixir

  put("/user/:username",
      to: RoutePlug,
      init_opts: [
        preprocessors: [Petstore.Gen.UpdateUser.RequestValidator],
        postprocessors: [],
        handlers: [Petstore.Gen.UpdateUser.FakeHandler]
      ]
    )
  ```


  When a `PUT /user/:username` request kicks in, it will be handled by
  `Quenya.Plug.RoutePlug`, and it will run `preprocessors`, `handlers` and
  `postprocessors` in the right order.


  ## Why Quenya?


  I've given a topic [Building next-gen APIs](docs/building-next-gen-apis.pdf)
  in 10/2020. The original idea is: why don't I build a code generator to
  generate API code that we don't need to write repeatedly? I always hold this
  tenet that everything could be generated should be generated.


  Building a high-quality HTTP API app is non-trivial. Good APIs have these
  traits:


  For API users:


  - Easy to learn and intuitive to use (the app provides full-fledged and good
  quality docs / playground)

  - Hard to misuse (API is type-safety and provides proper error responses)

  - Powerful enough to drive business requirements (flexible, performant)

  - Easy to evolve as the products grow

  - Opinionated (don't make me think)


  For developers:


  - Easy to read and maintain existing code

  - Easy to write new APIs / extend existing APIs

  - Easy to generate code based on API spec (client SDKs, test cases, and even
  server implementation)


  API implementation is just a small part of the API lifecycle, we need API
  design, mocking, testing, simulating, documentation, deployment, etc.


  ![](docs/images/api.png)


  Quenya tries to help you start with the API spec, iterate it without writing
  the code, while at the same time various teams can play with the mocking
  server based on the spec to nail down what is actually needed. We believe this
  is the best approach to improve productivity.


  ## Why not GraphQL or other solutions?


  See the above slides and you'll see why.
cyprieng/swagger-parser: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  272E:4E5C:768EF4:F22CE4:6500FB29.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
fralken/sbt-swagger-codegen: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B53:1B72:7676D8:F200AF:6500FB3A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
cdwv/oas3-api-snippet-enricher: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2700:5C39:7D30A0:FF41EB:6500FB22.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
unrelentingtech/octohipster: >
  Current [semantic](http://semver.org/) version:


  ```clojure

  [octohipster "0.2.1-SNAPSHOT"]

  ```


  # octohipster [![Build
  Status](https://travis-ci.org/myfreeweb/octohipster.png?branch=master)](https://travis-ci.org/myfreeweb/octohipster)
  [![unlicense](https://img.shields.io/badge/un-license-green.svg?style=flat)](http://unlicense.org)


  Octohipster is


  - a REST library/toolkit/microframework for Clojure

  - that allows you to build HTTP APIs

  - in a declarative
  [Webmachine](https://github.com/basho/webmachine/wiki/Overview)-like style,
  using [Liberator](https://github.com/clojure-liberator/liberator)

  - powered by [Ring](https://github.com/ring-clojure/ring); you can add [rate
  limiting](https://github.com/myfreeweb/ring-ratelimit),
  [authentication](https://github.com/cemerick/friend),
  [metrics](http://metrics-clojure.readthedocs.org/en/latest/ring.html), [URL
  rewriting](https://github.com/ebaxt/ring-rewrite) and more with just
  middleware


  It allows you to make APIs that


  - support hypermedia ([HAL+JSON](http://stateless.co/hal_specification.html),
  [Collection+JSON](http://amundsen.com/media-types/collection/) and
  Link/Link-Template HTTP headers; works with
  [Frenetic](http://dlindahl.github.com/frenetic/))

  - support multiple output formats (JSON, EDN, YAML and any custom format)

  - have [Swagger](https://github.com/wordnik/swagger-core/wiki) documentation 

  - use [JSON Schema](http://json-schema.org) for validation *and* documentation

  - have pagination


  ## Concepts


  - a **resource** is a single endpoint that accepts requests and returns
  responses

  - a **group** is a collection of resources with a single URL prefix (eg. a
  group /things contains resources /things/ and /things/{id}) and zero or more
  shared properties (usually the schema)

  - a **documenter** is a function that returns a resource which documents
  regular resources (Swagger, HAL root, etc)

  - a **mixin** is a function that is applied to multiple resources to give them
  shared behavior (eg. collection or entry behavior)

  - a **response handler** is a function that is used to encode response data to
  a particular content-type (JSON, EDN, YAML, etc.)

  - a **params handler** is a function that is used to decode incoming data from
  a particular content-type (JSON, EDN, YAML, etc.)


  ## Usage


  ```clojure

  (ns example
    (:use [octohipster core routes mixins pagination]
          [octohipster.documenters swagger schema]
          org.httpkit.server)
    (:import org.bson.types.ObjectId)
    (:require [monger.core :as mg]
              [monger.query :as mq]
              [monger.collection :as mc]
              monger.json))

  (mg/connect!)

  (mg/set-db! (mg/get-db "octohipster-example"))


  ;;;; The "model"

  ;;;;  tip: make it a separate namespace, eg. app.models.contact

  (def contact-schema
    {:id "Contact"
     :type "object"
     :properties {:name {:type "string"}
                  :phone {:type "integer"}}
     :required [:name]})

  (defn contacts-count [] (mc/count "contacts"))

  (defn contacts-all []
    (mq/with-collection "contacts"
      (mq/find {})
      (mq/skip *skip*)
      (mq/limit *limit*)))
  (defn contacts-find-by-id [x] (mc/find-map-by-id "contacts" (ObjectId. x)))

  (defn contacts-insert! [x]
    (let [id (ObjectId.)]
      (mc/insert "contacts" (assoc x :_id id))
      (mc/find-map-by-id "contacts" id)))
  (defn contacts-update! [x old] (mc/update "contacts" old x :multi false))

  (defn contacts-delete! [x] (mc/remove "contacts" x))


  ;;;; The resources

  ;; with shared pieces of documentation

  (def name-param
    {:name "name", :dataType "string", :paramType "path", :required "true", :description "The name of the contact", :allowMultiple false})

  (def body-param
    {:dataType "Contact", :paramType "body", :required true, :allowMultiple false})

  (defresource contact-collection
    :desc "Operations with multiple contacts"
    :mixins [collection-resource]
    :clinks {:item ::contact-item}
    :data-key :contacts
    :exists? (fn [ctx] {:contacts (contacts-all)})
    :post! (fn [ctx] {:item (-> ctx :request :non-query-params contacts-insert!)})
    :count (fn [req] (contacts-count))
    :doc {:get {:nickname "getContacts", :summary "Get all contacts"}
          :post {:nickname "createContact", :summary "Create a contact"}})

  (defresource contact-item
    :desc "Operations with individual contacts"
    :url "/{_id}"
    :mixins [item-resource]
    :clinks {:collection ::contact-collection}
    :data-key :contact
    :exists? (fn [ctx]
               (if-let [doc (-> ctx :request :route-params :_id contacts-find-by-id)]
                 {:contact doc}))
    :put! (fn [ctx]
            (-> ctx :request :non-query-params (contacts-update! (:contact ctx)))
            {:contact (-> ctx :request :route-params :_id contacts-find-by-id)})
    :delete! (fn [ctx]
               (-> ctx :contact contacts-delete!)
               {:contact nil})
    :doc {:get {:nickname "getContact", :summary "Get a contact", :parameters [name-param]}
          :put {:nickname "updateContact", :summary "Overwrite a contact", :parameters [name-param body-param]}
          :delete {:nickname "deleteContact", :summary "Delete a contact", :parameters [name-param]}})

  ;;;; The group

  (defgroup contact-group
    :url "/contacts"
    :add-to-resources {:schema contact-schema}  ; instead of typing the same for all resources in the group
    :resources [contact-collection contact-item])

  ;;;; The handler

  (defroutes site
    :groups [contact-group]
    :documenters [schema-doc schema-root-doc swagger-doc swagger-root-doc])

  (defn -main [] (run-server site {:port 8080}))

  ```


  Also, [API Documentation](http://myfreeweb.github.com/octohipster) is
  available.


  ## Contributing


  By participating in this project you agree to follow the [Contributor Code of
  Conduct](http://contributor-covenant.org/version/1/1/0/).


  Please take over the whole project!  

  I don't use Clojure a lot nowadays.  

  Talk to me: <greg@unrelenting.technology>.


  ## License


  This is free and unencumbered software released into the public domain.  

  For more information, please refer to the `UNLICENSE` file or
  [unlicense.org](http://unlicense.org).
dgarcia360/openapi-boilerplate: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2737:7DD3:7856A5:F5BA14:6500FB2C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
mockoon/cli: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6B:0D50:B7D29C:1745145:6500FB5B.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
RonnyPfannschmidt/prance: >
  |License| |PyPI| |Python Versions| |Package Format| |Package Status|


  |Logo|


  Prance provides parsers for `Swagger/OpenAPI

  2.0 and 3.0 <http://swagger.io/specification/>`__ API specifications in
  Python.

  It uses `openapi\_spec\_validator
  <https://github.com/p1c2u/openapi-spec-validator>`__,

  `swagger\_spec\_validator <https://github.com/Yelp/swagger_spec_validator>`__
  or

  `flex <https://github.com/pipermerriam/flex>`__

  to validate specifications, but additionally resolves `JSON

  references <https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03>`__

  in accordance with the OpenAPI spec.


  Mostly the latter involves handling non-URI references; OpenAPI is fine

  with providing relative file paths, whereas JSON references require URIs

  at this point in time.


  Usage

  =====


  Installation

  ------------


  Prance is available from PyPI, and can be installed via pip:


  .. code:: bash

      $ pip install prance

  Note that this will install the code, but additional subpackages must be
  specified

  to unlock various pieces of functionality. At minimum, a parsing backend must
  be

  installed. For the CLI functionality, you need further dependencies.


  The recommended installation installs the CLI, uses ICU and installs one
  validation

  backend:


  .. code:: bash

      $ pip install prance[osv,icu,cli]

  Make sure you have `ICU Unicode Library <http://site.icu-project.org/home>`__
  installed,

  as well as Python dev library before running the commands above. If not, use
  the

  following commands:


  .. code:: bash

      $ sudo apt-get install libicu-dev python3-dev # Ubuntu/Debian
      $ sudo dnf install libicu-devel python3-devel # Fedora


  Command Line Interface

  ----------------------


  After installing prance, a CLI is available for validating (and resolving

  external references in) specs:


  .. code:: bash

      # Validates with resolving
      $ prance validate path/to/swagger.yml

      # Validates without resolving
      $ prance validate --no-resolve path/to/swagger.yml

      # Fetch URL, validate and resolve.
      $ prance validate http://petstore.swagger.io/v2/swagger.json
      Processing "http://petstore.swagger.io/v2/swagger.json"...
       -> Resolving external references.
      Validates OK as Swagger/OpenAPI 2.0!

  Validation is not the only feature of prance. One of the side effects of

  resolving is that from a spec with references, one can create a fully resolved

  output spec. In the past, this was done via options to the ``validate``
  command,

  but now there's a specific command just for this purpose:


  .. code:: bash

      # Compile spec
      $ prance compile path/to/input.yml path/to/output.yml


  Lastly, with the arrival of OpenAPI 3.0.0, it becomes useful for tooling to

  convert older specs to the new standard. Instead of re-inventing the wheel,

  prance just provides a CLI command for passing specs to the web API of

  `swagger2openapi <https://github.com/Mermade/swagger2openapi>`__ - a working

  internet connection is therefore required for this command:


  .. code:: bash

      # Convert spec
      $ prance convert path/to/swagger.yml path/to/openapi.yml


  Code

  ----


  Most likely you have spec file and want to parse it:


  .. code:: python

      from prance import ResolvingParser
      parser = ResolvingParser('path/to/my/swagger.yaml')
      parser.specification  # contains fully resolved specs as a dict

  Prance also includes a non-resolving parser that does not follow JSON

  references, in case you prefer that.


  .. code:: python

      from prance import BaseParser
      parser = BaseParser('path/to/my/swagger.yaml')
      parser.specification  # contains specs as a dict still containing JSON references

  On Windows, the code reacts correctly if you pass posix-like paths

  (``/c:/swagger``) or if the path is relative.  If you pass absolute

  windows path (like ``c:\swagger.yaml``), you can use

  ``prance.util.fs.abspath`` to convert them.


  URLs can also be parsed:


  .. code:: python

      parser = ResolvingParser('http://petstore.swagger.io/v2/swagger.json')

  Largely, that's it. There is a whole slew of utility code that you may

  or may not find useful, too. Look at the `full documentation

  <https://prance.readthedocs.io/en/latest/#api-modules>`__ for details.



  Compatibility

  -------------


  *Python Versions*


  Version 0.16.2 is the last version supporting Python 2. It was released on

  Nov 12th, 2019. Python 2 reaches end of life at the end of 2019. If you wish

  for updates to the Python 2 supported packages, please contact the maintainer

  directly.


  Until fairly recently, we also tested with `PyPy <https://www.pypy.org/>`__.

  Unfortunately, Travis isn't very good at supporting this. So in the absence

  of spare time, they're disabled. `Issue 50
  <https://github.com/jfinkhaeuser/prance/issues/50>`__

  tracks progress on that.


  Similarly, but less critically, Python 3.4 is no longer receiving a lot of

  love from CI vendors, so automated builds on that version are no longer

  supported.


  *Backends*


  Different validation backends support different features.


  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | Backend                | Python Version | OpenAPI Version | Strict Mode |
  Notes                                                 | Available From |
  Link                                                                             
  |

  +========================+================+=================+=============+=======================================================+================+===================================================================================+

  | swagger-spec-validator | 2 and 3        | 2.0 only        | yes         |
  Slow; does not accept integer keys (see strict mode). | prance 0.1     |
  `swagger\_spec\_validator
  <https://github.com/Yelp/swagger_spec_validator>`__     |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | flex                   | 2 and 3        | 2.0 only        | n/a         |
  Fastest; unfortunately deprecated.                    | prance 0.8     | `flex
  <https://github.com/pipermerriam/flex>`__                                   |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | openapi-spec-validator | 2 and 3        | 2.0 and 3.0     | yes         |
  Slow; does not accept integer keys (see strict mode). | prance 0.11    |
  `openapi\_spec\_validator
  <https://github.com/p1c2u/openapi-spec-validator>`__    |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+


  You can select the backend in the constructor of the parser(s):


  .. code:: python

      parser = ResolvingParser('http://petstore.swagger.io/v2/swagger.json', backend = 'openapi-spec-validator')


  No backend is included in the dependencies; they are detected at run-time. If
  you install them,

  they can be used:


  .. code:: bash

      $ pip install openapi-spec-validator
      $ pip install prance
      $ prance validate --backend=openapi-spec-validator path/to/spec.yml

  *A note on flex usage:* While flex is the fastest validation backend,
  unfortunately it is no longer

  maintained and there are issues with its dependencies. For one thing, it
  depends on a version of `PyYAML`

  that contains security flaws. For another, it depends explicitly on older
  versions of `click`.


  If you use the flex subpackage, therefore, you do so at your own risk.


  *Compatibility*


  See `COMPATIBILITY.rst
  <https://github.com/jfinkhaeuser/prance/blob/master/COMPATIBILITY.rst>`__

  for a list of known issues.



  Partial Reference Resolution

  ----------------------------


  It's possible to instruct the parser to only resolve some kinds of references.

  This allows e.g. resolving references from external URLs, whilst keeping local

  references (i.e. to local files, or file internal) intact.


  .. code:: python

      from prance import ResolvingParser
      from prance.util.resolver import RESOLVE_HTTP

      parser = ResolvingParser('/path/to/spec', resolve_types = RESOLVE_HTTP)


  Multiple types can be specified by OR-ing constants together:


  .. code:: python

      from prance import ResolvingParser
      from prance.util.resolver import RESOLVE_HTTP, RESOLVE_FILES

      parser = ResolvingParser('/path/to/spec', resolve_types = RESOLVE_HTTP | RESOLVE_FILES)


  Extensions

  ----------


  Prance includes the ability to reference outside swagger definitions

  in outside Python packages. Such a package must already be importable

  (i.e. installed), and be accessible via the

  `ResourceManager API
  <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#resourcemanager-api>`__

  (some more info `here
  <https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files>`__).


  For example, you might create a package ``common_swag`` with the file

  ``base.yaml`` containing the definition


  .. code:: yaml

      definitions:
        Severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL

  In the ``setup.py`` for ``common_swag`` you would add lines such as


  .. code:: python

      packages=find_packages('src'),
      package_dir={'': 'src'},
      package_data={
          '': '*.yaml'
      }

  Then, having installed ``common_swag`` into some application, you could

  now write


  .. code:: yaml

      definitions:
        Message:
          type: object
          properties:
            severity:
              $ref: 'python://common_swag/base.yaml#/definitions/Severity'
            code:
              type: string
            summary:
              type: string
            description:
              type: string
          required:
          - severity
          - summary

  Contributing

  ============


  See `CONTRIBUTING.md
  <https://github.com/jfinkhaeuser/prance/blob/master/CONTRIBUTING.md>`__ for
  details.


  Professional support is available through `finkhaeuser consulting
  <https://finkhaeuser.de>`__.


  License

  =======


  Licensed under MIT. See the `LICENSE.txt
  <https://github.com/RonnyPfannschmidt/prance/blob/master/LICENSE.txt>`__ file
  for details.


  "Prancing unicorn" logo image Copyright (c) Jens Finkhaeuser.

  Made by `Moreven B <http://morevenb.com/>`__. Use of the logo is permitted
  under

  the `Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
  license <https://creativecommons.org/licenses/by-nc-sa/4.0/>`__.



  .. |License| image:: https://img.shields.io/pypi/l/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |PyPI| image:: https://img.shields.io/pypi/v/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Package Format| image:: https://img.shields.io/pypi/format/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Python Versions| image:: https://img.shields.io/pypi/pyversions/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Package Status| image:: https://img.shields.io/pypi/status/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Logo| image::
  https://raw.githubusercontent.com/RonnyPfannschmidt/prance/master/docs/images/prance_logo_256.png
ethereum/eth2.0-APIs: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  273E:28DF:74EEE2:EEB068:6500FB34.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
getsling/flask-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B61:266F:78E7AA:F6B483:6500FB3E.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
stoplightio/elements: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AB3:93AA:A66745:151E6C4:6500FB85.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
Himenon/openapi-typescript-code-generator: >
  # @himenon/openapi-typescript-code-generator


  [日本語](./docs/ja/README-ja.md)


  This library provides TypeScript type definitions and extracted parameters
  from OpenAPI v3.0.x compliant specifications.

  TypeScript AST is used to generate the code, which is accurately converted to
  TypeScript code.

  Since the parameters extracted from OpenAPI can be used freely, it can be used
  for automatic generation of API Client and Server Side code, load balancer
  configuration files, etc.


  ## Playground


  - [Playground](https://openapi-typescript-code-generator.netlify.app/)


  ## Installation


  ```bash

  npm  i   -D @himenon/openapi-typescript-code-generator

  # or

  pnpm i   -D @himenon/openapi-typescript-code-generator

  # or

  yarn add -D @himenon/openapi-typescript-code-generator

  ```


  ## DEMO


  - [Short
  DEMO](https://github.com/Himenon/openapi-typescript-code-generator-demo-project)

  - [DEMO: github/rest-api-client code
  generate](https://github.com/Himenon/github-rest-api-client/tree/master/source)
    - https://github.com/github/rest-api-description

  ## Usage


  The example shown here can be cloned from the [DEMO
  repository](https://github.com/Himenon/openapi-typescript-code-generator-demo-project)
  to see how it works.


  ### Generate typedef-only code


  ```ts

  import * as fs from "fs";


  import { CodeGenerator } from "@himenon/openapi-typescript-code-generator";


  const main = () => {
    const codeGenerator = new CodeGenerator("your/openapi/spec.yml");
    const code = codeGenerator.generateTypeDefinition();
    fs.writeFileSync("client.ts", code, { encoding: "utf-8" });
  };


  main();

  ```


  ### Generate code containing the API Client


  ```ts

  import * as fs from "fs";


  import { CodeGenerator } from "@himenon/openapi-typescript-code-generator";

  import * as Templates from
  "@himenon/openapi-typescript-code-generator/templates";

  import type * as Types from
  "@himenon/openapi-typescript-code-generator/types";


  const main = () => {
    const codeGenerator = new CodeGenerator("your/openapi/spec.yml");

    const apiClientGeneratorTemplate: Types.CodeGenerator.CustomGenerator<Templates.FunctionalApiClient.Option> = {
      generator: Templates.FunctionalApiClient.generator,
      option: {},
    };

    const code = codeGenerator.generateTypeDefinition([
      codeGenerator.getAdditionalTypeDefinitionCustomCodeGenerator(),
      apiClientGeneratorTemplate,
    ]);

    fs.writeFileSync("client.ts", code, { encoding: "utf-8" });
  };


  main();

  ```


  ### The variation of template code


  This library provides three types of templates


  ```ts

  import * as Templates from
  "@himenon/openapi-typescript-code-generator/templates";


  Templates.ClassApiClient.generator;

  Templates.FunctionalApiClient.generator;

  Templates.CurryingFunctionalApiClient.generator;

  ```


  #### `Templates.ClassApiClient.generator`


  We provide a class-based API client. Please inject the API client dependency
  and use it instead of `constructor`.


  ```ts

  export interface RequestArgs {
    httpMethod: HttpMethod;
    url: string;
    headers: ObjectLike | any;
    requestBody?: ObjectLike | any;
    requestBodyEncoding?: Record<string, Encoding>;
    queryParameters?: QueryParameters | undefined;
  }


  export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(requestArgs: RequestArgs, options?: RequestOption) => Promise<T>;
  }


  export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) {
      this.baseUrl = baseUrl.replace(/\/$/, "");
    }

    public async createPublisherV2<RequestContentType extends RequestContentType$createPublisherV2>(
      params: Params$createPublisherV2<RequestContentType>,
      option?: RequestOption,
    ): Promise<Response$createPublisherV2$Status$200["application/json"]> {
      const url = this.baseUrl + `/create/v2/publisher/{id}`;
      const headers = {
        "Content-Type": params.headers["Content-Type"],
        Accept: "application/json",
      };
      const requestEncodings = {
        "application/x-www-form-urlencoded": {
          color: {
            style: "form",
            explode: false,
          },
        },
        "application/json": {
          color: {
            style: "form",
            explode: false,
          },
        },
      };
      return this.apiClient.request(
        {
          httpMethod: "POST",
          url,
          headers,
          requestBody: params.requestBody,
          requestBodyEncoding: requestEncodings[params.headers["Content-Type"]],
        },
        option,
      );
    }
  }

  ```


  #### `Templates.FunctionalApiClient.generator`


  We also provide a function-based API client that replaces the class-based API
  client with `createClient`. Please inject the API client dependency and use
  it.


  ```ts

  export interface RequestArgs {
    httpMethod: HttpMethod;
    url: string;
    headers: ObjectLike | any;
    requestBody?: ObjectLike | any;
    requestBodyEncoding?: Record<string, Encoding>;
    queryParameters?: QueryParameters | undefined;
  }


  export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(requestArgs: RequestArgs, options?: RequestOption) => Promise<T>;
  }


  export const createClient = <RequestOption>(apiClient:
  ApiClient<RequestOption>, baseUrl: string) => {
    const _baseUrl = baseUrl.replace(/\/$/, "");
    return {
      createPublisherV2: <RequestContentType extends RequestContentType$createPublisherV2>(
        params: Params$createPublisherV2<RequestContentType>,
        option?: RequestOption,
      ): Promise<Response$createPublisherV2$Status$200["application/json"]> => {
        const url = _baseUrl + `/create/v2/publisher/{id}`;
        const headers = {
          "Content-Type": params.headers["Content-Type"],
          Accept: "application/json",
        };
        const requestEncodings = {
          "application/x-www-form-urlencoded": {
            color: {
              style: "form",
              explode: false,
            },
          },
          "application/json": {
            color: {
              style: "form",
              explode: false,
            },
          },
        };
        return apiClient.request(
          {
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody,
            requestBodyEncoding: requestEncodings[params.headers["Content-Type"]],
          },
          option,
        );
      },
    };
  };

  ```


  #### `Templates.CurryingFunctionalApiClient.generator`


  **Tree shaking support**


  We also provide a curried function-based API client that requires injection of
  API client for each `operationId`. The first function argument demands
  `ApiClient` while the second function argument demands `RequestArgs`. The
  `ApiClient` interface is different from the others, as it requires `uri` as an
  argument.


  This is designed for use cases that utilize **tree shaking**.


  ```ts

  export interface RequestArgs {
    httpMethod: HttpMethod;
    uri: string; // <------------------ Note that the uri
    headers: ObjectLike | any;
    requestBody?: ObjectLike | any;
    requestBodyEncoding?: Record<string, Encoding>;
    queryParameters?: QueryParameters | undefined;
  }

  export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(requestArgs: RequestArgs, options?: RequestOption) => Promise<T>;
  }

  export const createPublisherV2 =
    <RequestOption>(apiClient: ApiClient<RequestOption>) =>
    <RequestContentType extends RequestContentType$createPublisherV2>(
      params: Params$createPublisherV2<RequestContentType>,
      option?: RequestOption,
    ): Promise<Response$createPublisherV2$Status$200["application/json"]> => {
      const uri = `/create/v2/publisher/{id}`;
      const headers = {
        "Content-Type": params.headers["Content-Type"],
        Accept: "application/json",
      };
      const requestEncodings = {
        "application/x-www-form-urlencoded": {
          color: {
            style: "form",
            explode: false,
          },
        },
        "application/json": {
          color: {
            style: "form",
            explode: false,
          },
        },
      };
      return apiClient.request(
        {
          httpMethod: "POST",
          uri,
          headers,
          requestBody: params.requestBody,
          requestBodyEncoding: requestEncodings[params.headers["Content-Type"]],
        },
        option,
      );
    };
  ```


  ### Split the type definition file and the API Client implementation


  ```ts

  import * as fs from "fs";


  import { CodeGenerator } from "@himenon/openapi-typescript-code-generator";

  import * as Templates from
  "@himenon/openapi-typescript-code-generator/templates";

  import type * as Types from
  "@himenon/openapi-typescript-code-generator/types";


  const main = () => {
    const codeGenerator = new CodeGenerator("your/openapi/spec.yml");

    const apiClientGeneratorTemplate: Types.CodeGenerator.CustomGenerator<Templates.FunctionalApiClient.Option> = {
      generator: Templates.FunctionalApiClient.generator,
      option: {},
    };

    const typeDefCode = codeGenerator.generateTypeDefinition();
    const apiClientCode = codeGenerator.generateCode([
      {
        generator: () => {
          return [`import { Schemas, Responses } from "./types";`];
        },
      },
      codeGenerator.getAdditionalTypeDefinitionCustomCodeGenerator(),
      apiClientGeneratorTemplate,
    ]);

    fs.writeFileSync("types.ts", typeDefCode, { encoding: "utf-8" });
    fs.writeFileSync("apiClient.ts", apiClientCode, { encoding: "utf-8" });
  };


  main();

  ```


  ## Create a Code Template


  The examples in this section can be used in the following ways


  ```ts

  import * as fs from "fs";


  import { CodeGenerator } from "@himenon/openapi-typescript-code-generator";

  import type * as Types from
  "@himenon/openapi-typescript-code-generator/types";


  /** Write the definition of the Code Template here. */

  const customGenerator: Types.CodeGenerator.CustomGenerator<{}> = {
    /** .... */
  };


  const codeGenerator = new CodeGenerator("your/openapi/spec.yml");


  const code = codeGenerator.generateCode([customGenerator]);


  fs.writeFileSync("output/file/name", code, { encoding: "utf-8" });

  ```


  ### Define a text-based code template


  A self-defined code generator can return an array of `string`.


  ```ts

  import * as Types from "@himenon/openapi-typescript-code-generator/types";


  interface Option {
    showLog?: boolean;
  }


  const generator: Types.CodeGenerator.GenerateFunction<Option> = (payload:
  Types.CodeGenerator.Params[], option): string[] => {
    if (option && option.showLog) {
      console.log("show log message");
    }
    return ["Hello world"];
  };


  const customGenerator: Types.CodeGenerator.CustomGenerator<Option> = {
    generator: generator,
    option: {},
  };

  ```


  ### Define using the information extracted from OpenAPI Schema


  The self-defined code generator can accept parameters extracted from OpenAPI
  Schema.

  See Type definitions for available parameters.


  ```ts

  import * as Types from "@himenon/openapi-typescript-code-generator/types";


  interface Option {}


  const generator: Types.CodeGenerator.GenerateFunction<Option> = (payload:
  Types.CodeGenerator.Params[], option): string[] => {
    return payload.map(params => {
      return `function ${params.operationId}() { console.log("${params.comment}") }`;
    });
  };


  const customGenerator: Types.CodeGenerator.CustomGenerator<Option> = {
    generator: generator,
    option: {},
  };

  ```


  ### Define any Data Types Format


  Convert a Data Type with the following `format` to any type definition.


  ```yaml

  components:
    schemas:
      Binary:
        type: string
        format: binary
      IntOrString:
        type: string
        format: int-or-string
      AandB:
        type: string
        format: A-and-B
  ```


  The option to convert the Data Type Format to an arbitrary type definition is
  defined as follows.


  ```ts

  import { CodeGenerator, Option } from
  "@himenon/openapi-typescript-code-generator";

  const option: Option = {
    convertOption: {
      formatConversions: [
        {
          selector: {
            format: "binary",
          },
          output: {
            type: ["Blob"],
          },
        },
        {
          selector: {
            format: "int-or-string",
          },
          output: {
            type: ["number", "string"],
          },
        },
        {
          selector: {
            format: "A-and-B",
          },
          output: {
            type: ["A", "B"],
            multiType: "allOf",
          },
        },
      ],
    },
  };

  const codeGenerator = new CodeGenerator(inputFilename, option);

  ```


  The typedef generated by this will look like this


  ```ts

  export namespace Schemas {
    export type Binary = Blob;
    export type IntOrString = number | string;
    export type AandB = A & B;
  }

  ```


  ### Define a code template with TypeScript AST


  You can extend your code using the API of TypeScript AST.

  You can directly use the API of TypeScript AST or use the wrapper API of
  TypeScript AST provided by this library.


  ```ts

  import * as Types from "@himenon/openapi-typescript-code-generator/types";

  import { TsGenerator } from "@himenon/openapi-typescript-code-generator/api";


  interface Option {}


  const factory = TsGenerator.Factory.create();


  const generator: Types.CodeGenerator.GenerateFunction<Option> = (
    payload: Types.CodeGenerator.Params[],
    option,
  ): Types.CodeGenerator.IntermediateCode[] => {
    return payload.map(params => {
      return factory.InterfaceDeclaration.create({
        export: true,
        name: params.functionName,
        members: [],
      });
    });
  };


  const customGenerator: Types.CodeGenerator.CustomGenerator<Option> = {
    generator: generator,
    option: {},
  };

  ```


  ## API


  ### CodeGenerator


  ```ts

  import { CodeGenerator } from "@himenon/openapi-typescript-code-generator";

  ```


  #### validateOpenApiSchema


  Performs validation of the input OpenAPI Schema.


  #### generateTypeDefinition


  Generates code that converts OpenAPI Schema to TypeScript type definitions.


  #### generateCode


  You can specify several of your own code generators, and the generators can
  use parameters extracted from OpenAPI Schema.

  It internally performs the conversion of an array of `string` or
  `ts.Statement` as a string.


  For example, creating a generator in units of file divisions increases the
  reusability of the generator.


  #### getCodeGeneratorParamsArray


  It provides parameters extracted from OpenAPI Schema.


  #### getAdditionalTypeDefinitionCustomCodeGenerator


  This is a type definition file for `Templates.FunctionalApiClient`. The reason
  it is not included in `generateTypeDefinition` is that you may not use the
  type definition generated by this function depending on your usage.


  ※ The reason it is not included in `generateTypeDefinition` is that you may
  not use the type definitions generated by this function depending on your
  application.


  ### TsGenerator


  ```ts

  import { TsGenerator } from "@himenon/openapi-typescript-code-generator/api";

  ```


  This is a wrapper API for the TypeScript AST used internally.

  It is subject to change without notice.


  ### OpenApiTools


  ```ts

  import { OpenApiTools } from "@himenon/openapi-typescript-code-generator/api";

  ```


  #### Parser


  - `OpenApiTools.Parser`


  This is the API for parsing OpenAPI Schema.

  It is subject to change without notice.


  ## Restrictions


  ### Directory Restrictions for Remote Reference


  There is a limitation on the directory structure supported.

  To simplify implementation when converting directory structures to TypeScript
  namespaces, Remote References using `$ref` should only be defined in the
  following directory structures.

  If you want to extend it, please fork this repository and do it yourself.


  ```

  spec.yml // entry file

  components/
    headers/
    parameters/
    pathItems/
    requestBodies/
    responses/
    schemas/
    paths/
  ```


  ### HTTP communication restrictions for Remote Reference


  `$ref: http://....` Currently not supported. We hope to support it in the
  future.


  ## Contributions


  First of all, thank you for your interest.

  When converting from the API specification to TypeScript code, resolving
  reference relationships can be particularly challenging, and there may not be
  enough test cases.

  Adding test cases is a very powerful support for stabilizing the behavior, so
  please report any bugs you find that are behaving strangely.

  Also, the basic design concepts of this repository can be found below. If you
  want to make changes that do not follow these concepts, please fork and extend
  them.

  If your changes are in line with the design concept, please submit a pull
  request or issue!


  ## Design Concept


  - Be typedef first.

  - Typedefs should not contain any entities (file size should be 0 when
  typedefs are converted to `.js`)

  - The directory structure should be mapped to the typedef structure.

  - No dependency on any API client library.

  - Can be extended by TypeScript AST.

  - Conform to the OpenAPI specification.

  - It should be a single file to maintain portability.


  ## Development


  ```bash

  git clone https://github.com/Himenon/openapi-typescript-code-generator.git

  cd openapi-typescript-code-generator

  pnpm i

  #### your change

  pnpm build

  pnpm run test:code:gen

  pnpm run update:snapshot # if you changed

  pnpm run test

  ```


  ## Useful development tools


  TypeScript AST


  - https://ts-ast-viewer.com


  ## LICENCE


  [@himenon/openapi-typescript-code-generator](https://github.com/Himenon/typescript-codegen),
  MIT


  ### Reference implementation


  Validation Design


  - Copyright (c) 2018 Kogo Software LLC -
  [https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-schema-validator#readme](openapi-schema-validator)
subeeshcbabu-zz/swagmock: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AAD:0B2D:1E9CDD:3EBF19:6500FB88.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
hapi-swagger/hapi-swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B6C:63DC:803894:10518B1:6500FB41.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
phpowermove/swagger: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B7B:03EB:9C80E0:13E0F65:6500FB67.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
oazapfts/oazapfts: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B75:451B:AAEF38:15AE867:6500FB6C.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
GeniusesGroup/libgo: >
  # libgo   

  [![GoDoc](https://pkg.go.dev/badge/github.com/GeniusesGroup/libgo)](https://pkg.go.dev/github.com/GeniusesGroup/libgo)

  [![Go
  Report](https://goreportcard.com/badge/github.com/GeniusesGroup/libgo)](https://goreportcard.com/report/github.com/GeniusesGroup/libgo)


  An **application** developing **framework** provide ZeroOps(zero operations),
  edge computing, ... that let you develope both server and client applications
  in Go without need to think more about any fundamental requirements, Just
  develope business services and user interfaces (now just graphical interface -
  gui), build apps as OS images or OS applications and easily just run first
  server node and let it distributes by many factors with inside logics not need
  external decision makers (automating software deployment) like
  Kubernetes(K8s).


  In other word, `libgo` abbreviation of `Go language library` is a repository
  wrapper to store all implementation of GeniusesGroup and others protocols and
  algorithms to make a digital software more easily in better performance.

  You can use all packages exported APIs, go generator mechanism or by [library
  commands](#commands-cla) to access some useful APIs from command line easily.


  ## Goals

  - Provide complete framework to develope any purpose distributed application
  with **low||no code**.

  - No(minimum) dependency on any other repositories.

  - Compile an application as **Unikernel** instead of regular OSs binaries.

  - Develope high available and distributed software without any admin in any
  infrastructure layers (DevOps culture goal).

  - Let service developers act Lean and Agile in their organization.

  - [Reinvent the wheel](https://en.wikipedia.org/wiki/Reinventing_the_wheel)


  ## Not Goals

  - 


  ## Installation

  - Make project directory and suggest use your internet domain name for it.

  - initialize project version control. If you use git run `git init` or `git
  clone ${repository path}`.

  - init go project by `go mod init`

  - add `libgo` to your project dependency

  - install `libgo` with `lang_eng` or your desire language

  - initialize the project with desire domain e.g. `google.com`

  - Complete manifest in main package.

  - Add other data to main package if needed.

  - Implement protocols logic by autogenerate some codes not write them
  manually.

  - build your organization app with desire tags and target OS and hardwares.

  - run your desire version from /bin/ directory. Strongly suggest run app by
  systemd on linux or other app manager on other OS.


  or easily run the following command under your project, just replace your
  domain name.

  ```

  mkdir {domain}

  git init

  go mod init

  go get -u github.com/GeniusesGroup/libgo

  go install github.com/GeniusesGroup/libgo -tags "lang_eng"

  libgo app init -d={domain}

  libgo app build

  ```


  ## Commands (CLA)

  libgo has a the command-line client for the some generator APIs implement in
  [modules](./modules/). It provides simple access to all APIs functions to make
  an application, a GUI app, ....


  You can get list of all commands and their helps with `libgo help`. We just
  list some of important commands here that you can run them from within a Go
  module or any where in your project directory:

  - **Initialize a project:** `libgo app init -idn=[internet-domain-name]`

  - **Add new domain module:** `libgo mod new -dn=[domain-name]`

  - **Build the apps(os images):** `libgo app build`

  - **Run the app(os image):** `libgo app run`


  ## Build tags

  - **dev_mode**: first check and change `AppMode_Dev` const in protocol package
  to desire behavior

  - **tcp_listener**:


  ## Enterprise

  Contact us by [this](mailto:ict@geniuses.group) or
  [this](mailto:omidhekayati@gmail.com) if you need enterprise support for
  developing high available and distributed software. See features available in
  enterprise package:

  - Develope exclusive features in very short time

  - Bug fixing quickly

  - 


  ## Related Projects

  - [Clive is an operating system designed to work in distributed and cloud
  computing environments.](https://github.com/fjballest/clive)

  - [SQLc](sqlc.dev)

  - [EntGo](https://entgo.io/)

  - [go-zero](https://github.com/zeromicro/go-zero) e.g. (microservice system),
  (fully compatible with net/http), (middlewares are supported), ...

  or [really relativetime?? Why not monotonic
  time??](https://github.com/zeromicro/go-zero/blob/master/core/timex/relativetime.go)



  ## Code style

  [Read more here](./BEST-PRACTICE.md)
rapi-doc/RapiDoc: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A85:7EBD:A72885:1532652:6500FB6A.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
python-openapi/openapi-core: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B68:9AE9:A08AEE:1462493:6500FB71.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
python-openapi/openapi-spec-validator: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A88:5F2B:A9969F:157D8B3:6500FB72.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
spec-first/connexion: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0AA1:9AE9:A09EF8:1464DAD:6500FB81.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
GeniusesGroup/memar-go: >
  # Memar - Golang version   

  [![GoDoc](https://pkg.go.dev/badge/github.com/GeniusesGroup/memar-go)](https://pkg.go.dev/github.com/GeniusesGroup/memar-go)

  [![Go
  Report](https://goreportcard.com/badge/github.com/GeniusesGroup/memar-go)](https://goreportcard.com/report/github.com/GeniusesGroup/memar-go)


  `Memar` as a `Go language library` is a repository wrapper to store all
  implementation of [Memar](https://github.com/GeniusesGroup/memar) and others
  protocols and algorithms to make a digital software more easily in better
  performance.

  You can use all packages exported APIs, go generator mechanism or by [library
  commands](#commands-cla) to access some useful APIs from command line easily.


  If you want to get insight about memar, You MUST start reading interfaces in
  [protocol package](./protocol/).


  ## Installation

  - Make project directory and suggest use your internet domain name for it.

  - initialize project version control. If you use git run `git init` or `git
  clone ${repository path}`.

  - init go project by `go mod init`

  - add `memar` to your project dependency

  - install `memar` with `lang_eng` or your desire language

  - initialize the project with desire domain e.g. `google.com`

  - Complete manifest in main package.

  - Add other data to main package if needed.

  - Implement protocols logic by autogenerate some codes not write them
  manually.

  - build your organization app with desire tags and target OS and hardwares.

  - run your desire version from /bin/ directory. Strongly suggest run app by
  systemd on linux or other app manager on other OS.


  or easily run the following command under your project, just replace your
  domain name.

  ```

  mkdir {domain}

  git init

  go mod init

  go get -u github.com/GeniusesGroup/memar-go

  go install github.com/GeniusesGroup/memar-go -tags "lang_eng"

  memar app init -d={domain}

  memar app build

  ```


  ## Commands (CLA)

  memar has a the command-line client for the some generator APIs implement in
  [modules](./modules/). It provides simple access to all APIs functions to make
  an application, a GUI app, ....


  You can get list of all commands and their helps with `memar help`. We just
  list some of important commands here that you can run them from within a Go
  module or any where in your project directory:

  - **Initialize a project:** `memar app init -idn=[internet-domain-name]`

  - **Add new domain module:** `memar mod new -dn=[domain-name]`

  - **Build the apps(os images):** `memar app build`

  - **Run the app(os image):** `memar app run`


  ## Build tags

  - **dev_mode**: first check and change `AppMode_Dev` const in protocol package
  to desire behavior

  - **tcp_listener**:


  ## Code style

  [Read more here](./BEST-PRACTICE.md)


  ## Contribution Guide

  - [Referencing issues](https://go.dev/doc/contribute#ref_issues)
oas-tools/oas-tools: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0B66:71E4:A95601:157BFEA:6500FB64.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
abersheeran/kui: >-
  {"message":"API rate limit exceeded for 20.171.51.32. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2705:2749:788D89:F5A1D9:6500FB12.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
oas-tools/oas-generator: >-
  {"message":"API rate limit exceeded for 20.171.51.38. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  0A86:7B22:209F34:42E98E:6500FB64.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
