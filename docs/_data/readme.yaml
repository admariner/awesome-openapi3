luckymarmot/API-Flow: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:384B502:573CAF2:66148DE3.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
googleapis/gnostic: >
  [![Build
  Status](https://travis-ci.org/googleapis/gnostic.svg?branch=master)](https://travis-ci.org/googleapis/gnostic)


  # ⨁ gnostic


  This repository contains a Go command line tool which converts JSON and YAML

  [OpenAPI](https://github.com/OAI/OpenAPI-Specification) descriptions to and

  from equivalent Protocol Buffer representations.


  [Protocol Buffers](https://developers.google.com/protocol-buffers/) provide a

  language-neutral, platform-neutral, extensible mechanism for serializing

  structured data. **gnostic**'s Protocol Buffer models for the OpenAPI

  Specification can be used to generate code that includes data structures with

  explicit fields for the elements of an OpenAPI description. This makes it

  possible for developers to work with OpenAPI descriptions in type-safe ways,

  which is particularly useful in strongly-typed languages like Go and

  [Dart](https://dart.dev/).


  **gnostic** reads OpenAPI descriptions into these generated data structures,

  reports errors, resolves internal dependencies, and writes the results in a

  binary form that can be used in any language that is supported by the Protocol

  Buffer tools. A plugin interface simplifies integration with API tools written

  in a variety of different languages, and when necessary, Protocol Buffer

  OpenAPI descriptions can be reexported as JSON or YAML.


  **gnostic** compilation code and OpenAPI Protocol Buffer models are

  automatically generated from an

  [OpenAPI JSON
  Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json).

  Source code for the generator is in the [generate-gnostic](generate-gnostic)

  directory.


  ## Disclaimer


  Feedback and contributions are welcome! Until there is a 1.0 release, please

  consider this prerelease software and work in progress. To ensure stable

  builds, we request that dependent projects always refer to tagged releases of

  **gnostic**.


  ## Requirements


  **gnostic** can be run in any environment that supports
  [Go](http://golang.org)

  and the

  [Protocol Buffer Compiler](https://github.com/protocolbuffers/protobuf).


  ## Installation and Getting Started


  The following instructions are for installing **gnostic** using

  [Go modules](https://blog.golang.org/using-go-modules), supported by Go 1.11

  and later.


  1.  Get this package by downloading it with `git clone`.

          git clone https://github.com/googleapis/gnostic
          cd gnostic

  2.  Verify that you have a local installation of `protoc`. You can get protoc
      [here](https://github.com/protocolbuffers/protobuf).

  3.  Build **gnostic** with `make`. This uses
      [go generate](https://blog.golang.org/generate) to build support code
      including code generated by `protoc` and the Go protoc plugin, which is
      automatically downloaded from
      [github.com/golang/protobuf](https://github.com/golang/protobuf) by the
      [COMPILE-PROTOS.sh](COMPILE-PROTOS.sh) script. This also builds all plugins
      and associated tools in this repo.

  4.  Verify **gnostic** with `make test`. These tests are run by **gnostic**'s
      continuous integration, so you should expect them to pass for all release
      versions.

  5.  Run **gnostic**. This sample invocation creates a file in the current
      directory named `petstore.pb` that contains a binary Protocol Buffer
      description of a sample API.

              gnostic --pb-out=. examples/v2.0/json/petstore.json

  6.  You can also compile files that you specify with a URL. Here's another way
      to compile the previous example. This time we're creating `petstore.text`,
      which contains a textual representation of the Protocol Buffer description.
      This is mainly for use in testing and debugging.

              gnostic --text-out=petstore.text https://raw.githubusercontent.com/googleapis/gnostic/master/examples/v2.0/json/petstore.json

  7.  For a sample application, see apps/report. This reads a binary Protocol
      Buffer encoding created by **gnostic**.

          go install ./apps/report ## automatically installed by the top-level Makefile
          report petstore.pb

  8.  **gnostic** also supports plugins. **gnostic**'s plugin interface is
      modeled on `protoc`'s
      [plugin.proto](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto)
      and is described in [plugins/plugin.proto](plugins/plugin.proto). Several
      plugins are implemented in the `plugins` directory. Others, like
      [gnostic-grpc](https://github.com/googleapis/gnostic-grpc) and
      [gnostic-go-generator](https://github.com/googleapis/gnostic-go-generator),
      are published in their own repositories. One such plugin is
      [gnostic-vocabulary](plugins/gnostic-vocabulary), which produces a summary
      of the word usage in an APIs interfaces. You can run `gnostic-vocabulary`
      with the following:

              gnostic examples/v2.0/json/petstore.json --vocabulary_out=.

      This will produce files named `vocabulary.pb` and `vocabulary.json` in
      `examples/v2.0/json`. For the format of `vocabulary.pb`, see
      [metrics/vocabulary.proto](metrics/vocabulary.proto).

  9.  [Optional] A large part of **gnostic** is automatically-generated by the
      [generate-gnostic](generate-gnostic) tool. This uses JSON schemas to
      generate Protocol Buffer language files that describe supported API
      specification formats and Go-language files of code that will read JSON or
      YAML API descriptions into the generated protocol buffer models.
      Pre-generated versions of these files are checked into the
      [openapiv2](openapiv2), [openapiv3](openapiv3), and [discovery](discovery)
      directories. You can regenerate this code with the following:

          go install ./generate-gnostic
          generate-gnostic --v2
          generate-gnostic --v3
          generate-gnostic --discovery

  ## Copyright


  Copyright 2017-2020, Google LLC.


  ## License


  Released under the Apache 2.0 license.
Mermade/swagger2openapi: >
  # OAS-Kit


  This is the mono-repo for the following related projects


  * [swagger2openapi](packages/swagger2openapi/README.md)

  * [oas-validator](packages/oas-validator/README.md)

  * [oas-linter](packages/oas-linter/README.md)

  * [oas-resolver](packages/oas-resolver/README.md)

  * [oas-schema-walker](packages/oas-schema-walker/README.md)

  * [oas-kit-common](packages/oas-kit-common/README.md)

  * [reftools](packages/reftools/README.md)


  ## Documentation


  * [Main site](https://mermade.github.io/oas-kit)


  ## Online converter/validator


  * [OpenAPI-webconverter](https://mermade.org.uk/openapi-converter)


  ## Supported Node.js versions


  Any LTS version from 8 onwards.


  ## Development


  * clone the repository

  * `npm i` in the top level directory

  * `lerna bootstrap` or `npx lerna bootstrap`


  Please try and keep commits related to a single package or piece of
  functionality. PR in the usual way.


  ## Supporting development


  * [APIs.guru open-collective](https://opencollective.com/openapi-directory)

  * [Linode VPS referral
  link](https://www.linode.com/?r=5734be467cc501b23267cf66d451bc339042ddfa)
oasis-tcs/odata-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:24588C9:3A2797B:66148F86.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
xuzhg/OData.OpenAPI: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:7601:2194FE7:360B817:66149537.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mission-liao/pyswagger: >+
  pyswagger

  =========


  [![Build
  Status](https://travis-ci.org/mission-liao/pyswagger.svg?branch=master)](https://travis-ci.org/mission-liao/pyswagger)

  [![Coverage
  Status](https://coveralls.io/repos/mission-liao/pyswagger/badge.svg?branch=master&style=flat)](https://coveralls.io/r/mission-liao/pyswagger?branch=master)


  A python client for [Swagger](https://helloreverb.com/developers/swagger)
  enabled REST API. It wouldn't be easier to

  try Swagger REST API by [Swagger-UI](https://github.com/wordnik/swagger-ui).
  However, when it's time to **unittest**

  your API, the first option you find would be
  [Swagger-codegen](https://github.com/wordnik/swagger-codegen), but the better
  option is us.


  This project is developed after
  [swagger-py](https://github.com/digium/swagger-py), which is a nicely
  implemented one, and inspired many aspects of this project. Another project is
  [flex](https://github.com/pipermerriam/flex), which focuses on parameter
  validation, try it if you can handle other parts by yourselves. For other
  projects related to Swagger tools in python, check
  [here](https://github.com/swagger-api/swagger-spec#python).


  **pyswagger** is much easier to use (compared to swagger-codegen, you don't
  need to prepare a scala environment) and tries hard to **fully supports**
  [Swagger Spec](https://helloreverb.com/developers/swagger) in all aspects.


  - [NEWs: upcoming support for OpenAPI 3.0](docs/md/news.md)

  - [Features](README.md#features)

  - [Tutorial](README.md#tutorial)

  - [Quick Start](README.md#quick-start)

  - [Installation](README.md#installation)

  - [Reference](README.md#reference)

  - [Contributors](README.md#contributors)

  - [Contribution Guideline](README.md#contribution-guildeline)

  - [FAQ](docs/md/faq.md)

  - [Changes](CHANGES.md)


  ---------


  ## Features

  - convert Swagger Document from older version to newer one. (ex. convert from
  1.2 to 2.0)

  - support Swagger **1.2**, **2.0** on python ~~2.6~~, **2.7**, **3.3**,
  **3.5**, **3.6**

  - support YAML via [Pretty-YAML](https://github.com/mk-fg/pretty-yaml)

  - support $ref to **External Document**, multiple swagger.json will be
  organized into a group of App. And external document with self-describing
  resource is also supported (refer to
  [issue](https://github.com/swagger-api/swagger-spec/issues/219)).

  - type safe, input/output are converted to python types according to [Data
  Type](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#43-data-types)
  described in Swagger. You don't need to touch any json schema when using
  pyswagger. Limitations like **minimum/maximum** or **enum** are also checked.
  **Model inheritance** also supported.

  - provide function **App.validate** to check validity of the loaded API
  definition according to spec.

  - builtin client implementation based on various http clients in python. For
  usage of these clients, please refer to `pyswagger.tests.contrib.client` for
  details
    - [requests](https://github.com/kennethreitz/requests)
    - [tornado.httpclient.AsyncHTTPClient](http://tornado.readthedocs.org/en/latest/httpclient.html)
    - [flask.testing.FlaskClient](http://flask.pocoo.org/docs/0.10/api/#flask.testing.FlaskClient)
    - [webapp2](http://webapp2.readthedocs.io/en/latest/guide/testing.html)
  - not implemented parts, fire me a bug if you need it
    - [ ] Swagger 2.0
      - [ ] Schema.pattern
      - [ ] Scheme.patternProperties
      - [ ] Schema.readonly
      - [ ] Schema.allowEmptyValue
      - [ ] A scanner to validate schema
    - [ ] A WebSocket client
    - [ ] dump extension field

  ---------


  ## Tutorial


  - [Initialization](docs/md/tutorial/init.md)

  - [Making a Request](docs/md/tutorial/request.md)

  - [Access the Response](docs/md/tutorial/response.md)

  - [Testing a Local Server](docs/md/tutorial/local.md)

  - [Converting Document into another version](docs/md/tutorial/converter.md)

  - [Exntending Primitive Factory for user-defined
  primitives](docs/md/tutorial/extend_prim.md)

  - [Rendering Random Requests for BlackBox Testing](docs/md/tutorial/render.md)

  - [Operation MIME Support](docs/md/tutorial/mime.md)

  - [Test with Invalid Input](docs/md/tutorial/invalid.md)

  - [Load Spec from a Restricted
  Service](docs/md/tutorial/restricted_service.md)

  - [Customized Headers](docs/md/tutorial/customized_headers.md)


  ---------


  ## Quick Start


  Before running this script, please make sure
  [requests](https://github.com/kennethreitz/requests) is installed on your
  environment.


  ```python

  from pyswagger import App, Security

  from pyswagger.contrib.client.requests import Client

  from pyswagger.utils import jp_compose


  # load Swagger resource file into App object

  app = App._create_('http://petstore.swagger.io/v2/swagger.json')


  auth = Security(app)

  auth.update_with('api_key', '12312312312312312313q') # api key

  auth.update_with('petstore_auth', '12334546556521123fsfss') # oauth2


  # init swagger client

  client = Client(auth)


  # a dict is enough for representing a Model in Swagger

  pet_Tom=dict(id=1, name='Tom', photoUrls=['http://test']) 

  # a request to create a new pet

  client.request(app.op['addPet'](body=pet_Tom))


  # - access an Operation object via App.op when operationId is defined

  # - a request to get the pet back

  req, resp = app.op['getPetById'](petId=1)

  # prefer json as response

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  assert pet.name == 'Tom'


  # new ways to get Operation object corresponding to 'getPetById'.

  # 'jp_compose' stands for JSON-Pointer composition

  req, resp = app.resolve(jp_compose('/pet/{petId}',
  base='#/paths')).get(petId=1)

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  ```


  ---------


  ## Installation

  We support pip installtion.

  ```bash

  pip install pyswagger

  ```


  Additional dependencies must be prepared before firing a request. If you are
  going to access a remote/local web server, you must install
  [requests](https://github.com/kennethreitz/requests) first.

  ```bash

  pip install requests

  ```


  If you want to test a local tornado server, please make sure tornado is ready
  on your environment

  ``` bash

  pip install tornado

  ```


  We also provide native client for flask app, but to use it, flask is also
  required

  ``` bash

  pip install flask

  ```



  ---------


  ## Reference

  All exported API are described in following sections. ![A diagram about
  relations between
  components](https://docs.google.com/drawings/d/1DZiJgl4i9L038UJJp3kpwkWRvcNQktf5h-e4m96_C-k/pub?w=849&h=530)


  - [App](docs/md/ref/app.md)

  - [SwaggerClient](docs/md/ref/client.md)

  - [Security](docs/md/ref/security.md)


  ---------


  ## Contributors

  - [Marcin Goliński](https://github.com/mjgolinski)

  - [Andrey Mikhailov](https://github.com/zlovred)

  - [Telepenin Nikolay](https://github.com/prefer)

  - [WangJiannan](https://github.com/WangJiannan)


  ---------


  ## Contribution Guildeline


  #### report an issue:

  - issues can be reported
  [here](https://github.com/mission-liao/pyswagger/issues)

  - include swagger.json if possible

  - turn on logging and report with messages on console

  ```python

  import logging

  logger = logging.getLogger('pyswagger')


  formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s -
  %(message)s')


  console = logging.StreamHandler()

  console.setLevel(logging.DEBUG)

  console.setFormatter(formatter)


  logger.addHandler(console)

  logger.setLevel(logging.DEBUG)


  ... your stuff


  ```


  - describe expected behavior, or more specific, the input/output


  #### submit a PR

  - test included

  - only PR to `develop` would be accepted


  env preparation

  ```bash

  pip install -r requirement-dev.txt

  ```


  unit testing

  ```bash

  python -m pytest -s -v --cov=pyswagger --cov-config=.coveragerc
  pyswagger/tests

  ```

koumoul-dev/openapi-viewer: >-
  {"message":"API rate limit exceeded for 20.171.134.161. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  E838:281A:2C9738:5BE80C:6504EFC6.","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
contentjet/openapi-ui: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:384CA3F:56ED654:66148AFA.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
sourcey/spectacle: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:27DEDD:AAB176B:10A035EF:66149224.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Rebilly/ReDoc: >
  <div align="center">
    <img alt="ReDoc logo" src="https://raw.githubusercontent.com/Redocly/redoc/master/docs/images/redoc-logo.png" width="400px" />

    **OpenAPI/Swagger-generated API Reference Documentation**

    [![Build Status](https://travis-ci.org/Redocly/redoc.svg?branch=master)](https://travis-ci.org/Redocly/redoc) [![Coverage Status](https://coveralls.io/repos/Redocly/redoc/badge.svg?branch=master&service=github)](https://coveralls.io/github/Redocly/redoc?branch=master) [![dependencies Status](https://david-dm.org/Redocly/redoc/status.svg)](https://david-dm.org/Redocly/redoc) [![devDependencies Status](https://david-dm.org/Redocly/redoc/dev-status.svg)](https://david-dm.org/Redocly/redoc#info=devDependencies) [![npm](http://img.shields.io/npm/v/redoc.svg)](https://www.npmjs.com/package/redoc) [![License](https://img.shields.io/npm/l/redoc.svg)](https://github.com/Redocly/redoc/blob/master/LICENSE)

    [![bundle size](http://img.badgesize.io/https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js?compression=gzip&max=300000)](https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js) [![npm](https://img.shields.io/npm/dm/redoc.svg)](https://www.npmjs.com/package/redoc) [![](https://data.jsdelivr.com/v1/package/npm/redoc/badge)](https://www.jsdelivr.com/package/npm/redoc) [![Docker Build Status](https://img.shields.io/docker/build/redocly/redoc.svg)](https://hub.docker.com/r/redocly/redoc/)


  </div>


  **This is README for `2.0` version of ReDoc (React based). README for `1.x`
  version is on the branch [v1.x](https://github.com/Redocly/redoc/tree/v1.x)**



  ![ReDoc
  demo](https://raw.githubusercontent.com/Redocly/redoc/master/demo/redoc-demo.png)


  ## [Live demo](http://redocly.github.io/redoc/)


  [<img alt="Deploy to Github" src="http://i.imgur.com/YZmaqk3.png"
  height="60px">](https://github.com/Rebilly/generator-openapi-repo#generator-openapi-repo--)
  [<img alt="ReDoc as a service" src="http://i.imgur.com/edqdCv6.png"
  height="60px">](https://redoc.ly) [<img alt="Customization services"
  src="http://i.imgur.com/c4sUF7M.png"
  height="60px">](https://redoc.ly/#services)


  ## Features

  - Extremely easy deployment

  - [redoc-cli](https://github.com/Redocly/redoc/blob/master/cli/README.md) with
  ability to bundle your docs into **zero-dependency** HTML file

  - Server Side Rendering ready

  - The widest OpenAPI v2.0 features support (yes, it supports even
  `discriminator`) <br>

  ![](docs/images/discriminator-demo.gif)

  - OpenAPI 3.0 support

  - Neat **interactive** documentation for nested objects <br>

  ![](docs/images/nested-demo.gif)

  - Code samples support (via vendor extension) <br>

  ![](docs/images/code-samples-demo.gif)

  - Responsive three-panel design with menu/scrolling synchronization

  - Integrate API Introduction into side menu - ReDoc takes advantage of
  markdown headings from OpenAPI description field. It pulls them into side menu
  and also supports deep linking.

  - High-level grouping in side-menu via
  [`x-tagGroups`](docs/redoc-vendor-extensions.md#x-tagGroups) vendor extension

  - Simple integration with `create-react-app`
  ([sample](https://github.com/APIs-guru/create-react-app-redoc))

  - Branding/customizations via [`theme` option](#redoc-options-object)


  ## Roadmap
    - [x] ~~[OpenAPI v3.0 support](https://github.com/Redocly/redoc/issues/312)~~
    - [x] ~~performance optimizations~~
    - [x] ~~better navigation (menu improvements + search)~~
    - [x] ~~React rewrite~~
    - [x] ~~docs pre-rendering (performance and SEO)~~
    - [ ] ability to simple branding/styling
    - [ ] built-in API Console

  ## Releases

  **Important:** all the 2.x releases are deployed to npm and can be used via
  jsdeliver:

  - particular release, e.g. `v2.0.0-alpha.15`:
  https://cdn.jsdelivr.net/npm/redoc@2.0.0-alpha.17/bundles/redoc.standalone.js

  - `next` release:
  https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js


  Additionally, all the 1.x releases are hosted on our GitHub Pages-based CDN
  **(deprecated)**:

  - particular release, e.g. `v1.2.0`:
  https://rebilly.github.io/ReDoc/releases/v1.2.0/redoc.min.js

  - `v1.x.x` release:
  https://rebilly.github.io/ReDoc/releases/v1.x.x/redoc.min.js

  - `latest` release:
  https://rebilly.github.io/ReDoc/releases/latest/redoc.min.js - it will point
  to latest 1.x.x release since 2.x releases are not hosted on this CDN but on
  unpkg.


  ## Version Guidance

  | ReDoc Release | OpenAPI Specification |

  |:--------------|:----------------------|

  | 2.0.0-alpha.x | 3.0, 2.0              |

  | 1.19.x        | 2.0                   |

  | 1.18.x        | 2.0                   |

  | 1.17.x        | 2.0                   |


  ## Some Real-life usages

  - [Rebilly](https://rebilly.github.io/RebillyAPI)

  - [Docker Engine](https://docs.docker.com/engine/api/v1.25/)

  - [Zuora](https://www.zuora.com/developer/api-reference/)

  - [Shopify Draft Orders](https://help.shopify.com/api/draft-orders)

  - [Discourse](http://docs.discourse.org)

  - [APIs.guru](https://apis.guru/api-doc/)

  - [FastAPI](https://github.com/tiangolo/fastapi)


  ## Deployment


  ### TL;DR


  ```html

  <!DOCTYPE html>

  <html>
    <head>
      <title>ReDoc</title>
      <!-- needed for adaptive design -->
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">

      <!--
      ReDoc doesn't change outer page styles
      -->
      <style>
        body {
          margin: 0;
          padding: 0;
        }
      </style>
    </head>
    <body>
      <redoc spec-url='http://petstore.swagger.io/v2/swagger.json'></redoc>
      <script src="https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js"> </script>
    </body>
  </html>

  ```

  That's all folks!


  **IMPORTANT NOTE:** if you work with untrusted user spec, use `untrusted-spec`
  [option](#redoc-options-object) to prevent XSS security risks.


  ### 1. Install ReDoc (skip this step for CDN)

  Install using [yarn](https://yarnpkg.com):

      yarn add redoc

  or using [npm](https://docs.npmjs.com/getting-started/what-is-npm):

      npm install redoc --save

  ### 2. Reference redoc script in HTML

  For **CDN**:

  ```html

  <script src="https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js">
  </script>

  ```


  For npm:

  ```html

  <script src="node_modules/redoc/bundles/redoc.standalone.js"> </script>

  ```


  ### 3. Add `<redoc>` element to your page

  ```html

  <redoc spec-url="url/to/your/spec"></redoc>

  ```


  ### 4. Enjoy :smile:



  ## Usage as a React component


  Install peer dependencies required by ReDoc if you don't have them installed
  already:

      npm i react react-dom mobx@^4.2.0 styled-components

  Import `RedocStandalone` component from 'redoc' module:


  ```js

  import { RedocStandalone } from 'redoc';

  ```


  and use it somewhere in your component:


  ```js

  <RedocStandalone specUrl="url/to/your/spec"/>

  ```


  or


  ```js

  <RedocStandalone spec={/* spec as an object */}/>

  ```


  Also you can pass options:


  ```js

  <RedocStandalone
    specUrl="http://rebilly.github.io/RebillyAPI/openapi.json"
    options={{
      nativeScrollbars: true,
      theme: { colors: { primary: { main: '#dd5522' } } },
    }}
  />

  ```


  Here are detailed [options docs](#redoc-options-object).


  You can also specify `onLoaded` callback which will be called each time Redoc
  has been fully rendered or when error occurs (with an error as the first
  argument). *NOTE*: It may be called multiply times if you change component
  properties


  ```js

  <RedocStandalone
    specUrl="http://rebilly.github.io/RebillyAPI/openapi.json"
    onLoaded={error => {
      if (!error) {
        console.log('Yay!');
      }
    }}
  />

  ```


  [**IE11 Support Notes**](docs/usage-with-ie11.md)


  ## The Docker way


  ReDoc is available as pre-built Docker image in official [Docker Hub
  repository](https://hub.docker.com/r/redocly/redoc/). You may simply pull &
  run it:

      docker pull redocly/redoc
      docker run -p 8080:80 redocly/redoc

  Also you may rewrite some predefined environment variables defined in
  [Dockerfile](./config/docker/Dockerfile). By default ReDoc starts with demo
  Petstore spec located at `http://petstore.swagger.io/v2/swagger.json`, but you
  may change this URL using environment variable `SPEC_URL`:

      docker run -p 8080:80 -e SPEC_URL=https://api.example.com/openapi.json redocly/redoc

  ## ReDoc CLI


  [See here](https://github.com/Redocly/redoc/blob/master/cli/README.md)


  ## Configuration


  ### Security Definition location

  You can inject Security Definitions widget into any place of your
  specification `description`. Check out details
  [here](docs/security-definitions-injection.md).


  ### Swagger vendor extensions

  ReDoc makes use of the following [vendor
  extensions](https://swagger.io/specification/#specificationExtensions):

  * [`x-logo`](docs/redoc-vendor-extensions.md#x-logo) - is used to specify API
  logo

  * [`x-traitTag`](docs/redoc-vendor-extensions.md#x-traitTag) - useful for
  handling out common things like Pagination, Rate-Limits, etc

  * [`x-code-samples`](docs/redoc-vendor-extensions.md#x-code-samples) - specify
  operation code samples

  * [`x-examples`](docs/redoc-vendor-extensions.md#x-examples) - specify JSON
  example for requests

  * [`x-nullable`](docs/redoc-vendor-extensions.md#nullable) - mark schema param
  as a nullable

  * [`x-displayName`](docs/redoc-vendor-extensions.md#x-displayname) - specify
  human-friendly names for the menu categories

  * [`x-tagGroups`](docs/redoc-vendor-extensions.md#x-tagGroups) - group tags by
  categories in the side menu

  * [`x-servers`](docs/redoc-vendor-extensions.md#x-servers) - ability to
  specify different servers for API (backported from OpenAPI 3.0)

  *
  [`x-ignoredHeaderParameters`](docs/redoc-vendor-extensions.md#x-ignoredHeaderParameters)
  - ability to specify header parameter names to ignore


  ### `<redoc>` options object

  You can use all of the following options with standalone version on <redoc>
  tag by kebab-casing them, e.g. `scrollYOffset` becomes `scroll-y-offset` and
  `expandResponses` becomes `expand-responses`.


  * `untrustedSpec` - if set, the spec is considered untrusted and all
  HTML/markdown is sanitized to prevent XSS. **Disabled by default** for
  performance reasons. **Enable this option if you work with untrusted user
  data!**

  * `scrollYOffset` - If set, specifies a vertical scroll-offset. This is often
  useful when there are fixed positioned elements at the top of the page, such
  as navbars, headers etc;

  `scrollYOffset` can be specified in various ways:
    * **number**: A fixed number of pixels to be used as offset;
    * **selector**: selector of the element to be used for specifying the offset. The distance from the top of the page to the element's bottom will be used as offset;
    * **function**: A getter function. Must return a number representing the offset (in pixels);
  * `suppressWarnings` - if set, warnings are not rendered at the top of
  documentation (they still are logged to the console).

  * `lazyRendering` - _Not implemented yet_ ~~if set, enables lazy rendering
  mode in ReDoc. This mode is useful for APIs with big number of operations
  (e.g. > 50). In this mode ReDoc shows initial screen ASAP and then renders the
  rest operations asynchronously while showing progress bar on the top. Check
  out the [demo](\\redocly.github.io/redoc) for the example.~~

  * `hideHostname` - if set, the protocol and hostname is not shown in the
  operation definition.

  * `expandResponses` - specify which responses to expand by default by response
  codes. Values should be passed as comma-separated list without spaces e.g.
  `expandResponses="200,201"`. Special value `"all"` expands all responses by
  default. Be careful: this option can slow-down documentation rendering time.

  * `requiredPropsFirst` - show required properties first ordered in the same
  order as in `required` array.

  * `sortPropsAlphabetically` - sort properties alphabetically

  * `showExtensions` - show vendor extensions ("x-" fields). Extensions used by
  ReDoc are ignored. Can be boolean or an array of `string` with names of
  extensions to display

  * `noAutoAuth` - do not inject Authentication section automatically

  * `pathInMiddlePanel` - show path link and HTTP verb in the middle panel
  instead of the right one

  * `hideLoading` - do not show loading animation. Useful for small docs

  * `nativeScrollbars` - use native scrollbar for sidemenu instead of
  perfect-scroll (scrolling performance optimization for big specs)

  * `hideDownloadButton` - do not show "Download" spec button. **THIS DOESN'T
  MAKE YOUR SPEC PRIVATE**, it just hides the button.

  * `disableSearch` - disable search indexing and search box

  * `onlyRequiredInSamples` - shows only required fields in request samples.

  * `theme` - ReDoc theme. Not documented yet. For details check source code:
  [theme.ts](https://github.com/Redocly/redoc/blob/master/src/theme.ts)


  ## Advanced usage of standalone version

  Instead of adding `spec-url` attribute to the `<redoc>` element you can
  initialize ReDoc via globally exposed `Redoc` object:

  ```js

  Redoc.init(specOrSpecUrl, options, element, callback?)

  ```


  - `specOrSpecUrl` is either JSON object with specification or an URL to the
  spec in `JSON` or `YAML` format

  - `options` [options object](#redoc-options-object)

  - `element` DOM element to put ReDoc into

  - `callback` (optional) - callback to be called after Redoc has been fully
  rendered. It is also called also on errors with error as the first argument


  ```js

  Redoc.init('http://petstore.swagger.io/v2/swagger.json', {
    scrollYOffset: 50
  }, document.getElementById('redoc-container'))

  ```


  -----------

  ## Development

  see [CONTRIBUTING.md](.github/CONTRIBUTING.md)
mermade/widdershins: >
  # widdershins

  OpenAPI / Swagger / AsyncAPI / Semoasa definition to
  [Slate](https://github.com/lord/slate) /

  [Shins](https://github.com/mermade/shins) compatible markdown


  ![Build](https://img.shields.io/travis/Mermade/widdershins/master.svg)
  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://APIs.guru)
  [![Tested on Mermade
  OpenAPIs](https://img.shields.io/badge/Additional%20Specs-419-brightgreen.svg)](https://github.com/mermade/OpenAPI_specifications)

  [![Known
  Vulnerabilities](https://snyk.io/test/npm/widdershins/badge.svg)](https://snyk.io/test/npm/widdershins)


  <img src="http://mermade.github.io/widdershins/logo.png" width="247px"
  height="250px" />


  ### Widdershins *adverb*:

  * In a direction contrary to the sun's course;

  * anticlockwise;

  * helping you produce static documentation from your OpenAPI 3.0 / Swagger 2.0
  / AsyncAPI 1.x / Semoasa 0.1.0 definition


  ![Widdershins
  screenshot](https://mermade.github.io/widdershins/screenshot.png)


  ### News


  * Version 4.0 changes:
    * Now uses Promises not callbacks
    * Option to output html directly, and to ReSpec format
    * Unified JavaScript and Node.js code-samples, PHP added
    * `restrictions` column (`readOnly`/`writeOnly`) added to schema templates
    * Numerous bug fixes
  * As of v3.0.0 Widdershins no longer expands the definition of OpenAPI body
  parameters / requestBodies by default, unless they have an inline schema. You
  can restore the old behaviour by using the `--expandBody` option.

  * You may limit the depth of schema examples using the `--maxDepth` option.
  The default is 10.

  * To omit schemas entirely, please copy and customise the `main.dot` template.

  * As of v3.1.0 Widdershins includes a generated `Authorization` header in
  OpenAPI code samples. If you wish to omit this, see
  [here](/templates/openapi3/README.md).


  ### To install


  * Clone the git repository, and `npm i` to install dependencies, or

  * `npm install [-g] widdershins` to install globally


  ### Getting started


  Widdershins is generally used as a stage in an API documentation pipeline. The
  pipeline begins with an API definition in OpenAPI 3.x, OpenAPI 2.0 (fka
  Swagger), API Blueprint, AsyncAPI or Semoasa format. Widdershins converts this
  description into markdown suitable for use by a **renderer**, such as
  [Slate](https://github.com/lord/slate),
  [Shins](https://github.com/mermade/shins) or html suitable for use with
  [ReSpec](https://github.com/w3c/respec).


  If you need to create your input API definition, [this list of available
  editors](https://apis.guru/awesome-openapi3/category.html#editors) may be
  useful.


  More in-depth documentation is [available
  here](https://mermade.github.io/widdershins).


  ### Examples


  ```

  node widdershins --search false --language_tabs 'ruby:Ruby' 'python:Python'
  --summary defs/petstore3.json -o petstore3.md

  ```


  ### Options


  | CLI parameter name | JavaScript parameter name | Type | Default value |
  Description |

  | --- | --- | --- | --- | --- |

  | --customApiKeyValue | options.customApiKeyValue | `string` | `ApiKey` | Set
  a custom API key value to use as the API key in generated code examples. |

  | --expandBody | options.expandBody | `boolean` | `false` | If a method's
  requestBody parameter refers to a schema by reference (not with a inline
  schema), by default, Widdershins shows only a reference to this parameter. Set
  this option to true to expand the schema and show all properties in the
  request body. |

  | --headings | options.headings | `integer` | 2 | Set the value of the
  `headingLevel` parameter in the header so Shins knows how many heading levels
  to show in the table of contents. Currently supported only by Shins, not by
  Slate, which lacks this feature. |

  | --omitBody | options.omitBody | `boolean` | `false` | By default,
  Widdershins includes the body parameter as a row in the parameters table
  before the rows that represent the fields in the body. Set this parameter to
  omit that body parameter row. |

  | --omitHeader | options.omitHeader | `boolean` | `false` | Omit the header /
  YAML front-matter in the generated Markdown file. |

  | --resolve | options.resolve | `boolean` | `false` | Resolve external $refs,
  using the `source` parameter or the input file as the base location. |

  | --shallowSchemas | options.shallowSchemas | `boolean` | `false` | When
  referring to a schema with a $ref, don't show the full contents of the schema.
  |

  | N/A | options.source | `string` | None | The absolute location or URL of the
  source file to use as the base to resolve relative references ($refs) from;
  required if options.resolve is set to true. For CLI commands, Widdershins uses
  the input file as the base for the $refs. |

  | --summary | options.tocSummary | `boolean` | `false` | Use the operation
  summary as the TOC entry instead of the ID. |

  | --useBodyName | options.useBodyName | `boolean` | Use original param name
  for OpenAPI 2.0 body parameter. |

  | -v, --verbose | options.verbose | `boolean` | `false` | Increase verbosity.
  |

  | -h, --help | options.help | `boolean` | `false` | Show help. |

  | --version | options.version | `boolean` | `false` | Show version number. |

  | -c, --code | options.codeSamples | `boolean` | `false` | Omit generated code
  samples. |

  | --httpsnippet | options.httpsnippet | `boolean` | `false` | Use httpsnippet
  to generate code samples. |

  | -d, --discovery | options.discovery | `boolean` | `false` | Include
  schema.org WebAPI discovery data. |

  | -e, --environment | N/A | `string` | None | File to load config options
  from. |

  | -i, --includes | options.includes | `string` | None | List of files to put
  in the `include` header of the output Markdown. Processors such as Shins can
  then import the contents of these files. |

  | -l, --lang | options.lang | `boolean` | `false` | Generate the list of
  languages for code samples based on the languages used in the source file's
  `x-code-samples` examples. |

  | --language_tabs | options.language_tabs | `string` | (Differs for each input
  type) | List of language tabs for code samples using language[:label[:client]]
  format, such as `javascript:JavaScript:request`. |

  | -m, --maxDepth | options.maxDepth | `integer` | 10 | Maximum depth to show
  for schema examples. |

  | -o, --outfile | N/A | `string` | None | File to write the output markdown
  to. If left blank, Widdershins sends the output to stdout. |

  | -r, --raw | options.raw | `boolean` | `false` | Output raw schemas instead
  of example values. |

  | -s, --search | options.search | `boolean` | `true` | Set the value of the
  `search` parameter in the header so Markdown processors like Shins include
  search or not in their output. |

  | -t, --theme | options.theme | `string` | darkula | Syntax-highlighter theme
  to use. |

  | -u, --user_templates | options.user_templates | `string` | None | Directory
  to load override templates from. |

  | -x, --experimental | options.experimental | `boolean` |  | For backwards
  compatibility only; ignored. |

  | -y, --yaml | options.yaml | `boolean` | `false` | Display JSON schemas in
  YAML format. |

  |  | options.templateCallback | `function` | None | A `function` that is
  called before and after each template (JavaScript code only). |

  |  | options.toc_footers | `object` | A map of `url`s and `description`s to be
  added to the ToC footers array (JavaScript code only). |


  In Node.JS code, create an options object and pass it to the Widdershins
  `convert` function, as in this example:


  ```javascript

  const converter = require('widdershins');

  let options = {}; // defaults shown

  options.codeSamples = true;

  options.httpsnippet = false;

  //options.language_tabs = [];

  //options.language_clients = [];

  //options.loadedFrom = sourceUrl; // only needed if input document is relative

  //options.user_templates = './user_templates';

  options.templateCallback = function(templateName,stage,data) { return data };

  options.theme = 'darkula';

  options.search = true;

  options.sample = true; // set false by --raw

  options.discovery = false;

  options.includes = [];

  options.shallowSchemas = false;

  options.tocSummary = false;

  options.headings = 2;

  options.yaml = false;

  //options.resolve = false;

  //options.source = sourceUrl; // if resolve is true, must be set to full path
  or URL of the input document

  converter.convert(apiObj,options)

  .then(str => {
    // str contains the converted markdown
  })

  .catch(err => {
    console.error(err);
  });

  ```


  To only include a subset of the pre-defined language-tabs, or to rename their
  display-names, you can override the `options.language_tabs`:


  ```javascript

  options.language_tabs = [{ 'go': 'Go' }, { 'http': 'HTTP' }, { 'javascript':
  'JavaScript' }, { 'javascript--node': 'Node.JS' }, { 'python': 'Python' }, {
  'ruby': 'Ruby' }];

  ```


  The `--environment` option specifies a JSON or YAML-formatted `options`
  object, for example:


  ```json

  {
    "language_tabs": [{ "go": "Go" }, { "http": "HTTP" }, { "javascript": "JavaScript" }, { "javascript--node": "Node.JS" }, { "python": "Python" }, { "ruby": "Ruby" }],
    "verbose": true,
    "tagGroups": [
      {
        "title": "Companies",
        "tags": ["companies"]
      },
      {
        "title": "Billing",
        "tags": ["invoice-create", "invoice-close", "invoice-delete"]
      }
    ]
  }

  ```


  You can also use the environment file to group OAS/Swagger tagged paths
  together to create a more elegant table of contents, and overall page
  structure.


  If you need to support a version of Slate \<v1.5.0 (or a renderer which also
  doesn't support display-names for language-tabs, such as `node-slate`,
  `slate-node` or `whiteboard`), you can use the `--environment` option with the
  included `whiteboard_env.json` file to simply achieve this.


  If you are using the `httpsnippet` option to generate code samples, you can
  specify the client library used to perform the requests for each language by
  overriding the `options.language_clients`:


  ```javascript

  options.language_clients = [{ 'shell': 'curl' }, { 'node': 'request' }, {
  'java': 'unirest' }];

  ```


  If the language name differs between the markdown name required to syntax
  highlight and the httpsnippet required target, both can be specified in the
  form `markdown--target`.


  To see the list of languages and clients supported by httpsnippet, [click
  here](https://github.com/Kong/httpsnippet/tree/master/src/targets).


  The `loadedFrom` option is only needed where the OpenAPI / Swagger definition
  does not specify a host, and (as per the OpenAPI
  [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields))
  the API endpoint is deemed to be based on the source URL

  the definition was loaded from.


  To see the list of highlight-js syntax highlighting themes, [click
  here](https://highlightjs.org/static/demo/).


  Schema.org WebAPI discovery data is included if the `discovery` option above
  is set `true`. See the W3C [WebAPI Discovery Community
  Group](https://www.w3.org/community/web-api-discovery/) for more information.


  ## Language tabs


  Widdershins supports the `x-code-samples`
  [vendor-extension](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md#operation-object-vendor-extensions)
  to completely customise your documentation. Alternatively, you can edit the
  default code-samples in the `templates` sub-directory, or override them using
  the `user_templates` option to specify a directory containing your templates.


  Widdershins supports the use of multiple language tabs with the same language
  (i.e. plain Javascript and Node.Js). To use this support you must be using
  Slate (or one of its ports compatible with) version 1.5.0 or higher.
  [Shins](https://github.com/mermade/shins) versions track Slate version
  numbers.


  ## Templates


  By default, Widdershins uses the templates in its `templates/` folder to
  generate the Markdown output. To customize the templates, copy some or all of
  them to a folder and pass their location to the `user_templates` parameter.


  The templates include `.dot` templates and `.def` partials. To override a
  `.dot` template, you must copy it and the child `.def` partials that the
  template references. Similarly, to override a `.def` partial, you must also
  copy the parent `.dot` template. For OpenAPI 3, the primary template is
  `main.dot` and its main child partials are `parameters.def`, `responses.def`,
  and `callbacks.def`.


  This means that it is usually easiest to copy all `.dot` and `.def` files to
  your user templates directory so you don't skip a template or partial. To
  bring in changes from Widdershins updates, you can use a visual `diff` tool
  which can run across two directories, such as [Meld](http://meldmerge.org/) or
  [WinMerge](http://winmerge.org).


  ### Template syntax


  Templates are compiled with [doT.js](https://github.com/olado/doT#readme).


  Templates have access to a `data` object with a range of properties based on
  the document context. For information about the parameters, see the README
  file for the appropriate templates:


  * [Swagger 2.0 / OpenAPI 3.0.x template
  parameters](/templates/openapi3/README.md)

  * [AsyncAPI 1.x template parameters](/templates/asyncapi1/README.md)

  * [Semoasa 0.1.0 template parameters](/templates/semoasa/README.md)


  To print the value of a parameter or variable in a template, use the code
  `{{=parameterName}}`. For example, to print the title of an OpenAPI 3 spec
  (from its `info.title` field), use the code `{{=data.api.info.title}}`.


  To loop through values in an array, use the code `{{~ arrayName
  :tempVariable}}` to start the loop and the code `{{~}}` to close the loop. For
  example, the OpenAPI 3 partial `parameters.def` uses this code to create a
  table of the parameters in an operation:

  ```

  |Name|In|Type|Required|Description|

  |---|---|---|---|---|

  {{~ data.parameters
  :p}}|{{=p.name}}|{{=p.in}}|{{=p.safeType}}|{{=p.required}}|{{=p.shortDesc ||
  'none'}}|

  {{~}}

  ```


  For if/then logic, use the code `{{? booleanExpression}}` to start the code
  block and the code `{{?}}` to close the block. For example, the OpenAPI 3
  `main.dot` template calls the `security.def` partial to show information about
  the security schemes if the OpenAPI spec includes a `securitySchemes` section:

  ```

  {{? data.api.components && data.api.components.securitySchemes }}

  {{#def.security}}

  {{?}}

  ```


  You can run arbitrary JavaScript within a template by inserting a code block
  within curly braces. For example, this code creates a variable and references
  it with normal doT.js syntax later in the template:

  ```

  {{ {

  let message = "Hello!";

  } }}


  {{=message}}

  ```


  ### Template callbacks


  The `templateCallback` parameter points to a function that Widdershins calls
  before and after each template runs. The callback function receives a `data`
  object that contains the spec that Widdershins is processing; the function
  must return this object. You can use callback functions only if you are
  calling Widdershins from JavaScript code, not from the command line.


  Widdershins passes these variables to the callback function:

  - `templateName`: The name of the template, such as `main`.

  - `stage`: Whether Widdershins is calling the callback function before (`pre`)
  or after (`post`) the template.

  - `data`: An object that contains the data that Widdershins is processing. You
  can mutate the `data` object in any way you see fit, but the function must
  return it whether it changes it or not. Content that you put in the
  `data.append` property is appended to the current output stream.


  For example, this JavaScript code prints the name of the template and the
  processing stage in the output Markdown:

  ```javascript

  'use strict';


  const converter = require('widdershins');

  const fs = require('fs');


  let options = {};

  options.templateCallback = myCallBackFunction;


  function myCallBackFunction(templateName, stage, data) {
    let statusString = "Template name: " + templateName + "\n";
    statusString += "Stage: " + stage + "\n";
    data.append = statusString;
    return data;
  }


  const apiObj = JSON.parse(fs.readFileSync('defs/petstore3.json'));


  converter.convert(apiObj, options)

  .then(str => {
    fs.writeFileSync('petstore3Output.md', str, 'utf8');
  });

  ```


  ## Tests


  To run a test-suite:


  ```

  node testRunner {path-to-APIs}

  ```


  The test harness currently expects `.yaml` or `.json` files and has been
  tested against


  * [APIs.guru](https://github.com/APIs-guru/OpenAPI-directory)

  * [Mermade OpenAPI definitions
  collection](https://github.com/mermade/OpenAPI-definitions)


  ### Comparison between this and other OpenAPI / Swagger to Slate tools


  [Blog
  posting](https://dev.to/mikeralphson/comparison-of-various-openapiswagger-to-slate-conversion-tools)
  by the author of Widdershins.


  ### Acknowledgements


  * [@latgeek](https://github.com/LatGeek) for the logo.

  * [@vfernandestoptal](https://github.com/vfernandestoptal) for the httpsnippet
  support.


  ### Widdershins in the wild


  Please feel free to add a link to your API documentation here.


  * [GOV.UK Content API
  v1.0.0](https://content-api.publishing.service.gov.uk/reference.html)

  * [GOV UK Digital Marketplace API
  v1.0.0](https://alphagov.github.io/digitalmarketplace-api-docs/#digital-marketplace-api-v1-0-0)

  * [Capital One API](https://www.capitalone.co.uk/developer/api/)

  * [Cognite Data API](http://doc.cognitedata.com/)

  * [SpeckleWorks API](https://speckleworks.github.io/SpeckleSpecs)

  * [Bank by API](https://tbicr.github.io/bank-api/bank-api.html)

  * [Open EO
  API](https://open-eo.github.io/openeo-api-poc/apireference/index.html)

  * [Split Payments API](http://docs.split.cash/)

  * [LeApp daemon API](https://leapp-to.github.io/shins/index.html)

  * [Shutterstock API](https://api-reference.shutterstock.com/)

  * [Shotstack Video Editing API](https://shotstack.io/docs/api/index.html)


  ### Widdershins and Shins


  * `Widdershins` works well with Slate, but for a solely Node.js-based
  experience, why not try the [Shins](https://github.com/mermade/shins) port?
Rebilly/generator-openapi-repo: "# create-openapi-repo\n\n[![NPM version][npm-image]][npm-url] [![Dependency Status][daviddm-image]][daviddm-url]\n\n> Generate an organized multi-file OpenAPI repository.\n\n<center>\n\n<img src=\"./logo.png\" width=\"500px\"/>\n\n</center>\n\n## Who?\nYou! Hello.  Do you need to write or contribute to an OpenAPI definition?  If so, read on...\n\n## What?\nWe recommend a docs-like-code approach to OpenAPI definitions:\n- Write it using your favorite text-editor or IDE (we love VSCode).\n- Organize it into multiple files and folders to make it easy to navigate.\n- Store it using source control (such as GitHub).\n- Continuously validate it using our free [openapi-cli tool](https://github.com/redocly/openapi-cli) or our free continuous validation service (coming soon).\n- Bundle it (for a smaller footprint to use in other tools or for tools that do not support a multi-file format).\n\n## Why?\nThere are a few advantages in hosting your API definition on GitHub:\n - Community engagement (PR's and issues -- if you have a public repo)\n - Advertisment in the GitHub community\n - Hosting on GitHub pages (perfect uptime, CDN, Jekyll, custom domains with CNAME)\n - Revision history, branching, CI\n - Review and approval workflows using Pull Requests\n - Fast on-boarding time (developers and tech writers know how to use GitHub :smile:)\n - Fully compatible with Redocly API Reference too\n\n There are also some advantages to a multi-file YAML format OpenAPI definition:\n - Reuse schema objects to keep things DRY (don't repeat yourself) \n - Smaller diffs compared to JSON (especially for markdown descriptions)\n - Easier to navigate\n - Easier to edit with confidence\n\n## Features\nThis generator helps to create a GitHub repo with the following features:\n - Split a big (or small) OpenAPI definition into smaller files organized into folders\n - Bundle it into a single file for deployment\n - Continuous integration/deployment on Travis or Redocly Workflows\n - Code samples as separate files\n - Automate deployment of your OpenAPI definition and docs\n - OpenAPI definition is validated after each commit\n - Live editing in your editor of choice :heart_eyes:\n\n## Structure\n\nYou will have a structure similar to this:\n```\n    ├── .redocly.yaml\n    ├── LICENSE\n    ├── README.md\n    ├── docs\n    │\_\_ ├── favicon.png\n    │\_\_ └── index.html\n    ├── openapi\n    │\_\_ ├── README.md\n    │\_\_ ├── code_samples\n    │\_\_ │\_\_ ├── C#\n    │\_\_ │\_\_ │\_\_ └── echo\n    │\_\_ │\_\_ │\_\_     └── post.cs\n    │\_\_ │\_\_ ├── PHP\n    │\_\_ │\_\_ │\_\_ └── echo\n    │\_\_ │\_\_ │\_\_     └── post.php\n    │\_\_ │\_\_ └── README.md\n    │\_\_ ├── components\n    │\_\_ │\_\_ └── README.md\n    │\_\_ └── paths\n    │\_\_     └── README.md\n    └── package.json\n```\n\nHowever, you can adjust it to any structure you prefer.\n\nThe `openapi` folder is where your OpenAPI definition will live.  Inside there, and the sub-folders, there are `README.md` files to help guide you further. This is also where your entrypoint `openapi.yaml` will live.\n\nThe `components` folder is where you will organize sub-folders such as `schema` to define your schema.\n\nThe `paths` folder is where you will organize your paths. There will be a 'README.md' file in there with suggestions for how to organize it into specially named files (or folders) that use an `@` in place of a `/` (because files cannot have a `/` character in them).  You will also be able to use path parameters by wrapping them in curly braces `{example}`.\n\nThe `.redocly.yaml` file is a universal configuration for various Redocly tools including the lint tool and reference doc engine.\n\n## Commands\n\nThe generated repository includes installing a dependency for our `openapi-cli` tool which supports commands such as `validate`, `bundle`, and more.  There are scripted shortcuts defined in the repository's `package.json`.  \n\n\n## Examples of generated repositories\n- https://github.com/Rebilly/RebillyAPI\n- https://github.com/thingful/openapi-spec\n- https://github.com/TwineHealth/TwineDeveloperDocs\n\n## How to generate your repository\n\nWe assume you already have [node.js](https://nodejs.org/) installed.\n\n- Install `create-openapi-repo` globally:\n```bash\nnpm install -g create-openapi-repo\n```\nor use [`npx`](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b):\n\nWe'll use `npx` in this example.  However, remove `npx` if you installed it globally.\n\n```bash\nnpx create-openapi-repo\n```\n\nYou will be presented with some questions. You can create a new definition or use an existing definition to initialize your project.\n\nPlease note, if you do start a new one, remember to [create a GitHub repo](https://help.github.com/articles/create-a-repo/#create-a-new-repository-on-github) where your OpenAPI definition will live.\n\nIf you use the prior version of this generated repository, please read the following upgrade instructions.\n\n#### Upgrading from a prior version\n\nMigrate your repository from a previous structure of OpenAPI repo to this newer structure with our migration tool. \n\nRun this in the root folder of your repo.\n\n```bash\nnpx create-openapi-repo --migrate-2-3\n```\n\nNote: the migration tool does not migrate plugins automatically. You would need to manually add them to the `transformers` folder. \n\n## Support\n\nThank you for wanting to support us. Here are some ideas how to support us:\n\n* Star us\n* Tell a friend or colleague about us (or Tweet about us)\n* Write an article about it (and let us know) -- open an issue to let us know, with the link.\n* Consider our commercial products if are looking for automation to ease the docs-like code workflow, hosting along with conveniences like custom domains, access controls and previews, API reference documentation, or a full developer portal:  https://redoc.ly\n\n[npm-image]: https://badge.fury.io/js/generator-openapi-repo.svg\n[npm-url]: https://npmjs.org/package/generator-openapi-repo\n[daviddm-image]: https://david-dm.org/Rebilly/generator-openapi-repo.svg?theme=shields.io\n[daviddm-url]: https://david-dm.org/Rebilly/generator-openapi-repo\n"
temando/open-api-renderer: >
  # Lincoln


  <img src='assets/lincoln-logo-white.png' alt='Lincoln' height="96" width="96"
  />


  [![NPM](https://img.shields.io/npm/v/react-lincoln.svg)](https://npmjs.org/packages/react-lincoln/)

  [![Travis
  CI](https://img.shields.io/travis/temando/open-api-renderer.svg)](https://travis-ci.org/temando/open-api-renderer)

  [![MIT
  License](https://img.shields.io/github/license/temando/open-api-renderer.svg)](https://en.wikipedia.org/wiki/MIT_License)

  [![JavaScript Style
  Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)


  Meet Lincoln, a [React](https://facebook.github.io/react/) component for
  rendering [OpenAPI](https://www.openapis.org) documents. The project is
  tracking against [v3.0.0](docs/open-api-v3-support.md) of the OpenAPI
  specification.


  Lincoln aims to support evergreen browsers, such as Chrome, Firefox, Safari
  and IE11+. It is responsive and should be usable on most modern devices.


  [Demo](https://temando.github.io/open-api-renderer/demo/?url=https://temando.github.io/open-api-renderer/petstore-open-api-v3.0.0-RC2.json)


  ## Installation


  ```sh

  npm install --save react react-dom react-lincoln

  ```


  ## Usage


  To use Lincoln in your React project:


  ```js

  import React from 'react'

  import ReactDOM from 'react-dom'

  import Lincoln from 'react-lincoln'


  ReactDOM.render(
    <Lincoln definitionUrl='https://temando.github.io/open-api-renderer/petstore-open-api-v3.0.0-RC2.json' />,
    document.body
  )

  ```


  Alternatively, you can pass the contents of the definition directly to
  Lincoln:


  ```js

  import React from 'react'

  import ReactDOM from 'react-dom'

  import Lincoln from 'react-lincoln'

  import definition from './myApi.yml'


  ReactDOM.render(<Lincoln definition={definition} />, document.body)

  ```


  ## Configuration


  The following configuration options are available:


  | property                        | required | type    |
  description                                                                                                                                                                                                                        
  |

  | ------------------------------- | -------- | ------- |
  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  |

  | `definitionUrl` or `definition` | ✔        | string  | CORS-enabled URL to,
  or contents of, OpenAPI v3 document to render. Supports JSON or
  YAML.                                                                                                                                         
  |

  | `navSort`                       |          | enum    | This property applies
  when your definition uses `tags`. Valid values are `alpha` which sorts by HTTP
  method, then path or `false`, which will display paths as defined. Defaults to
  `false`.                                        |

  | `validate`                      |          | boolean | If `true`, uses
  [Mermade](https://openapi-converter.herokuapp.com/) to validate definition.
  Defaults to
  `false`.                                                                                                                   
  |

  | `initialSchemaTreeDepth`        |          | number  | The initial opened
  tree depth for schema visualiser when first rendered. This is useful when the
  schema's actual contents is a couple of levels deep, and you want to expand
  the tree to the contents automatically. Defaults to 0. |

  | `navigationMethodDisplayType`   |          | string  | Regulates how the
  navigation items are rendered - path only, summary only, or both. The possible
  values are `summary` (default), `path`, or `all`. In case of any other value
  only the summary is rendered.                         |


  ## Philosophy


  While this project is currently focused on visualising OpenAPI V3
  specifications, it is architected in such a way that the React components deal
  with a `UIReadySchema`, which is a generic specification (admittedly heavily
  based on OpenAPI V3).


  The dream is that this renderer could visualise other formats by introducing
  new parsers which transform documents into the common `UIReadySchema` format.
  This approach allows us to build something sustainable and scalable, where the
  community can help contribute new parsers (among other things!) as required.


  The project is definitely in its infancy and we are not ready for that yet,
  but we hope by sharing this vision early, others can help make it a reality.
  For contributing information, see [CONTRIBUTING.md](CONTRIBUTING.md).


  ## Credit


  - The [ReDoc](https://github.com/Rebilly/ReDoc) project inspired Lincoln. If
  you're looking for an alternative renderer, give ReDoc a try!

  - [swagger2openapi](https://github.com/mermade/swagger2openapi) which Lincoln
  uses to validate definitions.


  ## Maintainers


  Lincoln is an open source project from [Temando](http://temando.com/)'s
  Developer Experience team. Temando connects carriers with retailers and
  retailers to people. The Temando Platform combines shipping experiences,
  multi-carrier connectivity and lightning fast fulfillment in one solution. If
  this sounds like fun, [work with us](http://temando.com/en/about/careers)!
RepreZen/KaiZen-OpenAPI-Editor: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD4268F:1269A5E7:66148878.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
swagger-api/swagger-editor: "# <img src=\"https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SWE-logo-clr.png\" height=\"80\">\n[![NPM version](https://badge.fury.io/js/swagger-editor.svg)](http://badge.fury.io/js/swagger-editor)\n[![Build Status](https://jenkins.swagger.io/buildStatus/icon?job=oss-swagger-editor-master)](https://jenkins.swagger.io/job/oss-swagger-editor-master/)\n[![Code Climate](https://codeclimate.com/github/swagger-api/swagger-editor/badges/gpa.svg)](https://codeclimate.com/github/swagger-api/swagger-editor)\n[![Build Status](https://jenkins.swagger.io/view/OSS%20-%20JavaScript/job/oss-swagger-editor-master/badge/icon?subject=jenkins%20build)](https://jenkins.swagger.io/view/OSS%20-%20JavaScript/job/oss-swagger-editor-master/)\n\n**⏰️ Looking for the next generation version of Swagger Editor?**\n\nSwaggerEditor is now released under two major release channels:\n\n1. [SwaggerEditor@4](https://github.com/swagger-api/swagger-editor/releases?q=v4&expanded=true) - released from [master](https://github.com/swagger-api/swagger-editor/tree/master) branch and deployed at https://editor.swagger.io/\n2. [SwaggerEditor@5](https://github.com/swagger-api/swagger-editor/releases?q=v5&expanded=true) - released from [next](https://github.com/swagger-api/swagger-editor/tree/next) branch and deployed at https://editor-next.swagger.io/\n\nOnly **SwaggerEditor@5** supports [OpenAPI 3.1.0](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md). \nSwaggerEditor@4 will not receive OpenAPI 3.1.0 support and is considered legacy at this point.\nThe plan is to continually migrate fully to SwaggerEditor@5 and deprecate the SwaggerEditor@4 in the future.\n\n---\n\n**\U0001F570️ Looking for the older version of Swagger Editor?** Refer to the [*2.x*](https://github.com/swagger-api/swagger-editor/tree/2.x) or [*3.x*](https://github.com/swagger-api/swagger-editor/tree/3.x) branches.\n\n---\n\nSwagger Editor lets you edit **OpenAPI API definitions** ([OpenAPI 2.0](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md) and [OpenAPI 3.0.3](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md)) \nin JSON or YAML format inside your browser and to preview documentations in real time.\nValid OpenAPI definitions can then be generated and used with the full Swagger tooling (code generation, documentation, etc).\n\nAs a brand-new version, written from the ground up, there are some known issues and unimplemented features. Check out the [Known Issues](#known-issues) section for more details.\n\nThis repository publishes to two different NPM modules:\n\n* [swagger-editor](https://www.npmjs.com/package/swagger-editor) is a traditional npm module intended for use in single-page applications that are capable of resolving dependencies (via Webpack, Browserify, etc).\n* [swagger-editor-dist](https://www.npmjs.com/package/swagger-editor-dist) is a dependency-free module that includes everything you need to serve Swagger Editor in a server-side project, or a web project that can't resolve npm module dependencies.\n\nIf you're building a single-page application, using `swagger-editor` is strongly recommended, since `swagger-editor-dist` is significantly larger.\n\n## Helpful scripts\n\nAny of the scripts below can be run by typing `npm run <script name>` in the project's root directory.\n\n### Developing\nScript name | Description\n--- | ---\n`dev` | Spawn a hot-reloading dev server on port 3200.\n`deps-check` | Generate a size and licensing report on Swagger Editors's dependencies.\n`lint` | Report ESLint style errors and warnings.\n`lint-errors` | Report ESLint style errors, without warnings.\n`lint-fix` | Attempt to fix style errors automatically.\n`watch` | Rebuild the core files in `/dist` when the source code changes. Useful for `npm link`.\n\n### Building\nScript name | Description\n--- | ---\n`build` | Build a new set of JS and CSS assets, and output them to `/dist`.\n`build:bundle` | Build `swagger-editor-bundle.js` only (commonJS).\n`build:core` | Build `swagger-editor.(js\\|css)` only (commonJS).\n`build:standalone` | Build `swagger-editor-standalone-preset.js` only (commonJS).\n`build:stylesheets` | Build `swagger-editor.css` only.\n`build:es:bundle` | Build `swagger-editor-es-bundle.js` only (es2015).\n`build:es:bundle:core` | Build `swagger-editor-es-bundle-core.js` only (es2015).\n\n### Testing\nScript name | Description\n--- | ---\n`test` | Run unit tests in Node, run Cypress end-to-end tests, and run ESLint in errors-only mode.\n`test:unit-mocha` | Run Mocha-based unit tests in Node.\n`test:unit-jest` | Run Jest-based unit tests in Node.\n`e2e` | Run end-to-end browser tests with Cypress.\n`lint` | Run ESLint test\n`test:artifact` | Run list of bundle artifact tests in Jest\n`test:artifact:umd:bundle` | Run unit test that confirms `swagger-editor-bundle` exports as a Function\n`test:artifact:es:bundle` | Run unit test that confirms `swagger-editor-es-bundle` exports as a Function\n`test:artifact:es:bundle:core` | Run unit test that confirms `swagger-editor-es-bundle-core` exports as a Function\n\n\n## Running locally\n\n### Prerequisites\n\n- git, any version\n- **Node.js >=20.3.0** and **npm >=9.6.7** are the minimum required versions that this repo runs on, but we always recommend using the latest version of Node.js.\n\n```shell\n $ npm i --legacy-peer-deps\n```\n\nIf you have Node.js and npm installed, you can run `npm start` to spin up a static server.\n\nOtherwise, you can open `index.html` directly from your filesystem in your browser.\n\nIf you'd like to make code changes to Swagger Editor, you can start up a Webpack hot-reloading dev server via `npm run dev`.\n\n##### Browser support\n\nSwagger Editor works in the latest versions of Chrome, Safari, Firefox, and Edge.\n\n### Known Issues\n\nTo help with the migration, here are the currently known issues with 3.X. This list will update regularly, and will not include features that were not implemented in previous versions.\n\n- Everything listed in [Swagger UI's Known Issues](https://github.com/swagger-api/swagger-ui/blob/master/README.md#known-issues).\n- The integration with the codegen is still missing.\n\n## Docker\n\n### Running the image from DockerHub\nThere is a docker image published in [DockerHub](https://hub.docker.com/r/swaggerapi/swagger-editor/).\n\nTo use this, run the following:\n\n```\ndocker pull swaggerapi/swagger-editor\ndocker run -d -p 80:8080 swaggerapi/swagger-editor\n```\n\nThis will run Swagger Editor (in detached mode) on port 80 on your machine, so you can open it by navigating to `http://localhost` in your browser.  \n\n* You can provide a URL pointing to an API definition (may not be available if some security policies such as CSP or CORS are enforced):\n\n```\ndocker run -d -p 80:8080 -e URL=\"https://petstore3.swagger.io/api/v3/openapi.json\" swaggerapi/swagger-editor\n```\n\n* You can provide your own `json` or `yaml` definition file from your local host:\n\n```\ndocker run -d -p 80:8080 -v $(pwd):/tmp -e SWAGGER_FILE=/tmp/swagger.json swaggerapi/swagger-editor\n```\n\n**Note:** When both `URL` and `SWAGGER_FILE` environment variables are set, `URL` has priority and `SWAGGER_FILE` is ignored.\n\n* You can specify a different base url via `BASE_URL` variable for accessing the application - for example if you want the application to be available at `http://localhost/swagger-editor/`:\n\n```\ndocker run -d -p 80:8080 -e BASE_URL=/swagger-editor swaggerapi/swagger-editor\n```\n\n* You can specify a different port via `PORT` variable for accessing the application, default is `8080`.\n\n```\ndocker run -d -p 80:80 -e PORT=80 swaggerapi/swagger-editor\n```\n\nYou can also customize the different endpoints used by the Swagger Editor with the following environment variables. For instance, this can be useful if you have your own Swagger generator server:\n\nEnvironment variable | Default value\n--- | ---\n`URL_SWAGGER2_GENERATOR` | `https://generator.swagger.io/api/swagger.json`\n`URL_OAS3_GENERATOR` | `https://generator3.swagger.io/openapi.json`\n`URL_SWAGGER2_CONVERTER` | `https://converter.swagger.io/api/convert`\n\nIf you want to run the Swagger Editor locally without the Codegen features (Generate Server and Generate Client) you can set the above environment variables to `null` (`URL_SWAGGER2_CONVERTER=null`).\n\n### Building and running an image locally\n\nTo build and run a docker image with the code checked out on your machine, run the following from the root directory of the project:\n\n```\n# Install npm packages (if needed)\nnpm install\n\n# Build the app\nnpm run build\n\n# Build an image\ndocker build -t swagger-editor .\n\n# Run the container\ndocker run -d -p 80:8080 swagger-editor\n```\n\nYou can then view the app by navigating to `http://localhost` in your browser.\n\n## Documentation\n\n* [Importing your OpenAPI document](docs/import.md)\n\n* [Contributing](https://github.com/swagger-api/.github/blob/master/CONTRIBUTING.md)\n\n### Using older version of React\n\n> [!IMPORTANT]\n> By older versions we specifically refer to `React >=17 <18`.\n\nBy default [swagger-editor@5](https://www.npmjs.com/package/swagger-editor) npm package comes with latest version of [React@18](https://react.dev/blog/2022/03/29/react-v18).\nIt's possible to use _swagger-editor@5_ npm package with older version of React.\n\nLet's say my application integrates with _swagger-editor@5_ npm package and uses [React@17.0.2](https://www.npmjs.com/package/react/v/17.0.2).\n\n### npm\n\nIn order to inform `swagger-editor@5` npm package that I require it to use my React version, I need to use [npm overrides](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#overrides).\n\n```json\n{\n  \"dependencies\": {\n    \"react\": \"=17.0.2\",\n    \"react-dom\": \"=17.0.2\"\n  },\n  \"overrides\": {\n    \"swagger-editor\": {\n      \"react\": \"$react\",\n      \"react\": \"$react-dom\",\n      \"react-redux\": \"^8\"\n    }\n  }\n}\n```\n\n> [!NOTE]\n> The React and ReactDOM override are defined as a reference to the dependency. Since _react-redux@9_ only supports `React >= 18`, we need to use _react-redux@8_.\n\n\n### yarn\n\nIn order to inform `swagger-editor@5` npm package that I require it to use my specific React version, I need to use [yarm resolutions](https://yarnpkg.com/cli/set/resolution).\n\n\n```json\n{\n  \"dependencies\": {\n    \"react\": \"17.0.2\",\n    \"react-dom\": \"17.0.2\"\n  },\n  \"resolutions\": {\n    \"swagger-editor/react\": \"17.0.2\",\n    \"swagger-editor/react-dom\": \"17.0.2\",\n    \"swagger-editor/react-redux\": \"^8\"\n  }\n}\n```\n\n> [!NOTE]\n> The React and ReactDOM resolution cannot be defined as a reference to the dependency. Unfortunately *yarn* does not support aliasing like `$react` or `$react-dom` as *npm* does. You'll need to specify the exact versions.\n\n## Security contact\n\nPlease disclose any security-related issues or vulnerabilities by emailing [security@swagger.io](mailto:security@swagger.io), instead of using the public issue tracker.\n"
apicurio/apicurio-studio: >
  [![CircleCI](https://circleci.com/gh/Apicurio/apicurio-studio.svg?style=svg)](https://circleci.com/gh/Apicurio/apicurio-studio)


  # The apicurio-studio project (Open Source API Design Studio)


  ## Summary


  This is the official Git repository for the apicurio studio project: 
  http://www.apicur.io/


  The apicurio studio project is a standalone API design studio that can be used
  to create

  new or edit existing API designs (using the OpenAPI specification).


  ## Get the code


  The easiest way to get started with the code is to [create your own
  fork](http://help.github.com/forking/)

  of this repository, and then clone your fork:

  ```bash
    $ git clone git@github.com:<you>/apicurio-studio.git
    $ cd apicurio-studio
    $ git remote add upstream git://github.com/apicurio/apicurio-studio.git
  ```

  At any time, you can pull changes from the upstream and merge them onto your
  master:

  ```bash
    $ git checkout master               # switches to the 'master' branch
    $ git pull upstream master          # fetches all 'upstream' changes and merges 'upstream/master' onto your 'master' branch
    $ git push origin                   # pushes all the updates to your fork, which should be in-sync with 'upstream'
  ```

  The general idea is to keep your 'master' branch in-sync with the
  'upstream/master'.


  ## Building apicurio-studio


  ### Requirements

  - Maven 3.x

  - Java 8+


  The following command compiles all the code, installs the JARs into your local
  Maven repository, and runs all of the unit tests:

  ```bash
    $ mvn clean install
  ```

  ## Quickstart (i.e. How To Run It)


  The fastest way to get started using Apicurio Studio is to use the
  quickstart.  The Apicurio quickstart is produced as part 

  of the full maven build - you can find it in `distro/quickstart/target` as a
  ZIP file.  To start up the quickstart, use the 

  following commands from the top-level of the repository:


  ```bash
    $ rm -rf ./distro/quickstart/target/apicurio-studio-*-SNAPSHOT
    $ unzip distro/quickstart/target/apicurio-studio-*-quickstart.zip -d distro/quickstart/target
    $ ./distro/quickstart/target/apicurio-studio-*-SNAPSHOT/bin/standalone.sh -c standalone-apicurio.xml
  ```


  This will start Wildfly on your local machine and you can access the UI at
  [http://localhost:8080](http://localhost:8080).


  ## Contribute fixes and features


  Apicurio Studio is open source, and we welcome anybody who wants to
  participate and contribute!


  Please follow [Setting your development
  environment](https://apicurio-studio.readme.io/docs/setting-up-a-development-environment)
  guide to setup your local machine for development.  The guide assumes the use
  of the Eclipse IDE for Java

  development (backend) but is not required - developers should be able to adapt
  the instructions to their particular

  environment.


  If you want to fix a bug or make any changes, please [log an issue in
  GitHub](https://github.com/apicurio/apicurio-studio/issues) describing the bug

  or new feature. Then we highly recommend making the changes on a topic branch
  named with the JIRA issue number. For example, this command creates

  a branch for the APISTUDIO-1234 issue:

  ```bash
    $ git checkout -b apicurio-studio-1234
  ```

  After you're happy with your changes and a full build (with unit tests) runs
  successfully, commit your

  changes on your topic branch. Then it's time to check for and pull any recent
  changes that were made in

  the official repository:

  ```bash
    $ git checkout master               # switches to the 'master' branch
    $ git pull upstream master          # fetches all 'upstream' changes and merges 'upstream/master' onto your 'master' branch
    $ git checkout apicurio-studio-1234   # switches to your topic branch
    $ git rebase master                 # reapplies your changes on top of the latest in master
                                        # (i.e., the latest from master will be the new base for your changes)
  ```

  If the pull grabbed a lot of changes, you should rerun your build to make sure
  your changes are still good.

  You can then either [create patches](http://progit.org/book/ch5-2.html) (one
  file per commit, saved in `~/apicurio-studio-1234`) with

  ```bash
    $ git format-patch -M -o ~/apicurio-studio-1234 orgin/master
  ```

  and upload them to the JIRA issue, or you can push your topic branch and its
  changes into your public fork repository

  ```bash
    $ git push origin apicurio-studio-1234         # pushes your topic branch into your public fork of apicurio-studio
  ```

  and [generate a pull-request](http://help.github.com/pull-requests/) for your
  changes.


  We prefer pull-requests, because we can review the proposed changes, comment
  on them,

  discuss them with you, and likely merge the changes right into the official
  repository.


  Please try to create one commit per feature or fix, generally the easiest way
  to do this is via [git
  squash](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits).

  This makes reverting changes easier, and avoids needlessly polluting the
  repository history with checkpoint commits.


  ## Code Formatting


  When you are hacking on some apicurio-studio code, we'd really appreciate it
  if you followed the

  apicurio-studio coding standards.  If you're using Eclipse, you can find a
  code formatter config

  file here:

  ```

  tools/src/eclipse/apicurio-eclipse-formatter.xml

  ```

  You should be able to import that guy straight into Eclipse by going to

  *Window->Preferences :: Java/Code Style/Formatter*
apiacademy/rapido-web: "# rápido-web\r\n\r\nRapido is an API design tool that facilitates the _sketching_ phase of design.  At a minimum, a sketch should be:\r\n\r\n* easy to create\r\n* easy to dispose\r\n* easy to translate into a prototype\r\n\r\nSketching allows a designer to perform many iterations of an early design if the cost of creation is very low.  This promotes experimentation and ideation.  Early iterations are important for API design as it is difficult to change an API once it is released and being used.\r\n\r\n## Rapido Design Principles\r\n\r\n1.  Rapid design - a user should be able to create a complete API sketch within five minutes\r\n2.  Safe Disposability - users should feel safe when starting a design over (through archiving and peristence of previous designs )\r\n3.  Unidirectional - Rapido sketches can be exported to later lifecycle stages, but designs cannot be imported.  \r\n\r\n## Development Setup\r\n\r\nRapido requires NodeJS and npm and a [backend Rapido](http://github.com/apiacademy/rapido-backend) implementation.\r\n\r\nTo install:\r\n`npm install`\r\n\r\nTo start:\r\n`npm start`\r\n\r\nTo test with Chrome:\r\n'npm test'\r\n"
mermade/openapi-gui: >+
  OpenAPI-GUI

  ===========


  OpenAPI-GUI is a GUI for creating and editing OpenAPI version 3.0.x JSON/YAML
  definitions. In its current form it is most useful as a tool for starting off
  and editing simple OpenAPI definitions. Imported OpenAPI 2.0 definitions are
  automatically converted to v3.0.


  ![Screenshot](https://github.com/Mermade/openapi-gui/blob/master/img/screenshot.png?raw=true)


  For the previous Swagger / OpenAPI 2.0-only version see
  [here](https://mikeralphson.github.io/openapi-gui). This version is currently
  **unmaintained** apart from security fixes.


  This project was initially a fork of [Daryl Kuhn's
  IODoctor](https://github.com/darrylkuhn/iodoctor/tree/angular-port), which in
  turn was inspired by [IODoctor by Brandon
  West](https://github.com/brandonmwest/iodoctor) which was written in Ruby. The
  complete history of the project is maintained on GitHub.


  Description

  -----------

  ### How It Works


  Select an existing OpenAPI 2.0 or 3.0.x definition to upload, or create a new
  definition and start adding Paths, Operations, and Parameters. When an
  existing definition is used, it is parsed and forms for editing each Path,
  Operation and Parameter will be created.


  You can load an existing definition by appending a `?url=` query parameter to
  the initial start page.


  Click an item from the menu on the left to begin editing. View the JSON/YAML
  output at any time by selecting one of the "Export" tabs. When finished,
  download the output to save it locally or copy it your clipboard. OpenAPI-GUI
  only stores one definition at a time, and this is in your browser's
  local-storage. Make sure you save your JSON/YAML output locally.


  Before performing a destructive action, OpenAPI-GUI saves the current state of
  the definition. At all other times you must remember to select Save manually.


  ### Technology


  OpenAPI-GUI runs entirely client-side using a number of Javascript frameworks
  including [Vue.JS](https://vuejs.org/), [jQuery](https://jquery.com/) and
  [Bulma](http://bulma.io/) for CSS.


  To get the app up and running just browse to [the live version on GitHub
  pages](https://mermade.github.io/openapi-gui), deploy a clone to GitHub pages,
  deploy to Heroku using the button below, or clone the repo and point a browser
  at `index.html` or host it yourself - couldn't be simpler. More [technical
  information here](docs/technical.md).


  You only need to `npm install` the Node.js modules if you wish to use the
  `openapi-gui` embedded web server (i.e. not if you are running your own
  web-server), otherwise they are only there for PaaS deployments.


  [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)


  #### CLI options


  ```

  -d, --definition    serve the given OAS definition

  -l, --launch        start a web-browser pointing to the GUI

  -p, --port          specify the port to run on, defaults to $PORT or 3000

  -w, --write         enable writing back to the source definition

  ```


  #### Running with Docker


  If you don't have a local Node development environment, or if you would prefer
  to run OpenAPI-GUI in a Docker container, you can do in with a few simple
  steps:


  1. Clone the repository.

  2. Run `docker build -t mermade/openapi-gui .` to build the Docker image
  (`mermade/openapi-gui`)

  3. Run `docker run --name openapi-gui -p 8080:3000 -d mermade/openapi-gui` to
  run the server on port 8080.

  4. Navigate to `http://localhost:8080` in your favorite browser.

  5. When you're done, shut down the server by running `docker stop openapi-gui
  && docker rm openapi-gui`


  Or you can pull the pre-built Docker image:


  * `docker pull mermade/openapi-gui`


  ### Limitations


  * OpenAPI-GUI will de-reference shared parameters.

  * The definition must be self-contained with no external `$ref`s. **This is
  likely to be resolved (ho-ho) soon**.

  * Editing a response / example / body schema will dereference it.

  * OpenAPI-GUI will not always preserve vendor-extensions, e.g. if a parameter
  is deleted and recreated.

  * OpenAPI-GUI will not preserve comments from definitions imported in YAML
  format.


  TODO

  ----


  * See the [TODO list](/docs/TODO.md) and the current status of [OpenAPI 3.0
  specification support](docs/openapi3-support.md).

stoplightio/prism: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BF3E312:12996B05:66149275.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Szasza/express-gateway-plugin-openapi3-mock-server: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:27DEDD:A91324B:10794D19:661488F9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
swagger-api/swagger-node: >
  # Archived


  This GitHub repository has been archived. 

  The npmjs package `swagger` may be re-used at a later date for a different
  project.

  https://swagger.io/ may have similar or alternative functionality if you
  depend(ed) on this project.



  [![Build
  Status](https://travis-ci.org/swagger-api/swagger-node.svg?branch=master)](https://travis-ci.org/swagger-api/swagger-node) 

  [![NPM
  version](https://badge.fury.io/js/swagger.png)](http://badge.fury.io/js/swagger)

  [![Dependency
  Status](https://david-dm.org/swagger-api/swagger-node/status.svg)](https://david-dm.org/swagger-api/swagger-node)

  [![devDependency
  Status](https://david-dm.org/swagger-api/swagger-node/dev-status.svg)](https://david-dm.org/swagger-api/swagger-node#info=devDependencies)



  The `swagger` module provides tools for designing and building
  Swagger-compliant APIs entirely in Node.js. It integrates with popular Node.js
  servers, including Express, Hapi, Restify, and Sails, as well as any
  Connect-based middleware. With `swagger`, you can specify, build, and test
  your API from the very beginning, on your laptop. It allows you to change and
  iterate your design without rewriting the logic of your implementation.


  ![alt text](./docs/images/overview2.png)



  Remember, one great thing about this approach is that all of the Swagger
  validation logic is handled for you, and all of the routing logic is managed
  through the Swagger configuration. You don't have to code (or recode!) any of
  that stuff yourself.


  # Your swagger API in five steps


  ## 1. Install the swagger module


  Install using npm. For complete instructions, see the
  [install](./docs/install.md) page.


  ```bash

  $ npm install -g swagger

  ```


  ## 2. Create a new swagger project


  Use the [CLI](./docs/cli.md) to create and manage projects. Learn more on the
  [quick start](./docs/quick-start.md) page.


  ```bash

  $ swagger project create hello-world

  ```


  ## 3. Design your API in the Swagger Editor


  The interactive, browser-based [Swagger Editor](http://editor.swagger.io/) is
  built in. It provides Swagger 2.0 validation and endpoint routing, generates
  docs on the fly, and consumes easy-to-read YAML.


  ```bash

  $ swagger project edit

  ```


  ![screenshot of project editor](./docs/images/project-editor.png)


  ## 4. Write controller code in Node.js


  Code your API's business logic in Node.js.


  ```js

  function hello(req, res) {
      var name = req.swagger.params.name.value || 'stranger';
      var hello = util.format('Hello, %s!', name);
      res.json({ "message": hello });
  }

  ```


  If you look at the Swagger file in the editor (shown in step 3 above), the
  `x-swagger-router-controller` element (line 17 in the editor screenshot)
  specifies the name of the controller file associated with the `/hello` path.
  For example:


  ```yaml
      paths:
          /hello:
              x-swagger-router-controller: hello_world
  ```


  Controller source code is always placed in `./api/controllers`. So, the
  controller source file for this project is `./api/controllers/hello_world.js`.


  The `operationId` element specifies which controller function to call. In this
  case (line 19), it is a function called `hello`. Learn
  [more](./docs/controllers.md).


  ## 5. Run the server


  Run the project server.


  ```bash

  $ swagger project start

  ```


  ## Now, call the API!


  It just works!


  ```bash

  $ curl http://127.0.0.1:10010/hello?name=Scott

  { "message": "Hello, Scott!" }

  ```


  # <a name="installation"></a>Installing the swagger module


  See the [Installing swagger](./docs/install.md) for details.


  # <a name="using"></a>Using the swagger module


  Go to the [swagger module doc page](./docs/README.md). It includes all the
  information you need to get started.


  # <a name="about"></a>About this project


  This initiative grew out of Apigee-127, an API design-first development
  framework using Swagger.

  Apigee donated the code to create the swagger-node project in 2015.

   >Copyright 2016 Apigee Corporation

   >Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   >http://www.apache.org/licenses/LICENSE-2.0

   >Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

  ---

  <img src="http://swagger.io/wp-content/uploads/2016/02/logo.jpg"/>
modern-project/modern-ruby: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:39AC24C:58EE3E4:66148F02.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
go-swagger/go-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2817:07B5:23EC57F:39A1447:66148CC0.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
swagger-api/swagger-inflector: >
  # Swagger Inflector


  [![Maven
  Central](https://maven-badges.herokuapp.com/maven-central/io.swagger/swagger-inflector/badge.svg?style=plastic)](https://maven-badges.herokuapp.com/maven-central/io.swagger/swagger-inflector)


  ----


  **NOTE:** If you're looking for `swagger-inflector` 1.X and Swagger/OpenApi
  2.0, please refer to [v1
  branch](https://github.com/swagger-api/swagger-inflector/tree/v1)


  ----


  This project uses the Swagger Specification to drive an API implementation. 
  Rather than a typical top-down or bottom-up swagger integration, the Inflector
  uses the swagger specification as a DSL for the REST API.  The spec drives the
  creation of routes and controllers automatically, matching methods and method
  signatures from the implementation.  This brings a similar integration
  approach to the JVM as
  [swagger-node](https://github.com/swagger-api/swagger-node) brings to the
  javascript world.


  To allow for an iterative development, the framework will mock responses for
  any unimplemented methods, based on the specification.  That means you can
  ship your API to your consumers for review immediately as you build it out.


  You have full control over the mapping of controllers to classes and methods
  as well as models.


  ## Quick start!


  Run this command to start in a hurry.  It will create a project named
  `my-project`

  ```

  curl -L
  https://raw.githubusercontent.com/swagger-api/swagger-inflector/master/setup.sh
  | project=my-project bash

  ```


  This will download everything you need to start editing and running a
  swagger-inflector based project.  See the output of the command for
  instructions.


  ### Components


  Inflector uses the following libraries:

   - swagger models for the swagger definition
   - Jackson for JSON processing
   - Jersey 2.x for REST
   - Minimum Java 8

  ### Integration


  Inflector will create routes and add them to Jersey.  You simply need to
  register the Inflector application in your webapp and it should be compatible
  with your existing deployment, whether with web.xml, spring, dropwizard, etc.


  To add inflector via `web.xml`:


  ```xml

  <servlet>
    <servlet-name>swagger-inflector</servlet-name>
    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
    <init-param>
      <param-name>javax.ws.rs.Application</param-name>
      <param-value>io.swagger.oas.inflector.OpenAPIInflector</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>swagger-inflector</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>

  ```


  This simply adds the `SwaggerInflector` application to Jersey.


  ### Configuration


  Inflector uses a single yaml file for configuration.  The default file is
  `inflector.yaml` but it can be overridden by setting a system property when
  starting the JVM:


  ```

  -Dconfig=/path/to/config

  ```


  The configuration supports the following:


  ```yaml

  # mode (development | staging | production).  Default is development, and this
  value will be overridden by a system property

  # -Denvironment=production for example

  environment: development


  # configure your default controller package for method discovery

  controllerPackage: io.swagger.oas.sample.controllers


  # configure the default model package for model discovery

  modelPackage: io.swagger.oas.sample.models


  # the path to the swagger definition (Note! this can be overridden with
  -DswaggerUrl as a system property

  swaggerUrl: openapi.yaml


  # specific mappings for models, used to locate models in the
  `#/definitions/${model}`

  modelMappings:
    User: io.swagger.oas.sample.models.User

  # HTTP response code when required parameters are missing

  invalidRequestCode: 400


  #Allows to configure the exposed spec (values in example are the defaults)

  exposedSpecOptions:
    parseOptions:
      resolve: false
      resolveFully: false
    useOriginalNotParsed: false
    hideInflectorExtensions: true
    mergeRootPath: true

  ```


  ### Locating the controller class


  The actual controller class for each method is located via the first of the
  following mechanisms:

  - a x-swagger-router-controller extension at the method level can specify the
  specific controller class

  - each tag associated with the method is assembled into the classnames
  "&lt;controllerPackage&gt;.&lt;Tag&gt;" or 

  "&lt;controllerPackage&gt;.&lt;Tag&gt;Controller", the first of these classes
  that is found by Class.forName(...) will be used

  - an optional &lt;controllerClass&gt; configuration parameter is appended to
  &lt;controllerPackage&gt; 

  - as a last resort a class named &lt;controllerPackage&gt;.Default is used


  By default the class is loaded directly with Class.forName(...).newInstance()
  - but you can override class creation

  by providing a custom ControllerFactory to the inflector configuration (for
  example if you want your controllers to be 

  loaded by a DI framework).


  ### Locating the target method


  When locating methods, the `operationId` is used as the method name for lookup
  via reflection.  If not specified, there is logic for generation of a method
  name.


  Once a method is matched via name, the parameter types will be compared to
  ensure we have the right model.  In all methods, only java objects are
  supported--primitives currently will not match (this allows for proper nulls).


  You can override a model mapping by setting a vendor extension in the swagger
  yaml:


  ```yaml

  # uses method name, look for controllerPackage in the configuration

  paths:
    /test1:
      get:
        x-swagger-router-controller: SampleController
        operationId: getTest1
        parameters:
          - name: name
            in: query
            type: string
        responses:
          200:
            description: Success!
  ```


  From the configuration example above, this will look for the following class:


  ```

  class: io.swagger.sample.controllers.SampleController

  ```


  with the following method:


  ```

  method: public Object getTest1(
      RequestContext,
      java.lang.String name)
  ```


  #### Complex inputs


  When there are complex inputs, such as the example below:


  ```yaml

  paths:
    /test2:
      post:
        x-swagger-router-controller: SampleController
        operationId: addUser
        requestBody:
            content:
              "application/json":
                schema:
                  $ref: '#/definitions/User'
        parameters:
          - name: name
            in: query
            type: string
        responses:
          200:
            description: Success!
  ```


  the Inflector will do the following:

   - Look in vendor extensions for the models to see if a mapping exists.  If so, it will attempt to load it via the classloader

   ```yaml
     Address:
      x-swagger-router-model: io.swagger.test.models.Address
      properties:
        street:
          type: string
          example: 12345 El Monte Road
        city:
          type: string
          example: Los Altos Hills
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94022'
   ```

   - Look in the configuration for a mapping between `User` and a concrete class definition.  If the definition exists AND the class can be loaded, the method will look like such:

   ```
   public ResponseContext addUser (
      RequestContext context,             // request context
      io.swagger.sample.models.User user, // user being added
      java.lang.String name)              // the `name` query param
   ```

   - If the definition does not exist, the `modelPackage` from the configuration will be used to attempt to load the class:

   ```


   ```

   If the definition can be loaded it will be used as the method signature

   - If no model can be loaded, it is the developer's job to unwrap the input and parse it on their own.  This requires `Content-Type`-specific processing.  Inflector will then look for the following method:

   ```
   public ResponseContext addUser (
      RequestContext context,             // request context
      JsonNode user,                      // a Json tree representing the user
      java.lang.String name)              // the `name` query param
   ```

   - If no method can be found, a mock response will be returned based on the swagger definition.  For complex objects, if an `example` exists, we will use that.  Otherwise, it will be constructed.


  The RequestWrapper and ResponseContext contain information about headers (in
  and outbound), content-type and acceptable response types.


  #### Outputs


  Your controllers can return null (void response), an object (entity), or a
  `ResponseContext`, which allows you to send specific error codes, headers, and
  an optional entity.


  For example, if you want to return a `Pet` from a controller:


  ```java
      public ResponseContext getPet(RequestContext request, java.lang.Integer petId) {
          // do your magic to fetch a pet...
          Pet pet = complexBusinessLogic.getPetById(petId);

          return new ResponseContext()
                  .status(Status.OK)
                  .entity(pet);
      }
  ```


  and the Inflector will return a `200` response code, marshalling the `Pet`
  object into the appropriate content type.


  If you do not implement your controller, the Inflector will generate sample
  data based on your model definitions.  It will honor any examples that you
  have in the definitions, assuming they are compatible with the schema you
  declared.  For example, this definition:


  ```yaml

  properties:
    street:
      type: "string"
      example: "12345 El Monte Blvd"
    city:
      type: "string"
      example: "Los Altos Hills"
    state:
      type: "string"
      example: "CA"
      minLength: 2
      maxLength: 2
    zip:
      type: "string"
      example: "94022"
  xml:
    name: "address"
  ```


  Will produce this example for a `Accept:application/json`:


  ```json

  {
    "street" : "12345 El Monte Blvd",
    "city" : "Los Altos Hills",
    "state" : "CA",
    "zip" : "94022"
  }

  ```


  and `application/yaml`:


  ```yaml

  street: "12345 El Monte Blvd"

  city: "Los Altos Hills"

  state: "CA"

  zip: "94022"

  ```


  and `application/xml`:


  ```xml

  <address>
    <street>12345 El Monte Blvd</street>
    <city>Los Altos Hills</city>
    <state>CA</state>
    <zip>94022</zip>
  </address>

  ```


  #### Payload validation


  Since your inbound and outbound payloads are defined with the Swagger schema,
  Inflector 

  can validate them at runtime.  Just enable payload validations in your
  inflector config:


  ```yaml

  validatePayloads: true

  ```


  And at start-up, Inflector will read the schema and attach the relevant
  section of it 

  to the operation.  For example, a post operation that has this as the schema
  definition:


  ```json

  {
    "Category": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    }
  }

  ```


  Will fail if the incoming body looks like this:


  ```json

  {
    "name": "Tony"
  }

  ```

  because the required field `id` is missing.


  The same goes for responses generated by the server.  Any response code that
  you send will 

  be validated against it's corresponding schema.


  You can choose to enable this in development,

  staging, or production.


  #### Content type negotiation


  There is a pluggable framework for handling different content types.  You can
  register any processor by the following:


  ```java

  EntityProcessor myProcessor = new MyEntityProcessor();  // implements
  EntityProcessor

  EntityProcessorFactory.addProcessor(myProcessor);

  ```


  #### Development Lifecycle


  There are three modes that the Inflector supports, as configured by the
  `environment` attribute in the inflector config:

   - **development**.  In this mode, mock responses will be sent for controllers which are not implemented.  The intention
     is to allow you to quickly iterate on the implementation of the design.  In addition, missing model implementations
     are tolerated and supported.

   - **staging**.  Warning messages will be logged when starting the service for any missing controller, method, or model.

   - **production**.  The expectation is all methods and declared (manually mapped) models exist.  If they don't, it'll throw
     nasty errors and the server will not start.

  In development mode, there is a `/debug.json` page which shows implementation
  details of the inflector service.


  If your Swagger Description is unparsable, the server will throw ugly errors
  on startup and the `debug.json` page will
     give indications as to why.

  #### Samples

  The samples are a being refactor to support the new inflector.


  You will soon find samples for the inflector project in the
  [Swagger-Samples](https://github.com/swagger-api/swagger-samples) repository. 
  The inflector projects start with `inflector-`


  #### Running tests


  If running Java 8, you will need to run a variant that has backported fix
  8157236. Azul Zulu is confirmed to work
  (https://github.com/jmockit/jmockit1/issues/710).


  If running with Java 9 or later, you will need to either:

  - Pass `-Djdk.attach.allowAttachSelf=true` to the VM.

  - Configure the test execution JVM to start with the "-javaagent:<proper
  path>/jmockit.1.x.jar" initialization parameter. It can be specified in the
  build script file for tools such as Maven or Gradle, or in a "Run/Debug
  Configuration" for IntelliJ IDEA or Eclipse.


  ## Security contact


  Please disclose any security-related issues or vulnerabilities by emailing
  [security@swagger.io](mailto:security@swagger.io), instead of using the public
  issue tracker.
networknt/light-rest-4j: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280D:267BEE:AD8675A:10DCE69D:66148F45.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
apioo/fusio: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:37E2452:56523B4:661489BB.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
smartrecruiters/openapi-first: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:24BB98D:3ABA995:661491E4.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
swagger-api/swagger-core: >
  # Swagger Core <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  **NOTE:** If you're looking for Swagger Core 1.5.X and OpenAPI 2.0, please
  refer to [1.5 branch](https://github.com/swagger-api/swagger-core/tree/1.5).


  **NOTE:** Since version 2.1.7, Swagger Core also supports the Jakarta
  namespace. There are a parallel set of artifacts with the `-jakarta` suffix,
  providing the same functionality as the unsuffixed (i.e.: `javax`) artifacts.

  Please see the
  [Wiki](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Getting-started)
  for more details.


  **NOTE:** Since version 2.2.0 Swagger Core supports OpenAPI 3.1; see [this
  page](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---OpenAPI-3.1)
  for details


  ![Build Test
  Deploy](https://github.com/swagger-api/swagger-core/workflows/Build%20Test%20Deploy%20master/badge.svg?branch=master)

  [![Maven
  Central](https://maven-badges.herokuapp.com/maven-central/io.swagger.core.v3/swagger-project/badge.svg?style=plastic)](https://maven-badges.herokuapp.com/maven-central/io.swagger.core.v3/swagger-project)


  Swagger Core is a Java implementation of the OpenAPI Specification. Current
  version supports *JAX-RS2* (`javax` and `jakarta` namespaces).


  ## Get started with Swagger Core!

  See the guide on [getting started with Swagger
  Core](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Getting-started)
  to get started with adding Swagger to your API.


  ## See the Wiki!

  The [github wiki](https://github.com/swagger-api/swagger-core/wiki) contains
  documentation, samples, contributions, etc. Start there.


  ## Compatibility

  The OpenAPI Specification has undergone several revisions since initial
  creation in 2010.  The Swagger Core project has the following compatibilities
  with the OpenAPI Specification:


  Swagger core Version      | Release Date | OpenAPI Spec compatibility | Notes
  | Status

  ------------------------- | ------------ | -------------------------- | -----
  | ----

  2.2.21 (**current stable**)| 2024-03-20   | 3.x           | [tag
  v2.2.21](https://github.com/swagger-api/swagger-core/tree/v2.2.21) | Supported

  2.2.20                     | 2023-12-19   | 3.x           | [tag
  v2.2.20](https://github.com/swagger-api/swagger-core/tree/v2.2.20) | Supported

  2.2.19                     | 2023-11-10   | 3.x           | [tag
  v2.2.19](https://github.com/swagger-api/swagger-core/tree/v2.2.19) | Supported

  2.2.18                     | 2023-10-25   | 3.x           | [tag
  v2.2.18](https://github.com/swagger-api/swagger-core/tree/v2.2.18) | Supported

  2.2.17                     | 2023-10-12   | 3.x           | [tag
  v2.2.17](https://github.com/swagger-api/swagger-core/tree/v2.2.17) | Supported

  2.2.16                     | 2023-09-18   | 3.x           | [tag
  v2.2.16](https://github.com/swagger-api/swagger-core/tree/v2.2.16) | Supported

  2.2.15                     | 2023-07-08   | 3.x           | [tag
  v2.2.15](https://github.com/swagger-api/swagger-core/tree/v2.2.15) | Supported

  2.2.14                     | 2023-06-26   | 3.x           | [tag
  v2.2.14](https://github.com/swagger-api/swagger-core/tree/v2.2.14) | Supported

  2.2.13                     | 2023-06-24   | 3.x           | [tag
  v2.2.13](https://github.com/swagger-api/swagger-core/tree/v2.2.13) | Supported

  2.2.12                     | 2023-06-13   | 3.x           | [tag
  v2.2.12](https://github.com/swagger-api/swagger-core/tree/v2.2.12) | Supported

  2.2.11                     | 2023-06-01   | 3.x           | [tag
  v2.2.11](https://github.com/swagger-api/swagger-core/tree/v2.2.11) | Supported

  2.2.10                     | 2023-05-15   | 3.x           | [tag
  v2.2.10](https://github.com/swagger-api/swagger-core/tree/v2.2.10) | Supported

  2.2.9                     | 2023-03-20  | 3.x           | [tag
  v2.2.9](https://github.com/swagger-api/swagger-core/tree/v2.2.9)                                            
  | Supported

  2.2.8                     | 2023-01-06  | 3.x           | [tag
  v2.2.8](https://github.com/swagger-api/swagger-core/tree/v2.2.8)                                            
  | Supported

  2.2.7                     | 2022-11-15  | 3.0           | [tag
  v2.2.7](https://github.com/swagger-api/swagger-core/tree/v2.2.7)                                            
  | Supported

  2.2.6                     | 2022-11-02  | 3.0           | [tag
  v2.2.6](https://github.com/swagger-api/swagger-core/tree/v2.2.6)                                            
  | Supported

  2.2.5                     | 2022-11-02  | 3.0           | [tag
  v2.2.5](https://github.com/swagger-api/swagger-core/tree/v2.2.5)                                            
  | Supported

  2.2.4                     | 2022-10-16  | 3.0           | [tag
  v2.2.4](https://github.com/swagger-api/swagger-core/tree/v2.2.4)                                            
  | Supported

  2.2.3                     | 2022-09-27  | 3.0           | [tag
  v2.2.3](https://github.com/swagger-api/swagger-core/tree/v2.2.3)                                            
  | Supported

  2.2.2                     | 2022-07-20  | 3.0           | [tag
  v2.2.2](https://github.com/swagger-api/swagger-core/tree/v2.2.2)                                            
  | Supported

  2.2.1                     | 2022-06-15  | 3.0           | [tag
  v2.2.1](https://github.com/swagger-api/swagger-core/tree/v2.2.1)                                            
  | Supported

  2.2.0                     | 2022-04-04  | 3.0           | [tag
  v2.2.0](https://github.com/swagger-api/swagger-core/tree/v2.2.0)                                            
  | Supported

  2.1.13                     | 2022-02-07  | 3.0           | [tag
  v2.1.13](https://github.com/swagger-api/swagger-core/tree/v2.1.13)                                          
  | Supported

  2.1.12                     | 2021-12-23  | 3.0           | [tag
  v2.1.12](https://github.com/swagger-api/swagger-core/tree/v2.1.12)                                          
  | Supported

  2.1.11                     | 2021-09-29  | 3.0           | [tag
  v2.1.11](https://github.com/swagger-api/swagger-core/tree/v2.1.11)                                          
  | Supported

  2.1.10                     | 2021-06-28  | 3.0           | [tag
  v2.1.10](https://github.com/swagger-api/swagger-core/tree/v2.1.10)                                          
  | Supported

  2.1.9                     | 2021-04-20  | 3.0           | [tag
  v2.1.9](https://github.com/swagger-api/swagger-core/tree/v2.1.9)                                            
  | Supported

  2.1.8                     | 2021-04-18  | 3.0           | [tag
  v2.1.8](https://github.com/swagger-api/swagger-core/tree/v2.1.8)                                            
  | Supported

  2.1.7                     | 2021-02-18  | 3.0           | [tag
  v2.1.7](https://github.com/swagger-api/swagger-core/tree/v2.1.7)                                            
  | Supported

  2.1.6                     | 2020-12-04  | 3.0           | [tag
  v2.1.6](https://github.com/swagger-api/swagger-core/tree/v2.1.6)                                            
  | Supported

  2.1.5                     | 2020-10-01  | 3.0           | [tag
  v2.1.5](https://github.com/swagger-api/swagger-core/tree/v2.1.5)                                            
  | Supported

  2.1.4                     | 2020-07-24  | 3.0           | [tag
  v2.1.4](https://github.com/swagger-api/swagger-core/tree/v2.1.4)                                            
  | Supported

  2.1.3                     | 2020-06-27  | 3.0           | [tag
  v2.1.3](https://github.com/swagger-api/swagger-core/tree/v2.1.3)                                            
  | Supported

  2.1.2                     | 2020-04-01  | 3.0           | [tag
  v2.1.2](https://github.com/swagger-api/swagger-core/tree/v2.1.2)                                            
  | Supported

  2.1.1                     | 2020-01-02  | 3.0           | [tag
  v2.1.1](https://github.com/swagger-api/swagger-core/tree/v2.1.1)                                            
  | Supported

  2.1.0                     | 2019-11-16  | 3.0           | [tag
  v2.1.0](https://github.com/swagger-api/swagger-core/tree/v2.1.0)                                            
  | Supported

  2.0.10                    | 2019-10-11  | 3.0           | [tag
  v2.0.10](https://github.com/swagger-api/swagger-core/tree/v2.0.10)                                          
  | Supported

  2.0.9                     | 2019-08-22  | 3.0           | [tag
  v2.0.9](https://github.com/swagger-api/swagger-core/tree/v2.0.9)                                            
  | Supported

  2.0.8                     | 2019-04-24  | 3.0           | [tag
  v2.0.8](https://github.com/swagger-api/swagger-core/tree/v2.0.8)                                            
  | Supported

  2.0.7                     | 2019-02-18  | 3.0           | [tag
  v2.0.7](https://github.com/swagger-api/swagger-core/tree/v2.0.7)                                            
  | Supported

  2.0.6                     | 2018-11-27  | 3.0           | [tag
  v2.0.6](https://github.com/swagger-api/swagger-core/tree/v2.0.6)                                            
  | Supported

  2.0.5                     | 2018-09-19  | 3.0           | [tag
  v2.0.5](https://github.com/swagger-api/swagger-core/tree/v2.0.5)                                            
  | Supported

  2.0.4                     | 2018-09-05  | 3.0           | [tag
  v2.0.4](https://github.com/swagger-api/swagger-core/tree/v2.0.4)                                            
  | Supported

  2.0.3                     | 2018-08-09  | 3.0           | [tag
  v2.0.3](https://github.com/swagger-api/swagger-core/tree/v2.0.3)                                            
  | Supported

  1.6.14 (**current stable**)| 2024-03-19   | 2.0           | [tag
  v1.6.14](https://github.com/swagger-api/swagger-core/tree/v1.6.14)                                          
  | Supported

  1.6.13                    | 2024-01-26   | 2.0           | [tag
  v1.6.13](https://github.com/swagger-api/swagger-core/tree/v1.6.13)                                          
  | Supported

  1.6.12                    | 2023-10-14   | 2.0           | [tag
  v1.6.12](https://github.com/swagger-api/swagger-core/tree/v1.6.12)                                          
  | Supported

  1.6.11                    | 2023-05-15  | 2.0           | [tag
  v1.6.11](https://github.com/swagger-api/swagger-core/tree/v1.6.11)                                          
  | Supported

  1.6.10                    | 2023-03-21  | 2.0           | [tag
  v1.6.10](https://github.com/swagger-api/swagger-core/tree/v1.6.10)                                          
  | Supported

  1.6.9                     | 2022-11-15  | 2.0           | [tag
  v1.6.9](https://github.com/swagger-api/swagger-core/tree/v1.6.9)                                            
  | Supported

  1.6.8                     | 2022-10-16  | 2.0           | [tag
  v1.6.8](https://github.com/swagger-api/swagger-core/tree/v1.6.8)                                            
  | Supported

  1.6.7                     | 2022-09-27  | 2.0           | [tag
  v1.6.7](https://github.com/swagger-api/swagger-core/tree/v1.6.7)                                            
  | Supported

  1.6.6                     | 2022-04-04  | 2.0           | [tag
  v1.6.6](https://github.com/swagger-api/swagger-core/tree/v1.6.6)                                            
  | Supported

  1.6.5                     | 2022-02-07  | 2.0           | [tag
  v1.6.5](https://github.com/swagger-api/swagger-core/tree/v1.6.5)                                            
  | Supported

  1.6.4                     | 2021-12-23  | 2.0           | [tag
  v1.6.4](https://github.com/swagger-api/swagger-core/tree/v1.6.4)                                            
  | Supported

  1.6.3                     | 2021-09-29  | 2.0           | [tag
  v1.6.3](https://github.com/swagger-api/swagger-core/tree/v1.6.3)                                            
  | Supported

  1.6.2                     | 2020-07-01  | 2.0           | [tag
  v1.6.2](https://github.com/swagger-api/swagger-core/tree/v1.6.2)                                            
  | Supported

  1.6.1                     | 2020-04-01  | 2.0           | [tag
  v1.6.1](https://github.com/swagger-api/swagger-core/tree/v1.6.1)                                            
  | Supported

  1.6.0                     | 2019-11-16  | 2.0           | [tag
  v1.6.0](https://github.com/swagger-api/swagger-core/tree/v1.6.0)                                            
  | Supported

  1.5.24                    | 2019-10-11  | 2.0           | [tag
  v1.5.24](https://github.com/swagger-api/swagger-core/tree/v1.5.24)                                          
  | Supported

  1.5.23                    | 2019-08-22  | 2.0           | [tag
  v1.5.23](https://github.com/swagger-api/swagger-core/tree/v1.5.23)                                          
  | Supported

  1.5.22                    | 2019-02-18  | 2.0           | [tag
  v1.5.22](https://github.com/swagger-api/swagger-core/tree/v1.5.22)                                          
  | Supported

  1.5.21                    | 2018-08-09  | 2.0           | [tag
  v1.5.21](https://github.com/swagger-api/swagger-core/tree/v1.5.21)                                          
  | Supported

  1.5.20                    | 2018-05-23  | 2.0           | [tag
  v1.5.20](https://github.com/swagger-api/swagger-core/tree/v1.5.20)                                          
  | Supported

  2.0.2                     | 2018-05-23  | 3.0           | [tag
  v2.0.2](https://github.com/swagger-api/swagger-core/tree/v2.0.2)                                            
  | Supported

  2.0.1                     | 2018-04-16  | 3.0           | [tag
  v2.0.1](https://github.com/swagger-api/swagger-core/tree/v2.0.1)                                            
  | Supported

  1.5.19                    | 2018-04-16  | 2.0           | [tag
  v1.5.19](https://github.com/swagger-api/swagger-core/tree/v1.5.19)                                          
  | Supported

  2.0.0                     | 2018-03-20  | 3.0           | [tag
  v2.0.0](https://github.com/swagger-api/swagger-core/tree/v2.0.0)                                            
  | Supported

  2.0.0-rc4                 | 2018-01-22  | 3.0           | [tag
  v2.0.0-rc4](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc4)                                    
  | Supported

  2.0.0-rc3                 | 2017-11-21  | 3.0           | [tag
  v2.0.0-rc3](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc3)                                    
  | Supported

  2.0.0-rc2                 | 2017-09-29  | 3.0           | [tag
  v2.0.0-rc2](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc2)                                    
  | Supported

  2.0.0-rc1                 | 2017-08-17  | 3.0           | [tag
  v2.0.0-rc1](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc1)                                    
  | Supported

  1.5.18                    | 2018-01-22  | 2.0           | [tag
  v1.5.18](https://github.com/swagger-api/swagger-core/tree/v1.5.18)                                          
  | Supported

  1.5.17                    | 2017-11-21  | 2.0           | [tag
  v1.5.17](https://github.com/swagger-api/swagger-core/tree/v1.5.17)                                          
  | Supported

  1.5.16                    | 2017-07-15  | 2.0           | [tag
  v1.5.16](https://github.com/swagger-api/swagger-core/tree/v1.5.16)                                          
  | Supported

  1.3.12                    | 2014-12-23  | 1.2           | [tag
  v1.3.12](https://github.com/swagger-api/swagger-core/tree/v1.3.12)                                          
  | Supported

  1.2.4                     | 2013-06-19  | 1.1           | [tag
  swagger-project_2.10.0-1.2.4](https://github.com/swagger-api/swagger-core/tree/swagger-project_2.10.0-1.2.4)
  | Deprecated

  1.0.0                     | 2011-10-16  | 1.0           | [tag
  v1.0](https://github.com/swagger-api/swagger-core/tree/v1.0)                                                
  | Deprecated



  ### Change History

  If you're interested in the change history of swagger and the Swagger Core
  framework, see [here](https://github.com/swagger-api/swagger-core/releases).


  ### Prerequisites

  You need the following installed and available in your $PATH:


  * Java 11

  * Apache maven 3.0.4 or greater

  * Jackson 2.4.5 or greater



  ### To build from source (currently 2.2.22-SNAPSHOT)

  ```

  # first time building locally

  mvn -N

  ```


  Subsequent builds:

  ```

  mvn install

  ```


  This will build the modules.


  Of course if you don't want to build locally you can grab artifacts from maven
  central:


  `https://repo1.maven.org/maven2/io/swagger/core/`


  ## Sample Apps

  The samples have moved to [a new
  repository](https://github.com/swagger-api/swagger-samples/tree/2.0) and
  contain various integrations and configurations.


  ## Security contact


  Please disclose any security-related issues or vulnerabilities by emailing
  [security@swagger.io](mailto:security@swagger.io), instead of using the public
  issue tracker.
swagger-api/swagger-parser: >
  # Swagger Parser <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  **NOTE:** If you're looking for `swagger-parser` 1.X and OpenAPI 2.0, please
  refer to [v1 branch](https://github.com/swagger-api/swagger-parser/tree/v1)


  **NOTE:** Since version 2.1.0 Swagger Parser supports OpenAPI 3.1; see [this
  page](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---OpenAPI-3.1)
  for details


  ![Build Master - Java 11, 14 and
  17](https://github.com/swagger-api/swagger-parser/workflows/Build%20Test%20Deploy%20master/badge.svg?branch=master)


  # Table of contents

    - [Overview](#overview)
    - [Table of Contents](#table-of-contents)
    - [Usage](#usage)
    - [Adding to your project](#adding-to-your-project)
      - [Prerequisites](#prerequisites)
    - [Authentication](#authentication)  
    - [Options](#options)
      - [Resolve](#1-resolve)
      - [ResolveFully](#2-resolvefully)
      - [Flatten](#3-flatten)
      - [ResolveCombinators](#4-resolvecombinators)
    - [Extensions](#extensions)
    - [OpenAPI 3.1 Support](#openapi-31-support)
    - [License](#license)
     
  ## Overview 


  This is the Swagger Parser project, which parses OpenAPI definitions in JSON
  or YAML format into
  [swagger-core](https://github.com/swagger-api/swagger-core) representation as
  [Java
  POJO](https://github.com/swagger-api/swagger-core/blob/master/modules/swagger-models/src/main/java/io/swagger/v3/oas/models/OpenAPI.java#L36),
  returning any validation warnings/errors.  


  It also provides a simple framework to add additional converters from
  different formats into the Swagger objects, making the entire toolchain
  available.



  ### Usage

  Using the Swagger Parser is simple.  Once included in your project, you can
  read a OpenAPI Specification from any location:


  ```java

  import io.swagger.parser.OpenAPIParser;

  import io.swagger.v3.parser.OpenAPIV3Parser;

  import io.swagger.v3.parser.core.models.SwaggerParseResult;

  import io.swagger.v3.oas.models.OpenAPI;


  // ... your code

    // parse a swagger description from the petstore and get the result
    SwaggerParseResult result = new OpenAPIParser().readLocation("https://petstore3.swagger.io/api/v3/openapi.json", null, null);
    
    // or from a file
    //   SwaggerParseResult result = new OpenAPIParser().readLocation("./path/to/openapi.yaml", null, null);
    
    // the parsed POJO
    OpenAPI openAPI = result.getOpenAPI();
    
    if (result.getMessages() != null) result.getMessages().forEach(System.err::println); // validation errors and warnings
    
    if (openAPI != null) {
      ...
    }
    
  ```


  or from a string:


  ```java

  import io.swagger.parser.OpenAPIParser;

  import io.swagger.v3.parser.OpenAPIV3Parser;

  import io.swagger.v3.parser.core.models.SwaggerParseResult;

  import io.swagger.v3.oas.models.OpenAPI;


  // ... your code

    // parse a swagger description from the petstore and get the result
    SwaggerParseResult result = new OpenAPIParser().readContents("https://petstore3.swagger.io/api/v3/openapi.json", null, null);
    
    // or from a file
    //   SwaggerParseResult result = new OpenAPIParser().readContents("./path/to/openapi.yaml", null, null);
    
    // the parsed POJO
    OpenAPI openAPI = result.getOpenAPI();
    
    if (result.getMessages() != null) result.getMessages().forEach(System.err::println); // validation errors and warnings
    
    if (openAPI != null) {
      ...
    }
    
  ```


  If you are providing a Swagger/OpenAPI 2.0 document to the parser , e.g.:


  ```java

  SwaggerParseResult result = new
  OpenAPIParser().readContents("./path/to/swagger.yaml", null, null);

  ```


  the Swagger/OpenAPI 2.0 document will be first converted into a comparable
  OpenAPI 3.0 one.


  You can also directly use `OpenAPIV3Parser` which only handles OpenAPI 3.0
  documents, and provides a convenience method to get directly the parsed
  `OpenAPI object:


  ```java

  import io.swagger.v3.parser.OpenAPIV3Parser;

  import io.swagger.v3.oas.models.OpenAPI;


  // ... your code

    // read a swagger description from the petstore
      
    OpenAPI openAPI = new OpenAPIV3Parser().read("https://petstore3.swagger.io/api/v3/openapi.json");
    
  ```


  ### Adding to your project

  You can include this library from Sonatype OSS for SNAPSHOTS, or Maven central
  for releases.  In your dependencies:


  ```xml

  <dependency>
    <groupId>io.swagger.parser.v3</groupId>
    <artifactId>swagger-parser</artifactId>
    <version>2.1.22</version>
  </dependency>

  ```


  #### Prerequisites

  You need the following installed and available in your $PATH:


  * Java 11

  * [Apache maven 3.x](http://maven.apache.org/)


  After cloning the project, you can build it from source with this command:


  ```

  mvn package

  ```


  ### Authentication


  If your OpenAPI definition is protected, you can pass headers in the request:

  ```java

  import io.swagger.v3.parser.core.models.AuthorizationValue;


  // ... your code

    // build a authorization value
    AuthorizationValue mySpecialHeader = new AuthorizationValue()
      .keyName("x-special-access")  //  the name of the authorization to pass
      .value("i-am-special")        //  the value of the authorization
      .type("header");              //  the location, as either `header` or `query`

    // or in a single constructor
    AuthorizationValue apiKey = new AuthorizationValue("api_key", "special-key", "header");
    OpenAPI openAPI = new OpenAPIV3Parser().readWithInfo(
      "https://petstore3.swagger.io/api/v3/openapi.json",
      Arrays.asList(mySpecialHeader, apiKey)
    );
  ```


  #### Dealing with self-signed SSL certificates

  If you're dealing with self-signed SSL certificates, or those signed by
  GoDaddy, you'll need to disable SSL Trust 

  Manager.  That's done by setting a system environment variable as such:


  ```

  export TRUST_ALL=true

  ```


  And then the Swagger Parser will _ignore_ invalid certificates.  Of course
  this is generally a bad idea, but if you're 

  working inside a firewall or really know what you're doing, well, there's your
  rope.


  #### Dealing with Let's Encrypt

  Depending on the version of Java that you use, certificates signed by the
  [Let's Encrypt](https://letsencrypt.org) certificate authority _may not work_
  by default.  If you are using any version of Java prior to 1.8u101, you most
  likely _must_ install an additional CA in your

  JVM.  Also note that 1.8u101 may _not_ be sufficient on it's own.  Some users
  have reported that certain operating systems are 

  not accepting Let's Encrypt signed certificates.


  Your options include:


  * Accepting all certificates per above

  * Installing the certificate manually in your JVM using the keystore using the
  `keytool` command

  * Configuring the JVM on startup to load your certificate


  But... this is all standard SSL configuration stuff and is well documented
  across the web.



  ### Options

  Parser uses options as a way to customize the behavior while parsing:


  #### 1. resolve:


  ```java

  ParseOptions parseOptions = new ParseOptions();

  parseOptions.setResolve(true); 

  final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
  parseOptions);

  ```



  - When remote or relative references are found in the parsed document, parser
  will attempt to:


  1. resolve the reference in the remote or relative location 

  1. parse the resolved reference

  1. add the resolved "component" (e.g. parameter, schema, response, etc.) to
  the resolved `OpenAPI` POJO components section

  1. replace the remote/relative reference with a local reference,  e.g. :
  `#/components/schemas/NameOfRemoteSchema`. 


  This applies to schemas, parameters, responses, pretty much everything
  containing a ref.


  #### 2. resolveFully:


  ```java

  ParseOptions parseOptions = new ParseOptions();

  parseOptions.setResolve(true); // implicit

  parseOptions.setResolveFully(true);

  final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
  parseOptions);

  ```


  - In some scenarios, after references are resolved (with `resolve`, see
  above), you might need to have all local references removed replacing the
  reference with the content of the referenced element. This is for example used
  in [Swagger Inflector](https://github.com/swagger-api/swagger-inflector). Be
  aware that the result could be more heavy/long due to duplication
      
  Original document:


  `a.yaml` 

  ```

  openapi: 3.0.1

  paths:
    "/newPerson":
      post:
        summary: Create new person
        description: Create new person
        responses:
          '200':
            description: ok
            content:
              "*/*":
                schema:
                  "$ref": "./ref-without-component/b.yaml#/components/schemas/CustomerType"
  ```

  `b.yaml`

  ```

  openapi: 3.0.1

  components:
    schemas:
      CustomerType:
        type: string
        example: Example value
  ```


  Serialized result after parsing with option `resolveFully(true)`


  `a.yaml`

  ```

  openapi: 3.0.1

  servers:

  - url: /

  paths:
    /newPerson:
      post:
        summary: Create new person
        description: Create new person
        responses:
          200:
            description: ok
            content:
              '*/*':
                schema:
                  type: string
                  example: Example value
  components:
    schemas:
      CustomerType:
        type: string
        example: Example value
  ```


  #### 3. flatten: 


  ```java

  ParseOptions parseOptions = new ParseOptions();

  parseOptions.setFlatten(true); 

  final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
  parseOptions);

  ```



  This is kind of the opposite of resolveFully, limited to defined schemas.


  In some scenarios, you might need to have all schemas defined inline (e.g. a
  response schema) moved to the `components/schemas` section and replaced with a
  reference to the newly added schema within `components/schemas`. This is for
  example used in [Swagger
  Codegen](https://github.com/swagger-api/swagger-codegen).


  Original document:


  `flatten.yaml`


  ```

  openapi: 3.0.0

  info:
    version: 1.0.0
    title: Swagger Petstore
    license:
      name: MIT
  paths:
    /pets:
      get:
        summary: List all pets
        operationId: listPets
        responses:
          '200':
            description: An paged array of pets
            headers:
              x-next:
                description: A link to the next page of responses
                schema:
                  type: string
            content:
              application/json:
                schema:
                   type: object
                   properties:
                      id:
                        type: integer
                        format: int64
                      name:
                        type: string
                      tag:
                        type: string
  ```


  Serialized result after parsing with option `flatten(true)`


  ```

  openapi: 3.0.0

  info:
    title: Swagger Petstore
    license:
      name: MIT
    version: 1.0.0
  servers:

  - url: /

  paths:
    /pets:
      get:
        tags:
        - pets
        summary: List all pets
        responses:
          200:
            description: An paged array of pets
            headers:
              x-next:
                description: A link to the next page of responses
                style: simple
                explode: false
                schema:
                  type: string
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/inline_response_200'
  components:
    schemas:
      inline_response_200:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          tag:
            type: string
  ```


  #### 4. resolveCombinators: 


  ```java

  ParseOptions parseOptions = new ParseOptions();

  parseOptions.setResolve(true); // implicit

  parseOptions.setResolveFully(true);

  parseOptions.setResolveCombinators(false); // default is true 

  final OpenAPI openAPI = new OpenAPIV3Parser().read("a.yaml", null,
  parseOptions);

  ```


  This option (only available with `resolveFully = true`) allows to customize
  behaviour related to `allOf/anyOf/oneOf` (composed schemas)  processing. With
  option set to `true` (default), composed schemas are transformed into "non
  composed" ones, by having all properties merged into a single resulting schema
  (see example below).

  If option is set to `false`, the resulting schema will instead maintain its
  "composed" nature, keeping properties within e.g. the `allOf` members.


  Please see examples below:


  **Unresolved yaml**


  ```

  openapi: 3.0.1

  servers:

  - url: http://petstore.swagger.io/api


  info:
    description: 'This is a sample server Petstore'
    version: 1.0.0
    title: testing source file
    termsOfService: http://swagger.io/terms/

  paths:
    "/withInvalidComposedModel":
      post:
        operationId: withInvalidComposedModel
        requestBody:
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/ExtendedAddress"
          required: false
        responses:
          '200':
            description: success!
  components:
    schemas:
      ExtendedAddress:
        type: object
        allOf:
          - $ref: '#/components/schemas/Address'
          - type: object
            required:
            - gps
            properties:
              gps:
                type: string
      Address:
        required:
        - street
        type: object
        properties:
          street:
            type: string
            example: 12345 El Monte Road
          city:
            type: string
            example: Los Altos Hills
          state:
            type: string
            example: CA
          zip:
            type: string
            example: '94022'
  ```


  **resolvedCombinator = true (default) - Test case**


  ```

  @Test
      public void resolveAllOfWithoutAggregatingParameters(@Injectable final List<AuthorizationValue> auths) {
          ParseOptions options = new ParseOptions();
          options.setResolveFully(true);
          options.setResolveCombinators(true);

          // Testing components/schemas
          OpenAPI openAPI = new OpenAPIV3Parser().readLocation("src/test/resources/composed.yaml",auths,options).getOpenAPI();
          
          ComposedSchema allOf = (ComposedSchema) openAPI.getComponents().getSchemas().get("ExtendedAddress");
          assertEquals(allOf.getAllOf().size(), 2);

          assertTrue(allOf.getAllOf().get(0).get$ref() != null);
          assertTrue(allOf.getAllOf().get(1).getProperties().containsKey("gps"));


          // Testing path item
          ObjectSchema schema = (ObjectSchema) openAPI.getPaths().get("/withInvalidComposedModel").getPost().getRequestBody().getContent().get("application/json").getSchema();

          assertEquals(schema.getProperties().size(), 5);
          assertTrue(schema.getProperties().containsKey("street"));
          assertTrue(schema.getProperties().containsKey("gps"));

      }
  ```


  **resolvedCombinator = true (default) - Resolved Yaml**


  ```

  openapi: 3.0.1

  info:
    title: testing source file
    description: This is a sample server Petstore
    termsOfService: http://swagger.io/terms/
    version: 1.0.0
  servers:

  - url: http://petstore.swagger.io/api

  paths:
    /withInvalidComposedModel:
      post:
        operationId: withInvalidComposedModel
        requestBody:
          content:
            application/json:
              schema:
                required:
                - gps
                - street
                type: object
                properties:
                  street:
                    type: string
                    example: 12345 El Monte Road
                  city:
                    type: string
                    example: Los Altos Hills
                  state:
                    type: string
                    example: CA
                  zip:
                    type: string
                    example: "94022"
                  gps:
                    type: string
          required: false
        responses:
          200:
            description: success!
  components:
    schemas:
      ExtendedAddress:
        type: object
        allOf:
        - $ref: '#/components/schemas/Address'
        - required:
          - gps
          type: object
          properties:
            gps:
              type: string
      Address:
        required:
        - street
        type: object
        properties:
          street:
            type: string
            example: 12345 El Monte Road
          city:
            type: string
            example: Los Altos Hills
          state:
            type: string
            example: CA
          zip:
            type: string
            example: "94022"
   ```
   
   **resolvedCombinator = false - Test case**
   
   ```
   @Test
      public void resolveAllOfWithoutAggregatingParameters(@Injectable final List<AuthorizationValue> auths) {
          ParseOptions options = new ParseOptions();
          options.setResolveFully(true);
          options.setResolveCombinators(false);

          // Testing components/schemas
          OpenAPI openAPI = new OpenAPIV3Parser().readLocation("src/test/resources/composed.yaml",auths,options).getOpenAPI();
         
          ComposedSchema allOf = (ComposedSchema) openAPI.getComponents().getSchemas().get("ExtendedAddress");
          assertEquals(allOf.getAllOf().size(), 2);
          assertTrue(allOf.getAllOf().get(0).getProperties().containsKey("street"));
          assertTrue(allOf.getAllOf().get(1).getProperties().containsKey("gps"));

          // Testing path item
          ComposedSchema schema = (ComposedSchema) openAPI.getPaths().get("/withInvalidComposedModel").getPost().getRequestBody().getContent().get("application/json").getSchema();
          // In fact the schema resolved previously is the same of /withInvalidComposedModel
          assertEquals(schema, allOf);
          assertEquals(schema.getAllOf().size(), 2);
          assertTrue(schema.getAllOf().get(0).getProperties().containsKey("street"));
          assertTrue(schema.getAllOf().get(1).getProperties().containsKey("gps"));

      }
    ```
    
    **resolvedCombinator = false - Resolved Yaml**
    
    ```
  openapi: 3.0.1

  info:
    title: testing source file
    description: This is a sample server Petstore
    termsOfService: http://swagger.io/terms/
    version: 1.0.0
  servers:

  - url: http://petstore.swagger.io/api

  paths:
    /withInvalidComposedModel:
      post:
        operationId: withInvalidComposedModel
        requestBody:
          content:
            application/json:
              schema:
                type: object
                allOf:
                - required:
                  - street
                  type: object
                  properties:
                    street:
                      type: string
                      example: 12345 El Monte Road
                    city:
                      type: string
                      example: Los Altos Hills
                    state:
                      type: string
                      example: CA
                    zip:
                      type: string
                      example: "94022"
                - required:
                  - gps
                  type: object
                  properties:
                    gps:
                      type: string
          required: false
        responses:
          200:
            description: success!
  components:
    schemas:
      ExtendedAddress:
        type: object
        allOf:
        - required:
          - street
          type: object
          properties:
            street:
              type: string
              example: 12345 El Monte Road
            city:
              type: string
              example: Los Altos Hills
            state:
              type: string
              example: CA
            zip:
              type: string
              example: "94022"
        - required:
          - gps
          type: object
          properties:
            gps:
              type: string
      Address:
        required:
        - street
        type: object
        properties:
          street:
            type: string
            example: 12345 El Monte Road
          city:
            type: string
            example: Los Altos Hills
          state:
            type: string
            example: CA
          zip:
            type: string
            example: "94022"
  ```


  ### Extensions

  This project has a core artifact--`swagger-parser`, which uses Java Service
  Provider Interface (SPI) so additional extensions can be added. 


  To build your own extension, you simply need to create a
  `src/main/resources/META-INF/services/io.swagger.v3.parser.core.extensions.SwaggerParserExtension`
  file with the full classname of your implementation.  Your class must also
  implement the `io.swagger.v3.parser.core.extensions.SwaggerParserExtension`
  interface.  Then, including your library with the `swagger-parser` module will
  cause it to be triggered automatically.


  ### OpenAPI 3.1 support


  Since version 2.1.0 Swagger Parser supports OpenAPI 3.1; see [this
  page](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---OpenAPI-3.1)
  for details


  ## Security contact


  Please disclose any security-related issues or vulnerabilities by emailing
  [security@swagger.io](mailto:security@swagger.io), instead of using the public
  issue tracker.
BigstickCarpet/swagger-cli: >
  Swagger/OpenAPI CLI

  ============================


  [![Cross-Platform
  Compatibility](https://apitools.dev/img/badges/os-badges.svg)](https://github.com/APIDevTools/swagger-cli/blob/master/.github/workflows/CI-CD.yaml)

  [![Build
  Status](https://github.com/APIDevTools/swagger-cli/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-cli/blob/master/.github/workflows/CI-CD.yaml)


  [![Dependencies](https://david-dm.org/APIDevTools/swagger-cli.svg)](https://david-dm.org/APIDevTools/swagger-cli)

  [![Coverage
  Status](https://coveralls.io/repos/github/APIDevTools/swagger-cli/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-cli?branch=master)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-cli.svg)](https://www.npmjs.com/package/@apidevtools/swagger-cli)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-cli.svg)](LICENSE)

  [![Buy us a
  tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-cli)




  Features

  --------------------------

  - Validate Swagger/OpenAPI files in **JSON or YAML** format

  - Supports multi-file API definitions via `$ref` pointers

  - Bundle multiple Swagger/OpenAPI files into one combined file




  Related Projects

  --------------------------

  - [Swagger Parser](https://github.com/APIDevTools/swagger-parser)

  - [Swagger Express
  Middleware](https://github.com/APIDevTools/swagger-express-middleware)




  Installation

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/):


  ```bash

  npm install -g @apidevtools/swagger-cli

  ```




  Usage

  --------------------------


  ```

  swagger-cli <command> [options] <file>


  Commands:
      validate                Validates an API definition in Swagger 2.0 or OpenAPI 3.0 format

      bundle                  Bundles a multi-file API definition into a single file

  Options:
      -h, --help              Show help for any command
      -v, --version           Output the CLI version number
      -d, --debug [filter]    Show debug output, optionally filtered (e.g. "*", "swagger:*", etc.)
  ```



  ### Validate an API


  The `swagger-cli validate` command will validate your Swagger/OpenAPI
  definition against the [Swagger 2.0
  schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json)
  or [OpenAPI 3.0
  Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.json). 
  It also performs additional validations against the
  [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md),
  which will catch some things that aren't covered by the schema, such as
  duplicate parameters, invalid MIME types, etc.


  The command will exit with a non-zero code if the API is invalid.


  ```

  swagger-cli validate [options] <file>


  Options:
      --no-schema             Do NOT validate against the Swagger/OpenAPI JSON schema

      --no-spec               Do NOT validate against the Swagger/OpenAPI specification
  ```


  #### Git pre-commit hook


  There is a useful Python tool called [pre-commit](https://pre-commit.com/)
  that can be used to execute a wide suite of pre-commit checks. The
  `swagger-cli validate` command can be integrated as part of a git pre-commit
  hook by adding the following configuration to the `repos` entry of an existing
  `.pre-commit-config.yaml` file.


  ```

  -   repo: https://github.com/APIDevTools/swagger-cli
      rev: v2.2.1
      hooks:
      - id: swagger-validation
        args: ["validate", "<path to root swagger>"]
  ```


  The intention is to point to single root swagger that references multiple
  swagger definitions. The above hook will execute the `swagger-cli validation`
  against the root swagger anytime that a file matching the pattern
  `.*swagger.*\.(json|yaml|yml)` is modified. Any failures in this validation
  will prevent the git commit from being processed.


  ### Combine Multiple Files


  The Swagger and OpenAPI specs allows you to split your API definition across
  multiple files using [`$ref`
  pointers](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#reference-object)
  to reference each file. You can use the `swagger-cli bundle` command to
  combine all of those referenced files into a single file, which is useful for
  distribution or interoperation with other tools.


  By default, the `swagger-cli bundle` command tries to keep the output file
  size as small as possible, by only embedding each referenced file _once_.  If
  the same file is referenced multiple times, then any subsequent references are
  simply modified to point to the _single_ inlined copy of the file.  If you
  want to produce a bundled file without _any_ `$ref` pointers, then add the
  `--dereference` option.  This will result in a larger file size, since
  multiple references to the same file will result in that file being embedded
  multiple times.


  If you don't specify the `--output-file` option, then the bundled API will be
  written to stdout, which means you can pipe it to other commands.


  The result of this method by default is written as JSON. It can be changed to
  YAML with the `--type` option, by passing the `yaml` value.


  ```

  swagger-cli bundle [options] <file>


  Options:
      -o, --outfile <file>        The output file

      -r, --dereference           Fully dereference all $ref pointers

      -f, --format <spaces>       Formats the output using the given number of spaces
                                  (the default is 2 spaces)

      -t, --type <filetype>       Defines the output file type. The valid values are: json, yaml
                                  (the default is JSON)

      -w, --wrap <column>         Set the line length for YAML strings
                                  (the default is no wrapping)
  ```




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [File an
  issue](https://github.com/APIDevTools/swagger-cli/issues) on GitHub and
  [submit a pull request](https://github.com/APIDevTools/swagger-cli/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-cli.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`




  License

  --------------------------

  Swagger CLI is 100% free and open-source, under the [MIT license](LICENSE).
  Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in
  production, then we ask that you [**buy the world a
  tree**](https://plant.treeware.earth/APIDevTools/swagger-cli) to thank us for
  our work. By contributing to the Treeware forest you’ll be creating employment
  for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![Travis
  CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
RepreZen/KaiZen-OpenApi-Parser: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B60AD40:11ABFB0B:66148878.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
networknt/openapi-parser: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280F:293BF1:B36FDA2:115D1C68:66148F45.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
metadevpro/openapi3-ts: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280C:17B462:29D219D:3F95BEC:66148E43.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Apicurio/oai-ts-core: >

  # Deprecated Repository


  Please note that this library has deprecated in favor of
  [apicurio-data-models](https://github.com/Apicurio/apicurio-data-models). 
  Please report all bugs and contribute all pull requests there.
kevindew/openapi3_parser: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  27C0:38313E:38076DB:569EBD1:66148D43.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
getkin/kin-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280F:1D7486:2153338:3586FBD:66148CBE.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
adwhit/openapi3-rust: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2815:1319AB:B16DA8D:114EC819:6614891D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
wework/speccy: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2808:0950:AD75C25:10DEAD1E:661494D6.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
apioo/psx-api: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:28FC095:3E79BF4:661489BC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
p1c2u/openapi-spec-validator: >
  **********************

  OpenAPI Spec validator

  **********************


  .. image::
  https://img.shields.io/docker/v/p1c2u/openapi-spec-validator.svg?color=%23086DD7&label=docker%20hub&sort=semver
       :target: https://hub.docker.com/r/p1c2u/openapi-spec-validator
  .. image:: https://img.shields.io/pypi/v/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator
  .. image::
  https://travis-ci.org/python-openapi/openapi-spec-validator.svg?branch=master
       :target: https://travis-ci.org/python-openapi/openapi-spec-validator
  .. image::
  https://img.shields.io/codecov/c/github/python-openapi/openapi-spec-validator/master.svg?style=flat
       :target: https://codecov.io/github/python-openapi/openapi-spec-validator?branch=master
  .. image:: https://img.shields.io/pypi/pyversions/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator
  .. image:: https://img.shields.io/pypi/format/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator
  .. image:: https://img.shields.io/pypi/status/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator

  About

  #####


  OpenAPI Spec Validator is a Python library that validates OpenAPI Specs

  against the `OpenAPI 2.0 (aka Swagger)

  <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md>`__,

  `OpenAPI 3.0
  <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md>`__

  and `OpenAPI 3.1
  <https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md>`__

  specification. The validator aims to check for full compliance with the
  Specification.



  Documentation

  #############


  Check documentation to see more details about the features. All documentation
  is in the "docs" directory and online at
  `openapi-spec-validator.readthedocs.io
  <https://openapi-spec-validator.readthedocs.io>`__



  Installation

  ############


  .. code-block:: console

      pip install openapi-spec-validator

  Alternatively you can download the code and install from the repository:


  .. code-block:: bash

     pip install -e git+https://github.com/python-openapi/openapi-spec-validator.git#egg=openapi_spec_validator


  Usage

  #####


  CLI (Command Line Interface)

  ****************************


  Straight forward way:


  .. code-block:: bash

      openapi-spec-validator openapi.yaml

  pipes way:


  .. code-block:: bash

      cat openapi.yaml | openapi-spec-validator -

  docker way:


  .. code-block:: bash

      docker run -v path/to/openapi.yaml:/openapi.yaml --rm p1c2u/openapi-spec-validator /openapi.yaml

  or more pythonic way:


  .. code-block:: bash

      python -m openapi_spec_validator openapi.yaml

  For more details, read about `CLI (Command Line Interface)
  <https://openapi-spec-validator.readthedocs.io/en/latest/cli.html>`__.


  Python package

  **************


  .. code:: python

      from openapi_spec_validator import validate_spec
      from openapi_spec_validator.readers import read_from_filename

      spec_dict, spec_url = read_from_filename('openapi.yaml')

      # If no exception is raised by validate_spec(), the spec is valid.
      validate_spec(spec_dict)

      validate_spec({'openapi': '3.1.0'})

      Traceback (most recent call last):
          ...
      OpenAPIValidationError: 'info' is a required property

  For more details, read about `Python package
  <https://openapi-spec-validator.readthedocs.io/en/latest/python.html>`__.


  Related projects

  ################


  * `openapi-core <https://github.com/python-openapi/openapi-core>`__
     Python library that adds client-side and server-side support for the OpenAPI v3.0 and OpenAPI v3.1 specification.
  * `openapi-schema-validator
  <https://github.com/python-openapi/openapi-schema-validator>`__
     Python library that validates schema against the OpenAPI Schema Specification v3.0 and OpenAPI Schema Specification v3.1.

  License

  #######


  Copyright (c) 2017-2023, Artur Maciag, All rights reserved. Apache v2
Microsoft/OpenAPI.NET: "![Category overview screenshot](docs/images/oainet.png \"Microsoft + OpenAPI = Love\")\r\n\r\n# OpenAPI.NET \r\n\r\n|Package|Nuget|\r\n|--|--|\r\n|Models and Writers|[![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.svg)](https://www.nuget.org/packages/Microsoft.OpenApi/) |\r\n|Readers | [![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.Readers.svg)](https://www.nuget.org/packages/Microsoft.OpenApi.Readers/) |\r\n\r\n\r\nThe **OpenAPI.NET** SDK contains a useful object model for OpenAPI documents in .NET along with common serializers to extract raw OpenAPI JSON and YAML documents from the model.\r\n\r\n**See more information on the OpenAPI specification and its history here: <a href=\"https://www.openapis.org\">Open API Initiative</a>**\r\n\r\nProject Objectives \r\n\r\n- Provide a single shared object model in .NET for OpenAPI descriptions.\r\n- Include the most primitive Reader for ingesting OpenAPI JSON and YAML documents in both V2 and V3 formats.\r\n- Provide OpenAPI description writers for both V2 and V3 specification formats.\r\n- Enable developers to create Readers that translate different data formats into OpenAPI descriptions. \r\n\r\n# Installation\r\n\r\n- Install core Nuget package `Microsoft.OpenApi`\r\n- Install readers Nuget package `Microsoft.OpenApi.Readers`\r\n\r\n# Processors\r\nThe OpenAPI.NET project holds the base object model for representing OpenAPI documents as .NET objects. Some developers have found the need to write processors that convert other data formats into this OpenAPI.NET object model. We'd like to curate that list of processors in this section of the readme. \r\n\r\nThe base JSON and YAML processors are built into this project. Below is the list of the other supported processor projects.\r\n\r\n- [**C# Comment / Annotation Processor**](https://github.com/Microsoft/OpenAPI.NET.CSharpAnnotations) : Converts standard .NET annotations ( /// comments ) emitted from your build (MSBuild.exe) into OpenAPI.NET document object. \r\n\r\n- [**OData CSDL Processor**](https://github.com/Microsoft/OpenAPI.NET.OData) : Converts the XML representation of the Entity Data Model (EDM) describing an OData Service into OpenAPI.NET document object. \r\n\r\n# Example Usage\r\n\r\nCreating an OpenAPI Document\r\n\r\n```C#\r\nvar document = new OpenApiDocument\r\n{\r\n    Info = new OpenApiInfo\r\n    {\r\n        Version = \"1.0.0\",\r\n        Title = \"Swagger Petstore (Simple)\",\r\n    },\r\n    Servers = new List<OpenApiServer>\r\n    {\r\n        new OpenApiServer { Url = \"http://petstore.swagger.io/api\" }\r\n    },\r\n    Paths = new OpenApiPaths\r\n    {\r\n        [\"/pets\"] = new OpenApiPathItem\r\n        {\r\n            Operations = new Dictionary<OperationType, OpenApiOperation>\r\n            {\r\n                [OperationType.Get] = new OpenApiOperation\r\n                {\r\n                    Description = \"Returns all pets from the system that the user has access to\",\r\n                    Responses = new OpenApiResponses\r\n                    {\r\n                        [\"200\"] = new OpenApiResponse\r\n                        {\r\n                            Description = \"OK\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nReading and writing a OpenAPI description\r\n\r\n```C#\r\nvar httpClient = new HttpClient\r\n{\r\n    BaseAddress = new Uri(\"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/\")\r\n};\r\n\r\nvar stream = await httpClient.GetStreamAsync(\"master/examples/v3.0/petstore.yaml\");\r\n\r\n// Read V3 as YAML\r\nvar openApiDocument = new OpenApiStreamReader().Read(stream, out var diagnostic);\r\n\r\n// Write V2 as JSON\r\nvar outputString = openApiDocument.Serialize(OpenApiSpecVersion.OpenApi2_0, OpenApiFormat.Json);\r\n\r\n```\r\n\r\n# Build Status\r\n\r\n|**master**|\r\n|--|\r\n|[![Build status](https://ci.appveyor.com/api/projects/status/9l6hly3vjeu0tmtx/branch/master?svg=true)](https://ci.appveyor.com/project/MicrosoftOpenAPINETAdmin/openapi-net-54e7i/branch/master)|\r\n\r\n# Contributing\r\n\r\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n\r\nTo provide feedback and ask questions you can use Stack Overflow with the [OpenAPI.NET](https://stackoverflow.com/questions/tagged/openapi.net) tag or use the OpenAPI.NET Slack channel which you can join by registering for the HTTP APIs team at http://slack.httpapis.com.\r\n"
swagger-api/swagger-codegen: "# <img src=\"https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SWC-logo-clr.png\" height=\"80\">\n\n[![Build Status](https://img.shields.io/jenkins/build.svg?jobUrl=https://jenkins.swagger.io/job/oss-swagger-core-master-java-8)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-core-master-java-8)\n\n[![Build Status](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-codegen-master/badge/icon?subject=jenkins%20build)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-codegen-master/)\n\n[![Build Status](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-codegen-master-java7/badge/icon?subject=jenkins%20build%20-%20java%207)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-codegen-master-java7/)\n\n- Master (2.4.40-SNAPSHOT): [![Java Test](https://img.shields.io/jenkins/build.svg?jobUrl=https://jenkins.swagger.io/job/oss-swagger-codegen-master)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-codegen-master)\n[![Windows Test](https://ci.appveyor.com/api/projects/status/github/swagger-api/swagger-codegen?branch=master&svg=true&passingText=Windows%20Test%20-%20OK&failingText=Windows%20Test%20-%20Fails)](https://ci.appveyor.com/project/swaggerhub-bot/swagger-codegen)\n\n- 3.0.52-SNAPSHOT:  [![Java Test](https://img.shields.io/jenkins/build.svg?jobUrl=https://jenkins.swagger.io/job/oss-swagger-codegen-3)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-codegen-3)\n[![Windows Test](https://ci.appveyor.com/api/projects/status/github/swagger-api/swagger-codegen?branch=3.0.0&svg=true&passingText=Windows%20Test%20-%20OK&failingText=Windows%20Test%20-%20Fails)](https://ci.appveyor.com/project/swaggerhub-bot/swagger-codegen)\n\n\n[Maven Central](https://maven-badges.herokuapp.com/maven-central/io.swagger/swagger-codegen-project)\n\n:star::star::star: If you would like to contribute, please refer to [guidelines](https://github.com/swagger-api/swagger-codegen/blob/master/CONTRIBUTING.md) and a list of [open tasks](https://github.com/swagger-api/swagger-codegen/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22).:star::star::star:\n\n:notebook_with_decorative_cover: For more information, please refer to the [Wiki page](https://github.com/swagger-api/swagger-codegen/wiki) and [FAQ](https://github.com/swagger-api/swagger-codegen/wiki/FAQ) :notebook_with_decorative_cover:\n\n:warning: If the OpenAPI/Swagger spec is obtained from an untrusted source, please make sure you've reviewed the spec before using Swagger Codegen to generate the API client, server stub or documentation as [code injection](https://en.wikipedia.org/wiki/Code_injection) may occur :warning:\n\n:rocket: ProductHunt: https://producthunt.com/posts/swagger-codegen :rocket:\n\n:notebook_with_decorative_cover: The eBook [A Beginner's Guide to Code Generation for REST APIs](https://gumroad.com/l/swagger_codegen_beginner) is a good starting point for beginners.\n\n## Versioning\n\n**NOTE:** version 2.X (`io.swagger`) and 3.X (`io.swagger.codegen.v3`) have **different** group ids.\n\n2.X and 3.X version lines of Swagger Codegen are available; 2.X (`master` branch) supports Swagger/OpenAPI version 2,\nwhile 3.X ([`3.0.0` branch](https://github.com/swagger-api/swagger-codegen/tree/3.0.0)) supports OpenAPI version 3 (and version 2 via spec conversion to version 3).\n[Online generator of version 3.X](https://github.com/swagger-api/swagger-codegen/tree/3.0.0#online-generators) supports both generation from Swagger/OpenAPI version 2 (by using engine + generators of 2.X) and version 3 specifications.\n\n\n**NOTE:** this document refers to version 2.X, check [here](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) for 3.X.\n\n\n### Swagger Codegen 2.X ([`master` branch](https://github.com/swagger-api/swagger-codegen/tree/master))\n\nSwagger Codegen 2.X supports Swagger/OpenAPI version 2.\n\ngroup id: `io.swagger`\nmaven central (maven plugin): https://mvnrepository.com/artifact/io.swagger/swagger-codegen-maven-plugin\n\ndependency example:\n\n```\n<dependency>\n    <groupId>io.swagger</groupId>\n    <artifactId>swagger-codegen-maven-plugin</artifactId>\n    <version>2.4.39</version>\n</dependency>\n```\n\n### Swagger Codegen 3.X ([`3.0.0` branch](https://github.com/swagger-api/swagger-codegen/tree/3.0.0))\n\nSwagger Codegen 3.X supports OpenAPI version 3 (and version 2 via spec conversion to version 3)\n[Online generator of version 3.X](https://github.com/swagger-api/swagger-codegen/tree/3.0.0#online-generators) supports both generation from Swagger/OpenAPI version 2 (by using engine + generators of 2.X) and version 3 specifications.\n\ngroup id: `io.swagger.codegen.v3`\nmaven central: https://mvnrepository.com/artifact/io.swagger.codegen.v3\n\ndependency example:\n\n```\n<dependency>\n    <groupId>io.swagger.codegen.v3</groupId>\n    <artifactId>swagger-codegen-maven-plugin</artifactId>\n    <version>3.0.52</version>\n</dependency>\n```\n\n\n\n## Overview\nThis is the Swagger Codegen project, which allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an [OpenAPI Spec](https://github.com/OAI/OpenAPI-Specification). Currently, the following languages/frameworks are supported:\n\n- **API clients**: **ActionScript**, **Ada**, **Apex**, **Bash**, **C#** (.net 2.0, 3.5 or later), **C++** (cpprest, Qt5, Tizen), **Clojure**, **Dart**, **Elixir**, **Elm**, **Eiffel**, **Erlang**, **Go**, **Groovy**, **Haskell** (http-client, Servant), **Java** (Jersey1.x, Jersey2.x, OkHttp, Retrofit1.x, Retrofit2.x, Feign, RestTemplate, RESTEasy, Vertx, Google API Client Library for Java, Rest-assured), **Kotlin**, **Lua**, **Node.js** (ES5, ES6, AngularJS with Google Closure Compiler annotations) **Objective-C**, **Perl**, **PHP**, **PowerShell**, **Python**, **R**, **Ruby**, **Rust** (rust, rust-server), **Scala** (akka, http4s, swagger-async-httpclient), **Swift** (2.x, 3.x, 4.x, 5.x), **Typescript** (Angular1.x, Angular2.x, Fetch, jQuery, Node)\n- **Server stubs**: **Ada**, **C#** (ASP.NET Core, NancyFx), **C++** (Pistache, Restbed), **Erlang**, **Go**, **Haskell** (Servant), **Java** (MSF4J, Spring, Undertow, JAX-RS: CDI, CXF, Inflector, RestEasy, Play Framework, [PKMST](https://github.com/ProKarma-Inc/pkmst-getting-started-examples)), **Kotlin**, **PHP** (Lumen, Slim, Silex, [Symfony](https://symfony.com/), [Zend Expressive](https://github.com/zendframework/zend-expressive)), **Python** (Flask), **NodeJS**, **Ruby** (Sinatra, Rails5), **Rust** (rust-server), **Scala** ([Finch](https://github.com/finagle/finch), [Lagom](https://github.com/lagom/lagom), Scalatra)\n- **API documentation generators**: **HTML**, **Confluence Wiki**\n- **Configuration files**: [**Apache2**](https://httpd.apache.org/)\n- **Others**: **JMeter**\n\nCheck out [OpenAPI-Spec](https://github.com/OAI/OpenAPI-Specification) for additional information about the OpenAPI project.\n\n# Table of contents\n\n  - [Versioning](#versioning)\n  - [Overview](#overview)\n  - [Table of Contents](#table-of-contents)\n  - Installation\n    - [Compatibility](#compatibility)\n    - [Prerequisites](#prerequisites)\n      - [OS X Users](#os-x-users)\n    - [Building](#building)\n    - [Docker](#docker)\n      - [Development in Docker](#development-in-docker)\n      - [Run docker in Vagrant](#run-docker-in-vagrant)\n      - [Public pre-built Docker images](#public-pre-built-docker-images)\n    - [Homebrew](#homebrew)\n  - [Getting Started](#getting-started)\n  - Generators\n    - [To generate a sample client library](#to-generate-a-sample-client-library)\n    - [Generating libraries from your server](#generating-libraries-from-your-server)\n    - [Modifying the client library format](#modifying-the-client-library-format)\n    - [Making your own codegen modules](#making-your-own-codegen-modules)\n    - [Where is Javascript???](#where-is-javascript)\n    - [Generating a client from local files](#generating-a-client-from-local-files)\n    - [Customizing the generator](#customizing-the-generator)\n    - [Validating your OpenAPI Spec](#validating-your-openapi-spec)\n    - [Generating dynamic html api documentation](#generating-dynamic-html-api-documentation)\n    - [Generating static html api documentation](#generating-static-html-api-documentation)\n    - [To build a server stub](#to-build-a-server-stub)\n    - [To build the codegen library](#to-build-the-codegen-library)\n  - [Workflow Integration](#workflow-integration)\n    - [Maven Integration](#maven-integration)\n    - [Gradle Integration](#gradle-integration)\n  - [Github Integration](#github-integration)\n  - [Online Generators](#online-generators)\n  - [Guidelines for Contribution](https://github.com/swagger-api/swagger-codegen/blob/master/CONTRIBUTING.md#guidelines-for-contributing)\n  - [Companies/Projects using Swagger Codegen](#companiesprojects-using-swagger-codegen)\n  - [Presentations/Videos/Tutorials/Books](#presentationsvideostutorialsbooks)\n  - [Swagger Codegen Core Team](#swagger-codegen-core-team)\n  - [Swagger Codegen Technical Committee](#swagger-codegen-technical-committee)\n  - [License](#license)\n\n\n## Compatibility\nThe OpenAPI Specification has undergone 3 revisions since initial creation in 2010.  The Swagger Codegen project has the following compatibilities with the OpenAPI Specification:\n\nSwagger Codegen Version    | Release Date | OpenAPI Spec compatibility | Notes\n-------------------------- |--------------| -------------------------- | -----\n3.0.53-SNAPSHOT (current 3.0.0, upcoming minor release) [SNAPSHOT](https://oss.sonatype.org/content/repositories/snapshots/io/swagger/codegen/v3/swagger-codegen-cli/3.0.53-SNAPSHOT/)| TBD          | 1.0, 1.1, 1.2, 2.0, 3.0 | Minor release\n[3.0.52](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.52) (**current stable**) | 2023-12-30   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.52](https://github.com/swagger-api/swagger-codegen/tree/v3.0.52)\n[3.0.51](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.51) | 2023-11-21   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.51](https://github.com/swagger-api/swagger-codegen/tree/v3.0.51)\n[3.0.50](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.50) | 2023-10-26   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.50](https://github.com/swagger-api/swagger-codegen/tree/v3.0.50)\n[3.0.49](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.49) | 2023-10-23   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.49](https://github.com/swagger-api/swagger-codegen/tree/v3.0.49)\n[3.0.48](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.48) | 2023-10-19   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.48](https://github.com/swagger-api/swagger-codegen/tree/v3.0.48)\n[3.0.47](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.47) | 2023-10-02   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.47](https://github.com/swagger-api/swagger-codegen/tree/v3.0.47)\n[3.0.46](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.46) | 2023-06-07   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.46](https://github.com/swagger-api/swagger-codegen/tree/v3.0.46)\n[3.0.45](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.45) | 2023-06-02   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.45](https://github.com/swagger-api/swagger-codegen/tree/v3.0.45)\n[3.0.44](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.44) | 2023-05-23   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.44](https://github.com/swagger-api/swagger-codegen/tree/v3.0.44)\n[3.0.43](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.43) | 2023-05-17   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.43](https://github.com/swagger-api/swagger-codegen/tree/v3.0.43)\n[3.0.42](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.42) | 2023-04-05   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.42](https://github.com/swagger-api/swagger-codegen/tree/v3.0.42)\n[3.0.41](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.41) | 2023-02-16   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.41](https://github.com/swagger-api/swagger-codegen/tree/v3.0.41)\n[3.0.40](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.40) | 2023-01-27   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.40](https://github.com/swagger-api/swagger-codegen/tree/v3.0.40)\n[3.0.39](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.39) | 2023-01-25   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.39](https://github.com/swagger-api/swagger-codegen/tree/v3.0.39)\n[3.0.38](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.38) | 2023-01-22   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.38](https://github.com/swagger-api/swagger-codegen/tree/v3.0.38)\n[3.0.37](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.37) | 2023-01-19   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.37](https://github.com/swagger-api/swagger-codegen/tree/v3.0.37)\n[3.0.36](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.36) | 2022-11-10   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.36](https://github.com/swagger-api/swagger-codegen/tree/v3.0.36)\n[3.0.35](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.35) | 2022-08-15   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.35](https://github.com/swagger-api/swagger-codegen/tree/v3.0.35)\n[3.0.34](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.34) | 2022-04-12   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.34](https://github.com/swagger-api/swagger-codegen/tree/v3.0.34)\n[3.0.33](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.33) | 2022-02-07   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.33](https://github.com/swagger-api/swagger-codegen/tree/v3.0.33)\n[3.0.32](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.32) | 2022-01-11   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.32](https://github.com/swagger-api/swagger-codegen/tree/v3.0.32)\n[3.0.31](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.31) | 2021-12-28   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.31](https://github.com/swagger-api/swagger-codegen/tree/v3.0.31)\n[3.0.30](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.30) | 2021-11-18   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.30](https://github.com/swagger-api/swagger-codegen/tree/v3.0.30)\n[3.0.29](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.29) | 2021-10-05   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.29](https://github.com/swagger-api/swagger-codegen/tree/v3.0.29)\n[3.0.28](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.28) | 2021-09-30   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.28](https://github.com/swagger-api/swagger-codegen/tree/v3.0.28)\n[3.0.27](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.27) | 2021-06-28   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.27](https://github.com/swagger-api/swagger-codegen/tree/v3.0.27)\n[3.0.26](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.26) | 2021-05-28   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.26](https://github.com/swagger-api/swagger-codegen/tree/v3.0.26)\n[3.0.25](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.25) | 2021-03-04   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.25](https://github.com/swagger-api/swagger-codegen/tree/v3.0.25)\n[3.0.24](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.24) | 2020-12-29   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.24](https://github.com/swagger-api/swagger-codegen/tree/v3.0.24)\n[3.0.23](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.23) | 2020-11-02   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.23](https://github.com/swagger-api/swagger-codegen/tree/v3.0.23)\n[3.0.22](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.22) | 2020-10-05   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.22](https://github.com/swagger-api/swagger-codegen/tree/v3.0.22)\n[3.0.21](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.21) | 2020-07-28   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.21](https://github.com/swagger-api/swagger-codegen/tree/v3.0.21)\n[3.0.20](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.20) | 2020-05-18   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.20](https://github.com/swagger-api/swagger-codegen/tree/v3.0.20)\n[3.0.19](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.19) | 2020-04-02   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.19](https://github.com/swagger-api/swagger-codegen/tree/v3.0.19)\n[3.0.18](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.18) | 2020-02-26   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.18](https://github.com/swagger-api/swagger-codegen/tree/v3.0.18)\n[3.0.17](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.17) | 2020-02-23   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.17](https://github.com/swagger-api/swagger-codegen/tree/v3.0.17)\n[3.0.17](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.16) | 2020-01-15   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.16](https://github.com/swagger-api/swagger-codegen/tree/v3.0.16)\n[3.0.15](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.15) | 2020-01-03   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.15](https://github.com/swagger-api/swagger-codegen/tree/v3.0.15)\n[3.0.14](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.14) | 2019-11-16   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.14](https://github.com/swagger-api/swagger-codegen/tree/v3.0.14)\n[3.0.13](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.13) | 2019-10-16   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.13](https://github.com/swagger-api/swagger-codegen/tree/v3.0.13)\n[3.0.12](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.12) | 2019-10-14   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.12](https://github.com/swagger-api/swagger-codegen/tree/v3.0.12)\n[3.0.11](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.11) | 2019-08-24   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.11](https://github.com/swagger-api/swagger-codegen/tree/v3.0.11)\n[3.0.10](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.10) | 2019-07-11   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.10](https://github.com/swagger-api/swagger-codegen/tree/v3.0.10)\n[3.0.9](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.9) | 2019-06-28   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.9](https://github.com/swagger-api/swagger-codegen/tree/v3.0.9)\n[3.0.8](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.8) | 2019-04-25   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.8](https://github.com/swagger-api/swagger-codegen/tree/v3.0.8)\n[3.0.7](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.7) | 2019-03-26   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.7](https://github.com/swagger-api/swagger-codegen/tree/v3.0.7)\n[3.0.5](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.5) | 2019-02-18   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.5](https://github.com/swagger-api/swagger-codegen/tree/v3.0.5)\n[3.0.4](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.4) | 2019-01-16   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.4](https://github.com/swagger-api/swagger-codegen/tree/v3.0.4)\n[3.0.3](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.3) | 2018-11-30   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.3](https://github.com/swagger-api/swagger-codegen/tree/v3.0.3)\n[3.0.2](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.2)| 2018-10-19   | 1.0, 1.1, 1.2, 2.0, 3.0 | Minor release\n[3.0.1](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.1)| 2018-10-05   | 1.0, 1.1, 1.2, 2.0, 3.0 | Major release with breaking changes\n[3.0.0](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.0)| 2018-09-06   | 1.0, 1.1, 1.2, 2.0, 3.0 | Major release with breaking changes\n2.4.40-SNAPSHOT (current master, upcoming minor release) [SNAPSHOT](https://oss.sonatype.org/content/repositories/snapshots/io/swagger/swagger-codegen-cli/2.4.40-SNAPSHOT/)| TBD          | 1.0, 1.1, 1.2, 2.0   | Minor release\n[2.4.39](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.39) (**current stable**) | 2024-01-02   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.39](https://github.com/swagger-api/swagger-codegen/tree/v2.4.39)\n[2.4.38](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.38) | 2023-12-29   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.38](https://github.com/swagger-api/swagger-codegen/tree/v2.4.38)\n[2.4.37](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.37) | 2023-11-21   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.37](https://github.com/swagger-api/swagger-codegen/tree/v2.4.37)\n[2.4.36](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.36) | 2023-10-26   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.36](https://github.com/swagger-api/swagger-codegen/tree/v2.4.36)\n[2.4.35](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.35) | 2023-10-26   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.35](https://github.com/swagger-api/swagger-codegen/tree/v2.4.35)\n[2.4.34](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.34) | 2023-10-19   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.34](https://github.com/swagger-api/swagger-codegen/tree/v2.4.34)\n[2.4.33](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.33) | 2023-10-02   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.33](https://github.com/swagger-api/swagger-codegen/tree/v2.4.33)\n[2.4.32](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.32) | 2023-05-17   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.32](https://github.com/swagger-api/swagger-codegen/tree/v2.4.32)\n[2.4.31](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.31) | 2023-04-02   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.31](https://github.com/swagger-api/swagger-codegen/tree/v2.4.31)\n[2.4.30](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.30) | 2023-02-16   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.30](https://github.com/swagger-api/swagger-codegen/tree/v2.4.30)\n[2.4.29](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.29) | 2022-11-10   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.29](https://github.com/swagger-api/swagger-codegen/tree/v2.4.29)\n[2.4.28](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.28) | 2022-08-15   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.28](https://github.com/swagger-api/swagger-codegen/tree/v2.4.28)\n[2.4.27](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.27) | 2022-04-12   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.27](https://github.com/swagger-api/swagger-codegen/tree/v2.4.27)\n[2.4.26](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.26) | 2022-02-07   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.26](https://github.com/swagger-api/swagger-codegen/tree/v2.4.26)\n[2.4.25](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.25) | 2021-12-28   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.25](https://github.com/swagger-api/swagger-codegen/tree/v2.4.25)\n[2.4.24](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.24) | 2021-11-18   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.24](https://github.com/swagger-api/swagger-codegen/tree/v2.4.24)\n[2.4.23](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.23) | 2021-10-08   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.23](https://github.com/swagger-api/swagger-codegen/tree/v2.4.23)\n[2.4.22](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.22) | 2021-09-30   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.22](https://github.com/swagger-api/swagger-codegen/tree/v2.4.22)\n[2.4.21](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.21) | 2021-06-28   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.21](https://github.com/swagger-api/swagger-codegen/tree/v2.4.21)\n[2.4.20](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.20) | 2021-05-28   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.20](https://github.com/swagger-api/swagger-codegen/tree/v2.4.20)\n[2.4.19](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.19) | 2021-03-04   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.19](https://github.com/swagger-api/swagger-codegen/tree/v2.4.19)\n[2.4.18](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.18) | 2020-12-29   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.18](https://github.com/swagger-api/swagger-codegen/tree/v2.4.18)\n[2.4.17](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.17) | 2020-11-02   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.17](https://github.com/swagger-api/swagger-codegen/tree/v2.4.17)\n[2.4.16](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.16) | 2020-10-05   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.16](https://github.com/swagger-api/swagger-codegen/tree/v2.4.16)\n[2.4.15](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.15) | 2020-07-28   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.15](https://github.com/swagger-api/swagger-codegen/tree/v2.4.15)\n[2.4.14](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.14) | 2020-05-18   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.14](https://github.com/swagger-api/swagger-codegen/tree/v2.4.14)\n[2.4.13](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.13) | 2020-04-02   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.13](https://github.com/swagger-api/swagger-codegen/tree/v2.4.13)\n[2.4.12](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.12) | 2020-01-15   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.12](https://github.com/swagger-api/swagger-codegen/tree/v2.4.12)\n[2.4.11](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.11) | 2020-01-03   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.11](https://github.com/swagger-api/swagger-codegen/tree/v2.4.11)\n[2.4.10](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.10) | 2019-11-16   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.10](https://github.com/swagger-api/swagger-codegen/tree/v2.4.10)\n[2.4.9](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.9) | 2019-10-14   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.9](https://github.com/swagger-api/swagger-codegen/tree/v2.4.9)\n[2.4.8](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.8) | 2019-08-24   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.8](https://github.com/swagger-api/swagger-codegen/tree/v2.4.8)\n[2.4.7](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.7) | 2019-07-11   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.7](https://github.com/swagger-api/swagger-codegen/tree/v2.4.7)\n[2.4.6](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.6) | 2019-06-28   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.6](https://github.com/swagger-api/swagger-codegen/tree/v2.4.6)\n[2.4.5](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.5)  | 2019-04-25   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.5](https://github.com/swagger-api/swagger-codegen/tree/v2.4.5)\n[2.4.4](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.4) | 2019-03-26   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.4](https://github.com/swagger-api/swagger-codegen/tree/v2.4.4)\n[2.4.2](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.2) | 2019-02-18   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.2](https://github.com/swagger-api/swagger-codegen/tree/v2.4.2)\n[2.4.1](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.1) | 2019-01-16   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.1](https://github.com/swagger-api/swagger-codegen/tree/v2.4.1)\n[2.4.0](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.0) | 2018-11-30   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.0](https://github.com/swagger-api/swagger-codegen/tree/v2.4.0)\n[2.3.1](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.3.1) | 2018-01-17   | 1.0, 1.1, 1.2, 2.0   | [tag v2.3.1](https://github.com/swagger-api/swagger-codegen/tree/v2.3.1)\n[2.3.0](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.3.0) | 2017-12-21   | 1.0, 1.1, 1.2, 2.0   | [tag v2.3.0](https://github.com/swagger-api/swagger-codegen/tree/v2.3.0)\n[2.2.3](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.2.3) | 2017-07-15   | 1.0, 1.1, 1.2, 2.0   | [tag v2.2.3](https://github.com/swagger-api/swagger-codegen/tree/v2.2.3)\n[2.2.2](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.2.2) | 2017-03-01   | 1.0, 1.1, 1.2, 2.0   | [tag v2.2.2](https://github.com/swagger-api/swagger-codegen/tree/v2.2.2)\n[2.2.1](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.2.1) | 2016-08-07   | 1.0, 1.1, 1.2, 2.0   | [tag v2.2.1](https://github.com/swagger-api/swagger-codegen/tree/v2.2.1)\n[2.1.6](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.1.6) | 2016-04-06   | 1.0, 1.1, 1.2, 2.0   | [tag v2.1.6](https://github.com/swagger-api/swagger-codegen/tree/v2.1.6)\n2.0.17                     | 2014-08-22   | 1.1, 1.2             | [tag v2.0.17](https://github.com/swagger-api/swagger-codegen/tree/2.0.17)\n1.0.4                      | 2012-04-12   | 1.0, 1.1             | [tag v1.0.4](https://github.com/swagger-api/swagger-codegen/tree/swagger-codegen_2.9.1-1.1)\n\n### Prerequisites\nIf you're looking for the latest stable version, you can grab it directly from Maven.org (Java 8 runtime at a minimum):\n\n```sh\n# Download current stable 2.x.x branch (Swagger and OpenAPI version 2)\nwget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.39/swagger-codegen-cli-2.4.39.jar -O swagger-codegen-cli.jar\n\njava -jar swagger-codegen-cli.jar help\n\n# Download current stable 3.x.x branch (OpenAPI version 3)\nwget https://repo1.maven.org/maven2/io/swagger/codegen/v3/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar -O swagger-codegen-cli.jar\n\njava -jar swagger-codegen-cli.jar --help\n```\n\nFor Windows users, you will need to install [wget](http://gnuwin32.sourceforge.net/packages/wget.htm) or you can use Invoke-WebRequest in PowerShell (3.0+), e.g. `Invoke-WebRequest -OutFile swagger-codegen-cli.jar https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.39/swagger-codegen-cli-2.4.39.jar`\n\nOn a mac, it's even easier with `brew`:\n```sh\nbrew install swagger-codegen\n```\n\nTo build from source, you need the following installed and available in your `$PATH:`\n\n* [Java 11+](http://java.oracle.com)\n\n* [Apache maven 3.6.2 or greater](http://maven.apache.org/)\n\n#### OS X Users\nDon't forget to install Java 11+.\n\nExport `JAVA_HOME` in order to use the supported Java version:\n```sh\nexport JAVA_HOME=`/usr/libexec/java_home -v 11`\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n\n### Building\n\nAfter cloning the project, you can build it from source with this command:\n```sh\nmvn clean package\n```\n\nIf you don't have maven installed, you may directly use the included [maven wrapper](https://github.com/takari/maven-wrapper), and build with the command:\n```sh\n./mvnw clean package\n```\n\n### Homebrew\n\nTo install, run `brew install swagger-codegen`\n\nHere is an example usage:\n```sh\nswagger-codegen generate -i https://petstore.swagger.io/v2/swagger.json -l ruby -o /tmp/test/\n```\n\n### Docker\n\n#### Development in docker\n\nYou can use `run-in-docker.sh` to do all development. This script maps your local repository to `/gen`\nin the docker container. It also maps `~/.m2/repository` to the appropriate container location.\n\nTo execute `mvn package`:\n\n```sh\ngit clone https://github.com/swagger-api/swagger-codegen\ncd swagger-codegen\n./run-in-docker.sh mvn package\n```\n\nBuild artifacts are now accessible in your working directory.\n\nOnce built, `run-in-docker.sh` will act as an executable for swagger-codegen-cli. To generate code, you'll need to output to a directory under `/gen` (e.g. `/gen/out`). For example:\n\n```sh\n./run-in-docker.sh help # Executes 'help' command for swagger-codegen-cli\n./run-in-docker.sh langs # Executes 'langs' command for swagger-codegen-cli\n./run-in-docker.sh /gen/bin/go-petstore.sh  # Builds the Go client\n./run-in-docker.sh generate -i modules/swagger-codegen/src/test/resources/2_0/petstore.yaml \\\n    -l go -o /gen/out/go-petstore -DpackageName=petstore # generates go client, outputs locally to ./out/go-petstore\n```\n#### Standalone generator Development in docker\n\nSee [standalone generator development](https://github.com/swagger-api/swagger-codegen/blob/master/standalone-gen-dev/standalone-generator-development.md)\n\n#### Run Docker in Vagrant\nPrerequisite: install [Vagrant](https://www.vagrantup.com/downloads.html) and [VirtualBox](https://www.virtualbox.org/wiki/Downloads).\n ```sh\ngit clone http://github.com/swagger-api/swagger-codegen.git\ncd swagger-codegen\nvagrant up\nvagrant ssh\ncd /vagrant\n./run-in-docker.sh mvn package\n ```\n\n#### Public Pre-built Docker images\n\n - https://hub.docker.com/r/swaggerapi/swagger-generator/ (official web service)\n - https://hub.docker.com/r/swaggerapi/swagger-codegen-cli/ (official CLI)\n\n\n##### Swagger Generator Docker Image\n\nThe Swagger Generator image can act as a self-hosted web application and API for generating code. This container can be  incorporated into a CI pipeline, and requires at least two HTTP requests and some docker orchestration to access generated code.\n\nExample usage (note this assumes `jq` is installed for command line processing of JSON):\n\n```sh\n# Start container and save the container id\nCID=$(docker run -d swaggerapi/swagger-generator)\n# allow for startup\nsleep 5\n# Get the IP of the running container\nGEN_IP=$(docker inspect --format '{{.NetworkSettings.IPAddress}}'  $CID)\n# Execute an HTTP request and store the download link\nRESULT=$(curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n  \"swaggerUrl\": \"https://petstore.swagger.io/v2/swagger.json\"\n}' 'http://localhost:8188/api/gen/clients/javascript' | jq '.link' | tr -d '\"')\n# Download the generated zip and redirect to a file\ncurl $RESULT > result.zip\n# Shutdown the swagger generator image\ndocker stop $CID && docker rm $CID\n```\n\nIn the example above, `result.zip` will contain the generated client.\n\n##### Swagger Codegen CLI Docker Image\n\nThe Swagger Codegen image acts as a standalone executable. It can be used as an alternative to installing via homebrew, or for developers who are unable to install Java or upgrade the installed version.\n\nTo generate code with this image, you'll need to mount a local location as a volume.\n\nExample:\n\n```sh\ndocker run --rm -v ${PWD}:/local swaggerapi/swagger-codegen-cli generate \\\n    -i https://petstore.swagger.io/v2/swagger.json \\\n    -l go \\\n    -o /local/out/go\n```\n\n(On Windows replace `${PWD}` with `%CD%`)\n\nThe generated code will be located under `./out/go` in the current directory.\n\n## Getting Started\n\nTo generate a PHP client for https://petstore.swagger.io/v2/swagger.json, please run the following\n```sh\ngit clone https://github.com/swagger-api/swagger-codegen\ncd swagger-codegen\nmvn clean package\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate \\\n   -i https://petstore.swagger.io/v2/swagger.json \\\n   -l php \\\n   -o /var/tmp/php_api_client\n```\n(if you're on Windows, replace the last command with `java -jar modules\\swagger-codegen-cli\\target\\swagger-codegen-cli.jar generate -i https://petstore.swagger.io/v2/swagger.json -l php -o c:\\temp\\php_api_client`)\n\nYou can also download the JAR (latest release) directly from [maven.org](https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.39/swagger-codegen-cli-2.4.39.jar)\n\nTo get a list of **general** options available, please run `java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar help generate` (for version 3.x check [3.0.0 branch](https://github.com/swagger-api/swagger-codegen/tree/3.0.0))\n\nTo get a list of PHP specified options (which can be passed to the generator with a config file via the `-c` option), please run `java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar config-help -l php`\n\n## Generators\n\n### To generate a sample client library\nYou can build a client against the swagger sample [petstore](https://petstore.swagger.io) API as follows:\n\n```sh\n./bin/java-petstore.sh\n```\n\n(On Windows, run `.\\bin\\windows\\java-petstore.bat` instead)\n\nThis will run the generator with this command:\n\n```sh\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate \\\n  -i https://petstore.swagger.io/v2/swagger.json \\\n  -l java \\\n  -o samples/client/petstore/java\n```\n\nwith a number of options. You can get the options with the `help generate` command (below only shows partial results):\n\n```\nNAME\n        swagger-codegen-cli generate - Generate code with chosen lang\n\nSYNOPSIS\n        swagger-codegen-cli generate\n                [(-a <authorization> | --auth <authorization>)]\n                [--additional-properties <additional properties>...]\n                [--api-package <api package>] [--artifact-id <artifact id>]\n                [--artifact-version <artifact version>]\n                [(-c <configuration file> | --config <configuration file>)]\n                [-D <system properties>...] [--git-repo-id <git repo id>]\n                [--git-user-id <git user id>] [--group-id <group id>]\n                [--http-user-agent <http user agent>]\n                (-i <spec file> | --input-spec <spec file>)\n                [--ignore-file-override <ignore file override location>]\n                [--import-mappings <import mappings>...]\n                [--instantiation-types <instantiation types>...]\n                [--invoker-package <invoker package>]\n                (-l <language> | --lang <language>)\n                [--language-specific-primitives <language specific primitives>...]\n                [--library <library>] [--model-name-prefix <model name prefix>]\n                [--model-name-suffix <model name suffix>]\n                [--model-package <model package>]\n                [(-o <output directory> | --output <output directory>)]\n                [--release-note <release note>] [--remove-operation-id-prefix]\n                [--reserved-words-mappings <reserved word mappings>...]\n                [(-s | --skip-overwrite)]\n                [(-t <template directory> | --template-dir <template directory>)]\n                [--type-mappings <type mappings>...] [(-v | --verbose)]\n\nOPTIONS\n        -a <authorization>, --auth <authorization>\n            adds authorization headers when fetching the swagger definitions\n            remotely. Pass in a URL-encoded string of name:header with a comma\n            separating multiple values\n\n...... (results omitted)\n\n        -v, --verbose\n            verbose mode\n\n```\n\nYou can then compile and run the client, as well as unit tests against it:\n\n```sh\ncd samples/client/petstore/java\nmvn package\n```\n\nOther languages have petstore samples, too:\n```sh\n./bin/android-petstore.sh\n./bin/java-petstore.sh\n./bin/objc-petstore.sh\n```\n\n### Generating libraries from your server\nIt's just as easy--just use the `-i` flag to point to either a server or file.\n\n### Modifying the client library format\nDon't like the default swagger client syntax?  Want a different language supported?  No problem!  Swagger Codegen processes mustache templates with the [jmustache](https://github.com/samskivert/jmustache) engine.  You can modify our templates or make your own.\n\nYou can look at `modules/swagger-codegen/src/main/resources/${your-language}` for examples.  To make your own templates, create your own files and use the `-t` flag to specify your template folder.  It actually is that easy.\n\n### Making your own codegen modules\nIf you're starting a project with a new language and don't see what you need, Swagger Codegen can help you create a project to generate your own libraries:\n\n```sh\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar meta \\\n  -o output/myLibrary -n myClientCodegen -p com.my.company.codegen\n```\n\nThis will write, in the folder `output/myLibrary`, all the files you need to get started, including a `README.md. Once modified and compiled, you can load your library with the codegen and generate clients with your own, custom-rolled logic.\n\nYou would then compile your library in the `output/myLibrary` folder with `mvn package` and execute the codegen like such:\n\n```sh\njava -cp output/myLibrary/target/myClientCodegen-swagger-codegen-1.0.0.jar:modules/swagger-codegen-cli/target/swagger-codegen-cli.jar io.swagger.codegen.SwaggerCodegen\n```\nFor Windows users, you will need to use `;` instead of `:` in the classpath, e.g.\n```\njava -cp output/myLibrary/target/myClientCodegen-swagger-codegen-1.0.0.jar;modules/swagger-codegen-cli/target/swagger-codegen-cli.jar io.swagger.codegen.SwaggerCodegen\n```\n\nNote the `myClientCodegen` is an option now, and you can use the usual arguments for generating your library:\n\n```sh\njava -cp output/myLibrary/target/myClientCodegen-swagger-codegen-1.0.0.jar:modules/swagger-codegen-cli/target/swagger-codegen-cli.jar \\\n  io.swagger.codegen.SwaggerCodegen generate -l myClientCodegen\\\n  -i https://petstore.swagger.io/v2/swagger.json \\\n  -o myClient\n```\n\nSee also [standalone generator development](https://github.com/swagger-api/swagger-codegen/blob/master/standalone-gen-dev/standalone-generator-development.md)\n\n### Where is Javascript???\nSee our [javascript library](http://github.com/swagger-api/swagger-js)--it's completely dynamic and doesn't require\nstatic code generation.\nThere is a third-party component called [swagger-js-codegen](https://github.com/wcandillon/swagger-js-codegen) that can generate angularjs or nodejs source code from an OpenAPI Specification.\n\n:exclamation: On Dec 7th 2015, a Javascript API client generator has been added by @jfiala.\n\n### Generating a client from local files\nIf you don't want to call your server, you can save the OpenAPI Spec files into a directory and pass an argument\nto the code generator like this:\n\n```\n-i ./modules/swagger-codegen/src/test/resources/2_0/petstore.json\n```\n\nGreat for creating libraries on your ci server, from the [Swagger Editor](http://editor.swagger.io)... or while coding on an airplane.\n\n### Selective generation\nYou may not want to generate *all* models in your project.  Likewise you may want just one or two apis to be written.  If that's the case, you can use system properties to control the output:\n\nThe default is generate *everything* supported by the specific library.  Once you enable a feature, it will restrict the contents generated:\n\n```sh\n# generate only models\njava -Dmodels {opts}\n\n# generate only apis\njava -Dapis {opts}\n\n# generate only supporting files\njava -DsupportingFiles\n\n# generate models and supporting files\njava -Dmodels -DsupportingFiles\n```\n\nTo control the specific files being generated, you can pass a CSV list of what you want:\n```sh\n# generate the User and Pet models only\n-Dmodels=User,Pet\n\n# generate the User model and the supportingFile `StringUtil.java`:\n-Dmodels=User -DsupportingFiles=StringUtil.java\n```\n\nTo control generation of docs and tests for api and models, pass false to the option. For api, these options are  `-DapiTests=false` and `-DapiDocs=false`. For models, `-DmodelTests=false` and `-DmodelDocs=false`.\nThese options default to true and don't limit the generation of the feature options listed above (like `-Dapi`):\n\n```sh\n# generate only models (with tests and documentation)\njava -Dmodels {opts}\n\n# generate only models (with tests but no documentation)\njava -Dmodels -DmodelDocs=false {opts}\n\n# generate only User and Pet models (no tests and no documentation)\njava -Dmodels=User,Pet -DmodelTests=false {opts}\n\n# generate only apis (without tests)\njava -Dapis -DapiTests=false {opts}\n\n# generate only apis (modelTests option is ignored)\njava -Dapis -DmodelTests=false {opts}\n```\n\nWhen using selective generation, _only_ the templates needed for the specific generation will be used.\n\n### Ignore file format\n\nSwagger Codegen supports a `.swagger-codegen-ignore` file, similar to `.gitignore` or `.dockerignore` you're probably already familiar with.\n\nThe ignore file allows for better control over overwriting existing files than the `--skip-overwrite` flag. With the ignore file, you can specify individual files or directories can be ignored. This can be useful, for example if you only want a subset of the generated code.\n\nExamples:\n\n```sh\n# Swagger Codegen Ignore\n# Lines beginning with a # are comments\n\n# This should match build.sh located anywhere.\nbuild.sh\n\n# Matches build.sh in the root\n/build.sh\n\n# Exclude all recursively\ndocs/**\n\n# Explicitly allow files excluded by other rules\n!docs/UserApi.md\n\n# Recursively exclude directories named Api\n# You can't negate files below this directory.\nsrc/**/Api/\n\n# When this file is nested under /Api (excluded above),\n# this rule is ignored because parent directory is excluded by previous rule.\n!src/**/PetApiTests.cs\n\n# Exclude a single, nested file explicitly\nsrc/IO.Swagger.Test/Model/AnimalFarmTests.cs\n```\n\nThe `.swagger-codegen-ignore` file must exist in the root of the output directory.\n\nUpon first code generation, you may also pass the CLI option `--ignore-file-override=/path/to/ignore_file` for greater control over generated outputs. Note that this is a complete override, and will override the `.swagger-codegen-ignore` file in an output directory when regenerating code.\n\nEditor support for `.swagger-codegen-ignore` files is available in IntelliJ via the [.ignore plugin](https://plugins.jetbrains.com/plugin/7495--ignore).\n\n### Customizing the generator\n\nThere are different aspects of customizing the code generator beyond just creating or modifying templates.  Each language has a supporting configuration file to handle different type mappings, etc:\n\n```sh\n$ ls -1 modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/\nAbstractJavaJAXRSServerCodegen.java\nAbstractTypeScriptClientCodegen.java\n... (results omitted)\nTypeScriptAngularClientCodegen.java\nTypeScriptNodeClientCodegen.java\n```\n\nEach of these files creates reasonable defaults so you can get running quickly.  But if you want to configure package names, prefixes, model folders, etc. you can use a json config file to pass the values.\n\n```sh\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate \\\n  -i https://petstore.swagger.io/v2/swagger.json \\\n  -l java \\\n  -o samples/client/petstore/java \\\n  -c path/to/config.json\n```\nand `config.json` contains the following as an example:\n```json\n{\n  \"apiPackage\" : \"petstore\"\n}\n```\n\nSupported config options can be different per language. Running `config-help -l {lang}` will show available options.\n**These options are applied via configuration file (e.g. config.json) or by passing them with `java -jar swagger-codegen-cli.jar -D{optionName}={optionValue}`**. (If `-D{optionName}` does not work, please open a [ticket](https://github.com/swagger-api/swagger-codegen/issues/new) and we'll look into it)\n\n```sh\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar config-help -l java\n```\n\nOutput\n\n```\nCONFIG OPTIONS\n\tmodelPackage\n\t    package for generated models\n\n\tapiPackage\n\t    package for generated api classes\n...... (results omitted)\n\tlibrary\n\t    library template (sub-template) to use:\n\t    jersey1 - HTTP client: Jersey client 1.18. JSON processing: Jackson 2.4.2\n\t    jersey2 - HTTP client: Jersey client 2.6\n\t    feign - HTTP client: Netflix Feign 8.1.1.  JSON processing: Jackson 2.6.3\n\t    okhttp-gson (default) - HTTP client: OkHttp 2.4.0. JSON processing: Gson 2.3.1\n\t    retrofit - HTTP client: OkHttp 2.4.0. JSON processing: Gson 2.3.1 (Retrofit 1.9.0)\n        retrofit2 - HTTP client: OkHttp 2.5.0. JSON processing: Gson 2.4 (Retrofit 2.0.0-beta2)\n        google-api-client - HTTP client: google-api-client 1.23.0. JSON processing: Jackson 2.8.9\n        rest-assured - HTTP client: rest-assured : 3.1.0. JSON processing: Gson 2.6.1. Only for Java8\n```\n\nYour config file for Java can look like\n\n```json\n{\n  \"groupId\": \"com.my.company\",\n  \"artifactId\": \"MyClient\",\n  \"artifactVersion\": \"1.2.0\",\n  \"library\": \"feign\"\n}\n```\n\nFor all the unspecified options default values will be used.\n\nAnother way to override default options is to extend the config class for the specific language.\nTo change, for example, the prefix for the Objective-C generated files, simply subclass the `ObjcClientCodegen.java`:\n\n```java\npackage com.mycompany.swagger.codegen;\n\nimport io.swagger.codegen.languages.*;\n\npublic class MyObjcCodegen extends ObjcClientCodegen {\n    static {\n        PREFIX = \"HELO\";\n    }\n}\n```\n\nand specify the `classname` when running the generator:\n\n```\n-l com.mycompany.swagger.codegen.MyObjcCodegen\n```\n\nYour subclass will now be loaded and overrides the `PREFIX` value in the superclass.\n\n### Bringing your own models\n\nSometimes you don't want a model generated.  In this case, you can simply specify an import mapping to tell\nthe codegen what _not_ to create.  When doing this, every location that references a specific model will\nrefer back to your classes.  Note, this may not apply to all languages...\n\nTo specify an import mapping, use the `--import-mappings` argument and specify the model-to-import logic as such:\n\n```\n--import-mappings Pet=my.models.MyPet\n```\n\nOr for multiple mappings:\n\n```\n--import-mappings Pet=my.models.MyPet,Order=my.models.MyOrder\n```\nor\n```\n--import-mappings Pet=my.models.MyPet --import-mappings Order=my.models.MyOrder\n```\n\n\n### Validating your OpenAPI Spec\n\nYou have options.  The easiest is to use our [online validator](https://github.com/swagger-api/validator-badge) which not only will let you validate your spec, but with the debug flag, you can see what's wrong with your spec.  For example:\n\nhttp://online.swagger.io/validator/debug?url=https://petstore.swagger.io/v2/swagger.json\n\n### Generating dynamic html api documentation\n\nTo do so, just use the `-l dynamic-html` flag when reading a spec file.  This creates HTML documentation that is available as a single-page application with AJAX.  To view the documentation:\n\n```sh\ncd samples/dynamic-html/\nnpm install\nnode .\n```\n\nWhich launches a node.js server so the AJAX calls have a place to go.\n\n\n### Generating static html api documentation\n\nTo do so, just use the `-l html` flag when reading a spec file.  This creates a single, simple HTML file with embedded css so you can ship it as an email attachment, or load it from your filesystem:\n\n```sh\ncd samples/html/\nopen index.html\n```\n\n\n### To build a server stub\n\nPlease refer to https://github.com/swagger-api/swagger-codegen/wiki/Server-stub-generator-HOWTO for more information.\n\n### To build the codegen library\n\nThis will create the Swagger Codegen library from source.\n\n```sh\nmvn package\n```\n\nNote!  The templates are included in the library generated.  If you want to modify the templates, you'll need to either repackage the library OR specify a path to your scripts\n\n## Workflow Integration\n\n### Maven Integration\n\nYou can use the [swagger-codegen-maven-plugin](modules/swagger-codegen-maven-plugin/README.md) for integrating with your workflow, and generating any codegen target.\n\n### Gradle Integration\n\n[Gradle Swagger Generator Plugin](https://github.com/int128/gradle-swagger-generator-plugin) is available for generating source code and API document.\n\n## GitHub Integration\n\nTo push the auto-generated SDK to GitHub, we provide `git_push.sh` to streamline the process. For example:\n\n 1) Create a new repository in GitHub (Ref: https://help.github.com/articles/creating-a-new-repository/)\n\n 2) Generate the SDK\n```sh\n java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate \\\n -i modules/swagger-codegen/src/test/resources/2_0/petstore.json -l perl \\\n --git-user-id \"swaggerapi\" \\\n --git-repo-id \"petstore-perl\" \\\n --release-note \"Github integration demo\" \\\n -o /var/tmp/perl/petstore\n```\n 3) Push the SDK to GitHub\n```sh\ncd /var/tmp/perl/petstore\n/bin/sh ./git_push.sh\n```\n\n## Online generators\n\nOne can also generate API client or server using the online generators (https://generator.swagger.io)\n\nFor example, to generate Ruby API client, simply send the following HTTP request using curl:\n```sh\ncurl -X POST -H \"content-type:application/json\" -d '{\"swaggerUrl\":\"https://petstore.swagger.io/v2/swagger.json\"}' https://generator.swagger.io/api/gen/clients/ruby\n```\nThen you will receive a JSON response with the URL to download the zipped code.\n\nTo customize the SDK, you can `POST` to `https://generator.swagger.io/api/gen/clients/{language}` with the following HTTP body:\n```json\n{\n  \"options\":  {},\n  \"swaggerUrl\": \"https://petstore.swagger.io/v2/swagger.json\"\n}\n```\nin which the `options` for a language can be obtained by submitting a `GET` request to `https://generator.swagger.io/api/gen/clients/{language}`:\n\nFor example, `curl https://generator.swagger.io/api/gen/clients/python` returns\n```json\n{\n  \"packageName\": {\n    \"opt\": \"packageName\",\n    \"description\": \"python package name (convention: snake_case).\",\n    \"type\": \"string\",\n    \"default\": \"swagger_client\"\n  },\n  \"packageVersion\": {\n    \"opt\": \"packageVersion\",\n    \"description\": \"python package version.\",\n    \"type\": \"string\",\n    \"default\": \"1.0.0\"\n  },\n  \"sortParamsByRequiredFlag\": {\n    \"opt\": \"sortParamsByRequiredFlag\",\n    \"description\": \"Sort method arguments to place required parameters before optional parameters.\",\n    \"type\": \"boolean\",\n    \"default\": \"true\"\n  }\n}\n```\nTo set package name to `pet_store`, the HTTP body of the request is as follows:\n```json\n{\n  \"options\": {\n    \"packageName\": \"pet_store\"\n  },\n  \"swaggerUrl\": \"https://petstore.swagger.io/v2/swagger.json\"\n}\n```\nand here is the curl command:\n```sh\ncurl -H \"Content-type: application/json\" -X POST -d '{\"options\": {\"packageName\": \"pet_store\"},\"swaggerUrl\": \"https://petstore.swagger.io/v2/swagger.json\"}' https://generator.swagger.io/api/gen/clients/python\n```\n\nInstead of using `swaggerUrl` with an URL to the OpenAPI/Swagger spec, one can include the spec in the JSON payload with `spec`, e.g.\n```json\n{\n  \"options\": {},\n  \"spec\": {\n    \"swagger\": \"2.0\",\n    \"info\": {\n      \"version\": \"1.0.0\",\n      \"title\": \"Test API\"\n    },\n    ...\n  }\n}\n```\n\nGuidelines for Contribution\n---------------------------\n\nPlease refer to this [page](https://github.com/swagger-api/swagger-codegen/blob/master/CONTRIBUTING.md)\n\nCompanies/Projects using Swagger Codegen\n----------------------------------------\nHere are some companies/projects using Swagger Codegen in production. To add your company/project to the list, please visit [README.md](https://github.com/swagger-api/swagger-codegen/blob/master/README.md) and click on the icon to edit the page.\n- [Acando](https://www.acando.de/)\n- [Accengage](https://www.accengage.com/)\n- [Accruent](https://www.accruent.com/)\n- [Activehours](https://www.activehours.com/)\n- [Actonica](https://www.actonica.com)\n- [Acunetix](https://www.acunetix.com/)\n- [Adaptant](https://www.adaptant.io/)\n- [Atlassian](https://www.atlassian.com/)\n- [Autodesk](http://www.autodesk.com/)\n- [Avenida Compras S.A.](https://www.avenida.com.ar)\n- [AYLIEN](http://aylien.com/)\n- [Balance Internet](https://www.balanceinternet.com.au/)\n- [beemo](http://www.beemo.eu)\n- [bitly](https://bitly.com)\n- [BeezUP](http://www.beezup.com)\n- [Box](https://box.com)\n- [Bufferfly Network](https://www.butterflynetinc.com/)\n- [Cachet Financial](http://www.cachetfinancial.com/)\n- [carpolo](http://www.carpolo.co/)\n- [Carus](https://www.carus.com/)\n- [Cisco](http://www.cisco.com/)\n- [CloudBoost](https://www.CloudBoost.io/)\n- [Cloudsmith](https://cloudsmith.io/)\n- [Conplement](http://www.conplement.de/)\n- [Cummins](http://www.cummins.com/)\n- [Cupix](http://www.cupix.com)\n- [DBBest Technologies](https://www.dbbest.com)\n- [DecentFoX](http://decentfox.com/)\n- [DocRaptor](https://docraptor.com)\n- [DocuSign](https://www.docusign.com)\n- [Elastic](https://www.elastic.co/)\n- [Ergon](http://www.ergon.ch/)\n- [Dell EMC](https://www.emc.com/)\n- [eureka](http://eure.jp/)\n- [everystory.us](http://everystory.us)\n- [Expected Behavior](http://www.expectedbehavior.com/)\n- [fashionTrade](https://www.fashiontrade.com/)\n- [Fastly](https://www.fastly.com/)\n- [FINRA](https://github.com/FINRAOS/herd/)\n- [Flat](https://flat.io)\n- [Finder](http://en.finder.pl/)\n- [Fitwell](https://fitwell.co/)\n- [FH Münster - University of Applied Sciences](http://www.fh-muenster.de)\n- [FormAPI](https://formapi.io/)\n- [Fotition](https://www.fotition.com/)\n- [Gear Zero Network](https://www.gearzero.ca)\n- [General Electric](https://www.ge.com/)\n- [Genentech](https://gene.com)\n- [Genesys - PureCloud](http://developer.mypurecloud.com/)\n- [Germin8](http://www.germin8.com)\n- [GigaSpaces](http://www.gigaspaces.com)\n- [GMO Pepabo](https://pepabo.com/en/)\n- [goTransverse](http://www.gotransverse.com/api)\n- [GraphHopper](https://graphhopper.com/)\n- [Gravitate Solutions](http://gravitatesolutions.com/)\n- [HashData](http://www.hashdata.cn/)\n- [Hewlett Packard Enterprise](https://hpe.com)\n- [High Technologies Center](http://htc-cs.com)\n- [Hootsuite](https://hootsuite.com/)\n- [Huawei Cloud](http://www.huaweicloud.com/en-us/product/cs.html)\n- [Husbanken](https://www.husbanken.no)\n- [IBM](https://www.ibm.com)\n- [IMS Health](http://www.imshealth.com/en/solution-areas/technology-and-applications)\n- [Individual Standard IVS](http://www.individual-standard.com)\n- [INSPIDE](http://www.inspide.com)\n- [Intent HQ](http://www.intenthq.com)\n- [Kabuku](http://www.kabuku.co.jp/en)\n- [Kurio](https://kurio.co.id)\n- [Kuroi](http://kuroiwebdesign.com/)\n- [Kuary](https://kuary.com/)\n- [Kubernetes](https://kubernetes.io/)\n- [LANDR Audio](https://www.landr.com/)\n- [Lascaux](http://www.lascaux.it/)\n- [Leanix](http://www.leanix.net/)\n- [Leica Geosystems AG](http://leica-geosystems.com)\n- [LiveAgent](https://www.ladesk.com/)\n- [LXL Tech](http://lxltech.com)\n- [Lyft](https://www.lyft.com/developers)\n- [MailMojo](https://mailmojo.no/)\n- [Metaswitch](https://www.metaswitch.com/)\n- [Mindera](http://mindera.com/)\n- [ModuleQ](https://moduleq.com)\n- [Mporium](http://mporium.com/)\n- [Neverfail](https://neverfail.com/)\n- [NexCap](http://www.nexess-solutions.com/fr/plateforme-iot/)\n- [Nitrobox](https://www.nitrobox.com)\n- [Norwegian Air Shuttle](https://www.norwegian.com/)\n- [NTT DATA](http://www.nttdata.com/)\n- [nViso](http://www.nviso.ch/)\n- [NHSD](https://digital.nhs.uk/)\n- [Okiok](https://www.okiok.com)\n- [Onedata](http://onedata.org)\n- [Open International Systems](https://openintl.com/)\n- [OrderCloud.io](http://ordercloud.io)\n- [OSDN](https://osdn.jp)\n- [PagerDuty](https://www.pagerduty.com)\n- [PagerTree](https://pagertree.com)\n- [Pepipost](https://www.pepipost.com)\n- [Peatio Tech](https://www.peatio.tech)\n- [Plexxi](http://www.plexxi.com)\n- [Pixoneye](http://www.pixoneye.com/)\n- [PostAffiliatePro](https://www.postaffiliatepro.com/)\n- [PracticeBird](https://www.practicebird.com/)\n- [Prill Tecnologia](http://www.prill.com.br)\n- [Prokarma](https://www.prokarma.com)\n- [QAdept](http://qadept.com/)\n- [QuantiModo](https://quantimo.do/)\n- [QuickBlox](https://quickblox.com/)\n- [Rapid7](https://rapid7.com/)\n- [Red Hat](https://www.redhat.com/)\n- [Reload! A/S](https://reload.dk/)\n- [REstore](https://www.restore.eu)\n- [REST United](https://restunited.com)\n- [Revault Sàrl](http://revault.ch)\n- [Riffyn](https://riffyn.com)\n- [Roche](https://roche.com)\n- [Royal Bank of Canada (RBC)](http://www.rbc.com/canada.html)\n- [Saritasa](https://www.saritasa.com/)\n- [SAS](https://www.sas.com)\n- [SCOOP Software GmbH](http://www.scoop-software.de)\n- [SessionM](https://www.sessionm.com/)\n- [Shine Solutions](https://shinesolutions.com/)\n- [Simpfony](https://www.simpfony.com/)\n- [Skurt](http://www.skurt.com)\n- [Slamby](https://www.slamby.com/)\n- [SmartRecruiters](https://www.smartrecruiters.com/)\n- [snapCX](https://snapcx.io)\n- [SPINEN](http://www.spinen.com)\n- [Sponsoo](https://www.sponsoo.de)\n- [SRC](https://www.src.si/)\n- [Stardog Ventures](https://www.stardog.io)\n- [Stingray](http://www.stingray.com)\n- [StyleRecipe](http://stylerecipe.co.jp)\n- [Svenska Spel AB](https://www.svenskaspel.se/)\n- [Switch Database](https://www.switchdatabase.com/)\n- [TaskData](http://www.taskdata.com/)\n- [ThirdWatch.ai](https://www.thirdwatch.ai/)\n- [ThoughtWorks](https://www.thoughtworks.com)\n- [Tpay](https://tpay.com)\n- [Trexle](https://trexle.com/)\n- [Upwork](http://upwork.com/)\n- [uShip](https://www.uship.com/)\n- [Variograma](https://variograma.pt)\n- [VMware](https://vmware.com/)\n- [Viavi Solutions Inc.](https://www.viavisolutions.com)\n- [W.UP](http://wup.hu/?siteLang=en)\n- [Wealthfront](https://www.wealthfront.com/)\n- [Webever GmbH](https://www.webever.de/)\n- [WEXO A/S](https://www.wexo.dk/)\n- [XSky](http://www.xsky.com/)\n- [Yelp](http://www.yelp.com/)\n- [Zalando](https://tech.zalando.com)\n- [ZEEF.com](https://zeef.com/)\n- [zooplus](https://www.zooplus.com/)\n- [Trifork](https://www.trifork.com/)\n\nPresentations/Videos/Tutorials/Books\n----------------------------------------\n- 2011/08/31 - [Introducing Swagger](https://www.slideshare.net/fehguy/introducing-swagger) by [Tony Tam](https://twitter.com/fehguy)\n- 2014/05/22 - [Swagger APIs for Humans and Robots](https://www.slideshare.net/fehguy/swagger-apis-for-humans-and-robots-gluecon) by [Tony Tam](https://twitter.com/fehguy) at [Gluecon](http://gluecon.com/)\n- 2014/11/11 - [Genie 2.0: Second Wish Granted!](https://medium.com/netflix-techblog/genie-2-0-second-wish-granted-d888d79455c6) by [Tom Gianos](http://www.linkedin.com/in/thomasgianos/) and [Amit Sharma](https://www.linkedin.com/pub/amit-sharma/5/163/a83) @ [Netflix](https://www.netflix.com/) Big Data Platform Team\n- 2015/07/28 - [Enriching RESTful Services with Swagger](https://blog.philipphauer.de/enriching-restful-services-swagger/) by [Philipp Hauer](https://blog.philipphauer.de/)\n- 2015/11/11 - [Generate client stubs & document your REST-API using Swagger & Spring](https://www.youtube.com/watch?v=43GhBbP--oI) by [Johannes Fiala](https://github.com/jfiala) @ Devoxx Belgium 2015\n- 2015/12/03 - [こんなに簡単! Swagger Codegenのカスタマイズ](http://qiita.com/Quramy/items/c583f3213f0b77ff1bac) by [Quramy](http://qiita.com/Quramy)\n- 2016/01/12 - [Generate client side code using Swagger Codegen](http://rnavagamuwa.com/open-source/generate-client-side-code-using-swagger-codegen/) by [RNAVAGAMUWA](http://rnavagamuwa.com/author/admin/)\n- 2016/01/15 - [How to end manual REST-API client coding](https://www.youtube.com/watch?v=RzZRdqZp6Oo) by [Johannes Fiala](https://github.com/jfiala) @ dotJS 2015\n- 2016/04/27 - [Automated REST API Development](https://yos.io/2016/04/27/automated-api-development/) by [Yos Riady](https://www.linkedin.com/in/yosriady)\n- 2016/05/29 - [Generating Java Spring-MVC code from Swagger Spec](https://www.clianz.com/2016/05/29/java-mvc-swagger-gen/) by [@icha024](https://github.com/icha024)\n- 2016/07/22 - [Building Microservices? Here is what you should know](https://cloudncode.blog/2016/07/22/msa-getting-started/) by Sumit Maingi\n- 2016/08/23 - [Generating Dreamfactory Client SDKs based on Swagger API Definitions](http://blog.dreamfactory.com/generating-dreamfactory-client-sdks-based-on-swagger-api-definitions) by [Phil Schuler](https://github.com/philicious/)\n- 2016/09/28 - [1 UNBELIEVABLE TRICK TO CREATE AN EASY TO CONSUME API IN .NET](https://stapp.space/1-simple-trick-to-create-a-good-api-in-net/) by [Piotr Stapp](https://stapp.space/author/piotr-stapp/)\n- 2016/10/10 - [Using swagger-codegen with Marketo](http://developers.marketo.com/blog/using-swagger-codegen-with-marketo/) by [Kenny Elkington](http://developers.marketo.com/blog/using-swagger-codegen-with-marketo/)\n- 2016/10/12 - [Designing a Swagger API](https://sookocheff.com/post/api/swagger/) by [Kevin Sookocheff](https://sookocheff.com/)\n- 2016/11/05 - [How to generate a REST Application](https://www.youtube.com/watch?v=iyC9BWMe75Q) by [Johannes Fiala](https://github.com/jfiala) @ DevFest Vienna 2016\n- 2016/11/10 - [Building an AEM API clients ecosystem](http://blog.cliffano.com/2016/11/10/adobe-marketing-cloud-community-expo/) by Cliffano Subagio, Michael Diender, Stephen Shim from [Shine Solutions](https://shinesolutions.com/) @ [Adobe Marketing Cloud Community Expo (AMCCE)](https://www.meetup.com/Melbourne-AEM-CQ-Meetup/events/233363101/)\n- 2016/11/18 - [How to generate a REST CXF3 application from Swagger-Contract](https://www.slideshare.net/johannes_fiala/how-to-generate-a-rest-cxf3-application-from-swagger-apacheconeu-2016) by [Johannes Fiala](https://github.com/jfiala) @ ApacheConEU 2016\n- 2016/11/25 - [Swagger Codegen for Swift3 and NodeJS](https://normand1.github.io/blog/swift/swagger/codegen/2016/11/25/Swagger-Codegen-for-Swift3-and-NodeJS.html) by [David Norman](https://github.com/normand1)\n- 2016/12/08 - [Building an API with Swagger](https://www.youtube.com/watch?v=PbwQWw7xSOM)\n- 2016/12/08 - [Generate client side code using Swagger Codegen](https://carra-lucia-ltd.co.uk/2016/12/08/generate-client-side-code-using-swagger-codegen/) by [theFerkel](https://carra-lucia-ltd.co.uk/author/theferkel/)\n- 2017/01/16 - [Zero to API in 4 minutes](https://cidrblock.github.io/zero-to-api-in-4-minutes.html) by [Bradley A. Thornton](https://github.com/cidrblock)\n- 2017/02/09 - [「Swaggerを利用した新規サービス開発」というタイトルで登壇して来ました](https://techblog.recochoku.jp/1055) by [recotech](https://www.slideshare.net/recotech)\n- 2017/03/03 - [Swagger Codegen の使い方の簡単な説明です](https://speakerdeck.com/wagyu298/swagger-codegen) by [wagyu298](https://github.com/wagyu298)\n- 2017/03/24 - [Using Open API Specification To Put Lyft SDK Support in the Fast Lane](https://medium.com/lyft-developer-platform/using-open-api-specification-to-put-lyft-sdk-support-in-the-fast-lane-7b623218e4ee) by [Val Polouchkine](https://github.com/vpolouchkine)\n- 2017/04/13 - [Automatically Generating your API Client with Swagger and Swagger Codegen](https://www.youtube.com/watch?v=EzKwi-u9jQo) by [Jesse Collis](https://github.com/jessedc) @ Melbourne Cocoaheads\n- 2017/04/27 - [Swagger Codegen のPHP実装があまりにアレだったので、ライブラリ自作して公開してみた](http://qiita.com/imunew/items/2e9c472e0097e329f2cd) by [imunew](http://qiita.com/imunew)\n- 2017/05/17 - [Diseño de APIs con OpenAPI](https://www.slideshare.net/pjmolina/diseo-de-apis-con-openapi) by [Pedro J. Molina](https://github.com/pjmolina) @ [JSDayES 2017](http://2017.jsday.es/)\n- 2017/05/22 - [Presentation of the Vert.x-Swagger project](http://vertx.io/blog/presentation-of-the-vert-x-swagger-project/) by [@phiz71](http://github.com/phiz71)\n- 2017/05/22 - [Automatically generating your API from a swagger file using gradle](https://www.jcore.com/2017/05/22/automatically-generating-api-using-swagger-and-gradle/) by [Deniz Turan](https://www.jcore.com/author/deniz/)\n- 2017/06/21 - [Swagger Presentation - Warsaw Ruby Users Group](https://www.youtube.com/watch?v=uCnnDMFQB8U) by [@rafalpetryka](http://github.com/rafalpetryka)\n- 2017/06/29 - [Making SDKs: the bespoke, the hopeful and the generated](https://devrel.net/developer-experience/making-sdks-bespoke-hopeful-generated) by [Tristan Sokol](https://github.com/tristansokol) ([Square](https://github.com/square)) at DevXcon 2017\n- 2017/07/11 - [OpenAPI development with Python](https://www.slideshare.net/TakuroWada/20170711-euro-python2017) by [和田拓朗](https://github.com/taxpon) at [EuroPython 2017](https://ep2017.europython.eu/en/)\n- 2017/07/29 - [How Square makes its SDKs](https://medium.com/square-corner-blog/how-square-makes-its-sdks-6a0fd7ea4b2d) by [Tristan Sokol](https://github.com/tristansokol) ([Square](https://github.com/square))\n- 2017/07/31 - [How to Generate a Deployable REST CXF3 Application from a Swagger-Contract](https://www.youtube.com/watch?v=gM63rJlUHZQ) by [Johannes Fiala](https://github.com/jfiala) @ Voxxed Days Vienna\n- 2017/08/11 - [Swagger Codegen 自动生成Retrofit 代码](https://juejin.im/entry/598d8eb86fb9a03c52459e2a) by [徐磊](http://www.jianshu.com/u/792c738b33fc)\n- 2017/08/24 - [APIs First](https://engineering.squarespace.com/blog/2017/apis-first) by [roykachouh](https://github.com/roykachouh) ([Square](https://github.com/square))\n- 2017/08/31 - [Bringing Jenkins Remote Access API To The Masses](http://blog.cliffano.com/2017/09/01/jenkins-world-2017/) by [Cliffano Subagio](http://cliffano.com) from [Shine Solutions](https://shinesolutions.com/) @ [Jenkins World 2017](https://jenkinsworld20162017.sched.com/)\n- 2017/09/08 - [Swagger Codegen で自動生成したクライアントSDKを使う(iOS編)](http://blog.techium.jp/entry/2017/09/08/071650) by [kfurue](http://profile.hatena.ne.jp/kfurue/)\n- 2017/09/09 - [Swagger Codegen で自動生成したクライアントSDKを使う(RxSwift 編)](http://blog.techium.jp/entry/2017/09/09/113003) by [kfurue](http://profile.hatena.ne.jp/kfurue/)\n- 2017/09/09 - [OpenAPIを利用したPythonWebアプリケーション開発](https://www.slideshare.net/TakuroWada/openapipythonweb) by [和田拓朗](https://github.com/taxpon) at [PyCon JP 2017](https://pycon.jp/2017/ja/)\n- 2017/09/21 - [Generating an Elastic Cloud Enterprise Client](https://www.elastic.co/blog/generating-an-elastic-cloud-enterprise-client) by [Greg Marzouka](https://github.com/gmarz) ([Elastic](https://www.elastic.co/))\n- 2017/09/26 - [How to Use IoT Application Enablement Api Hub JSON Descriptor in Postman and How to Generate Client Code](https://www.linkedin.com/in/radu-simen/) by [Radu Simen](https://www.linkedin.com/in/radu-simen/) ([SAP](https://www.sap.com/))\n- 2017/09/28 - [Swagger Codegenで APIクライアントgem 自動生成 #m3kt](https://speakerdeck.com/juntaki/swagger-codegende-apikuraiantogem-zi-dong-sheng-cheng-number-m3kt) by [Jumpei Takiyasu](https://github.com/juntaki)\n- 2017/09/30 - [Swaggerのテンプレートを魔改造した話 #渋谷java](https://www.slideshare.net/int128/swagger-80309224) by [Hidetake Iwata](https://github.com/int128) ([NTT DATA Corporation](http://www.nttdata.com/global/en/))\n- 2017/10/04 - [Enterprise-friendly Java client for Microsoft Machine Learning Server](https://blogs.msdn.microsoft.com/mlserver/2017/10/04/enterprise-friendly-java-client-for-microsoft-machine-learning-server/) by [Pratik Palnitkar](https://www.linkedin.com/in/pratikpalnitkar/) ([Microsoft](https://www.microsoft.com/))\n- 2017/10/08 - [Generating a REST Ada client with OpenAPI and Swagger Codegen](https://blog.vacs.fr/vacs/blogs/post.html?post=2017/10/08/Generating-a-REST-Ada-client-with-OpenAPI-and-Swagger-Codegen) by [Stephane Carrez](https://github.com/stcarrez)\n- 2017/11/08 - [A Beginner's Guide to Code Generation for REST APIs](https://gum.co/swagger_codegen_beginner)(eBook) by [William Cheng](https://twitter.com/wing328)\n- 2017/11/18 - [10年前のレガシーシステムをサーバーサイドKotlinでフルリニューアルしている話 #jjug_ccc #ccc_g2](https://speakerdeck.com/maeharin/10nian-qian-falseregasisisutemuwosabasaidokotlindehururiniyuarusiteiruhua-number-jjug-ccc-number-ccc-g2) by [Hidenori Maehara](https://github.com/maeharin)\n- 2017/11/21 - [swagger-codegen から眺める Swift4](https://speakerdeck.com/d_date/swagger-codegen-karatiao-meru-swift4) by [Daiki Matsudate](https://github.com/d-date)\n- 2017/12/07 - [API-driven development with OpenAPI and Swagger, Part 2](https://www.itworld.com/article/3199190/apis/api-driven-development-with-openapi-and-swagger-part-2.html) by Matthew Tyson\n- 2017/12/29 - [REST APIs代码生成指南](https://gumroad.com/l/swagger_codegen_beginner_zh)(eBook) by [William Cheng](https://github.com/wing328), [Xin Meng](https://github.com/xmeng1)\n- 2017/12/21 - [Using Protocol Buffer to Generate SDK at Hootsuite](http://code.hootsuite.com/using-protocol-buffer-to-generate-sdk-at-hoosuite/?lipi=urn%3Ali%3Apage%3Ad_flagship3_messaging%3By4ATz3SDRXyvXJJ14LQysQ%3D%3D) by [Joy Zhang](https://www.linkedin.com/in/joy8zhang/)\n- 2018/01/11 - [Swagger 工具箱介绍及代码自动生成示例](https://github.com/qct/swagger-example) by [qct](https://github.com/qct)\n- 2018/01/19 - [Generowanie kodu usług REST - przewodnik dla początkujących](https://gum.co/swagger_codegen_beginner_pl)(eBook) by [William Cheng](https://github.com/wing328), [Tomasz Prus](https://github.com/tomplus), [Bartek Kryza](https://github.com/bkryza)\n- 2018/02/03 - [Writing REST APIs with OpenAPI and Swagger Ada](https://www.slideshare.net/StephaneCarrez1/writing-rest-apis-with-openapi-and-swagger-ada/StephaneCarrez1/writing-rest-apis-with-openapi-and-swagger-ada) by [Stephane Carrez](https://github.com/stcarrez) at [FOSDEM 2018](https://fosdem.org/2018)\n- 2018/02/28 - [OpenAPI–An eBay Perspective](https://www.ebayinc.com/stories/blogs/tech/openapi-an-ebay-perspective/) by Shekhar Banerjee (eBay)\n- 2018/03/16 - [REST APIのためのコード生成入門](https://gumroad.com/l/swagger_codegen_beginner_jp) by [William Cheng](https://github.com/wing328), [中野暁人](https://github.com/ackintosh), [和田拓朗](https://github.com/taxpon)\n\n# Swagger Codegen Core Team\n\nSwagger Codegen core team members are contributors who have been making significant contributions (review issues, fix bugs, make enhancements, etc) to the project on a regular basis.\n\n## Core Team Members\n\n\n## Template Creator\nHere is a list of template creators:\n * API Clients:\n   * Ada: @stcarrez\n   * Akka-Scala: @cchafer\n   * Apex: @asnelling\n   * Bash: @bkryza\n   * C++ REST: @Danielku15\n   * C# (.NET 2.0): @who\n   * C# (.NET Standard 1.3 ): @Gronsak\n   * C# (.NET 4.5 refactored): @jimschubert\n   * Clojure: @xhh\n   * Dart: @yissachar\n   * Dart (refactored in 2.4.0): @joernahrens\n   * Elixir: @niku\n   * Elm: @trenneman\n   * Eiffel: @jvelilla\n   * Erlang: @tsloughter\n   * Groovy: @victorgit\n   * Go: @wing328\n   * Go (rewritten in 2.3.0): @antihax\n   * Haskell (http-client): @jonschoning\n   * Java (Feign): @davidkiss\n   * Java (Retrofit): @0legg\n   * Java (Retrofit2): @emilianobonassi\n   * Java (Jersey2): @xhh\n   * Java (okhttp-gson): @xhh\n   * Java (RestTemplate): @nbruno\n   * Java (RESTEasy): @gayathrigs\n   * Java (Vertx): @lopesmcc\n   * Java (Google APIs Client Library): @charlescapps\n   * Java (Rest-assured): @viclovsky\n   * Javascript/NodeJS: @jfiala\n   * Javascript (Closure-annotated Angular) @achew22\n   * JMeter: @davidkiss\n   * Kotlin: @jimschubert\n   * Lua: @daurnimator\n   * Perl: @wing328\n   * PHP (Guzzle): @baartosz\n   * PowerShell: @beatcracker\n   * R: @ramnov\n   * Rust: @farcaller\n   * Rust (rust-server): @metaswitch\n   * Scala (scalaz & http4s): @tbrown1979\n   * Swift: @tkqubo\n   * Swift 3: @hexelon\n   * Swift 4: @ehyche\n   * TypeScript (Node):  @mhardorf\n   * TypeScript (Angular1):  @mhardorf\n   * TypeScript (Fetch): @leonyu\n   * TypeScript (Angular2): @roni-frantchi\n   * TypeScript (jQuery): @bherila\n * Server Stubs\n   * Ada: @stcarrez\n   * C# ASP.NET5: @jimschubert\n   * C# NancyFX: @mstefaniuk\n   * C++ Pistache: @sebymiano\n   * C++ Restbed: @stkrwork\n   * Erlang Server: @galaxie\n   * Go Server: @guohuang\n   * Haskell Servant: @algas\n   * Java MSF4J: @sanjeewa-malalgoda\n   * Java Spring Boot: @diyfr\n   * Java Undertow: @stevehu\n   * Java Play Framework: @JFCote\n   * Java PKMST: @anshu2185 @sanshuman @rkumar-pk @ninodpillai\n   * JAX-RS RestEasy: @chameleon82\n   * JAX-RS CXF: @hiveship\n   * JAX-RS CXF (CDI): @nickcmaynard\n   * JAX-RS RestEasy (JBoss EAP): @jfiala\n   * Kotlin: @jimschubert\n   * PHP Lumen: @abcsun\n   * PHP Slim: @jfastnacht\n   * PHP Symfony: @ksm2\n   * PHP Zend Expressive (with Path Handler): @Articus\n   * Ruby on Rails 5: @zlx\n   * Rust (rust-server): @metaswitch\n   * Scala Finch: @jimschubert\n   * Scala Lagom: @gmkumar2005\n * Documentation\n   * HTML Doc 2: @jhitchcock\n   * Confluence Wiki: @jhitchcock\n * Configuration\n   * Apache2: @stkrwork\n\n## How to join the core team\n\nHere are the requirements to become a core team member:\n- rank within top 50 in https://github.com/swagger-api/swagger-codegen/graphs/contributors\n  - to contribute, here are some good [starting points](https://github.com/swagger-api/swagger-codegen/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22)\n- regular contributions to the project\n  - about 3 hours per week\n  - for contribution, it can be addressing issues, reviewing PRs submitted by others, submitting PR to fix bugs or make enhancements, etc\n\n To become a Template Creator, simply submit a PR for new API client (e.g. Rust, Elixir) or server stub (e.g. Ruby Grape) generator.\n\n# Swagger Codegen Technical Committee\n\nMembers of the Swagger Codegen technical committee shoulder the following responsibilities:\n\n- Provides guidance and direction to other users\n- Reviews pull requests and issues\n- Improves the generator by making enhancements, fixing bugs or updating documentations\n- Sets the technical direction of the generator\n\nWho is eligible? Those who want to join must have at least 3 PRs merged into a generator. (Exceptions can be granted to template creators or contributors who have made a lot of code changes with less than 3 merged PRs)\n\n## Members of Technical Committee\n\n| Languages     | Member (join date) |\n|:-------------|:-------------|\n| ActionScript |      |\n| Ada | @stcarrez (2018/02) |\n| Android |  |\n| Apex  |     |\n| Bash  | @kenjones-cisco (2017/09) |\n| C++      | |\n| C#        | @mandrean (2017/08) |\n| Clojure   |  |\n| Dart      | @ircecho (2017/07) |\n| Eiffel    | |\n| Elixir    |  |\n| Elm       |  |\n| Erlang    | |\n| Groovy    |  |\n| Go        | |\n| Haskell   | |\n| Java      | |\n| Kotlin     | |\n| Lua     | |\n| NodeJS/Javascript | @CodeNinjai (2017/07) |\n| ObjC      |  |\n| Perl      | |\n| PHP      | @dkarlovi (2017/07) @mandrean (2017/08) |\n| Python   | @kenjones-cisco (2017/11)|\n| R        |  |\n| Ruby      | @zlx (2017/09) |\n| Rust      | |\n| Scala     | |\n| Swift     | @ehyche (2017/08) |\n| TypeScript | |\n\n# Security contact\n\nPlease disclose any security-related issues or vulnerabilities by emailing [security@swagger.io](mailto:security@swagger.io), instead of using the public issue tracker.\n\n# License information on Generated Code\n\nThe Swagger Codegen project is intended as a benefit for users of the Swagger / Open API Specification.  The project itself has the [License](#license) as specified.  In addition, please understand the following points:\n\n* The templates included with this project are subject to the [License](#license).\n* Generated code is intentionally _not_ subject to the parent project license\n\nWhen code is generated from this project, it shall be considered **AS IS** and owned by the user of the software.  There are no warranties--expressed or implied--for generated code.  You can do what you wish with it, and once generated, the code is your responsibility and subject to the licensing terms that you deem appropriate.\n\n# License\n\n```\nCopyright 2019 SmartBear Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at [apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
fmvilas/swagger-node-codegen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BE0E426:127CEC75:66148C7C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
janephp/open-api: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2806:79BE:B408063:115EDFE3:66148D02.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
dtzar/openapi-auto-test: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2813:3BE432:B824A5B:11E173B8:66148B7E.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
apiaryio/dredd: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:320223:389444B:57ECF37:6614893E.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
quen2404/openapi-diff: >
  # OpenAPI-diff 


  Compare two OpenAPI specifications (3.x) and render the difference to HTML
  plaintext, or Markdown files.


  [![Test](https://github.com/OpenAPITools/openapi-diff/workflows/Test/badge.svg)](https://github.com/OpenAPITools/openapi-diff/actions?query=branch%3Amaster+workflow%3ATest+)


  # Requirements


  * Java 8


  # Feature


  * Supports OpenAPI spec v3.0.

  * Depth comparison of parameters, responses, endpoint, http method
  (GET,POST,PUT,DELETE...)

  * Supports swagger api Authorization

  * Render difference of property with Expression Language

  * HTML & Markdown render


  # Maven


  Available on [Maven
  Central](https://search.maven.org/artifact/com.github.joschi.openapi-diff/core)


  ```xml

  <dependency>
    <groupId>com.github.joschi.openapi-diff</groupId>
    <artifactId>core</artifactId>
    <version>${openapi-diff-version}</version>
  </dependency>

  ```


  # Docker


  Available on [Docker Hub](https://hub.docker.com/r/joschi/openapi-diff/) as
  `joschi/openapi-diff`.


  ```bash

  # docker run joschi/openapi-diff:latest

  usage: openapi-diff <old> <new>
      --debug                     Print debugging information
      --error                     Print error information
      --fail-on-changed           Fail if API changed but is backward
                                  compatible
      --fail-on-incompatible      Fail only if API changes broke backward
                                  compatibility
   -h,--help                      print this message
      --header <property=value>   use given header for authorisation
      --html <file>               export diff as html in given file
      --info                      Print additional information
   -l,--log <level>               use given level for log (TRACE, DEBUG,
                                  INFO, WARN, ERROR, OFF). Default: ERROR
      --markdown <file>           export diff as markdown in given file
      --off                       No information printed
      --query <property=value>    use query param for authorisation
      --state                     Only output diff state: no_changes,
                                  incompatible, compatible
      --text <file>               export diff as text in given file
      --trace                     be extra verbose
      --version                   print the version information and exit
      --warn                      Print warning information
  ```



  ## Build the image


  This is only required if you want to try new changes in the Dockerfile of this
  project.


  ```bash

  docker build -t local-openapi-diff .

  ```


  You can replace the local image name `local-openapi-diff` by any name of your
  choice.


  ## Run an instance


  In this example the `$(pwd)/core/src/test/resources` directory is mounted in
  the `/specs` directory of the container

  in readonly mode (`ro`).


  ```bash

  docker run -t \
    -v $(pwd)/core/src/test/resources:/specs:ro \
    joschi/openapi-diff /specs/path_1.yaml /specs/path_2.yaml
  ```


  The remote name `joschi/openapi-diff` can be replaced with
  `local-openapi-diff` or the name you gave to your local image.


  # Usage


  openapi-diff can read OpenAPI specs from JSON files or HTTP URLs.


  ## Command Line


  ```bash

  $ openapi-diff --help

  usage: openapi-diff <old> <new>
      --debug                     Print debugging information
      --error                     Print error information
   -h,--help                      print this message
      --header <property=value>   use given header for authorisation
      --html <file>               export diff as html in given file
      --info                      Print additional information
   -l,--log <level>               use given level for log (TRACE, DEBUG,
                                  INFO, WARN, ERROR, OFF). Default: ERROR
      --markdown <file>           export diff as markdown in given file
      --off                       No information printed
      --query <property=value>    use query param for authorisation
      --state                     Only output diff state: no_changes,
                                  incompatible, compatible
      --fail-on-incompatible      Fail only if API changes broke backward compatibility
      --fail-on-changed           Fail if API changed but is backward compatible
      --trace                     be extra verbose
      --version                   print the version information and exit
      --warn                      Print warning information
  ```


  ## Direct Invocation


  ```java

  public class Main {
      public static final String OPENAPI_DOC1 = "petstore_v3_1.json";
      public static final String OPENAPI_DOC2 = "petstore_v2_2.yaml";
          
      public static void main(String[] args) {
          ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);

          //...
      }
  }

  ```


  ### Render difference

  ---

  #### HTML


  ```java

  String html = new HtmlRender("Changelog",
          "http://deepoove.com/swagger-diff/stylesheets/demo.css")
                  .render(diff);

  try {
      FileWriter fw = new FileWriter(
              "testNewApi.html");
      fw.write(html);
      fw.close();

  } catch (IOException e) {
      e.printStackTrace();
  }

  ```


  #### Markdown


  ```java

  String render = new MarkdownRender().render(diff);

  try {
      FileWriter fw = new FileWriter(
              "testDiff.md");
      fw.write(render);
      fw.close();
      
  } catch (IOException e) {
      e.printStackTrace();
  }

  ```


  ### Extensions


  This project uses Java Service Provider Inteface (SPI) so additional
  extensions can be added. 


  To build your own extension, you simply need to create a
  `src/main/resources/META-INF/services/com.qdesrame.openapi.diff.core.compare.ExtensionDiff`
  file with the full classname of your implementation.  Your class must also
  implement the `com.qdesrame.openapi.diff.core.compare.ExtensionDiff`
  interface.  Then, including your library with the `openapi-diff` module will
  cause it to be triggered automatically.


  # Examples


  ### CLI Output


  ```text

  ==========================================================================

  ==                            API CHANGE LOG                            ==

  ==========================================================================
                               Swagger Petstore                             
  --------------------------------------------------------------------------

  --                              What's New                              --

  --------------------------------------------------------------------------

  - GET    /pet/{petId}


  --------------------------------------------------------------------------

  --                            What's Deleted                            --

  --------------------------------------------------------------------------

  - POST   /pet/{petId}


  --------------------------------------------------------------------------

  --                          What's Deprecated                           --

  --------------------------------------------------------------------------

  - GET    /user/logout


  --------------------------------------------------------------------------

  --                            What's Changed                            --

  --------------------------------------------------------------------------

  - PUT    /pet
    Request:
          - Deleted application/xml
          - Changed application/json
            Schema: Backward compatible
  - POST   /pet
    Parameter:
      - Add tags in query
    Request:
          - Changed application/xml
            Schema: Backward compatible
          - Changed application/json
            Schema: Backward compatible
  - GET    /pet/findByStatus
    Parameter:
      - Deprecated status in query
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - GET    /pet/findByTags
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - DELETE /pet/{petId}
    Parameter:
      - Add newHeaderParam in header
  - POST   /pet/{petId}/uploadImage
    Parameter:
      - Changed petId in path
  - POST   /user
    Request:
          - Changed application/json
            Schema: Backward compatible
  - POST   /user/createWithArray
    Request:
          - Changed application/json
            Schema: Backward compatible
  - POST   /user/createWithList
    Request:
          - Changed application/json
            Schema: Backward compatible
  - GET    /user/login
    Parameter:
      - Delete password in query
  - GET    /user/logout

  - GET    /user/{username}
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - PUT    /user/{username}
    Request:
          - Changed application/json
            Schema: Backward compatible
  --------------------------------------------------------------------------

  --                                Result                                --

  --------------------------------------------------------------------------
                   API changes broke backward compatibility                 
  --------------------------------------------------------------------------

  ```


  ### Markdown


  ```markdown

  ### What's New

  ---

  * `GET` /pet/{petId} Find pet by ID


  ### What's Deleted

  ---

  * `POST` /pet/{petId} Updates a pet in the store with form data


  ### What's Deprecated

  ---

  * `GET` /user/logout Logs out current logged in user session


  ### What's Changed

  ---

  * `PUT` /pet Update an existing pet  
      Request

          Deleted request body : [application/xml]
          Changed response : [application/json]
  * `POST` /pet Add a new pet to the store  
      Parameter

          Add tags //add new query param demo
      Request

          Changed response : [application/xml]
          Changed response : [application/json]
  * `GET` /pet/findByStatus Finds Pets by status  
      Parameter

      Return Type

          Changed response : [200] //successful operation
  * `GET` /pet/findByTags Finds Pets by tags  
      Return Type

          Changed response : [200] //successful operation
  * `DELETE` /pet/{petId} Deletes a pet  
      Parameter

          Add newHeaderParam
  * `POST` /pet/{petId}/uploadImage uploads an image for pet  
      Parameter

          petId Notes ID of pet to update change into ID of pet to update, default false
  * `POST` /user Create user  
      Request

          Changed response : [application/json]
  * `POST` /user/createWithArray Creates list of users with given input array  
      Request

          Changed response : [application/json]
  * `POST` /user/createWithList Creates list of users with given input array  
      Request

          Changed response : [application/json]
  * `GET` /user/login Logs user into the system  
      Parameter

          Delete password //The password for login in clear text
  * `GET` /user/logout Logs out current logged in user session  

  * `PUT` /user/{username} Updated user  
      Request

          Changed response : [application/json]
  * `GET` /user/{username} Get user by user name  
      Return Type

          Changed response : [200] //successful operation
  ```


  # License


  openapi-diff is released under the Apache License 2.0.


  # Thanks


  * Adarsh Sharma / [adarshsharma](https://github.com/adarshsharma)

  * Quentin Desramé / [quen2404](https://github.com/quen2404)

  * [Sayi](https://github.com/Sayi) for his project
  [swagger-diff](https://github.com/Sayi/swagger-diff) 
    which was a source of inspiration for this tool
Mermade/openapi-filter: >
  # openapi-filter


  ![ci](https://github.com/Mermade/openapi-filter/workflows/ci/badge.svg)


  Filter internal paths, operations, parameters, schemas etc from
  OpenAPI/Swagger/AsyncAPI definitions.


  Simply flag any object within the definition with an `x-internal`
  specification extension, and it will be removed from the output.


  For example:


  ```yaml

  openapi: 3.0.0

  info:
    title: API
    version: 1.0.0
  paths:
    /:
      get:
        x-internal: true
        ...
  ```


  Works with OpenAPI/Swagger 2.0 and 3.0.x and AsyncAPI definitions.


  ```

  openapi-filter.js <infile> [outfile]


  Positionals:
    infile   the input file
    outfile  the output file

  Options:

    --info           include complete info object with --valid           [boolean]
    --inverse, -i    output filtered elements only                       [boolean]
    --flags, -f      flags to filter by          [array] [default: ["x-internal"]]
    --flagValues, -v flag String values to match             [array] [default: []]
    --checkTags      filter if flags given in --flags are in the tags array
                                                                         [boolean]
    --overrides, -o  prefixes used to override named properties[arr] [default: []]
    --valid          try to ensure inverse output is valid               [boolean]
    --strip, -s      strip the flags from the finished product           [boolean]
    --servers        include complete servers object with --valid        [boolean]
    --lineWidth, -l  max line width of yaml output           [number] [default: 0]
    --maxAliasCount  maximum YAML aliases allowed          [number] [default: 100]
    --configFile     The file & path for the filter options                 [path]
    --help           Show help                                           [boolean]
    --verbose        Output more details of the filter process             [count]
  ```


  use `--` to separate flags or other array options from following options,
  i.e.:


  `openapi-filter --flags x-private x-hidden -- source.yaml target.yaml`


  or


  ```javascript

  let openapiFilter = require('openapi-filter');

  let options = {}; // defaults are shown

  //options.inverse = false;

  //options.valid = false;

  //options.flags = ['x-internal'];

  let res = openapiFilter.filter(obj,options);

  ```


  See the [wiki](https://github.com/Mermade/openapi-filter/wiki) for further
  examples.
Mermade/openapi-extract: >
  # openapi-extract


  ![ci](https://github.com/Mermade/openapi-extract/workflows/ci/badge.svg)


  Extract paths, operations, parameters, schemas etc from OpenAPI/Swagger
  definitions.


  Works with OpenAPI/Swagger 2.0 and 3.x definitions.


  ```

  Usage: openapi-extract [options] {infile} [{outfile}]


  Options:
    -h, --help             Show help                                     [boolean]
    --version              Show version number                           [boolean]
    --openai               make the definition OpenAI compliant          [boolean]
    --server               include server information                    [boolean]
    --shard                shard the input to an output directory         [string]
    -p, --path             the path to extract                            [string]
    -o, --operationid      the operationIds to extract                     [array]
    -m, --method           the method to extract for the given path       [string]
    -i, --info             copy full info object, otherwise minimal      [boolean]
    -d, --removeDocs       remove all externalDocs properties            [boolean]
    -r, --removeExamples   remove all example/examples properties        [boolean]
    -x, --removeExtensions remove all x- extension properties            [boolean]
    -s, --security         include security information                  [boolean]
    -v, --verbose          increase verbosity                            [boolean]
  ```


  or


  ```javascript

  const openapiExtractor = require('openapi-extract');

  const options = {};

  // options.path = '...';

  // options.method = '...';

  // options.operationid = ['...'];

  const res = openapiExtractor.extract(obj, options);


  const map = openapiExtractor.shard(obj, options);

  ```


  The `options` object takes the same values as the CLI, for these keys and
  default values:


  *   path = ''

  *   method = ''

  *   info = false

  *   openai = false

  *   removeDocs = false

  *   removeExamples = false

  *   removeExtensions = false

  *   server = false

  *   security = false

  *   operationid = []


  ## OpenAI compliant mode


  This option turns on the following rules:


  1. The `description` properties must have a maximum length of 300 characters
webonix/swagger-docs-cfml: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B86F31A:11E59143:661494D5.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
silas/swagger-framework: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BF15017:129596BB:661491A4.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
batdevis/swagger_engine: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD890FD:1270562B:661489DC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
signalfx/swagger-angular-client: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3A5EEAB:59F1856:66149107.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
richhollis/swagger-docs: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3A3F082:59C3EC3:661490A7.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
EiffelWebFramework/swagger: |
  Swagger
  =======

  This is a Swagger protocol implementation in Eiffel.

  Note: This is a work in progress, and the API could change in a future.

  ## Authors

  + [@oligot](https://github.com/oligot)
  + [@weilers](https://github.com/weilers)
  + B. Marchal
SmartBear/swagger4j: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3796B36:55E5463:661488D9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
ROAMSYS/swaggerapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:286B85D:3DA39F8:66148819.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
ryankennedy/swagger-jaxrs-doclet: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:320223:3B15DB5:5B91089:661490A8.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
signalfx/swagger-node-client: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BF088D1:12946C8B:66149166.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
springfox/springfox-grails-integration: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280F:293BF1:B3F3C9A:11692516:66149226.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
rantav/flask-restful-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2811:2A67FA:2295430:379C4C7:66149088.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
emicklei/go-restful: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:21078C8:34DFC42:66148B9E.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
springfox/springfox-grails-demo: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280D:267BEE:AE0D107:10E97EBB:66149225.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
gong023/swagger-assert: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  27C1:1FBDF2:22F561B:386E77E:66148CC0.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
worldline/swagger-jack: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:254B77E:3B93E6F:66149516.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Luracast/Restler: >
  ![Restler](public/examples/resources/restler.svg) Luracast Restler

  ==================================================================

  [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Luracast/Restler)

  [![Latest Stable
  Version](https://poser.pugx.org/luracast/restler/v/stable.png)](https://packagist.org/packages/luracast/restler)

  [![Total
  Downloads](https://poser.pugx.org/luracast/restler/downloads.png)](https://packagist.org/packages/luracast/restler)

  [![Latest Unstable
  Version](https://poser.pugx.org/luracast/restler/v/unstable.png)](https://packagist.org/packages/luracast/restler)

  [![License](https://poser.pugx.org/luracast/restler/license.png)](https://packagist.org/packages/luracast/restler)


  ### Version 5


  > upgraded from version 3 RC6 for latest PHP support


  Restler is a simple and effective multi-format Web API Server written in PHP.


  Just deal with your business logic in php, restler will take care of the REST!


  ### Restler - *Better APIs by Design*


  * [Developer Home](https://luracast.com/products/restler/)

  * [Documentation](https://restler5.luracast.com/) with live examples

  * Updates on [Facebook](https://www.facebook.com/Luracast) and
  [Twitter](https://twitter.com/Luracast)

  * [Features](#features)

  * [Installation](#installation)

  * [Quick Start Guide](#quick-start-guide)

  * [Change Log](#change-log)


  Features

  --------


  * No Learning Curve

  * Light weight

  * Flexible

  * Highly Customizable

  * Many Examples that can be tried on your localhost to get started

  * Supports HTTP request methods HEAD, GET, POST, PUT, DELETE, OPTIONS and
  PATCH via header or request parameter (method)

  * Supports both RESTful and Pragmatic REST API Design

  * Clients can use X-HTTP-Method-Override header, supports Cross Origin
  Resource Sharing and JSONP

  * Two-way format(media type) conversion both send and receive
      * Pluggable content Formatter framework and api
      * Comes with JSON, XML, Yaml, Amf, and Plist(both XML and Binary) format support
  * Pluggable Authentication schemes
      * OAuth 2 Server
  * Pluggable Filters to effectively manage API usage
      * API Rate Limiting Filter
  * Routing
      * Manual Routing (Annotation)
          * Using `@url GET my/custom/url/{param}` PHPDoc comments
      * Auto Routing (Reflection)
          * URL to Method mapping
          * URL part to Method parameter mapping
          * Query parameters to Method parameter mapping
          * Request body to Method parameter mapping
  * Cache built-in
      * Client Side Caching support
      * Proxy Caching support
  * API Features
      * Always supports URLEncoded format for simplified input (POST vars)
      * Automatic parameter validation and type conversion
      * API versioning support by URL and/or vendor specific MIME
      * API documentation and discovery using [Restler API Explorer](https://github.com/Luracast/Restler-API-Explorer)
      * Throttling and Performance tuning
  * Management
      * Behavior Driven API testing using [Behat](http://behat.org/) and [Guzzle](https://github.com/guzzle/guzzle)
      * Command line Project Management using [Respect/Foundation](https://github.com/Respect/Foundation)
      * Dependency Management using [Composer](http://getcomposer.org/)
      * Source code distributed under LGPL

  Git Repository and the Branches

  -------------------------------


  1. Most stable and recent version is at the `master` branch, previous versions
  are in the version branches such
     as `v4`, `v3`, `v2`, and `v1`.

  2. Version branch with the current version such as `v5` is used for building
  up the next release. It's documentation may
     not be updated frequently and thus reserved for the daring ones.

  3. Feature branches such as `features/html` and `features/router` are purely
  for experimentation purpose to try out a
     feature. They may be merged when ready.

  Test Drive

  ----------


  Install this repository to try out the examples.


  > Make sure PHP 5.4 or above is available on your server. We recommended using
  the latest version for better performance.


  ### 1. Install Composer


  Restler uses [Composer](http://getcomposer.org/) to manage its dependencies.
  First, download a copy of `composer.phar`.

  It can be kept in your project folder or ideally in `usr/local/bin` to use it
  globally for all your projects. If you are

  on Windows, you can use the composer

  [windows installer](https://getcomposer.org/Composer-Setup.exe) instead.


  ### 2. Install Restler


  #### Option 1. Using composer create-project


  You may install Restler by running the create project command in your
  terminal. Replace {projectName} with your actual

  project name. It will create a folder with that name and install Restler.


  ```console

  php composer.phar create-project luracast/restler {projectName}

  ```


  > **Note:-**

  >

  > 1. If you do not want the additional formats and BDD tools you can include
       >    `--no-dev` to enforce exclusion of dev packages.
  >

  > 2. If you want to try the bleading edge v3 branch or any of the feature
       >    branches include `3.x-dev` or `dev-features/html` in the above command

  #### Option 2. Downloading from GitHub


  After installing Composer, download the [latest version]() of the Restler
  framework and extract its contents into a

  directory on your server. Next, in the root of your Restler project, run the
  `php composer.phar install`

  (or `composer install`) command to install all the framework's dependencies.
  This process requires Git to be installed

  on the server to successfully complete the installation.


  If you want to update the Restler framework, you may issue the

  `php composer.phar update` command.


  > **Note:-** If you are not allowed to install composer and git on your
  server, you

  > can install and run them on your development machine. The resulting files
  and

  > folders can be uploaded and used on the server.


  ### 3. Configure


  Ideally public folder should be mapped as your web root, It is optional, but
  recommended avoiding exposing unneeded

  files and folders.


  ### 4. Try it out


  Try the live examples in your localhost. 

  > You may launch the PHP's built-in server with `composer serve` command.


  ### 5. Run some test


  Update the base_url specified in `behat.yml` and then try the following
  command


  ```console


  vendor/bin/behat


  ```

  > alternatively you can run `composer test`


  This will test the examples against the behaviors expected, for example


  ```gherkin


  Feature: Testing CRUD Example

    Scenario: Creating new Author with JSON
      Given that I want to make a new "Author"
      And his "name" is "Chris"
      And his "email" is "chris@world.com"
      And the request is sent as JSON
      When I request "/examples/_007_crud/authors"
      Then the response status code should be 200
      And the response should be JSON
      And the response has a "id" property

  ```


  All set, Happy RESTling! :)


  Quick Start Guide

  -----------------


  We have two options to create your own restler api server

   1. Most convenient option is using application templates such as [Restler Application](https://github.com/Luracast/Restler-Framework) 
      which has integrations with many packages to help us with the business logic as well. 
      If you choose this option, select a branch in that repository and proceed with 
      the instructions available there.
      
   2. Create a project from scratch so that you have full control over every aspect of your application. 
      If you choose this option, follow along with the steps below.
      - create a folder to hold your project and open it in the terminal.
      - run `composer init` and follow along to create `composer.json`
      - when it is asking for dependencies, type `restler/framework` and `^5` for the version constraint.
      - alternatively, you can leave it blank and create the composer.json first and then run `composer require restler/framework:^5`
      
  > we are using `restler/framework` instead of `luracast/restler` to reduce the
  space required for the package. 

  > It is coming from https://github.com/Luracast/Restler-Framework it contains
  only the contents of src folder here.
      
  > Even when you are building from scratch, checking out the application
  templates will help with folder structure 

  > decisions and finding other useful packages.


  ### 1. Write API


  Create your **API classes** with all needed public and protected methods


  ### 2. Open the Gateway


  Create the **gateway (public/index.php)** as follows


  ```php

  <?php

  require_once __DIR__.'/../vendor/autoload.php';


  use Luracast\Restler\Restler;


  $r = new Restler();

  $r->addAPIClass('YourApiClassNameHere'); // repeat for more

  $r->handle(); //serve the response

  ```


  ### 3. Prettify URLs


  **Enable URL Rewriting**


  Make sure all the requests go to index.php by enabling URL Rewriting for your
  website


  For example:-


  If you are on Apache, you can use an .htaccess file such as


  ```apache

  DirectoryIndex index.php

  <IfModule mod_rewrite.c>
      RewriteEngine On
      RewriteRule ^$ index.php [QSA,L]
      RewriteCond %{REQUEST_FILENAME} !-f
      RewriteCond %{REQUEST_FILENAME} !-d
      RewriteRule ^(.*)$ index.php [QSA,L]
  </IfModule>

  <IfModule mod_php5.c>
      php_flag display_errors On
  </IfModule>

  ```


  > **Note:-** This requires `AllowOverride` to be set to `All` instead of
  `None`

  > in the `httpd.conf` file, and might require some tweaking on some server

  > configurations. Refer to
  [mod_rewrite](http://httpd.apache.org/docs/current/mod/mod_rewrite.html)

  > documentation for more info.


  If you are on Nginx, you have to make sure you set the `server_name` and pass
  the PHP scripts to fast cgi (PHP-FPM)

  listening on 127.0.0.1:9000


  ```

  server {
      listen        80;
      server_name   api.luracast.com; //change it to match your server name

      //... other stuff

      location ~ \.php$ {
          root           /var/www/html;
          fastcgi_pass   127.0.0.1:9000;
          fastcgi_index  index.php;
          fastcgi_param  SCRIPT_FILENAME  /var/www/html/$fastcgi_script_name;
          include        fastcgi_params;
      }

      //... other stuff
  }

  ```


  > **Note:-** This requires PHP, PHP-FPM to be properly installed and
  configured.

  > Refer to [PHP FastCGI](http://wiki.nginx.org/PHPFcgiExample) example for
  more

  > info.


  ### 4. Customise


  **Fine tune to suit your needs**


  ```php

  <?php

  require_once __DIR__.'/../vendor/autoload.php';

  use Luracast\Restler\Restler;

  use Luracast\Restler\Defaults;

  //set the defaults to match your requirements

  Defaults::$throttle = 20; //time in milliseconds for bandwidth throttling

  //setup restler

  $r = new Restler();

  $r->addAPIClass('YourApiClassNameHere'); // repeat for more

  $r->addAPIClass('Explorer'); //from restler framework for API Explorer

  $r->addFilterClass('RateLimit'); //Add Filters as needed

  $r->handle(); //serve the response

  ```


  Explore the api and try it out by openings `explorer/index.html` from the web
  root on your browser


  Happy Exploring! :)


  > **Note:-** Using eAccelerator can make restler to fail as it removes the

  > comments. More info can be found
  [here](http://wildlyinaccurate.com/eaccelerator-and-doctrine-2)


  ### 5. Annotate


  Restler supports annotations in the form of PHPDoc comments for API fine
  tuning


  They are documented in detail under [Annotations](ANNOTATIONS.md)


  ### 6. Authorize


  In order to protect your api, authenticate and allow valid users


  ```php

  <?php

  require_once '../restler.php';

  use Luracast\Restler\Restler;

  $r = new Restler();

  $r->addAPIClass('YourApiClassNameHere'); // repeat for more

  $r->addAuthenticationClass('CustomAuth'); //Add Authentication classes as
  needed

  $r->handle(); //serve the response

  ```


  ### 7. Start Production


  By default Restler runs in debug mode more fine tuned for API developer, by
  showing detailed error messages and

  prettifying the api result to human readbale form


  By turning on production mode you will gain some performance boost as it will
  cache the routes (comment parsing happens

  only once instead of every api call), few other files and avoid giving out
  debug information


  ```php

  <?php

  require_once '../restler.php';

  use Luracast\Restler\Restler;


  //setup restler


  $r = new Restler(true); //turn on production mode by passing true.

  //If you are using file based cache (the default) make sure cache folder is

  //writable. when you make changes to your code make sure you delete the

  // routes.php inside the cache folder

  //...

  ```

  >*Note:-* When production mode is set to `true` it always uses the cache and
  does not detect 

  > changes and new routes if any. Your continuous integration pipeline or your
  git hook should delete 

  > this file during the deployment process. Alternatively you can pass second
  parameter to restler

  > constructor to refresh the cache when changes need to be applied.


  Change Log

  ----------


  ### Restler 5


  * Semantic versioning to move forward

  * Support for PHP 8

  * Corrects the source path to be outside the vendor directory

  * Adds php development server support with `composer serve` command.

  * Ability to run the tests with `composer test` command after running the
  server 
    with `composer serve` in another window.

  ### Restler 3.0 RC6


  #### What's new


  * Adds PassThrough class to serve files outside your web root, including
  secure downloads

  * Adds Explorer class (v1 swagger 1.2 spec, and v2 swagger 2.0 spec) as a
  potential 
    replacement to Resources class (swagger 1.1 spec)
      * Explorer comes bundled with the html, css, and assets. So that you need not manually download and configure it
      * Explorer combines the parameters that are expected in the request body to create a unique model for swagger
      * Since Restler Explorer comes bundled, you can map to it to your url of choice. 
        For example `$restler->addAPIClass("Luracast/Restler/Explorer", 'swagger')` maps it to `/swagger`.
      * Explorer metadata can be easily customized with ExplorerInfo class

  #### Improvements


  * Routes class improved to provide a findAll method to list all the routes for
  a specific version of the API excluding
    the specified paths and http methods.
  * The magic properties utilized by routes when found, ignoring actual
  properties. 
    This is useful for Dynamic Model classes such as Eloquent.
  * Routes now allow `@required` and `@properties` to be arrays when the
  parameter is an object. 
    This helps us to pick and choose the properties for each api method differently.
    Example `{@properties property1,property2,property3}` `{@required property1,property2}` makes an api to only look for
    3 properties and 2 of them are required.

  * Optimized the Nav class. It now makes use of `Routes::findAll()`, along with
  Explorer class

  * Restler class has setBaseUrls method to set acceptable base urls that can be
  set using `$_SERVER['HTTP_HOST']`.
    Read [this article](http://shiflett.org/blog/2006/mar/server-name-versus-http-host) to understand why. This is useful
    in the following cases when
      * PHP has trouble detecting the port correctly
      * multiple domains are pointing to the same server

  * Restler class now allows overriding the status code by setting
  `$this->restler->responseCode` from the api method.

  * Improved Forms class to send the embedded properties to emmet template. For
  example


  ```

  /**
   * {@id form1}
   *
   * @param string $name
   * @param int $age
  */

  ```

    Generates the following form

      <form role="form" id="form1" method="POST" ...

    because the emmet template has id in it (see below)

      form[role=form id=$id# name=$name# method=$method# action=$action# enctype=$enctype#]

  * Forms class uses embedded properties with `@param` comments to set html
  attributes (for example id, accept etc) easily

  * FormStyles improved.

  * Validator is now initialized by scope so that we can set its properties with
  `@class` comment. **Example:
    -**  `@class Validator {@holdException}` makes the validator to hold the exceptions instead of throwing
  * Improved Form validation with error messages for individual fields.

  * Forms example updated to show validation errors with bootstrap based themes.

  * CommentParser is now able to parse `@property`, `@property-read`,
  `@property-write` to support documenting the dynamic
    properties.
  * CommentParser supports short array syntax such as `string[]`, `DateTime[]`

  * Scope adds support for external DI Container of your choice with
  `Scope::$resolver` property.

  * Renamed `String` class to `Text` for PHP 7 support (String is a reserved
  keyword in php7)

  * Flash now implements ArrayAccess so that we can access flash variables just
  like an array

  * **composer.json**: removed many dependencies from require-dev. Will prompt
  the developers to install them individually
    when they need them.
  * newrelic support added.

  * Memcache support added.
signalfx/swagger-cli-client: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BEFC91E:12934E01:66149127.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
concentricsky/django-tastypie-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:3743CD8:55BDEE1:66148ABC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
fliptoo/swagger-express: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BE083A3:127C5AC4:66148C5D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
KevM/fubumvc-swagger: "FubuMVC Swagger\r\n===============\r\n\r\nThis project helps your [FubuMVC](https://github.com/DarthFubuMVC/fubumvc) web application\r\n generate API documentation via [Swagger](http://swagger.wordnik.com/).\r\n \r\n[![swagger demo](https://github.com/KevM/fubumvc-swagger/raw/gh-pages/images/hellofubuswagger.png)](http://fubuswagger.apphb.com/)\r\n\r\nSee our [Hello Swagger](http://fubuswagger.apphb.com/) live demo.\r\n\r\n### How do I get it? ###\r\n\r\nWe have a [nuget package](https://nuget.org/packages/FubuMVC.Swagger) available.\r\n\r\n```PM> Install-Package FubuMVC.Swagger```\r\n\r\n#### Building Swagger\r\n\r\nTo build just run rake grabbing the albacore gem if you don't already have it. \r\n\r\n```rb\r\ngem install albacore\r\nrake\r\n```\r\n\r\n### How do I put this in my peanut butter?\r\n\r\n**Note:** This should all be simplified when I find the time to figure out Fubu Bottles. \r\n\r\nYour API documented should support content negitiation and be grouped under the route **/api**. Take a look at the [HelloSwagger](https://github.com/KevM/fubumvc-swagger/tree/master/src/HelloSwagger) for examples. \r\n\r\n#### Checklist\r\n\r\nAdd a reference to this project. Why not [use nuget](https://nuget.org/packages/FubuMVC.Swagger)!\r\n\r\nAdd the following to your FubuRegistry:\r\n\r\n```cs\r\nApplyConvention<SwaggerConvention>();\r\nServices(s=> s.AddService<IActionGrouper, APIRouteGrouper>());\r\n```\r\n\r\nCopy the swagger-ui directory into your **/content** direcotry.\r\n\r\nLaunch your web app and take a look at the **/api** to see if it is working.\r\n\r\n### What does this convention do?\r\n\r\nThree routes will be added to your application:\r\n\r\n```html\r\nGET /api\r\n```\r\nThis route serves up the Swagger-UI page currently embedded into FubuSwagger. _This part needs work._\r\n\r\n```html\r\nGET /api/resources.json\r\n```\r\nSwagger UI does some resource discovery and uses the output of this route to find all of the API groups in your project. \r\n\r\n```html\r\nGET /api/{GroupKey}.json\r\n```\r\nDetails of each API group present in your app. \r\n\r\nPointing a Swagger UI web site at ```http://localhost:port/api/``` should render pretty API documentation for your web application.\r\n\r\n### Why do I not see documentation for my actions?\r\n\r\nMake sure the actions you wish to document are enabled for \"Conneg\"\r\n\r\nIn this example I have two marker interfaces which are used to mark input models on actions which will be APIs. \r\n\r\n```cs\r\ngraph.Behaviors\r\n .Where(x => x.InputType().CanBeCastTo<IApi>() || x.InputType().CanBeCastTo<IUnauthenticatedApi>())\r\n .Each(x => x.MakeAsymmetricJson());\r\n```\r\n\r\nThis example will force the result of these actions to be JSON. Note: This configuration is working around a bug in FubuMVC where normal browser usage will return XML for Conneg enabled endpoints. :( \r\n\r\nBetter yet take a look at the [HelloSwagger](https://github.com/KevM/fubumvc-swagger/tree/master/src/HelloSwagger) demo application and see how it is wired up and organized.\r\n\r\n### How do I add more detail to my APIs\r\n\r\nYou can use data annotations to mark up your input models and their properties.\r\n\r\n```cs\r\n[Description(\"Workflow object history\")]\r\npublic class HistoryRequest : IApi \r\n{\r\n    [Required, Description(\"Type of workflow object. Typically this is 'case'.\")]\r\n    [AllowableValues(\"case\", \"subcase\", \"solution\", \"<any workflow object name>\")]\r\n    public string Type { get; set; }\r\n    [Required, Description(\"Id of the workflow object.\")]\r\n    public string Id { get; set; }\r\n\r\n    [Description(\"Limit the amout of history returned the given number of days. When this parameter is not specified. All history items will be returned.\")]\r\n\tpublic int DaysOfHistory { get; set; }\r\n}\r\n```"
ServiceStack/ServiceStack: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:378BEEA:55D58D3:661488B8.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
rahulsom/swaggydoc: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:21B4418:35E3ACE:66148FE6.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
glennjones/hapi-swagger: >
  # hapi-swagger


  This is a [OpenAPI (aka Swagger)](https://openapis.org/) plug-in for
  [Hapi](https://hapi.dev/) When installed it will self document the API
  interface

  in a project.


  [![Maintainers
  Wanted](https://img.shields.io/badge/maintainers-wanted-red.svg?style=for-the-badge)](https://github.com/hapi-swagger/hapi-swagger/issues/718)

  ![GitHub Workflow
  Status](https://img.shields.io/github/actions/workflow/status/hapi-swagger/hapi-swagger/node.js.yml?style=for-the-badge)

  [![npm
  downloads](https://img.shields.io/npm/dm/hapi-swagger.svg?style=for-the-badge)](https://www.npmjs.com/package/hapi-swagger)

  [![MIT
  license](http://img.shields.io/badge/license-MIT-blue.svg?style=for-the-badge)](https://raw.github.com/hapi-swagger/hapi-swagger/master/license.txt)


  ## Compatibility


  | Version | [Hapi](https://github.com/hapijs/hapi) |
  [Joi](https://github.com/sideway/joi) | Node   | Release
  Notes                                                   |

  | ------- | -------------------------------------- |
  ------------------------------------- | ------ |
  --------------------------------------------------------------- |

  | `16.x`  | `>=20.0.0 @hapi/hapi`                  | `>=17.0.0
  joi`                        | `>=14` |
  [#795](https://github.com/hapi-swagger/hapi-swagger/issues/795) |

  | `15.x`  | `>=20.0.0 @hapi/hapi`                  | `>=17.0.0
  joi`                        | `>=14` |
  [#782](https://github.com/hapi-swagger/hapi-swagger/issues/782) |

  | `14.x`  | `>=19.0.0 @hapi/hapi`                  | `>=17.0.0
  joi`                        | `>=12` |
  [#680](https://github.com/hapi-swagger/hapi-swagger/issues/680) |

  | `13.x`  | `>=19.0.0 @hapi/hapi`                  | `>=17.0.0
  @hapi/joi`                  | `>=12` |
  [#660](https://github.com/hapi-swagger/hapi-swagger/issues/660) |

  | `12.x`  | `>=19.0.0 @hapi/hapi`                  | `>=17.0.0
  @hapi/joi`                  | `>=12` |
  [#644](https://github.com/hapi-swagger/hapi-swagger/issues/644) |

  | `11.x`  | `>=18.4.0 @hapi/hapi`                  | `>=16.0.0
  @hapi/joi`                  | `>=8`  |
  [#631](https://github.com/hapi-swagger/hapi-swagger/issues/631) |

  | `10.x`  | `>=18.3.1 @hapi/hapi`                  | `>=14.0.0
  @hapi/joi`                  | `>=8`  |
  [#587](https://github.com/hapi-swagger/hapi-swagger/issues/587) |

  | `9.x`   | `>=17 hapi`                            |
  `<14.0.0`                             | `>=8`  |
  [#487](https://github.com/hapi-swagger/hapi-swagger/issues/487) |

  | `7.x`   | `<17 hapi`                             |
  ???                                   | ???    |
  [#325](https://github.com/hapi-swagger/hapi-swagger/issues/325) |


  ## Installation


  You can add the module to your Hapi using npm:


  ```bash

  > npm install hapi-swagger --save

  ```


  **hapi-swagger** no longer bundles `joi` to fix
  [#648](https://github.com/hapi-swagger/hapi-swagger/issues/648). Install
  **hapi-swagger** with peer dependencies using:


  ```bash

  npx install-peerdeps hapi-swagger

  ```


  If you want to view the documentation from your API you will also need to
  install the `inert` and `vision` plugs-ins which support templates and static

  content serving.


  ```bash

  > npm install @hapi/inert --save

  > npm install @hapi/vision --save

  ```


  ## Documentation


  -   [Options Reference](optionsreference.md)

  -   [Usage Guide](usageguide.md)


  ## Quick start


  In your Hapi apps please check the main JavaScript file and add the following
  code to already created a Hapi `server` object.

  You will also add the routes for you API as describe on [hapi
  website](https://hapi.dev/).


  ```Javascript

  const Hapi = require('@hapi/hapi');

  const Inert = require('@hapi/inert');

  const Vision = require('@hapi/vision');

  const HapiSwagger = require('hapi-swagger');

  const Pack = require('./package');


  (async () => {
      const server = Hapi.server({
          port: 3000,
          host: 'localhost'
      });

      const swaggerOptions = {
          info: {
                  title: 'Test API Documentation',
                  version: Pack.version,
              },
          };

      await server.register([
          Inert,
          Vision,
          {
              plugin: HapiSwagger,
              options: swaggerOptions
          }
      ]);

      try {
          await server.start();
          console.log('Server running at:', server.info.uri);
      } catch(err) {
          console.log(err);
      }

      server.route(Routes);
  })();

  ```


  ### Tagging your API routes


  As a project may be a mixture of web pages and API endpoints you need to tag
  the routes you wish Swagger to

  document. Simply add the `tags: ['api']` property to the route object for any
  endpoint you want documenting.


  You can even specify more tags and then later generate tag-specific
  documentation. If you specify

  `tags: ['api', 'foo']`, you can later use `/documentation?tags=foo` to load
  the documentation on the

  HTML page (see next section).


  ```Javascript

  {
      method: 'GET',
      path: '/todo/{id}/',
      options: {
          handler: handlers.getToDo,
          description: 'Get todo',
          notes: 'Returns a todo item by the id passed in the path',
          tags: ['api'], // ADD THIS TAG
          validate: {
              params: Joi.object({
                  id : Joi.number()
                          .required()
                          .description('the id for the todo item'),
              })
          }
      },
  }

  ```


  Once you have tagged your routes start the application. **The plugin adds a
  page into your site with the route `/documentation`**,

  so the the full URL for the above options would be
  `http://localhost:3000/documentation`.


  ### Typescript


  **hapi-swagger** exports its own typescript definition file that can be used
  when registering the plugin with **Hapi**. See example below:


  #### Install Typescript Definition Files


  ```sh

  npm i @types/hapi__hapi @types/hapi__inert @types/hapi__joi
  @types/hapi__vision @types/node hapi-swagger --save-dev

  ```


  #### Register Plugin with Typescript


  ```typescript

  import * as Hapi from '@hapi/hapi';

  import * as HapiSwagger from 'hapi-swagger';


  // code omitted for brevity


  const swaggerOptions: HapiSwagger.RegisterOptions = {
      info: {
          title: 'Test API Documentation'
      }
  };


  const plugins: Array<Hapi.ServerRegisterPluginObject<any>> = [
      {
          plugin: Inert
      },
      {
          plugin: Vision
      },
      {
          plugin: HapiSwagger,
          options: swaggerOptions
      }
  ];


  await server.register(plugins);

  ```


  ## Contributing


  Read the [contributing guidelines](./.github/CONTRIBUTING.md) for details.


  ## Thanks


  I would like to thank all that have contributed to the project over the last
  couple of years. This is a hard project to maintain, getting Hapi to work with
  Swagger is like putting a round plug in a square hole. Without the help of
  others it would not be possible.
stemey/gform-admin: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BF31FA1:129846EB:66149236.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mac-/ratify: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:396041B:587F74F:66148E21.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
marcgibbons/django-rest-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2806:D3E08:3AF76D9:5B31A9F:66148E41.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
signalfx/swagger-client-generator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3A73F40:5A0FDF7:66149146.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
solso/source2swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B7E83DF:11D8EB79:66149223.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
myfreeweb/octohipster: >
  Current [semantic](http://semver.org/) version:


  ```clojure

  [octohipster "0.2.1-SNAPSHOT"]

  ```


  # octohipster [![Build
  Status](https://travis-ci.org/myfreeweb/octohipster.png?branch=master)](https://travis-ci.org/myfreeweb/octohipster)
  [![unlicense](https://img.shields.io/badge/un-license-green.svg?style=flat)](http://unlicense.org)


  Octohipster is


  - a REST library/toolkit/microframework for Clojure

  - that allows you to build HTTP APIs

  - in a declarative
  [Webmachine](https://github.com/basho/webmachine/wiki/Overview)-like style,
  using [Liberator](https://github.com/clojure-liberator/liberator)

  - powered by [Ring](https://github.com/ring-clojure/ring); you can add [rate
  limiting](https://github.com/myfreeweb/ring-ratelimit),
  [authentication](https://github.com/cemerick/friend),
  [metrics](http://metrics-clojure.readthedocs.org/en/latest/ring.html), [URL
  rewriting](https://github.com/ebaxt/ring-rewrite) and more with just
  middleware


  It allows you to make APIs that


  - support hypermedia ([HAL+JSON](http://stateless.co/hal_specification.html),
  [Collection+JSON](http://amundsen.com/media-types/collection/) and
  Link/Link-Template HTTP headers; works with
  [Frenetic](http://dlindahl.github.com/frenetic/))

  - support multiple output formats (JSON, EDN, YAML and any custom format)

  - have [Swagger](https://github.com/wordnik/swagger-core/wiki) documentation 

  - use [JSON Schema](http://json-schema.org) for validation *and* documentation

  - have pagination


  ## Concepts


  - a **resource** is a single endpoint that accepts requests and returns
  responses

  - a **group** is a collection of resources with a single URL prefix (eg. a
  group /things contains resources /things/ and /things/{id}) and zero or more
  shared properties (usually the schema)

  - a **documenter** is a function that returns a resource which documents
  regular resources (Swagger, HAL root, etc)

  - a **mixin** is a function that is applied to multiple resources to give them
  shared behavior (eg. collection or entry behavior)

  - a **response handler** is a function that is used to encode response data to
  a particular content-type (JSON, EDN, YAML, etc.)

  - a **params handler** is a function that is used to decode incoming data from
  a particular content-type (JSON, EDN, YAML, etc.)


  ## Usage


  ```clojure

  (ns example
    (:use [octohipster core routes mixins pagination]
          [octohipster.documenters swagger schema]
          org.httpkit.server)
    (:import org.bson.types.ObjectId)
    (:require [monger.core :as mg]
              [monger.query :as mq]
              [monger.collection :as mc]
              monger.json))

  (mg/connect!)

  (mg/set-db! (mg/get-db "octohipster-example"))


  ;;;; The "model"

  ;;;;  tip: make it a separate namespace, eg. app.models.contact

  (def contact-schema
    {:id "Contact"
     :type "object"
     :properties {:name {:type "string"}
                  :phone {:type "integer"}}
     :required [:name]})

  (defn contacts-count [] (mc/count "contacts"))

  (defn contacts-all []
    (mq/with-collection "contacts"
      (mq/find {})
      (mq/skip *skip*)
      (mq/limit *limit*)))
  (defn contacts-find-by-id [x] (mc/find-map-by-id "contacts" (ObjectId. x)))

  (defn contacts-insert! [x]
    (let [id (ObjectId.)]
      (mc/insert "contacts" (assoc x :_id id))
      (mc/find-map-by-id "contacts" id)))
  (defn contacts-update! [x old] (mc/update "contacts" old x :multi false))

  (defn contacts-delete! [x] (mc/remove "contacts" x))


  ;;;; The resources

  ;; with shared pieces of documentation

  (def name-param
    {:name "name", :dataType "string", :paramType "path", :required "true", :description "The name of the contact", :allowMultiple false})

  (def body-param
    {:dataType "Contact", :paramType "body", :required true, :allowMultiple false})

  (defresource contact-collection
    :desc "Operations with multiple contacts"
    :mixins [collection-resource]
    :clinks {:item ::contact-item}
    :data-key :contacts
    :exists? (fn [ctx] {:contacts (contacts-all)})
    :post! (fn [ctx] {:item (-> ctx :request :non-query-params contacts-insert!)})
    :count (fn [req] (contacts-count))
    :doc {:get {:nickname "getContacts", :summary "Get all contacts"}
          :post {:nickname "createContact", :summary "Create a contact"}})

  (defresource contact-item
    :desc "Operations with individual contacts"
    :url "/{_id}"
    :mixins [item-resource]
    :clinks {:collection ::contact-collection}
    :data-key :contact
    :exists? (fn [ctx]
               (if-let [doc (-> ctx :request :route-params :_id contacts-find-by-id)]
                 {:contact doc}))
    :put! (fn [ctx]
            (-> ctx :request :non-query-params (contacts-update! (:contact ctx)))
            {:contact (-> ctx :request :route-params :_id contacts-find-by-id)})
    :delete! (fn [ctx]
               (-> ctx :contact contacts-delete!)
               {:contact nil})
    :doc {:get {:nickname "getContact", :summary "Get a contact", :parameters [name-param]}
          :put {:nickname "updateContact", :summary "Overwrite a contact", :parameters [name-param body-param]}
          :delete {:nickname "deleteContact", :summary "Delete a contact", :parameters [name-param]}})

  ;;;; The group

  (defgroup contact-group
    :url "/contacts"
    :add-to-resources {:schema contact-schema}  ; instead of typing the same for all resources in the group
    :resources [contact-collection contact-item])

  ;;;; The handler

  (defroutes site
    :groups [contact-group]
    :documenters [schema-doc schema-root-doc swagger-doc swagger-root-doc])

  (defn -main [] (run-server site {:port 8080}))

  ```


  Also, [API Documentation](http://myfreeweb.github.com/octohipster) is
  available.


  ## Contributing


  By participating in this project you agree to follow the [Contributor Code of
  Conduct](http://contributor-covenant.org/version/1/1/0/).


  Please take over the whole project!  

  I don't use Clojure a lot nowadays.  

  Talk to me: <greg@unrelenting.technology>.


  ## License


  This is free and unencumbered software released into the public domain.  

  For more information, please refer to the `UNLICENSE` file or
  [unlicense.org](http://unlicense.org).
gettyimages/spray-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2813:0B6D:228EA61:376C75B:66148CBF.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
skrusty/dotswaggen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BF1B975:12963406:661491C4.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
yvasiyarov/swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:2290651:372DA2C:66149559.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
SerenaFeng/tornado-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD490A0:126A4720:66148899.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
siemens/restapidoc: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3A54608:59E25C4:661490E8.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
josephpconley/swagger2postman: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:390962D:5801305:66148D22.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
wonderlic/swagger-validation: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B875D57:11E63167:661494F7.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
signalfx/swagger-validate: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BF0ED00:129503BB:66149185.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
DarthFubuMVC/fubumvc: "# Building FubuMVC\r\n\r\nThe FubuMVC codebase still uses Rake for build automation, but as of September 2015, you don't **have** to use Rake to develop with FubuMVC if you don't want to. You **will need \r\nto have Node.js or Io.js and npm installed** in order to build the client side assets for FubuMVC's diagnostics package before working with the C# code.\r\n\r\n## With Rake\r\n\r\nAssuming you have Ruby 2.1+ installed on your computer, go to a command line and type...\r\n\r\n1. bundle install\r\n1. rake\r\n\r\n\r\n## Visual Studio.Net Only\r\n\r\nThere is a small command file called `build.cmd` that can be executed once to bring down nuget and npm dependencies and build the client side assets that FubuMVC \r\nneeds for its embedded. diagnostics. Run this command at least once before opening Visual Studio.Net.\r\n\r\nFrom there, open the solution file at `src/FubuMVC.sln` and go to town.\r\n\r\n\r\n# Working with Storyteller\r\n\r\n* `rake open_st` -- Opens the Storyteller test suite in the Storyteller client for interactive editing and execution\r\n* `rake storyteller` -- Runs all the Storyteller specifications\r\n\r\n# Working with Diagnostics\r\n\r\nOpen the diagnostics harness application to the browser with the command `rake diagnostics`. This command will start webpack in a new window against the client side\r\nattributes in the `javascript` folder in \"watched\" mode. This command also compiles and starts the `DiagnosticsHarness` application in a NOWIN server before opening a browser\r\nwindow to the newly launched application. The browser will auto-refresh whenever a new version of the webpack `bundle.js` file is saved. You will have to stop and restart\r\nthe FubuMVC application to see any changes to the server side.\r\n \r\n\r\n"
kenshoo/swagger-validator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2A2CB55:40381C2:66148D42.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
nelmio/NelmioApiDocBundle: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:A4E47:B77F68B:11C0B80B:66148F44.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
astaxie/beego: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2808:307920:38C20DE:58021B6:661489BD.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
signalfx/swagger-ajax-client: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2B606FF:41F48DD:661490E8.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
swagger-api/swagger-ui: "# <img src=\"https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SWU-logo-clr.png\" width=\"300\">\n\n[![NPM version](https://badge.fury.io/js/swagger-ui.svg)](http://badge.fury.io/js/swagger-ui)\n[![Build Status](https://jenkins.swagger.io/view/OSS%20-%20JavaScript/job/oss-swagger-ui-master/badge/icon?subject=jenkins%20build)](https://jenkins.swagger.io/view/OSS%20-%20JavaScript/job/oss-swagger-ui-master/)\n[![npm audit](https://jenkins.swagger.io/buildStatus/icon?job=oss-swagger-ui-security-audit&subject=npm%20audit)](https://jenkins.swagger.io/job/oss-swagger-ui-security-audit/lastBuild/console)\n![total GitHub contributors](https://img.shields.io/github/contributors-anon/swagger-api/swagger-ui.svg)\n\n![monthly npm installs](https://img.shields.io/npm/dm/swagger-ui.svg?label=npm%20downloads)\n![total docker pulls](https://img.shields.io/docker/pulls/swaggerapi/swagger-ui.svg)\n![monthly packagist installs](https://img.shields.io/packagist/dm/swagger-api/swagger-ui.svg?label=packagist%20installs)\n![gzip size](https://img.shields.io/bundlephobia/minzip/swagger-ui.svg?label=gzip%20size)\n\n## Introduction\n[Swagger UI](https://swagger.io/tools/swagger-ui/) allows anyone — be it your development team or your end consumers — to visualize and interact with the API’s resources without having any of the implementation logic in place. It’s automatically generated from your OpenAPI (formerly known as Swagger) Specification, with the visual documentation making it easy for back end implementation and client side consumption.\n\n## General\n**\U0001F449\U0001F3FC Want to score an easy open-source contribution?** Check out our [Good first issue](https://github.com/swagger-api/swagger-ui/issues?q=is%3Aissue+is%3Aopen+label%3A%22Good+first+issue%22) label.\n\n**\U0001F570️ Looking for the older version of Swagger UI?** Refer to the [*2.x* branch](https://github.com/swagger-api/swagger-ui/tree/2.x).\n\n\nThis repository publishes three different NPM modules:\n\n* [swagger-ui](https://www.npmjs.com/package/swagger-ui) is a traditional npm module intended for use in single-page applications that are capable of resolving dependencies (via Webpack, Browserify, etc.).\n* [swagger-ui-dist](https://www.npmjs.com/package/swagger-ui-dist) is a dependency-free module that includes everything you need to serve Swagger UI in a server-side project, or a single-page application that can't resolve npm module dependencies.\n* [swagger-ui-react](https://www.npmjs.com/package/swagger-ui-react) is Swagger UI packaged as a React component for use in React applications.\n\nWe strongly suggest that you use `swagger-ui` instead of `swagger-ui-dist` if you're building a single-page application, since `swagger-ui-dist` is significantly larger.\n\nIf you are looking for plain ol' HTML/JS/CSS, [download the latest release](https://github.com/swagger-api/swagger-ui/releases/latest) and copy the contents of the `/dist` folder to your server.\n\n\n## Compatibility\nThe OpenAPI Specification has undergone 5 revisions since initial creation in 2010.  Compatibility between Swagger UI and the OpenAPI Specification is as follows:\n\n| Swagger UI Version | Release Date | OpenAPI Spec compatibility             | Notes                                                                 |\n|--------------------|--------------|----------------------------------------|-----------------------------------------------------------------------|\n| 5.0.0              | 2023-06-12   | 2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.1.0 | [tag v5.0.0](https://github.com/swagger-api/swagger-ui/tree/v5.0.0)   |\n| 4.0.0              | 2021-11-03   | 2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3        | [tag v4.0.0](https://github.com/swagger-api/swagger-ui/tree/v4.0.0)   |\n| 3.18.3             | 2018-08-03   | 2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3        | [tag v3.18.3](https://github.com/swagger-api/swagger-ui/tree/v3.18.3) |\n| 3.0.21             | 2017-07-26   | 2.0                                    | [tag v3.0.21](https://github.com/swagger-api/swagger-ui/tree/v3.0.21) |\n| 2.2.10             | 2017-01-04   | 1.1, 1.2, 2.0                          | [tag v2.2.10](https://github.com/swagger-api/swagger-ui/tree/v2.2.10) |\n| 2.1.5              | 2016-07-20   | 1.1, 1.2, 2.0                          | [tag v2.1.5](https://github.com/swagger-api/swagger-ui/tree/v2.1.5)   |\n| 2.0.24             | 2014-09-12   | 1.1, 1.2                               | [tag v2.0.24](https://github.com/swagger-api/swagger-ui/tree/v2.0.24) |\n| 1.0.13             | 2013-03-08   | 1.1, 1.2                               | [tag v1.0.13](https://github.com/swagger-api/swagger-ui/tree/v1.0.13) |\n| 1.0.1              | 2011-10-11   | 1.0, 1.1                               | [tag v1.0.1](https://github.com/swagger-api/swagger-ui/tree/v1.0.1)   |\n\n## Documentation\n\n#### Usage\n- [Installation](docs/usage/installation.md)\n- [Configuration](docs/usage/configuration.md)\n- [CORS](docs/usage/cors.md)\n- [OAuth2](docs/usage/oauth2.md)\n- [Deep Linking](docs/usage/deep-linking.md)\n- [Limitations](docs/usage/limitations.md)\n- [Version detection](docs/usage/version-detection.md)\n\n#### Customization\n- [Overview](docs/customization/overview.md)\n- [Plugin API](docs/customization/plugin-api.md)\n- [Custom layout](docs/customization/custom-layout.md)\n\n#### Development\n- [Setting up](docs/development/setting-up.md)\n- [Scripts](docs/development/scripts.md)\n\n#### Contributing\n- [Contributing](https://github.com/swagger-api/.github/blob/master/CONTRIBUTING.md)\n\n##### Integration Tests\n\nYou will need JDK of version 7 or higher as instructed here\nhttps://nightwatchjs.org/guide/getting-started/installation.html#install-selenium-server\n\nIntegration tests can be run locally with `npm run e2e` - be sure you aren't running a dev server when testing!\n\n### Browser support\nSwagger UI works in the latest versions of Chrome, Safari, Firefox, and Edge.\n\n### Known Issues\n\nTo help with the migration, here are the currently known issues with 3.X. This list will update regularly, and will not include features that were not implemented in previous versions.\n\n- Only part of the parameters previously supported are available.\n- The JSON Form Editor is not implemented.\n- Support for `collectionFormat` is partial.\n- l10n (translations) is not implemented.\n- Relative path support for external files is not implemented.\n\n## Security contact\n\nPlease disclose any security-related issues or vulnerabilities by emailing [security@swagger.io](mailto:security@swagger.io), instead of using the public issue tracker.\n\n## License\n\nSwaggerUI is licensed under [Apache 2.0 license](https://github.com/swagger-api/swagger-ui/blob/master/LICENSE).\nSwaggerUI comes with an explicit [NOTICE](https://github.com/swagger-api/swagger-ui/blob/master/NOTICE) file\ncontaining additional legal notices and information.\n"
wkennedy/swagger4spring-web: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BFC3194:12A5F6F1:661494F6.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
sun-opsys/api-doc: >-
  {"message":"Not
  Found","documentation_url":"https://docs.github.com/rest/repos/contents#get-a-repository-readme"}
abelsilva/swaggerwcf: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280F:293BF1:B252567:1142A439:6614891B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
fleekjs/fleek-parser: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:320223:3973A54:592FEAC:66148BDF.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
pipermerriam/flex: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2806:4B68:24188D5:3A41BC0:66149086.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
yahehe/Nancy.Swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:836C:2457B0F:3A32DCF:66149538.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
penx/openapi-mock: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:320223:3AFF74D:5B708C5:66149066.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
apigee/undefined: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD7C666:126F2373:6614899C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
xerions/phoenix_swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:3564:23EB483:3984358:66149537.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
apiaryio/fury-adapter-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD7648B:126E8FAA:6614897C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
fleekjs/fleek-response: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:38A45F1:576D4EA:66148BFF.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
marcelojaloto/SwagDoc: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2A80167:40B0C5D:66148E41.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
senchalabs/connect: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280D:2130B9:2C39801:431E5CD:661490AA.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Yelp/bravado: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:14372A:BA5A3DA:1229D73D:6614891A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
stackia/test2doc.js: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2811:342B:B0CEEE2:11282EF1:66149226.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
RobWin/assertj-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:27DEDD:A8FC60C:107729A4:66148879.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mobilcom-debitel/got-swag: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2804:314030:38A209B:57734EC:66148E86.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
metosin/ring-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2806:D3E08:3B033D3:5B4317E:66148E63.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
byjg/php-swagger-test: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B655960:11B316AE:661489FC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
alekseyl/mini-apivore: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:37B7397:56140F1:6614893D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Surnet/swagger-jsdoc: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:28ABEF9:3E02F64:661488D9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
domaindrivendev/Swashbuckle: >
  | :mega: Calling for Maintainers |

  |--------------|

  | With the introduction of [ASP.NET Core](https://www.asp.net/core), I've now
  shifted my focus to the Core-specific project -
  [Swashbuckle.AspNetCore](https://github.com/domaindrivendev/Swashbuckle.AspNetCore).
  That will be receiving most of my (already limited) personal time, and so I
  won't have the capacity to maintain this one at a sufficient rate. Still, I'd
  love to see it live on and am seeking one or two "core" contributors /
  maintainers to help out. Ideally, these would be people who have already
  contributed through PRs and understand the inner workings and overall design.
  Once signed-up, we can agree on an approach that works - ultimately, I want to
  remove myself as the bottleneck to merging PRs and getting fresh Nugets
  published. If you're interested, please let me know by adding a comment
  [here](https://github.com/domaindrivendev/Swashbuckle/issues/1053) |


  Swashbuckle

  =========


  [![Build
  status](https://ci.appveyor.com/api/projects/status/qoesh4nm6tb6diuk?svg=true)](https://ci.appveyor.com/project/domaindrivendev/swashbuckle)


  Seamlessly adds a [Swagger](http://swagger.io/) to WebApi projects! Combines
  ApiExplorer and Swagger/swagger-ui to provide a rich discovery, documentation
  and playground experience to your API consumers.


  In addition to its Swagger generator, Swashbuckle also contains an embedded
  version of [swagger-ui](https://github.com/swagger-api/swagger-ui) which it
  will automatically serve up once Swashbuckle is installed. This means you can
  complement your API with a slick discovery UI to assist consumers with their
  integration efforts. Best of all, it requires minimal coding and maintenance,
  allowing you to focus on building an awesome API!


  And that's not all ...


  Once you have a Web API that can describe itself in Swagger, you've opened the
  treasure chest of Swagger-based tools including a client generator that can be
  targeted to a wide range of popular platforms. See
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more
  details.


  **Swashbuckle Core Features:**


  * Auto-generated [Swagger
  2.0](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)

  * Seamless integration of swagger-ui

  * Reflection-based Schema generation for describing API types

  * Extensibility hooks for customizing the generated Swagger doc

  * Extensibility hooks for customizing the swagger-ui

  * Out-of-the-box support for leveraging Xml comments

  * Support for describing ApiKey, Basic Auth and OAuth2 schemes ... including
  UI support for the Implicit OAuth2 flow


  **Swashbuckle 5.0**


  Swashbuckle 5.0 makes the transition to Swagger 2.0. The 2.0 schema is
  significantly different to its predecessor (1.2) and, as a result, the
  Swashbuckle config interface has undergone yet another overhaul. Checkout the
  [transition guide](#transitioning-to-swashbuckle-50) if you're upgrading from
  a prior version.


  ## Getting Started ##


  There are currently two Nuget packages - the Core library (Swashbuckle.Core)
  and a convenience package (Swashbuckle)  - that provides automatic
  bootstrapping. The latter is only applicable to regular IIS hosted Web APIs.
  For all other hosting environments, you should only install the Core library
  and then follow the instructions below to manually enable the Swagger routes.


  Once installed and enabled, you should be able to browse the following Swagger
  docs and UI endpoints respectively:


  ***\<your-root-url\>/swagger/docs/v1***


  ***\<your-root-url\>/swagger***


  ### IIS Hosted ###


  If your service is hosted in IIS, you can start exposing Swagger docs and a
  corresponding swagger-ui by simply installing the following Nuget package:

      Install-Package Swashbuckle

  This will add a reference to Swashbuckle.Core and also install a bootstrapper
  (App_Start/SwaggerConfig.cs) that enables the Swagger routes on app start-up
  using [WebActivatorEx](https://github.com/davidebbo/WebActivator).


  ### Self-hosted ###


  If your service is self-hosted, just install the Core library:

      Install-Package Swashbuckle.Core

  Then manually enable the Swagger docs and, optionally, the swagger-ui by
  invoking the following extension methods (in namespace
  Swashbuckle.Application) on an instance of HttpConfiguration (e.g. in
  Program.cs)


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
       .EnableSwaggerUi();
  ```


  ### OWIN  ###


  If your service is hosted using OWIN middleware, just install the Core
  library:

      Install-Package Swashbuckle.Core

  Then manually enable the Swagger docs and swagger-ui by invoking the extension
  methods (in namespace Swashbuckle.Application) on an instance of
  HttpConfiguration (e.g. in Startup.cs)


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi();    
  ```


  ## Troubleshooting ##


  Troubleshooting??? I thought this was all supposed to be "seamless"? OK you've
  called me out! Things shouldn't go wrong, but if they do, take a look at the
  [FAQs](#troubleshooting-and-faqs) for inspiration.


  ## Customizing the Generated Swagger Docs ##


  The following snippet demonstrates the minimum configuration required to get
  the Swagger docs and swagger-ui up and running:

  ```csharp

  httpConfiguration
        .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
        .EnableSwaggerUi();
  ```


  These methods expose a range of configuration and extensibility options that
  you can pick and choose from, combining the convenience of sensible defaults
  with the flexibility to customize where you see fit. Read on to learn more.


  ### Custom Routes ###


  The default route templates for the Swagger docs and swagger-ui are
  "swagger/docs/{apiVersion}" and "swagger/ui/{\*assetPath}" respectively.
  You're free to change these so long as the provided templates include the
  relevant route parameters - {apiVersion} and {\*assetPath}.


  ```csharp

  httpConfiguration
      .EnableSwagger("docs/{apiVersion}/swagger", c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi("sandbox/{*assetPath}");
  ```


  In this case the URL to swagger-ui will be `sandbox/index`.


  ### Pretty Print ###


  If you want the output Swagger docs to be indented properly, enable the
  __PrettyPrint__ option as following:


  ```cs

  httpConfiguration
      .EnableSwagger(c => c.PrettyPrint())
      .EnableSwaggerUi();
  ```


  ### Additional Service Metadata ###


  In addition to operation descriptions, Swagger 2.0 includes several properties
  to describe the service itself. These can all be provided through the
  configuration API:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.RootUrl(req => GetRootUrlFromAppConfig());

              c.Schemes(new[] { "http", "https" });

              c.SingleApiVersion("v1", "Swashbuckle.Dummy")
                  .Description("A sample API for testing and prototyping Swashbuckle features")
                  .TermsOfService("Some terms")
                  .Contact(cc => cc
                      .Name("Some contact")
                      .Url("http://tempuri.org/contact")
                      .Email("some.contact@tempuri.org"))
                  .License(lc => lc
                      .Name("Some License")
                      .Url("http://tempuri.org/license"));
          });
  ```

  #### RootUrl ####


  By default, the service root url is inferred from the request used to access
  the docs. However, there may be situations (e.g. proxy and load-balanced
  environments) where this does not resolve correctly. You can workaround this
  by providing your own code to determine the root URL.


  #### Schemes ####


  If schemes are not explicitly provided in a Swagger 2.0 document, then the
  scheme used to access the docs is taken as the default. If your API supports
  multiple schemes and you want to be explicit about them, you can use the
  __Schemes__ option.


  #### SingleApiVersion ####


  Use this to describe a single version API. Swagger 2.0 includes an "Info"
  object to hold additional metadata for an API. Version and title are required
  but you may also provide additional fields as shown above.


  __NOTE__: If your Web API is hosted in IIS, you should avoid using full-stops
  in the version name (e.g. "1.0"). The full-stop at the tail of the URL will
  cause IIS to treat it as a static file (i.e. with an extension) and bypass the
  URL Routing Module and therefore, Web API. 


  ### Describing Multiple API Versions ###


  If your API has multiple versions, use __MultipleApiVersions__ instead of
  __SingleApiVersion__. In this case, you provide a lambda that tells
  Swashbuckle which actions should be included in the docs for a given API
  version. Like __SingleApiVersion__, __Version__ also returns an "Info" builder
  so you can provide additional metadata per API version.


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.MultipleApiVersions(
                  (apiDesc, targetApiVersion) => ResolveVersionSupportByRouteConstraint(apiDesc, targetApiVersion),
                  (vc) =>
                  {
                      vc.Version("v2", "Swashbuckle Dummy API V2");
                      vc.Version("v1", "Swashbuckle Dummy API V1");
                  });
          });
      .EnableSwaggerUi(c =>
          {
              c.EnableDiscoveryUrlSelector();
          });
  ```


  \* You can also enable a select box in the swagger-ui (as shown above) that
  displays a discovery URL for each version. This provides a convenient way for
  users to browse documentation for different API versions.


  ### Describing Security/Authorization Schemes ###


  You can use BasicAuth, __ApiKey__ or __OAuth2__ options to describe security
  schemes for the API. See
  https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md for
  more details.


  ```csharp

  httpConfiguration
       .EnableSwagger(c =>
           {
               //c.BasicAuth("basic")
               //    .Description("Basic HTTP Authentication");

               //c.ApiKey("apiKey")
               //    .Description("API Key Authentication")
               //    .Name("apiKey")
               //    .In("header");

               c.OAuth2("oauth2")
                   .Description("OAuth2 Implicit Grant")
                   .Flow("implicit")
                   .AuthorizationUrl("http://petstore.swagger.wordnik.com/api/oauth/dialog")
                   //.TokenUrl("https://tempuri.org/token")
                   .Scopes(scopes =>
                   {
                       scopes.Add("read", "Read access to protected resources");
                       scopes.Add("write", "Write access to protected resources");
                   });

               c.OperationFilter<AssignOAuth2SecurityRequirements>();
           });
       .EnableSwaggerUi(c =>
           {
               c.EnableOAuth2Support("test-client-id", "test-realm", "Swagger UI");
           });
  ```

  __NOTE:__ These only define the schemes and need to be coupled with a
  corresponding "security" property at the document or operation level to
  indicate which schemes are required for each operation.  To do this, you'll
  need to implement a custom IDocumentFilter and/or IOperationFilter to set
  these properties according to your specific authorization implementation


  \* If your API supports the OAuth2 Implicit flow, and you've described it
  correctly, according to the Swagger 2.0 specification, you can enable UI
  support as shown above.


  ### Customize the Operation Listing ###


  If necessary, you can ignore obsolete actions and provide custom
  grouping/sorting strategies for the list of Operations in a Swagger document:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.IgnoreObsoleteActions();

              c.GroupActionsBy(apiDesc => apiDesc.HttpMethod.ToString());

              c.OrderActionGroupsBy(new DescendingAlphabeticComparer());
          });
  ```

  #### IgnoreObsoleteActions ####


  Set this flag to omit operation descriptions for any actions decorated with
  the Obsolete attribute


  __NOTE__: If you want to omit specific operations but without using the
  Obsolete attribute, you can create an IDocumentFilter or make use of the built
  in ApiExplorerSettingsAttribute


  #### GroupActionsBy ####


  Each operation can be assigned one or more tags which are then used by
  consumers for various reasons. For example, the swagger-ui groups operations
  according to the first tag of each operation. By default, this will be the
  controller name but you can use this method to override with any value.


  #### OrderActionGroupsBy ####


  You can also specify a custom sort order for groups (as defined by
  __GroupActionsBy__) to dictate the order in which operations are listed. For
  example, if the default grouping is in place (controller name) and you specify
  a descending alphabetic sort order, then actions from a ProductsController
  will be listed before those from a CustomersController. This is typically used
  to customize the order of groupings in the swagger-ui.


  ### Modifying Generated Schemas ###


  Swashbuckle makes a best attempt at generating Swagger compliant JSON schemas
  for the various types exposed in your API. However, there may be occasions
  when more control of the output is needed.  This is supported through the
  following options:


  ```csharp

  httpConfiguration
        .EnableSwagger(c =>
            {
                c.MapType<ProductType>(() => new Schema { type = "integer", format = "int32" });

                c.SchemaFilter<ApplySchemaVendorExtensions>();

                //c.UseFullTypeNameInSchemaIds();

                c.SchemaId(t => t.FullName.Contains('`') ? t.FullName.Substring(0, t.FullName.IndexOf('`')) : t.FullName);
                
                c.IgnoreObsoleteProperties();

                c.DescribeAllEnumsAsStrings();
            });
  ```


  #### MapType ####


  Use this option to override the Schema generation for a specific type.


  It should be noted that the resulting Schema will be placed "inline" for any
  applicable Operations. While Swagger 2.0 supports inline definitions for "all"
  Schema types, the swagger-ui tool does not. It expects "complex" Schemas to be
  defined separately and referenced. For this reason, you should only use the
  __MapType__ option when the resulting Schema is a primitive or array type.


  If you need to alter a complex Schema, use a Schema filter.


  #### SchemaFilter ####


  If you want to post-modify "complex" Schemas once they've been generated,
  across the board or for a specific type, you can wire up one or more Schema
  filters.


  ISchemaFilter has the following interface:


  ```csharp

  void Apply(Schema schema, SchemaRegistry schemaRegistry, Type type);

  ```


  A typical implementation will inspect the system Type and modify the Schema
  accordingly. If necessary, the schemaRegistry can be used to obtain or
  register Schemas for other Types


  #### UseFullTypeNamesInSchemaIds ####


  In a Swagger 2.0 document, complex types are typically declared globally and
  referenced by unique Schema Id. By default, Swashbuckle does NOT use the full
  type name in Schema Ids. In most cases, this works well because it prevents
  the "implementation detail" of type namespaces from leaking into your Swagger
  docs and UI. However, if you have multiple types in your API with the same
  class name, you'll need to opt out of this behavior to avoid Schema Id
  conflicts.  


  #### SchemaId ####


  Use this option to provide your own custom strategy for inferring SchemaId's
  for describing "complex" types in your API.


  #### IgnoreObsoleteProperties ####


  Set this flag to omit schema property descriptions for any type properties
  decorated with the Obsolete attribute 


  #### DescribeAllEnumsAsStrings ####


  In accordance with the built in JsonSerializer, Swashbuckle will, by default,
  describe enums as integers. You can change the serializer behavior by
  configuring the StringEnumConverter globally or for a given enum type.
  Swashbuckle will honor this change out-of-the-box. However, if you use a
  different approach to serialize enums as strings, you can also force
  Swashbuckle to describe them as strings.


  ### Modifying Generated Operations ###


  Similar to Schema filters, Swashbuckle also supports Operation and Document
  filters:


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
           {
               c.OperationFilter<AddDefaultResponse>();

               c.DocumentFilter<ApplyDocumentVendorExtensions>();
           });
  ```

  #### OperationFilter ####


  Post-modify Operation descriptions once they've been generated by wiring up
  one or more Operation filters.


  IOperationFilter has the following interface:


  ```csharp

  void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription
  apiDescription);

  ```


  A typical implementation will inspect the ApiDescription and modify the
  Operation accordingly. If necessary, the schemaRegistry can be used to obtain
  or register Schemas for Types that are used in the Operation.


  #### DocumentFilter ####


  Post-modify the entire Swagger document by wiring up one or more Document
  filters.


  IDocumentFilter has the following interface:


  ```csharp

  void Apply(SwaggerDocument swaggerDoc, SchemaRegistry schemaRegistry,
  IApiExplorer apiExplorer);

  ```


  This gives full control to modify the final SwaggerDocument. You can gain
  additional context from the provided SwaggerDocument (e.g. version) and
  IApiExplorer. You should have a good understanding of the [Swagger 2.0
  spec.](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)
  before using this option.


  ### Wrapping the SwaggerGenerator with Additional Behavior ###


  The default implementation of ISwaggerProvider, the interface used to obtain
  Swagger metadata for a given API, is the SwaggerGenerator. If neccessary, you
  can inject your own implementation or wrap the existing one with additional
  behavior. For example, you could use this option to inject a "Caching Proxy"
  that attempts to retrieve the SwaggerDocument from a cache before delegating
  to the built-in generator:


  ```csharp

  httpConfiguration
        .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
            {
          c.CustomProvider((defaultProvider) => new CachingSwaggerProvider(defaultProvider));
            });
  ```


  ### Including XML Comments ###


  If you annotate Controllers and API Types with [Xml
  Comments](http://msdn.microsoft.com/en-us/library/b2s063f7(v=vs.110).aspx),
  you can incorporate those comments into the generated docs and UI. The Xml
  tags are mapped to Swagger properties as follows:


  * **Action summary** -> Operation.summary

  * **Action remarks** -> Operation.description

  * **Parameter summary** -> Parameter.description

  * **Type summary** -> Schema.descripton

  * **Property summary** -> Schema.description (i.e. on a property Schema)


  You can enable this by providing the path to one or more XML comments files:

  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.SingleApiVersion("v1", "A title for your API");
              c.IncludeXmlComments(GetXmlCommentsPathForControllers());
              c.IncludeXmlComments(GetXmlCommentsPathForModels());
          });
  ```


  NOTE: You will need to enable output of the XML documentation file. This is
  enabled by going to project properties -> Build -> Output. The "XML
  documentation file" needs to be checked and a path assigned, such as
  "bin\Debug\MyProj.XML". You will also want to verify this across each build
  configuration. Here's an example of reading the file, but it may need to be
  modified according to your specific project settings:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              var baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
              var commentsFileName = Assembly.GetExecutingAssembly().GetName().Name + ".XML";
              var commentsFile = Path.Combine(baseDirectory, commentsFileName);

              c.SingleApiVersion("v1", "A title for your API");
              c.IncludeXmlComments(commentsFile);
              c.IncludeXmlComments(GetXmlCommentsPathForModels());
          });
  ```

  #### Response Codes ####


  Swashbuckle will automatically create a "success" response for each operation
  based on the action's return type. If it's a void, the status code will be 204
  (No content), otherwise 200 (Ok). This mirrors WebApi's default behavior. If
  you need to change this and/or list additional response codes, you can use the
  non-standard "response" tag:


  ```csharp

  /// <response code="201">Account created</response>

  /// <response code="400">Username already in use</response>

  public int Create(Account account)

  ```

  ### Working Around Swagger 2.0 Constraints ###


  In contrast to Web API, Swagger 2.0 does not include the query string
  component when mapping a URL to an action. As a result, Swashbuckle will raise
  an exception if it encounters multiple actions with the same path (sans query
  string) and HTTP method. You can workaround this by providing a custom
  strategy to pick a winner or merge the descriptions for the purposes of the
  Swagger docs 


  ```csharp

  httpConfiguration
      .EnableSwagger((c) =>
          {
              c.SingleApiVersion("v1", "A title for your API"));
              c.ResolveConflictingActions(apiDescriptions => apiDescriptions.First());
          });
  ```

  See the following discussion for more details:


  <https://github.com/domaindrivendev/Swashbuckle/issues/142>


  ## Customizing the swagger-ui ##


  The swagger-ui is a JavaScript application hosted in a single HTML page
  (index.html), and it exposes several customization settings. Swashbuckle ships
  with an embedded version and includes corresponding configuration methods for
  each of the UI settings. If you require further customization, you can also
  inject your own version of "index.html". Read on to learn more.


  ### Customizations via the configuration API ###


  If you're happy with the basic look and feel but want to make some minor
  tweaks, the following options may be sufficient:


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi(c =>
          {
              c.InjectStylesheet(containingAssembly, "Swashbuckle.Dummy.SwaggerExtensions.testStyles1.css");
              c.InjectJavaScript(containingAssembly, "Swashbuckle.Dummy.SwaggerExtensions.testScript1.js");
              c.SetValidatorUrl("http://localhost/validator");
              c.DisableValidator();
              c.DocExpansion(DocExpansion.List);
              c.SupportedSubmitMethods("GET", "HEAD")
          });
  ```


  #### InjectStylesheet ####


  Use this to enrich the UI with one or more additional CSS stylesheets. The
  file(s) must be included in your project as an "Embedded Resource", and then
  the resource's "Logical Name" is passed to the method as shown above. See
  [Injecting Custom Content](#injecting-custom-content) for step by step
  instructions.


  #### InjectJavaScript ####


  Use this to invoke one or more custom JavaScripts after the swagger-ui has
  loaded. The file(s) must be included in your project as an "Embedded
  Resource", and then the resource's "Logical Name" is passed to the method as
  shown above. See [Injecting Custom Content](#injecting-custom-content) for
  step by step instructions.


  #### SetValidatorUrl/DisableValidator ####


  By default, swagger-ui will validate specs against swagger.io's online
  validator and display the result in a badge at the bottom of the page. Use
  these options to set a different validator URL or to disable the feature
  entirely.


  #### DocExpansion ####


  Use this option to control how the Operation listing is displayed. It can be
  set to "None" (default), "List" (shows operations for each resource), or
  "Full" (fully expanded: shows operations and their details).


  #### SupportedSubmitMethods ####


  Specify which HTTP operations will have the 'Try it out!' option. An empty
  parameter list disables it for all operations.


  ### Provide your own "index" file ###


  As an alternative, you can inject your own version of "index.html" and
  customize the markup and swagger-ui directly. Use the __CustomAsset__ option
  to instruct Swashbuckle to return your version instead of the default when a
  request is made for "index". As with all custom content, the file must be
  included in your project as an "Embedded Resource", and then the resource's
  "Logical Name" is passed to the method as shown below. See [Injecting Custom
  Content](#injecting-custom-content) for step by step instructions.


  For compatibility, you should base your custom "index.html" off [this
  version](https://github.com/domaindrivendev/Swashbuckle/blob/v5.5.3/Swashbuckle.Core/SwaggerUi/CustomAssets/index.html)


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
       .EnableSwaggerUi(c =>
           {
               c.CustomAsset("index", yourAssembly, "YourWebApiProject.SwaggerExtensions.index.html");
           });
  ```


  ### Injecting Custom Content ###


  The __InjectStylesheet__, __InjectJavaScript__ and __CustomAsset__ options all
  share the same mechanism for providing custom content. In each case, the file
  must be included in your project as an "Embedded Resource". The steps to do
  this are described below:


  1. Add a new file to your Web API project.

  2. In Solution Explorer, right click the file and open its properties window.
  Change the "Build Action" to "Embedded Resource".


  This will embed the file in your assembly and register it with a "Logical
  Name". This can then be passed to the relevant configuration method. It's
  based on the Project's default namespace, file location and file extension.
  For example, given a default namespace of "YourWebApiProject" and a file
  located at "/SwaggerExtensions/index.html", then the resource will be assigned
  the name - "YourWebApiProject.SwaggerExtensions.index.html". If you use
  "Swagger" as the root folder name for your custom assets, this will collide
  with the default route templates and the page will not be loaded correctly.


  ## Transitioning to Swashbuckle 5.0 ##


  This version of Swashbuckle makes the transition to Swagger 2.0. The 2.0
  specification is significantly different to its predecessor (1.2) and forces
  several breaking changes to Swashbuckle's configuration API. If you're using
  Swashbuckle without any customizations, i.e. App_Start/SwaggerConfig.cs has
  never been modified, then you can overwrite it with the new version. The
  defaults are the same and so the swagger-ui should behave as before.


  \* If you have consumers of the raw Swagger document, you should ensure they
  can accept Swagger 2.0 before making the upgrade.


  If you're using the existing configuration API to customize the final Swagger
  document and/or swagger-ui, you will need to port the code manually. The
  static __Customize__ methods on SwaggerSpecConfig and SwaggerUiConfig have
  been replaced with extension methods on HttpConfiguration - __EnableSwagger__
  and __EnableSwaggerUi__. All options from version 4.0 are made available
  through these methods, albeit with slightly different naming and syntax. Refer
  to the tables below for a summary of changes:



  | 4.0 | 5.0 Equivalent | Additional Notes |

  | --------------- | --------------- | ---------------- |

  | ResolveBasePathUsing | RootUrl | |

  | ResolveTargetVersionUsing | N/A | version is now implicit in the docs URL
  e.g. "swagger/docs/{apiVersion}" |

  | ApiVersion | SingleApiVersion| now supports additional metadata for the
  version | 

  | SupportMultipleApiVersions | MultipleApiVersions | now supports additional
  metadata for each version |

  | Authorization | BasicAuth/ApiKey/OAuth2 | | 

  | GroupDeclarationsBy | GroupActionsBy | |

  | SortDeclarationsBy | OrderActionGroupsBy | |

  | MapType | MapType | now accepts Func&lt;Schema&gt; instead of
  Func&lt;DataType&gt; |

  | ModelFilter | SchemaFilter | IModelFilter is now ISchemaFilter,
  DataTypeRegistry is now SchemaRegistry |

  | OperationFilter | OperationFilter | DataTypeRegistry is now SchemaRegistry |

  | PolymorphicType | N/A | not currently supported |

  | SupportHeaderParams | N/A | header params are implicitly supported |

  | SupportedSubmitMethods | N/A | all HTTP verbs are implicitly supported |

  | CustomRoute | CustomAsset | &nbsp; |


  ## Troubleshooting and FAQ's ##


  1. [Swagger-ui showing "Can't read swagger JSON from
  ..."](#swagger-ui-showing-cant-read-swagger-json-from)

  2. [Page not found when accessing the
  UI](#page-not-found-when-accessing-the-ui)

  3. [Swagger-ui broken by Visual Studio
  2013](#swagger-ui-broken-by-visual-studio-2013)

  4. [OWIN Hosted in IIS - Incorrect VirtualPathRoot
  Handling](#owin-hosted-in-iis---incorrect-virtualpathroot-handling)

  5. [How to add vendor extensions](#how-to-add-vendor-extensions)

  6. [FromUri Query string DataMember names are
  incorrect](#fromuri-query-string-datamember-names-are-incorrect)

  7. [Remove Duplicate Path Parameters](#remove-duplicate-path-parameters)

  8. [Deploying behind Load Balancer / Reverse
  Proxies](#deploying-behind-load-balancer--reverse-proxies)

  9. [500 : {"Message":"An error has
  occurred."}](#500--messagean-error-has-occurred)


  ### Swagger-ui showing "Can't read swagger JSON from ..."


  If you see this message, it means the swagger-ui received an unexpected
  response when requesting the Swagger document. You can troubleshoot further by
  navigating directly to the discovery URL included in the error message. This
  should provide more details.


  If the discovery URL returns a 404 Not Found response, it may be due to a
  full-stop in the version name (e.g. "1.0"). This will cause IIS to treat it as
  a static file (i.e. with an extension) and bypass the URL Routing Module and
  therefore, Web API. 


  To workaround, you can update the version name specified in SwaggerConfig.cs.
  For example, to "v1", "1-0" etc. Alternatively, you can change the route
  template being used for the swagger docs (as shown [here](#custom-routes)) so
  that the version parameter is not at the end of the route.


  ### Page not found when accessing the UI ###


  Swashbuckle serves an embedded version of the swagger-ui through the Web API
  pipeline. But, most of the URLs contain extensions (.html, .js, .css) and many
  IIS environments are configured to bypass the managed pipeline for paths
  containing extensions.


  In previous versions of Swashbuckle, this was resolved by adding the following
  setting to your Web.config:


  ```xml

  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true" />
  </system.webServer>

  ```


  This is no longer neccessary in Swashbuckle 5.0 because it serves the
  swagger-ui through extensionless URL's.


  However, if you're using the SingleApiVersion, MultipleApiVersions or
  CustomAsset configuration settings you could still get this error. Check to
  ensure you're not specifying a value that causes a URL with an extension to be
  referenced in the UI. For example a full-stop in a version number ...


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("1.0", "A title for your API"))
      .EnableSwaggerUi();
  ```

  will result in a discovery URL like this "/swagger/docs/1.0" where the
  full-stop is treated as a file extension.


  ### Swagger-ui broken by Visual Studio 2013 ###


  VS 2013 ships with a new feature - Browser Link - that improves the web
  development workflow by setting up a channel between the IDE and pages being
  previewed in a local browser. It does this by dynamically injecting JavaScript
  into your files.


  Although this JavaScript SHOULD have no affect on your production code, it
  appears to be breaking the swagger-ui.


  I hope to find a permanent fix, but in the meantime, you'll need to workaround
  this issue by disabling the feature in your web.config:


  ```xml

  <appSettings>
      <add key="vs:EnableBrowserLink" value="false"/>
  </appSettings>

  ```

  ### OWIN Hosted in IIS - Incorrect VirtualPathRoot Handling


  When you host Web API 2 on top of OWIN/SystemWeb, Swashbuckle cannot correctly
  resolve VirtualPathRoot by default.


  You must either explicitly set VirtualPathRoot in your HttpConfiguration at
  startup, or perform customization like this to fix automatic discovery:


  ```csharp

  httpConfiguration.EnableSwagger(c => 

  {
      c.RootUrl(req =>
          req.RequestUri.GetLeftPart(UriPartial.Authority) +
          req.GetRequestContext().VirtualPathRoot.TrimEnd('/'));
  }

  ```


  ### How to add vendor extensions


  Swagger 2.0 allows additional meta-data (aka vendor extensions) to be added at
  various points in the Swagger document. Swashbuckle supports this by including
  a "vendorExtensions" dictionary with each of the extensible Swagger types.
  Meta-data can be added to these dictionaries from custom Schema, Operation or
  Document filters. For example:


  ```csharp

  public class ApplySchemaVendorExtensions : ISchemaFilter

  {
      public void Apply(Schema schema, SchemaRegistry schemaRegistry, Type type)
      {
          schema.vendorExtensions.Add("x-foo", "bar");
      }
  }

  ```


  As per the specification, all extension properties should be prefixed by "x-"


  ### FromUri Query string DataMember names are incorrect


  When using `FromUri` Model Binding, it is possible to override the querystring
  parameter name's using `DataMember`s. In this case you can add a custom
  operation filter to override the name. For example:


  ```csharp

  public class ComplexTypeOperationFilter : IOperationFilter

  {
      public void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription)
      {
          if (operation.parameters == null)
              return;

          var parameters = apiDescription.ActionDescriptor.GetParameters();
          foreach (var parameter in parameters)
          {
              foreach (var property in parameter.ParameterType.GetProperties())
              {
                  var param = operation.parameters.FirstOrDefault(o => o.name.ToLowerInvariant().Contains(property.Name.ToLowerInvariant()));

                  if (param == null) continue;

                  var name = GetNameFromAttribute(property);

                  if (string.IsNullOrEmpty(name))
                  {
                      operation.parameters.Remove(param);
                  }
                  param.name = GetNameFromAttribute(property);
              }
          }
      }
      
      private static string GetNameFromAttribute(PropertyInfo property)
      {
          var customAttributes = property.GetCustomAttributes(typeof(DataMemberAttribute), true);
          if (customAttributes.Length > 0)
          {
              var attribute = customAttributes[0] as DataMemberAttribute;
              if (attribute != null) return attribute.Name;
          }
          return string.Empty;
      }
  }

  ```


  ### Remove Duplicate Path Parameters


  When using `FromUri` Model Binding, duplicate items can appear as items can be
  passed as URI parameters, or querystrings. In this case you can add a custom
  operation filter to remove the duplicates. For example:


  ```csharp

  public class ComplexTypeOperationFilter : IOperationFilter

  {
      public void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription)
      {
         if (operation.parameters == null)
             return;
         var complexParameters = operation.parameters.Where(x => x.@in == "query" && !string.IsNullOrWhiteSpace(x.name)).ToArray();

         foreach (var parameter in complexParameters)
         {
             if (!parameter.name.Contains('.')) continue;
             var name = parameter.name.Split('.')[1];

             var opParams = operation.parameters.Where(x => x.name == name);
             var parameters = opParams as Parameter[] ?? opParams.ToArray();

             if (parameters.Length > 0)
             {
                 operation.parameters.Remove(parameter);
             }
         }
      }
  }

  ```


  ### Deploying behind Load Balancer / Reverse Proxies


  Swashbuckle attempts to populate the [Swagger
  "host"](http://swagger.io/specification/#swaggerObject) property from HTTP
  headers that are sent with the request for Swagger JSON. This may cause issues
  in load balancer / reverse proxy environments, particularly if non-standard
  headers are used to pass on the outer most host name. You can workaround this
  by providing your own function for determining your API's root URL based on
  vendor-specific headers. Checkout [issue
  705](https://github.com/domaindrivendev/Swashbuckle/issues/705) for some
  potential implementations.


  ### 500 : {"Message":"An error has occurred."}


  If, on loading the Swagger UI page, you get an error: `500 : {"Message":"An
  error has occurred."} http://<url>/swagger/docs/v1` ensure that the XML
  documentation output settings have been set in the project file in the
  solution, for both Debug and Release configurations.
gossi/swagger: "# swagger\n\n[![License](https://poser.pugx.org/gossi/swagger/license)](https://packagist.org/packages/gossi/swagger)\n[![Latest Stable Version](https://poser.pugx.org/gossi/swagger/v/stable)](https://packagist.org/packages/gossi/swagger)\n[![Total Downloads](https://poser.pugx.org/gossi/swagger/downloads)](https://packagist.org/packages/gossi/swagger)<br>\n[![HHVM Status](http://hhvm.h4cc.de/badge/gossi/swagger.svg?style=flat)](http://hhvm.h4cc.de/package/gossi/swagger)\n[![Build Status](https://travis-ci.org/gossi/swagger.svg?branch=master)](https://travis-ci.org/gossi/swagger)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/gossi/swagger/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/gossi/swagger/?branch=master)\n[![Code Coverage](https://scrutinizer-ci.com/g/gossi/swagger/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/gossi/swagger/?branch=master)\n\n\nA php library to manipulate [swagger](http://swagger.io)/[Open API](https://openapis.org) specifications.\n\n## Installation\n\n```\ncomposer require gossi/swagger\n```\n\n## Usage\n\nRead an `api.json` file:\n\n```php\n$swagger = Swagger::fromFile('api.json');\n\n// or\n\n$swagger = new Swagger($array);\n```\n\n### Collections\n\nThere are two major collections: `Paths` and `Definitions`. The API is similar for both:\n\n```php\n$paths = $swagger->getPaths();\n$p = new Path('/user');\n\n// adding\n$paths->add($p);\n\n// retrieving\nif ($paths->has('/user') ||\_$paths->contains($p)) {\n\t$path = $paths->get('/user');\n}\n\n// removing\n$paths->remove('/user');\n\n// iterating\nforeach ($paths as $path) {\n\t// do sth with $path\n}\n```\n\nOther collections are: `Headers`, `Parameters`, `Responses` and `SecurityDefinitions`.\n\n### Models\n\nThere are a lot of models, e.g. the mentioned `Path` above. The API is well written, so it works with the auto-completion of your IDE. It is straight forward and uses the same naming scheme as the OpenAPI specification.\n\n\n## Contributing\n\nFeel free to fork and submit a pull request (don't forget the tests) and I am happy to merge.\n\n\n"
Maks3w/SwaggerAssertions: >
  # Swagger Assertions


  Test any API requests and responses match with the models described in the
  documentation.


  This project is compatible with [Swagger 2](http://swagger.io/) spec
  definitions.


  ## Installing via Composer


  You can use [Composer](https://getcomposer.org) .


  ```bash

  composer require fr3d/swagger-assertions

  ```


  ## Usage in PHPUnit


  There are two traits for provide predefined helper functions for different
  assertions.


  - [AssertsTrait](src/PhpUnit/AssertsTrait.php) For assert different parts of
  the response

  - [Psr7AssertsTrait](src/PhpUnit/Psr7AssertsTrait.php) For assert [PSR-7
  compatible](http://www.php-fig.org/psr/psr-7/) responses.

  - [SymfonyAssertsTrait](src/PhpUnit/SymfonyAssertsTrait.php) For assert
  [Symfony HTTP
  Foundation](http://symfony.com/doc/current/components/http_foundation/index.html)
  responses.


  See examples at [examples/PhpUnit](examples/PhpUnit)


  ## FAQ


  <dl>
    <dt>Q: Can this library validate my Swagger definition?</dt>
    <dd>A: No. This library validate your API requests and responses match your Swagger definition.</dd>
  </dl>


  ## License

    Code licensed under BSD 2 clauses terms & conditions.

    See [LICENSE.txt](LICENSE.txt) for more information.
metosin/compojure-api: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:397586F:589E66B:66148E62.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Azure/AutoRest: >+
  # <img align="center" src="./docs/images/logo.png">  AutoRest



  The **AutoRest** tool generates client libraries for accessing RESTful web
  services. Input to *AutoRest* is a spec that describes the REST API using the
  [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) format.


  <!-- 1) returns SVGs now which aren't rendered by GitHub 2) seems to be
  awfully unresponsive and unreliable lately

  [![PR
  Stats](http://issuestats.com/github/Azure/autorest/badge/pr?style=flat-square)](http://issuestats.com/github/Azure/autorest)

  [![Issue
  Stats](http://issuestats.com/github/Azure/autorest/badge/issue?style=flat-square)](http://issuestats.com/github/Azure/autorest)

  -->


  ## Support Policy

  AutoRest is an open source tool -- if you need assistance, first check the
  documentation. If you find a bug or need some help, feel free to submit an
  [issue](https://github.com/Azure/autorest/issues)


  # Getting Started using AutoRest ![image](./docs/images/normal.png)


  Start by reading the documentation for using AutoRest:

  - [Installing AutoRest](./docs/installing-autorest.md) - Shows how to install
  AutoRest.

  - [Understanding AutoRest Versions and
  Extensions](./docs/autorest-versioning.md) - AutoRest core and extension
  versioning

  - [Managing AutoRest](./docs/managing-autorest.md) - shows how to get new
  updates to AutoRest and choose which version to use for code generation.

  - [Generating a Client using AutoRest](./docs/examples/generating-a-client.md)
  - shows simple command line usage for generating a client library.

  - [Command Line Interface
  Documentation](./docs/user/command-line-interface.md) - explains common
  command line arguments.

  - [Examples](./Samples) - full, walkthrough-style scenarios for using
  AutoRest.

  - [Recent Updates](./changelog.md) - notes on recent updates .


  # New! AutoRest Version 3.0 

  AutoRest 3.0 introduces a large number of internal changes to support new
  scenarios. 


  ## Features


  ### OpenAPI3 support! 

  AutoRest 3.0 finally supports OpenAPI3 files as an input format, with the
  following caveats:

  - existing AutoRest v2 generators may not support all features from OpenAPI3.
  (see next section)

  - `anyOf`, `oneOf` are not currently supported 

  - other OpenAPI3 specific features may not be entirely supported.


  ### Generators


  A new set of language generator plugins are being written that adopt the
  lighter-weight patterns for Azure Core libraries.<br>

  Existing V2 generators will default to processing with the AutoRest 2
  pipeline. <br>

  If you want to force it to use the v3 (to get support for OpenAPI3 ) add
  `--v3` to the command line:

  > `autorest --v3 --csharp ...`


  | Generator | Command | Notes |

  |----|---|---|

  |PowerShell| `autorest --powershell ...` |Fully V3 Supported - use to generate
  powershell modules |   

  |CSharp|`autorest --csharp ...` |v2 generator, may use OpenAPI3 with `--v3`
  switch (may be some differences) - v3 generator in progress | 

  |Python|`autorest --python ...` |v2 generator, may use OpenAPI3 with `--v3`
  switch (may be some differences) - v3 generator in progress| 

  |Java|`autorest --java ...` |v2 generator, may use OpenAPI3 with `--v3` switch
  (may be some differences) - v3 generator in progress | 

  |TypeScript|`autorest --typescript ...` |v2 generator, may use OpenAPI3 with
  `--v3` switch (may be some differences) - v3 generator in progress | 

  |Go|`autorest --go ...` |v2 generator, may use OpenAPI3 with `--v3` switch
  (may be some differences) - v3 generator in progress | 

  |Ruby|`autorest --ruby ...` |v2 generator - does not support v3 feature, no
  OpenAPI3 support | 


  #### New V3 Pipeline


  In AutoRest v3, the pipeline has been drastically rebuilt, which allows
  support for:

  - OpenAPI3 inputs

  - Supporting merging multiple API versions 

  - Model Deduplication and Subset reduction across multiple API versions

  - Azure Profile support (v3 generator required)


  Some related information:

  - [Validation Rules &
  Linting](https://github.com/Azure/azure-openapi-validator/blob/master/docs/readme.md)
  - about the validation rules in AutoRest

  - [Client
  Runtimes](./docs/developer/architecture/Autorest-and-Clientruntimes.md) -
  information about the client runtimes required for using code generated by
  AutoRest

  <!-- - [Developer Guide](./docs/developer/guide/) - Notes on developing with
  AutoRest -->


  ### Supported Platforms


  While AutoRest itself runs on NodeJS, some generators use the .NET Core 2.0
  runtime, which is the most limiting factor.

  See
  [dotnet/core/release-notes/2.0/2.0-supported-os.md](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0-supported-os.md)
  for a list of supported platforms.


  ---


  ### Code of Conduct 

  This project has adopted the [Microsoft Open Source Code of
  Conduct](https://opensource.microsoft.com/codeofconduct/). For more
  information see the [Code of Conduct
  FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact
  [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional
  questions or comments.

subeeshcbabu/swagmock: >
  # swagmock

  Mock data generator for swagger api


  *Note: Swagmock version `1.0.0` onwards requires `Node.js v6+` (`"engines":
  {"node": ">=6.x"}`). Please use `v0.0.x` (say `0.0.5`), if you want to run
  this module on any previous node.js versions.*


  ## Install


  ```

  npm install swagmock

  ```


  ## Usage


  ```javascript
      let Swagmock = require('swagmock');
      let Mockgen = Swagmock(api, options);
      // api Can be one of the following.
      // 1) A relative or absolute path to the Swagger api document.
      // 2) A swagger api Object.
      // 3) A promise (or a `thenable`) that resolves to the swagger api Object.
      // Set the `validated` : `true`  in `options`, if the api Object is already validated
      // and dereferenced ($ref are resolved ).
  ```


  Promise response:


  ```javascript
      let responseMock = Mockgen.responses({}); //returns a promise that resolves to response mock
      responseMock.then(mock => {
          //Use mock here
      }).catch(error => {
          Assert.ifError(error);
      });
  ```


  Callback style:


  ```javascript

      Mockgen.responses({ path: '/somepath'}, (error, mock) => {
          Assert.ifError(error);
          //Use mock here
      });
  ```


  Check the [API](README.md#api) for more details.


  ## Example


  Initialize the mock generator


  ```javascript
      const apiPath = 'http://petstore.swagger.io/v2/swagger.json';
      let Assert = require('assert');
      let Swagmock = require('swagmock');
      let Mockgen = Swagmock(apiPath);
  ```


  Response mock generation:


  ```javascript
      mockgen.responses({
          path: '/pet/findByStatus',
          operation: 'get',
          response: 200
      }).then(mock => {
          console.log(mock); // This would print:
          // {
          //     "responses": [{
          //         "id": 2530624032210944,
          //         "category": {
          //             "id": 8200505595527168,
          //             "name": "r($vA&"
          //         },
          //         "name": "doggie",
          //         "photoUrls": ["p0x1", "6O)3*kO"],
          //         "tags": [{
          //             "id": 4590764340281344,
          //             "name": "WCTA6f!"
          //         }, {
          //             "id": -4614156653166592,
          //             "name": "e"
          //         }],
          //         "status": "pending"
          //     }]
          // }
      }).catch(error => {
          Assert.ifError(error);
      });
  ```


  Parameters mock generation:


  ```javascript

      mockgen.parameters({
          path: '/pet/findByStatus',
          operation: 'get'
      }).then(mock => {
          console.log(mock);//This would print:
          // {
          //     "parameters": {
          //         "query": [{
          //             "name": "status",
          //             "value": [ 'available', 'pending' ],
          //             "separator": "multi"
          //         }]
          //     }
          // }
      }).catch(error => {
          Assert.ifError(error);
      })

  ```


  Check [Examples](docs/EXAMPLES.md) for more details on mock generators.


  ## API


  `Swagmock(api, [options])`


  * `api` - (*Object*) or (*String*) or (*Promise*) - (required) - api can be
  one of the following.
      - A relative or absolute path to the Swagger api document.
      - A URL of the Swagger api document.
      - The swagger api Object
      - A promise (or a `thenable`) that resolves to the swagger api Object

  * `options` - (*Object*) - (optional) - Additional options to create the mock
  generator.
      - `validated` -  Set this property to `true` if the api is already validated against swagger schema and already dereferenced all the `$ref`. This is really useful to generate mocks for parsed api specs. Default value for this is `false` and the api will be validated using [swagger-parser validate](https://github.com/BigstickCarpet/swagger-parser/blob/master/docs/swagger-parser.md#validateapi-options-callback).

  ## responses


  `mockgen.responses(options, [callback])`


  This generates the mock response objects based on the `options`


  * `options` - (*Object*) - (required) - Options to control the mock
  generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a
  callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the response mock need
  to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path` is
  not specified, mock response will be generated for all the paths defined by
  the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the response
  mock need to be generated. For example `get`, `post` etc. If `operation` is
  not specified, mock response will be generated for all the operations defined
  by the swagger api.


  * `response` - (*String*) - (optional) - The response for which the response
  mock need to be generated. For example `200`, `400`, `default` etc. If
  `response` is not specified, mock response will be generated for all the
  responses defined by the swagger api.


  * `useExamples` - (*Boolean*)- (optional) - Should the generated mock make use
  of example values defined in your swagger.json. Note: invalid example values
  will create invalid mockdata!


  ## parameters


  `mockgen.parameters(options, [callback])`


  This generates the mock parameters objects based on the `options`


  * `options` - (*Object*) - (required) - Options to control the mock
  generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a
  callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the parameters mock
  need to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path`
  is not specified, mock parameters will be generated for all the paths defined
  by the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the
  parameters mock need to be generated. For example `get`, `post` etc. If
  `operation` is not specified, mock parameters will be generated for all the
  operations defined by the swagger api.



  ## requests


  `mockgen.requests(options, [callback])`


  This generates the mock request object based on the `options`. `requests` API
  resolves the `parameters` mock data to generate the `request` mock object
  useful for unit tests.


  * `options` - (*Object*) - (required) - Options to control the mock
  generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a
  callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the parameters mock
  need to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path`
  is not specified, mock parameters will be generated for all the paths defined
  by the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the
  parameters mock need to be generated. For example `get`, `post` etc. If
  `operation` is not specified, mock parameters will be generated for all the
  operations defined by the swagger api.


  ### data


  `request` Object will have following possible properties `query`, `header`,
  `pathname`, `path`, `formData` or `body` based on the `parameters` defined for
  the path and operation.


  Mock request [Path templates](http://swagger.io/specification/#pathTemplating)
  are resolved using path parameters.


  ```javascript
      mockgen.requests({
          path: '/pet/findByStatus',
          operation: 'get'
      }, function (error, mock) {
          assert.ifError(error);

          console.log(mock);
          //This would print:
          // {
          //     "request": {
          //         "query": "status=available&status=pending"
          //     }
          // }
      });
  ```

  ## Examples


  ### API

  [Usage](docs/EXAMPLES.md)


  ### Unit test request mocks


  [github api express
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/express/github-express/tests)


  [slack api hapi
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/hapi/slack/tests)


  ### Mock response data providers


  [spotify api hapi
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/hapi/spotify/data)


  [glugbot api express
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/express/glugbot-express/tests/api)
zalando/friboo: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3C0C56D:5C5EC82:661495D7.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
krakenjs/generator-swaggerize: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B70345B:11C37621:66148D83.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
ninenines/cowboy: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2811:342B:B04860A:111BA977:66148F46.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
BlueOakJS/blueoak-server: >+
  ![BlueOak
  Logo](https://github.com/BlueOakJS/blueoak-server/wiki/images/blueoak.png)

  ======


  BlueOak Server is a NodeJS framework for building RESTful APIs.


  [![Build
  Status](https://travis-ci.org/BlueOakJS/blueoak-server.svg?branch=master)](https://travis-ci.org/BlueOakJS/blueoak-server)

  [![npm
  version](https://img.shields.io/npm/v/blueoak-server.svg)](https://www.npmjs.com/package/blueoak-server)


  BlueOak Server is _swagger-matic_, that is, it maximizes the value of your
  Swagger API (now OpenAPI, but really this supports only V2) by using it to
  drive runtime behavior.  

  BlueOak Server loads your Swagger API, connects the paths it defines to your
  implementation code, exposes that API to the network, and validates that every
  request is well-formed per that API.


  Check out the documentation on our wiki:
  <https://github.com/BlueOakJS/blueoak-server/wiki>


  ### Overview


  BlueOak Server combines some of the best Node libraries into a single tool for
  building RESTful APIs.  It uses Express under the covers, but adds many
  additional features:


  - Swagger integration

  - Easy configuration

  - Clustering

  - Logging

  - Dependency injection


  Projects use the following directory structure.


  ```

  ├── [your_project_name]/

  │   ├── index.js <-- optional Main script

  │   ├── package.json

  |   ├── config/

  |   |     └── default.json

  │   ├── handlers/

  │   ├── services/

  │   ├── middleware/

  │   ├── swagger/

  ```


  #### Handlers

  [Handlers](https://github.com/BlueOakJS/blueoak-server/wiki/Handlers) contain
  Express route-handling functions.  They can either be directly wired to routes
  on the Express _app_, or defined using Swagger.


  To use the _app_ directly, simply create a js file in the handlers directory
  that exports an `init` function.

  The `init` function is called during server startup and injected with the the
  _app_ automatically.


  ```js

  exports.init = function(app) {
    app.get('/', function(req, res) {
      res.json({});
    });
  }


  ```


  #### Services

  [Services](https://github.com/BlueOakJS/blueoak-server/wiki/Services) do most
  of the heavy lifting.  Like handlers, services contain init functions that are
  called during server startup.  However, services can export other functions,
  and those functions can be invoked from handlers.


  Here's an example of a fizzbuzz service (services/fizzbuzz.js).  You'll notice
  it has an init method with two parameters, _logger_ and _callback_.  The
  _logger_ is a [built-in
  service](https://github.com/BlueOakJS/blueoak-server/wiki/Logging-Service) for
  logging.  The _callback_ is an optional parameter used for cases where
  services need to perform asynchronous operations during startup.  The service
  also exports a _getResult_ function.  Any service or handler with a dependency
  on _fizzbuzz_ can invoke `fizzbuzz.getResult`.


  ```js

  exports.init = function(logger, callback) {
    logger.info("Starting FizzBuzz service");
    callback();
  }


  exports.getResult = function(num) {
      if (num % 15 === 0) {
          return "FizzBuzz";
      } else if (num % 3 === 0) {
          return "Fizz";
      } else if (num % 5 === 0) {
          return "Buzz";
      } else {
          return num;
      }
  };
    
  ```


  We want to use that service from our handler, so we include `fizzbuzz` as a
  parameter of the `init` function.

  The server will ensure that the fizzbuzz service is initialized during server
  startup and passed to the handler.


  ```js

  exports.init = function(app, fizzbuzz) {

    app.get('/fizzbuzz/:num', function(req, res) {
      var num = req.params.num;
      res.json({
          result: fizzbuzz.getResult(num)
       });
    });
    
  }

  ```

  #### Third-party Services

  Services can be published as npm modules and pulled into projects through the
  `npm install` command.


  For example, the bos-couchdb service adds the ability to connect to a CouchDB
  database.

  It can be installed to a blueoak-server project using


  ```bash

  $ npm install bos-couchdb --save

  ```


  Once installed, it can be used in any service or handler through the
  dependency-injected `bosCouchdb` parameter.


  ```js

  exports.init = function(config, logger, bosCouchdb) {
    var myDb = bosCouchdb.get('mydb');
  }


  ```


  * [bos-couchdb](https://github.com/BlueOakJS/bos-couchdb) - service for
  connecting to CouchDB databases


  #### Config

  [Configuration](https://github.com/BlueOakJS/blueoak-server/wiki/Services#config)
  is stored in json files in the _config_ directory.  Values can be accessed
  through the `config` service in handers and services.  Configuration also
  supports layering on environment-specific config as well as encrypted values.


  ```js

  exports.init = function(config) {
    var myServiceConfig = config.get('myService');
  }

  ```


  #### Middleware

  [Middleware](https://github.com/BlueOakJS/blueoak-server/wiki/Middleware) are
  similar to services but used to wire up Express middleware.  The _express_
  section of the config determines which middleware is loaded and in which
  order.


  ```json

  {
    "express": {
      "middleware": ["csrf", "cors", "session", "body-parser"]
    }
  }

  ```


  #### Swagger (OpenAPI)


  [Swagger](https://github.com/BlueOakJS/blueoak-server/wiki/Handlers#swagger)
  files in the _swagger_ directory are read during server startup and
  automatically wired up to handlers. Swagger files can be in either json or
  yaml formats.


  We've really focused on making API development with Swagger and BlueOak Server
  to be excellent.


  At a high-level, BlueOak Server's Swagger support provides the following:

  * Automatic app routing from the API method to the function as defined in the
  Swagger

  * Request parameter validation, including the body model, based on your method
  definion

  * Reponse model validation based on your method definitions during development

  * JSON `$ref`s to external Swagger documents on the file system

  * Multiple top-level Swagger API definitions supporting delivery of multiple
  API base paths

  * Publishing of the fully compiled Swagger spec for input to by tools such as
  [`Swagger-UI`](http://swagger.io/swagger-ui/) and
  [`swagger-commander`](https://www.npmjs.com/package/swagger-commander)


  ### Installation


  ```bash

  $ npm install -g blueoak-server

  ```


  -or-


  ```bash

  $ npm install --save blueoak-server

  ```


  ### Usage


  If installed globally, run _blueoak-server_ from within your project's
  directory.

  e.g.:

  ```bash

  $ blueoak-server

  ```


  If installed at a package level, call _blueoak-server_ in the `npm start`
  script.

  e.g.:

  ```json
    "scripts": {
      "start": "blueoak-server"
    }
  ```


  Alternatively, it can be launched programmatically from your own js script.



  ```js

  var server = require('blueoak-server');


  server.init(function(err) {
      if (err) {
          console.warn(err);
      } else {
          console.log('started');
      }
  });

  ```


  The programmatic approach works well during development with tools like
  nodemon,

  which monitor for file changes and automatically restart the server.


  ### Next steps


  Read through the [docs](https://github.com/BlueOakJS/blueoak-server/wiki) and
  look at the our [examples](/examples).


  When you're ready to try it out, start from the
  [template](https://github.com/BlueOakJS/blueoak-server-template).

Trax-air/swagger-aggregator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD62BA4:126CB604:66148918.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Reckon-Limited/serverless_swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:3669E98:54809CD:66148819.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
capitalone/oas-nodegen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2808:0950:AB81957:10AFD060:661489FD.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
calcinai/strut: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2806:79BE:B377158:1151582E:661489FC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
pingf/falsy: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:21CCF36:36088E7:66149086.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
gangverk/flask-swagger: >
  # flask-swagger

  A Swagger 2.0 spec extractor for Flask


  You can now specify base path for yml files:

  ```python

  app = Flask(__name__)


  @app.route("/spec")

  def spec():
      base_path = os.path.join(app.root_path, 'docs')
      return jsonify(swagger(app), from_file_keyword="swagger_from_file", base_path=base_path)
  ```

  and use relative paths:

  ```python

  @app.route('/test', methods=['POST'])

  def login():
      """
      swagger_from_file: test.yml
      """
  ```


  Install:


  ```shell

  pip install flask-swagger

  ```

  Flask-swagger provides a method (swagger) that inspects the Flask app for
  endpoints that contain YAML docstrings with Swagger 2.0
  [Operation](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object)
  objects.


  ```python

  class UserAPI(MethodView):

      def post(self):
          """
          Create a new user
          ---
          tags:
            - users
          definitions:
            - schema:
                id: Group
                properties:
                  name:
                   type: string
                   description: the group's name
          parameters:
            - in: body
              name: body
              schema:
                id: User
                required:
                  - email
                  - name
                properties:
                  email:
                    type: string
                    description: email for user
                  name:
                    type: string
                    description: name for user
                  address:
                    description: address for user
                    schema:
                      id: Address
                      properties:
                        street:
                          type: string
                        state:
                          type: string
                        country:
                          type: string
                        postalcode:
                          type: string
                  groups:
                    type: array
                    description: list of groups
                    items:
                      $ref: "#/definitions/Group"
          responses:
            201:
              description: User created
          """
          return {}
  ```

  Flask-swagger supports docstrings in methods of MethodView classes (à la
  [Flask-RESTful](https://github.com/flask-restful/flask-restful)) and regular
  Flask view functions.


  Following YAML conventions, flask-swagger searches for `---`, everything
  preceding is provided as `summary` (first line) and `description` (following
  lines) for the endpoint while everything after is parsed as a swagger
  [Operation](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object)
  object.


  In order to support inline definition of [Schema
  ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  objects in
  [Parameter](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameterObject) 
  and
  [Response](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#responsesObject)
  objects, flask-swagger veers a little off from the standard. We require an
  `id` field for the inline Schema which is then used to correctly place the
  [Schema](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  object in the
  [Definitions](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#definitionsObject)
  object.



  [Schema
  ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  objects can be defined in a definitions section within the docstrings (see
  group object above) or within responses or parameters (see user object above).
  We also support schema objects nested within the properties of other [Schema
  ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  objects. An example is shown above with the address property of User.


  If you don't like to put YAML on docstrings you can put the same content in an
  external file.


  #### file.yml

  ```yaml

  Create a new user

  ---

  tags:
    - users
  definitions:
    - schema:
        id: Group
        properties:
          name:
           type: string
           description: the group's name
  parameters:
    - in: body
      name: body
      schema:
        id: User
        required:
          - email
          - name
        properties:
          email:
            type: string
            description: email for user
          name:
            type: string
            description: name for user
          address:
            description: address for user
            schema:
              id: Address
              properties:
                street:
                  type: string
                state:
                  type: string
                country:
                  type: string
                postalcode:
                  type: string
          groups:
            type: array
            description: list of groups
            items:
              $ref: "#/definitions/Group"
  responses:
    201:
      description: User created
  ```


  and point to it in your docstring.


  ```python

  class UserAPI(MethodView):

      def post(self):
          """
          Create a new user

          blah blah

          swagger_from_file: path/to/file.yml

          blah blah
          """
          return {}
  ```


  Note that you can replace `swagger_from_file` by another keyword. Supply your
  chosen keyword as an argument to swagger. 



  To expose your Swagger specification to the world you provide a Flask route
  that does something along these lines


  ```python

  from flask import Flask, jsonify

  from flask_swagger import swagger


  app = Flask(__name__)


  @app.route("/spec")

  def spec():
      return jsonify(swagger(app))
  ```


  Note that the Swagger specification returned by `swagger(app)` is as minimal
  as it can be. It's your job to override and add to the specification as you
  see fit.


  ```python

  @app.route("/spec")

  def spec():
      swag = swagger(app)
      swag['info']['version'] = "1.0"
      swag['info']['title'] = "My API"
      return jsonify(swag)
  ```



  [Swagger-UI](https://github.com/swagger-api/swagger-ui)


  Swagger-UI is the reason we embarked on this mission to begin with,
  flask-swagger does not however include Swagger-UI. Simply follow the awesome
  documentation over at https://github.com/swagger-api/swagger-ui and point your
  [swaggerUi.url](https://github.com/swagger-api/swagger-ui#swaggerui) to your
  new flask-swagger endpoint and enjoy.


  ## flaskswagger Command

  This package now comes with a very simple command line interface:
  flaskswagger. This command can be used to build and update swagger specs for
  your flask apps from the command line or at build time.


  ```shell

  flaskswagger -h

  ```


  ```

  usage: flaskswagger [-h] [--template TEMPLATE] [--out-dir OUT_DIR]
                      [--definitions DEFINITIONS] [--host HOST]
                      [--base-path BASE_PATH] [--version VERSION]
                      app

  positional arguments:
    app                   the flask app to swaggerify

  optional arguments:
    -h, --help            show this help message and exit
    --template TEMPLATE   template spec to start with, before any other options
                          or processing
    --out-dir OUT_DIR     the directory to output to
    --definitions DEFINITIONS
                          json definitions file
    --host HOST
    --base-path BASE_PATH
    --version VERSION     Specify a spec version

  ```


  For example, this can be used to build a swagger spec which can be served from
  your static directory. In the example below, we use the manually created
  swagger.json.manual as a template, and output to the `static/` directory.


  ```shell

  flaskswagger server:app --template static/swagger.json.manual --out-dir
  static/

  ```

  Also, you can ask flaskswagger to add host and basePath to your swagger
  spec:  


  ```shell

  flaskswagger server:app --host localhost:5000 --base-path /v1

  ```


  Acknowledgements


  Flask-swagger builds on ideas and code from
  [flask-sillywalk](https://github.com/hobbeswalsh/flask-sillywalk) and
  [flask-restful-swagger](https://github.com/rantav/flask-restful-swagger)


  Notable forks


  [Flasgger](https://github.com/rochacbruno/flasgger)
Yelp/swagger_spec_validator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280D:267BEE:AC60353:10C0EEFC:6614891B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
tminglei/binder-swagger-java: >
  # binder-swagger-java


  [![Build
  Status](https://travis-ci.org/tminglei/binder-swagger-java.svg?branch=master)](https://travis-ci.org/tminglei/binder-swagger-java)


  `binder-swagger-java` is a simple api management solution, which let api
  maintainence and dev based on api easily.



  ## Features

  - lightweight, less than 3000 line codes (framework + built-in route/fake data
  generating)

  - based on `form-binder-java`, allowing dynamic objects in operation's
  parameter/response definitions

  - directly integrate with `swagger-models`, allowing to operate swagger object
  when necessary

  - can generate mock response w/ fake data on demand for unimplemented api
  operations

  - high customizable, you can replace almost all of the core components



  ## How it works

  You define the api meta data in classes' static code blocks, then it was
  collected to a static global swagger object when class scan/loading, so when
  requested, the program can serve it right now.  

  _With swagger.json, the swagger-ui can render the API menu in the browser.
  Then you can browse, fill parameters and send to/receive from service impls
  (p.s. the service urls were included in swagger.json)._


  ![binder-swagger
  description](https://raw.githubusercontent.com/tminglei/binder-swagger-java/master/binder-swagger-java.png)


  > _p.s. based on
  [`form-binder-java`](https://github.com/tminglei/form-binder-java) and
  [`swagger-models`](https://github.com/swagger-api/swagger-core),
  `binder-swagger-java` enable you to define dynamic data structures and operate
  the swagger object directly when necessary, so it's more expressive in
  theory._



  ## How to use it

  #### 0) add the dependency to your project:

  ```xml

  <dependency>
      <groupId>com.github.tminglei</groupId>
      <artifactId>binder-swagger-java</artifactId>
      <version>0.8.0</version>
  </dependency>

  ```

  #### 1) define and register your api operations:

  ```java

  // in `PetResource.java`

  static Mapping<?> petStatus = $(text(oneOf(Arrays.asList("available",
  "pending", "sold"))))
      .desc("pet status in the store").example("available").$$;
  static Mapping<?> pet = $(mapping(
      field("id", $(vLong()).desc("pet id").example(gen("petId").or(gen(() -> faker.number().randomNumber()))).$$),
      field("name", $(text(required())).desc("pet name").$$),
      field("category", attach(required()).to($(mapping(
            field("id", vLong(required())),
            field("name", text(required()))
      )).refName("category").desc("category belonged to").$$)),
      field("photoUrls", $(list(text())).desc("pet's photo urls").example(Arrays.asList("http://example.com/photo1")).$$),
      field("tags", $(list(text())).desc("tags for the pet").example(Arrays.asList("tag1", "tag2")).$$),
      field("status", petStatus)
  )).refName("pet").desc("pet info").$$;


  static SharingHolder sharing = sharing().pathPrefix("/pet").tag("pet");


  static {
      sharing.operation(GET, "/{petId}")
          .summary("get pet by id")
          .parameter(param(longv()).in("path").name("petId").example(1l))
          .response(200, response(pet))
          .response(404, response().description("pet not found"))
          .notImplemented() // MARK IT `notImplemented`, THEN `binder-swagger-java` WILL GENERATE MOCK RESPONSE FOR YOU
      ;
  }

  @GET

  @Path("/{petId}")

  public Response getPetById(@PathParam("petId") String petId) throws
  NotFoundException, SQLException {

  ...

  ```

  #### 2) supplement your other swagger info:

  ```java

  // in `Bootstrap.java`

  static {  // for swagger
      swagger().info(info()
          .title("Swagger Sample App")
          .description("This is a sample server Petstore server.  You can find out more about Swagger " +
                "at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, " +
                "you can use the api key `special-key` to test the authorization filters.")
          .termsOfService("http://swagger.io/terms/")
          .contact(contact().email("apiteam@swagger.io"))
          .license(license().name("Apache 2.0")
                .url("http://www.apache.org/licenses/LICENSE-2.0.html")
          )
      ).host("localhost:8002")
      .basePath("/api")
      .consumes("application/json")
      .produces("application/json")
      .securityDefinition("api_key", apiKeyAuth("api_key", In.HEADER))
      .securityDefinition("petstore_auth", oAuth2()
            .implicit("http://petstore.swagger.io/api/oauth/dialog")
            .scope("read:pets", "read your pets")
            .scope("write:pets", "modify pets in your account")
      ).tag(tag("pet").description("Everything about your Pets")
            .externalDocs(externalDocs().description("Find out more").url("http://swagger.io"))
      ).tag(tag("store").description("Access to Petstore orders")
      ).tag(tag("user").description("Operations about user")
            .externalDocs(externalDocs().description("Find out more about our store").url("http://swagger.io"))
      );
  }

  ```

  #### 3) configure the filter, which will serv the `swagger.json`:

  ```xml

  // in `web.xml`

  <filter>
      <filter-name>SwaggerFilter</filter-name>
      <filter-class>com.github.tminglei.swagger.SwaggerFilter</filter-class>

      <!-- enable/disable swagger, default value: true
      <init-param>
          <param-name>enabled</param-name>
          <param-value>false</param-value>
      </init-param>
      -->

      <init-param>
          <param-name>scan-packages-and-classes</param-name>
          <param-value>com.example.resource; com.example.Bootstrap</param-value>
      </init-param>

      <!-- specify the requestURI relative to base path, to fetch your swagger json, default '/swagger.json'
      <init-param>
          <param-name>swagger-uri</param-name>
          <param-value>/swagger.json</param-value>
      </init-param>
      -->

      <!-- configure your custom mapping converter
      <init-param>
          <param-name>mapping-converter</param-name>
          <param-value>com.company.pkg.MyMappingConverter</param-value>
      </init-param>
      -->

      <!-- enable/disable mock data generation, default value: true
      <init-param>
          <param-name>fake-enabled</param-name>
          <param-value>false</param-value>
      </init-param>
      -->

      <!-- configure your custom url router used by `binder-swagger-java`
      <init-param>
          <param-name>url-router</param-name>
          <param-value>com.company.pkg.MyRouter</param-value>
      </init-param>
      -->

      <!-- configure your custom data writer used by `binder-swagger-java`
      <init-param>
          <param-name>data-writer</param-name>
          <param-value>com.company.pkg.MyDataWriter</param-value>
      </init-param>
      -->
  </filter>

  <filter-mapping>
      <filter-name>SwaggerFilter</filter-name>
      <url-pattern>/api/*</url-pattern>
  </filter-mapping>

  ...

  ```



  ##### That's all. Enjoy it!



  > For more usage details, pls check the example project
  [here](https://github.com/tminglei/binder-swagger-java/tree/master/example/java-jaxrs).



  ## Q & A

  **Q:** Why use static code blocks to associate/register operation meta info
  instead of annotations?  

  **A:** Well, because we can't use annotations here. Annotation requires static
  defined data types, but we didn't define java beans in our project.  

  _(p.s. because of this, we can't also use existing frameworks, like
  `springfox`.)_



  ## License

  The BSD License, Minglei Tu &lt;tmlneu@gmail.com&gt;
thebignet/swagger-codegen-gradle-plugin: >
  swagger-codegen-gradle-plugin

  ============================


  [![Build
  Status](https://travis-ci.org/thebignet/swagger-codegen-gradle-plugin.svg?branch=master)](https://travis-ci.org/thebignet/swagger-codegen-gradle-plugin)


  A Gradle plugin to support the [swagger](http://swagger.io) code generation
  project



  [DEPRECATED] !!!

  ------------


  see the
  [swagger-codegen-gradle-plugin-example](https://github.com/thebignet/swagger-codegen-gradle-plugin-example)
  for creating a Gradle task to generate code with Swagger Codegen.



  Usage

  ============================


  see the
  [swagger-codegen-gradle-plugin-example](https://github.com/thebignet/swagger-codegen-gradle-plugin-example),
  or:


  Here is an example of how to use the plugin in a `build.gradle` file

  ```groovy

  plugins {
      id 'org.detoeuf.swagger-codegen' version '1.7.4'
      id 'java'
  }


  apply plugin: 'org.detoeuf.swagger-codegen'


  repositories {
      mavenCentral()
      jcenter()
  }


  swagger {
      inputSpec = 'http://petstore.swagger.io/v2/swagger.json'
      outputDir = file('build/swagger')
      lang = 'java'

      additionalProperties = [
              'invokerPackage'   : 'io.swagger.petstore.client',
              'modelPackage'     : 'io.swagger.petstore.client.model',
              'apiPackage'       : 'io.swagger.petstore.client.api',
              'dateLibrary'      : 'java8'
      ]
      importMappings = [
              'Dog': 'io.swagger.petstore.client.model.Dog'
      ]
  }


  sourceSets {
      swagger {
          java {
              srcDir file("${project.buildDir.path}/swagger/src/main/java")
          }
      }
  }


  classes.dependsOn('swagger')


  ext {
      spring_boot_version = '1.5.6.RELEASE'
      jackson_version = '2.4.2'
      jersey_version = '1.18'
      jodatime_version = '2.3'
      junit_version = '4.8.1'
  }


  dependencies {
      swaggerCompile "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
      swaggerCompile 'io.swagger:swagger-annotations:1.5.16'
      swaggerCompile 'com.squareup.okhttp:okhttp:2.7.5'
      swaggerCompile 'com.squareup.okhttp:logging-interceptor:2.7.5'
      swaggerCompile 'com.google.code.gson:gson:2.8.1'

      compile sourceSets.swagger.output

      compile "com.sun.jersey:jersey-client:$jersey_version"
      compile "com.sun.jersey.contribs:jersey-multipart:$jersey_version"
      compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
      compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
      compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
      compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.1.5"
      compile "joda-time:joda-time:$jodatime_version"
      compile 'io.swagger:swagger-codegen:2.2.3'

      testCompile "junit:junit:$junit_version"

      runtime 'com.squareup.okhttp:okhttp:2.7.5'
      runtime 'com.squareup.okhttp:logging-interceptor:2.7.5'
      runtime 'com.google.code.gson:gson:2.8.1'
  }

  ```


  Launch with:


  ```

  gradle swagger

  ```


  ### Configuration parameters

  the `swagger {}` configuration is passed to
  [CodegenConfigurator.java](https://github.com/swagger-api/swagger-codegen/blob/v2.2.1/modules/swagger-codegen/src/main/java/io/swagger/codegen/config/CodegenConfigurator.java)


  #### Dynamic properties

  Some Swagger codegen configurations will contain extra properties that are not
  part of the io.swagger.codegen.CodegenConfig interface. For example there is
  the `sourceFolder` property that is only applicable if using jaxrs-spec as the
  value of the `lang` property. In order to set such properties, we should use
  the `dynamicProperty` method inside the `swagger {}` configuration as shown
  below.


  ```

  swagger {
      lang = 'jaxrs-spec'

      addDynamicProperty 'sourceFolder', 'src/swagger/java'

      additionalProperties = [
          ...
      ]
      systemProperties = [
          ...
      ]
  }

  ```


  … to be documented …


  ### deprecation warning

  the old behaviour had a custom plugin for this swagger config as seen below

  - `inputSpec` - :check:

  - `outputDir` - was: `output`

  - `lang` - was: `language`

  - `additionalProperties` - sets additional properties that can be referenced
  by the mustache templates in the format of name=value,name=value.  See
  [Customizing the
  generator](https://github.com/swagger-api/swagger-codegen/#customizing-the-generator)
  for list of parameters


  #### new settings possible

  - `systemProperties` - see [selective
  generation](https://github.com/swagger-api/swagger-codegen/#selective-generation)


  #### no longer included

  - `models` - have a look at the systemProperties section

  - `apis` - [selective
  generation](https://github.com/swagger-api/swagger-codegen/#selective-generation)
  of apis.  Leave blank to generate apis only

  - `supportingFiles` - [selective
  generation](https://github.com/swagger-api/swagger-codegen/#selective-generation)
  of supporting files.  Leave blank to generate supporting files only


  no substituion for:

  - `cleanOutputDir` - now, configured by configuring the task directly:
      ```groovy
      tasks.getByName("swagger") {
          cleanOutputDir = false
      }
      ```
striglia/pyramid_swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B802EF2:11DB63B7:661492B4.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
kaizhu256/node-swagger-mongodb: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2A21B2A:40281E2:66148D22.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
krakenjs/swaggerize-express: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:240AB15:39B1CA9:66148DC2.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
khrt/Raisin: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:38171F1:56F0CD3:66148D43.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mobilcom-debitel/pokemock: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:398C079:58BF574:66148EA5.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
fleekjs/fleek-validator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BE02107:127BC583:66148C3D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
oatpp/oatpp-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:21A5424:35CD14A:66148F86.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
zaaack/koa-joi-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BFE3A45:12A90898:66149597.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
ruby-grape/grape-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2806:D3E08:3BCFFD5:5C6DEDA:661490A8.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
apigee-127/swagger-tools: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:27DEDD:A92FEF2:107C09BB:6614899C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
metosin/fnhouse-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2A8AA2B:40BFEF0:66148E63.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
yonaskolb/SwagGen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:2556529:3BA3F19:66149559.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
jolie/jester: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280A:424B:B6EAD37:11C12CA5:66148D03.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Yelp/bravado-core: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280B:09A3:BD63245:126CBFF8:6614891A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
unicredit/sbt-swagger-codegen: >
  # SBT Swagger Code Generator


  ## Overview


  Like the official
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) this project
  aims to generate Scala source code from [Swagger 2.0
  Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  compliant API descriptions.

  Moreover, you can do it directly within an `sbt` project.


  ## Compatibility


  This code generator is designed specifically for Swagger Spec Version 2.0.
  Moreover, it relies on [Play! Framework](http://www.playframework.com/) 2.7
  for Json marshalling/unmarshalling, server- and client-side code.


  ## Install


  Current release is
  [`0.0.12`](https://github.com/unicredit/sbt-swagger-codegen/tree/0.0.12)


  If you want to try the latest version on `master`, first clone this project
  and `publishLocal` it.


  Enable it inside your `project\plugins.sbt` like this:


  `addSbtPlugin("eu.unicredit" % "sbt-swagger-codegen" % "0.1.0-SNAPSHOT")`


  Enable it in your `build.sbt` like this:


  `enablePlugins(SwaggerCodegenPlugin)`


  ## Quick start


  For a *super fast* hands-on tutorial refer to the related examples and check
  out
  [sbt-swagger-codegen-examples](https://github.com/unicredit/sbt-swagger-codegen-examples).


  ## How it works


  By default, the plugin will assume that you have put your `yaml` Swagger
  specification files under `src/main/swagger`.


  If so, then you can just run `swaggerModelCodeGen` task and it will generate
  your *models* as case classes and [Play Framework](www.playframework.com)
  [Formats](https://www.playframework.com/documentation/2.5.x/ScalaJsonCombinators#Format)
  for them (for json serialization).


  ## Tasks


  All available tasks from the plugin


  - `swaggerModelCodeGen`  -> generated code for model classes

  - `swaggerServerCodeGen` -> generates Play Framework code

  - `swaggerClientCodeGen` -> generates client code using `play-ws`

  - `swaggerClean` -> cleans up already generated code


  The `swaggerModelCodeGen`, `swaggerServerCodeGen` and `swaggerClientCodeGen`
  will run automatically when the swagger sources change.


  ## Keys (and defaults)


  These keys influence properties of the generated code itself:


  - `swaggerSourcesDir` -> "/src/main/swagger" (path where to search for swagger
  files)

  - `swaggerCodeGenPackage` -> "swagger.codegen" (package name of the generated
  sources)

  - `swaggerModelFileSplitting` -> "oneFilePerSource" (in model generation how
  to group classes in '.scala' files available options are "oneFilePerSource"
  "oneFilePerModel")

  - `swaggerCodeProvidedPackage` -> "com.yourcompany" (where you will provide
  business logic server method implementation)


  These keys determine where generated files will be put:


  - `swaggerModelCodeTargetDir` ->
  "target/scala-2.1x/src_managed/src/main/swagger/model" (path where to put
  generated model files)

  - `swaggerClientCodeTargetDir` ->
  "target/scala-2.1x/src_managed/src/main/swagger/client" (path where to put
  generated client code files)

  - `swaggerServerCodeTargetDir` ->
  "target/scala-2.1x/src_managed/src/main/swagger/server" (path where to put
  generated server code files)


  These keys can be used to determine what kind of code should be generated:


  - `swaggerGenerateModel` -> true (to be disabled if you do not want model
  classes to be generated automatically when swagger source code changes)

  - `swaggerGenerateJsonRW` -> true (if you want to generate json Format for
  your model case classes)

  - `swaggerGenerateClient` -> false (enable this if you want client code to ge
  generated automatically when swagger source code changes)

  - `swaggerGenerateServer` -> false (enable this if you want client code to ge
  generated automatically when swagger source code changes)


  Moreover, you can extend this plugin by providing alternative implementations
  of the generators via:


  - `swaggerModelCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultModelGenerator() (the class used to
  generate the model classes)

  - `swaggerJsonCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultJsonGenerator() (the class used to
  generate the json marshaller/unmarshaller)

  - `swaggerServerCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultServerGenerator() (the class used to
  generate the Server classes)

  - `swaggerClientCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultClientGenerator() (the class used to
  generate the client classes)


  ## Dependencies


  - scala version 2.12.X

  - [play-ws-standalone-json
  1.1.3](http://mvnrepository.com/artifact/com.typesafe.play/play-ws-standalone-json)

  - [play-ahc-ws-standalone
  1.1.3](http://mvnrepository.com/artifact/com.typesafe.play/play-ahc-ws-standalone)
  (only if you use client)


  ### Limitations


  At the moment the project is developed to fulfill some internal projects
  needs, so do not expect it to cover all the corner cases of the Swagger Spec
  (i.e. some primitive types in body req or resp).


  ## The road ahead


  We are actively working with and on this project, trying to overcome any
  arising limitations and support all Swagger-spec properties we need.

  PRs are really welcome and please open an Issue if you find that something is
  not working.


  ## Authors


  * Andrea Peruffo ([@andreaTP](https://github.com/andreaTP))

  * Francesco Montecuccoli Degli Erri ([@fralken](https://github.com/fralken))

  * Marco Firrincieli ([@mfirry](https://github.com/mfirry))


  ### Acknowledgements


  Thanks to Daniel Wunsch ([@dwunsch](https://github.com/dwunsch)),
  [@dvirf](https://github.com/dvirf) and Reto Habluetzel
  ([@rethab](https://github.com/rethab)) for their valuable contributions.


  *** This is a work in progress and we are not done with it! ***
MicroarrayTecnologia/spec-synthase: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD1CEE4:12661766:661487B9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
fleekjs/fleek-router: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BDFC0EB:127B34B3:66148C1E.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Trax-air/swagger-stub: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B6298C5:11AEDF54:66148919.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Nexmo/oas_parser: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B5E777A:11A8A924:661487B9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
ampedandwired/bottle-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:28CF72F:3E38112:6614893D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
vanderlee/PHPSwaggerGen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B862EDF:11E469BD:66149497.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
garethjevans/swagger-codegen-maven-plugin: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280B:1D25BE:2299BE9:380BAC6:66148CBD.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
noirbizarre/flask-restplus: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2813:3BE432:B8DE7DF:11F2DCA3:66148F46.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Trax-air/swagger-parser: >
  .. image:: https://travis-ci.org/Trax-air/swagger-parser.svg?branch=master
     :alt: Travis status
     :target: https://travis-ci.org/Trax-air/swagger-parser 
  .. image:: https://badges.gitter.im/Trax-air/swagger-parser.svg
     :alt: Join the chat at https://gitter.im/Trax-air/swagger-parser
     :target: https://gitter.im/Trax-air/swagger-parser?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-parser.svg
      :target: https://pypi.python.org/pypi/swagger-parser/

  swagger-parser

  ==============


  Swagger-parser is a python module giving you access to some interesting data
  about your swagger file. Like getting a dictionary example from a definition
  name, get the definition of a dictionary, and more.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  * https://github.com/Trax-air/swagger-tester: Auto-test your swagger API in
  your unit tests. All test calls are generated by your swagger file.

  * https://github.com/Trax-air/swagger-stub: A stub you can use in your
  client's unit tests. All the HTTP calls to your swagger API are mocked by
  default. You can also add your own mocked_calls in your test functions.

  * https://github.com/Trax-air/swagger-aggregator: Aggregate several swagger
  specs into one. Useful for your API gateways!


  Example Usage

  -------------


  .. code:: python

    from swagger_parser import SwaggerParser

    parser = SwaggerParser(swagger_path='swagger_path')  # Init with file
    parser = SwaggerParser(swagger_dict={})  # Init with dictionary

    # Get an example of dict for the definition Foo
    parser.definitions_example.get('Foo')

    # Get the definition of a dictionary
    test = {
      'foo': 'bar'
    }
    parser.get_dict_definition(test)

    # Validate the definition of a dict
    parser.validate_definition('Foo', test)

    # Validate that the given data match a path specification
    parser.validate_request('/foo', 'post', body=test, query={'foo': 'bar'})

    # Get the possible return value of a path
    # It will return a dictionary with keys as status_code
    # and value as example of return value.
    parser.get_request_data('/foo', 'post', body=test)

    # Get an example of a correct body for a path
    parser.get_send_request_correct_body('/foo', 'post')

  Documentation

  -------------


  More documentation is available at
  https://swagger-parser.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-parser`


  License

  -------


  swagger-parser is licensed under http://opensource.org/licenses/MIT.
elmiko/pecan-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:23AB2B0:3920DDF:66148B9D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
smoketurner/dropwizard-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BF2E28C:1297EAF0:66149223.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Trax-air/swagger-tester: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:27DEDD:A918F95:1079DB47:66148919.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cachecontrol/hippie-swagger: >
  ![hippie-swagger](http://i.imgur.com/icjd94P.png)


  _"The confident hippie"_


  [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)

  [![Build
  Status](https://travis-ci.org/CacheControl/hippie-swagger.svg)](https://travis-ci.org/CacheControl/hippie-swagger)

  [![npm
  version](https://badge.fury.io/js/hippie-swagger.svg)](https://badge.fury.io/js/hippie-swagger)


  ## Synopsis


  ```hippie-swagger``` is a tool for testing RESTful APIs.  In addition to
  validating api behavior, it will fail tests when swagger documentation is
  missing or inaccurate.


  As the test suite runs, any request or response details *not* matching the
  swagger file will throw an appropriate exception, failing the spec.  This
  ensures the swagger definition accurately describes application behavior,
  keeping documentation in sync with reality.


  ```hippie-swagger``` uses [hippie](https://github.com/vesln/hippie) under the
  hood, an excellent API testing tool.


  ## Features


  * All [hippie](https://github.com/vesln/hippie) features included

  * All aspects of swagger file validated; parameters, request/response body,
  paths, etc.

  * Checks for extra parameters, paths, headers, etc not mentioned in the
  swagger file

  * Ensures swagger file accurately describes API behavior

  * Accurate, human readable assertion messages


  ## Installation


  ```

  npm install hippie-swagger --save-dev

  ```


  ## Basic Usage


  ```js

  var hippie = require('hippie-swagger'),
      swagger = require('./my-dereferenced-swagger-file'); // see example for how to dereference swagger

  hippie(app, swagger)

  .get('/users/{username}')

  .pathParams({
    username: 'cachecontrol'
  })

  .expectStatus(200)

  .expectValue('user.first', 'John')

  .expectHeader('cache-control', 'no-cache')

  .end(function(err, res, body) {
    if (err) throw err;
  });

  ```


  ## Usage

  * See [hippie](https://github.com/vesln/hippie) documentation for a
  description of the base api

  * When specifying a url(.get, .post, .patch, .url, etc), use the [swagger
  path](http://swagger.io/specification/#pathsObject)

  * Provide any path variables using [pathParams](#pathparams)


  These aside, use hippie as you normally would; see the
  [example](example/index.js).


  ## Methods


  ### #constructor (Object app, Object swagger, Object [options])


  Test an HTTP app (like express) directly


  ```js

  hippie(app, swagger, options)

  .get('/projects')

  .end(fn);

  ```


  ### #constructor (Object swagger, Object [options])


  Test a remote HTTP app using a fully qualified url


  ```js

  hippie(swagger, options)

  .get('http://localhost:3000/projects')

  .end(fn);

  ```


  ### #pathParams(Object hash)


  Replaces variables contained in the swagger path.


  ```js

  hippie(app, swagger)

  .get('/projects/{projectId}/tasks/{taskId}')

  .pathParams({
    projectId: 123,
    taskId: 99
  })

  .end(fn);

  ```


  ## Options


  To customize behavior, an ```options``` hash may be passed to the
  constructor.  Typically, ```options``` only need to be specified in situations
  where the test covers responses to improper requests (e.g. validating the
  application returns a 422 when a required parameter is not provided).


  ```js

  var options = {
    validateResponseSchema: true,
    validateParameterSchema: true,
    errorOnExtraParameters: true,
    errorOnExtraHeaderParameters: false
  };

  hippie(app, swagger, options)

  ```


  ```validateResponseSchema``` - Validate the server's response against the
  swagger json-schema definition (default: ```true```)


  ```validateParameterSchema``` - Validate the request parameters against the
  swagger json-schema definition (default: ```true```)


  ```validateRequiredParameters``` - Validate that required parameters were
  provided  (default: ```true```)


  ```errorOnExtraParameters``` - Throw an error if a parameter is missing from
  the swagger file  (default: ```true```)


  ```errorOnExtraHeaderParameters``` - Throw an error if a request header is
  missing from the swagger file.  By default this is turned off, because it
  results in every request needing to specify the "Content-Type" and "Accept"
  headers, which quickly becomes verbose. (default: ```false```)



  ## Example

  See the [example](example/index.js) folder


  ## Validations


  When hippie-swagger detects it is interacting with the app in ways not
  specified in the swagger file, it will throw an error and fail the test.  The
  idea is to use hippie's core features to write API tests as per usual, and
  hippie-swagger will only interject if the swagger contract is violated.


  Below are list of some of the validations that hippie-swagger checks for:


  ### Paths

  ```js

  hippie(app, swagger)

  .get('/pathNotMentionedInSwagger')

  .end(fn);

  // path does not exist in swagger file; throws:

  //    Swagger spec does not define path: pathNotMentionedInSwagger

  ```


  ### Parameter format

  ```js

  hippie(app, swagger)

  .get('/users/{userId}')

  .pathParams({
    userId: 'string-value',
  })

  .end(fn);

  // userId provided as a string, but swagger specifies it as an integer;
  throws:

  //    Invalid format for parameter {userId}

  ```


  ### Required Parameters

  ```js

  hippie(app, swagger)

  .get('/users/{username}')

  .end(fn);

  // "username" is marked 'required' in swagger file; throws:

  //    Missing required parameter in path: username

  ```


  ### Extraneous Parameters

  ```js

  hippie(app, swagger)

  .get('/users')

  .qs({ page: 2, limit: 30 })

  .end(fn);

  // "page" missing from swagger file; throws:

  //    Error: query parameter not mentioned in swagger spec: "page", available
  params: limit

  ```


  ### Response format

  ```js

  hippie(app, swagger)

  .get('/users')

  .end(fn);

  // body failed to validate against swagger file's "response" schema; throws:

  //    Response from /users failed validation: [failure description]

  ```


  ### Method validation

  ```js

  hippie(app, swagger)

  .post('/users')

  .end(fn);

  // "post" method not mentioned in swagger file; throws:

  //    Swagger spec does not define method: "post" in path /users

  ```


  ### Post body format

  ```js

  hippie(app, swagger)

  .post('/users')

  .send({"bogus":"post-body"})

  .end(fn);


  // post body fails to validate against swagger file's "body" parameter;
  throws:

  //    Invalid format for parameter {body}, received: {"bogus":"post-body"}

  ```


  ### Form Url-Encoded Parameters

  ```js

  hippie(app, swagger)

  .form()

  .post('/users')

  .send({})

  .end(fn);


  // "username" is {required: true, in: formData} in swagger; throws:

  //    Missing required parameter in formData: username

  ```


  ### Multipart Forms

  ```js

  hippie(app, swagger)

  .header('Content-Type','multipart/form-data')

  .send()

  .post('/users/upload')

  .end(fn);


  // "fileUpload" is {required: true, in: formData, type: file} in swagger;
  throws:

  //    Missing required parameter in formData: fileUpload

  ```


  ## Troubleshooting


  The most common mistake is forgetting to dereference the swagger file:


  ```js

  "'Error: cant resolve reference ...'

  ```


  Dereferencing can be accomplished using
  [swagger-parser](https://github.com/BigstickCarpet/swagger-parser/blob/master/docs/swagger-parser.md#dereferenceapi-options-callback). 
  The [example](example/index.js) gives a demonstration.


  ## Contributing


  To run the `hippie-swagger` tests:


  ```

  npm test

  ```


  ## License

  [ISC](./LICENSE)
guokr/swagger-py-codegen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  27C5:13AD5E:21B2CC1:366B0E3:66148CC1.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
domaindrivendev/rswag: >+
  rswag

  =========

  [![Build
  Status](https://travis-ci.org/rswag/rswag.svg?branch=master)](https://travis-ci.org/rswag/rswag)

  [![Maintainability](https://api.codeclimate.com/v1/badges/1175b984edc4610f82ab/maintainability)](https://codeclimate.com/github/rswag/rswag/maintainability)


  OpenApi 3.0 and Swagger 2.0 compatible!


  Rswag extends rspec-rails "request specs" with a Swagger-based DSL for
  describing and testing API operations. You describe your API operations with a
  succinct, intuitive syntax, and it automaticaly runs the tests. Once you have
  green tests, run a rake task to auto-generate corresponding Swagger files and
  expose them as YAML or JSON endpoints. Rswag also provides an embedded version
  of the awesome [swagger-ui](https://github.com/swagger-api/swagger-ui) that's
  powered by the exposed file. This toolchain makes it seamless to go from
  integration specs, which youre probably doing in some form already, to living
  documentation for your API consumers.


  Api Rswag creates [Swagger](http://swagger.io) tooling for Rails API's.
  Generate beautiful API documentation, including a UI to explore and test
  operations, directly from your rspec integration tests.



  And that's not all ...


  Once you have an API that can describe itself in Swagger, you've opened the
  treasure chest of Swagger-based tools including a client generator that can be
  targeted to a wide range of popular platforms. See
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more
  details.


  ## Compatibility ##


  |Rswag Version|Swagger (OpenAPI) Spec.|swagger-ui|

  |----------|----------|----------|

  |[master](https://github.com/rswag/rswag/tree/master)|3.0.3|3.23.11|

  |[2.3.0](https://github.com/rswag/rswag/tree/2.3.0)|3.0.3|3.23.11|

  |[2.2.0](https://github.com/rswag/rswag/tree/2.2.0)|2.0|3.18.2|

  |[1.6.0](https://github.com/rswag/rswag/tree/1.6.0)|2.0|2.2.5|



  <!-- START doctoc generated TOC please keep comment here to allow auto update
  -->

  **Table of Contents**


  - [rswag](#rswag)
    - [Compatibility](#compatibility)
    - [Getting Started](#getting-started)
    - [The rspec DSL](#the-rspec-dsl)
      - [Paths, Operations and Responses](#paths-operations-and-responses)
      - [Null Values](#null-values)
      - [Support for oneOf, anyOf or AllOf schemas](#support-for-oneof-anyof-or-allof-schemas)
      - [Global Metadata](#global-metadata)
        - [Supporting multiple versions of API](#supporting-multiple-versions-of-api)
        - [Formatting the description literals:](#formatting-the-description-literals)
      - [Specifying/Testing API Security](#specifyingtesting-api-security)
    - [Configuration & Customization](#configuration--customization)
      - [Output Location for Generated Swagger Files](#output-location-for-generated-swagger-files)
      - [Input Location for Rspec Tests](#input-location-for-rspec-tests)
      - [Referenced Parameters and Schema Definitions](#referenced-parameters-and-schema-definitions)
      - [Response headers](#response-headers)
      - [Response examples](#response-examples)
      - [Enable auto generation examples from responses](#enable-auto-generation-examples-from-responses)
        - [Running tests without documenting](#running-tests-without-documenting)
          - [rswag helper methods](#rswag-helper-methods)
          - [rswag response examples](#rswag-response-examples)
      - [Route Prefix for Swagger JSON Endpoints](#route-prefix-for-swagger-json-endpoints)
      - [Root Location for Swagger Files](#root-location-for-swagger-files)
      - [Dynamic Values for Swagger JSON](#dynamic-values-for-swagger-json)
      - [Custom Headers for Swagger Files](#custom-headers-for-swagger-files)
      - [Enable Swagger Endpoints for swagger-ui](#enable-swagger-endpoints-for-swagger-ui)
      - [Enable Simple Basic Auth for swagger-ui](#enable-simple-basic-auth-for-swagger-ui)
      - [Route Prefix for the swagger-ui](#route-prefix-for-the-swagger-ui)
      - [Customizing the swagger-ui](#customizing-the-swagger-ui)
      - [Serve UI Assets Directly from your Web Server](#serve-ui-assets-directly-from-your-web-server)

  <!-- END doctoc generated TOC please keep comment here to allow auto update
  -->




  ## Getting Started ##


  1. Add this line to your applications _Gemfile_:

      ```ruby
      gem 'rswag'
      ```

      or if you like to avoid loading rspec in other bundler groups load the rswag-specs component separately.
      Note: Adding it to the :development group is not strictly necessary, but without it, generators and rake tasks must be preceded by RAILS_ENV=test.

      ```ruby
      # Gemfile
      gem 'rswag-api'
      gem 'rswag-ui'

      group :development, :test do
        gem 'rspec-rails'
        gem 'rswag-specs'
      end
      ```

  2. Run the install generator

      ```ruby
      rails g rswag:install
      ```

      Or run the install generators for each package separately if you installed Rswag as separate gems, as indicated above:

      ```ruby
      rails g rswag:api:install
      rails g rswag:ui:install
      RAILS_ENV=test rails g rswag:specs:install
      ```

  3. Create an integration spec to describe and test your API.

  There is also a generator which can help get you started `rails generate
  rspec:swagger API::MyController`

      ```ruby
      # spec/integration/blogs_spec.rb
      require 'swagger_helper'

      describe 'Blogs API' do

        path '/blogs' do

          post 'Creates a blog' do
            tags 'Blogs'
            consumes 'application/json'
            parameter name: :blog, in: :body, schema: {
              type: :object,
              properties: {
                title: { type: :string },
                content: { type: :string }
              },
              required: [ 'title', 'content' ]
            }

            response '201', 'blog created' do
              let(:blog) { { title: 'foo', content: 'bar' } }
              run_test!
            end

            response '422', 'invalid request' do
              let(:blog) { { title: 'foo' } }
              run_test!
            end
          end
        end

        path '/blogs/{id}' do

          get 'Retrieves a blog' do
            tags 'Blogs'
            produces 'application/json', 'application/xml'
            parameter name: :id, in: :path, type: :string

            response '200', 'blog found' do
              schema type: :object,
                properties: {
                  id: { type: :integer },
                  title: { type: :string },
                  content: { type: :string }
                },
                required: [ 'id', 'title', 'content' ]

              let(:id) { Blog.create(title: 'foo', content: 'bar').id }
              run_test!
            end

            response '404', 'blog not found' do
              let(:id) { 'invalid' }
              run_test!
            end

            response '406', 'unsupported accept header' do
              let(:'Accept') { 'application/foo' }
              run_test!
            end
          end
        end
      end
      ```


  4. Generate the Swagger JSON file(s)

      ```ruby
      rake rswag:specs:swaggerize
      ```

      This common command is also aliased as `rake rswag`.

      Or if you installed your gems separately:
      ```
      RAILS_ENV=test rails rswag
      ```

  5. Spin up your app and check out the awesome, auto-generated docs at
  _/api-docs_!


  ## The rspec DSL ##


  ### Paths, Operations and Responses ###


  If you've used [Swagger](http://swagger.io/specification) before, then the
  syntax should be very familiar. To describe your API operations, start by
  specifying a path and then list the supported operations (i.e. HTTP verbs) for
  that path. Path parameters must be surrounded by curly braces ({}). Within an
  operation block (see "post" or "get" in the example above), most of the fields
  supported by the [Swagger "Operation"
  object](http://swagger.io/specification/#operationObject) are available as
  methods on the example group. To list (and test) the various responses for an
  operation, create one or more response blocks. Again, you can reference the
  [Swagger "Response" object](http://swagger.io/specification/#responseObject)
  for available fields.


  Take special note of the __run_test!__ method that's called within each
  response block. This tells rswag to create and execute a corresponding
  example. It builds and submits a request based on parameter descriptions and
  corresponding values that have been provided using the rspec "let" syntax. For
  example, the "post" description in the example above specifies a "body"
  parameter called "blog". It also lists 2 different responses. For the success
  case (i.e. the 201 response), notice how "let" is used to set the blog
  parameter to a value that matches the provided schema. For the failure case
  (i.e. the 422 response), notice how it's set to a value that does not match
  the provided schema. When the test is executed, rswag also validates the
  actual response code and, where applicable, the response body against the
  provided [JSON Schema](http://json-schema.org/documentation.html).


  If you want to do additional validation on the response, pass a block to the
  __run_test!__ method:


  ```ruby

  response '201', 'blog created' do
    run_test! do |response|
      data = JSON.parse(response.body)
      expect(data['title']).to eq('foo')
    end
  end

  ```


  If you'd like your specs to be a little more explicit about what's going on
  here, you can replace the call to __run_test!__ with equivalent "before" and
  "it" blocks:


  ```ruby

  response '201', 'blog created' do
    let(:blog) { { title: 'foo', content: 'bar' } }

    before do |example|
      submit_request(example.metadata)
    end

    it 'returns a valid 201 response' do |example|
      assert_response_matches_metadata(example.metadata)
    end
  end

  ```


  ### Null Values ###


  This library is currently using JSON::Draft4 for validation of response
  models. Nullable properties can be supported with the non-standard property
  'x-nullable' to a definition to allow null/nil values to pass. Or you can add
  the new standard ```nullable``` property to a definition.

  ```ruby

  describe 'Blogs API' do
    path '/blogs' do
      post 'Creates a blog' do
        ...

        response '200', 'blog found' do
          schema type: :object,
            properties: {
              id: { type: :integer },
              title: { type: :string, nullable: true }, # preferred syntax
              content: { type: :string, 'x-nullable': true } # legacy syntax, but still works
            }
          ....
        end
      end
    end
  end

  ```


  ### Support for oneOf, anyOf or AllOf schemas ###


  Open API 3.0 now supports more flexible schema validation with the
  ```oneOf```, ```anyOf``` and ```allOf``` directives. rswag will handle these
  definitions and validate them properly.



  Notice the ```schema``` inside the ```response``` section. Placing a
  ```schema``` method inside the response will validate (and fail the tests)

  if during the integration test run the endpoint response does not match the
  response schema. This test validation can handle anyOf and allOf as well. See
  below:


  ```ruby

    path '/blogs/flexible' do
      post 'Creates a blog flexible body' do
        tags 'Blogs'
        description 'Creates a flexible blog from provided data'
        operationId 'createFlexibleBlog'
        consumes 'application/json'
        produces 'application/json'

        parameter name: :blog, in: :body, schema: {
            oneOf: [
              { '$ref' => '#/components/schemas/blog' },
              { '$ref' => '#/components/schemas/flexible_blog' }
            ]
          }

        response '201', 'flexible blog created' do
          schema oneOf: [{ '$ref' => '#/components/schemas/blog' }, { '$ref' => '#/components/schemas/flexible_blog' }]
          run_test!
        end
      end
    end

  ```

  This automatic schema validation is a powerful feature of rswag.


  ### Global Metadata ###


  In addition to paths, operations and responses, Swagger also supports global
  API metadata. When you install rswag, a file called _swagger_helper.rb_ is
  added to your spec folder. This is where you define one or more Swagger
  documents and provide global metadata. Again, the format is based on Swagger
  so most of the global fields supported by the top level ["Swagger"
  object](http://swagger.io/specification/#swaggerObject) can be provided with
  each document definition. As an example, you could define a Swagger document
  for each version of your API and in each case specify a title, version string.
  In Open API 3.0 the pathing and server definitions have changed a bit [Swagger
  host/basePath](https://swagger.io/docs/specification/api-host-and-base-path/):


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/swagger'

    config.swagger_docs = {
      'v1/swagger.json' => {
        openapi: '3.0.1',
        info: {
          title: 'API V1',
          version: 'v1',
          description: 'This is the first version of my API'
        },
        servers: [
          {
            url: 'https://{defaultHost}',
            variables: {
              defaultHost: {
                  default: 'www.example.com'
              }
            }
          }
        ]
      },

      'v2/swagger.yaml' => {
        openapi: '3.0.1',
        info: {
          title: 'API V2',
          version: 'v2',
          description: 'This is the second version of my API'
        },
        servers: [
          {
            url: 'https://{defaultHost}',
            variables: {
              defaultHost: {
                  default: 'www.example.com'
              }
            }
          }
        ]
      }
    }
  end

  ```


  #### Supporting multiple versions of API ####

  By default, the paths, operations and responses defined in your spec files
  will be associated with the first Swagger document in _swagger_helper.rb_. If
  your API has multiple versions, you should be using separate documents to
  describe each of them. In order to assign a file with a given version of API,
  you'll need to add the ```swagger_doc``` tag to each spec specifying its
  target document name:


  ```ruby

  # spec/integration/v2/blogs_spec.rb

  describe 'Blogs API', swagger_doc: 'v2/swagger.yaml' do

    path '/blogs' do
    ...

    path '/blogs/{id}' do
    ...
  end

  ```


  #### Formatting the description literals: ####

  Swagger supports the Markdown syntax to format strings. This can be especially
  handy if you were to provide a long description of a given API version or
  endpoint. Use [this
  guide](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) for
  reference.


  __NOTE:__ There is one difference between the official Markdown syntax and
  Swagger interpretation, namely tables. To create a table like this:


  | Column1 | Collumn2 |

  | ------- | -------- |

  | cell1   | cell2    |


  you should use the folowing syntax, making sure there are no whitespaces at
  the start of any of the lines:


  ```

  &#13;

  | Column1 | Collumn2 |&#13;

  | ------- | -------- |&#13;

  | cell1   | cell2    |&#13;

  &#13;

  ```


  ### Specifying/Testing API Security ###


  Swagger allows for the specification of different security schemes and their
  applicability to operations in an API. 

  To leverage this in rswag, you define the schemes globally in
  _swagger_helper.rb_ and then use the "security" attribute at the operation
  level to specify which schemes, if any, are applicable to that operation. 

  Swagger supports :basic, :bearer, :apiKey and :oauth2 and :openIdConnect
  scheme types. See [the
  spec](https://swagger.io/docs/specification/authentication/) for more info, as
  this underwent major changes between Swagger 2.0 and Open API 3.0


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/swagger'

    config.swagger_docs = {
      'v1/swagger.json' => {
        ...  # note the new Open API 3.0 compliant security structure here, under "components"
        components: {
          securitySchemes: {
            basic_auth: {
              type: :http,
              scheme: :basic
            },
            api_key: {
              type: :apiKey,
              name: 'api_key',
              in: :query
            }
          }
        }
      }
    }
  end


  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs' do

      post 'Creates a blog' do
        tags 'Blogs'
        security [ basic_auth: [] ]
        ...

        response '201', 'blog created' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('jsmith:jspass')}" }
          run_test!
        end

        response '401', 'authentication failed' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('bogus:bogus')}" }
          run_test!
        end
      end
    end
  end


  # example of documenting an endpoint that handles basic auth and api key based
  security

  describe 'Auth examples API' do 
    path '/auth-tests/basic-and-api-key' do
      post 'Authenticates with basic auth and api key' do
        tags 'Auth Tests'
        operationId 'testBasicAndApiKey'
        security [{ basic_auth: [], api_key: [] }]

        response '204', 'Valid credentials' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('jsmith:jspass')}" }
          let(:api_key) { 'foobar' }
          run_test!
        end

        response '401', 'Invalid credentials' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('jsmith:jspass')}" }
          let(:api_key) { 'barfoo' }
          run_test!
        end
      end
    end
  end
   

  ```


  __NOTE:__ Depending on the scheme types, you'll be required to assign a
  corresponding parameter value with each example. 

  For example, :basic auth is required above and so the :Authorization (header)
  parameter must be set accordingly


  ## Configuration & Customization ##


  The steps described above will get you up and running with minimal setup.
  However, rswag offers a lot of flexibility to customize as you see fit. Before
  exploring the various options, you'll need to be aware of it's different
  components. The following table lists each of them and the files that get
  added/updated as part of a standard install.


  |Gem|Description|Added/Updated|

  |---------|-----------|-------------|

  |__rswag-specs__|Swagger-based DSL for rspec & accompanying rake task for
  generating Swagger files|_spec/swagger_helper.rb_|

  |__rswag-api__  |Rails Engine that exposes your Swagger files as JSON
  endpoints|_config/initializers/rswag_api.rb, config/routes.rb_|

  |__rswag-ui__   |Rails Engine that includes
  [swagger-ui](https://github.com/swagger-api/swagger-ui) and powers it from
  your Swagger endpoints|_config/initializers/rswag-ui.rb, config/routes.rb_|


  ### Output Location for Generated Swagger Files ###


  You can adjust this in the _swagger_helper.rb_ that's installed with
  __rswag-specs__:


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/your-custom-folder-name'
    ...
  end

  ```


  __NOTE__: If you do change this, you'll also need to update the rswag_api.rb
  initializer (assuming you're using rswag-api). More on this later.


  ### Input Location for Rspec Tests ###


  By default, rswag will search for integration tests in _spec/requests_,
  _spec/api_ and _spec/integration_. If you want to use tests from other
  locations, provide the PATTERN argument to rake:


  ```ruby

  # search for tests in spec/swagger

  rake rswag:specs:swaggerize PATTERN="spec/swagger/**/*_spec.rb"

  ```


  ### Referenced Parameters and Schema Definitions ###


  Swagger allows you to describe JSON structures inline with your operation
  descriptions OR as referenced globals. 

  For example, you might have a standard response structure for all failed
  operations.

  Again, this is a structure that changed since swagger 2.0. Notice the new
  "schemas" section for these. 

  Rather than repeating the schema in every operation spec, you can define it
  globally and provide a reference to it in each spec:


  ```ruby

  # spec/swagger_helper.rb

  config.swagger_docs = {
    'v1/swagger.json' => {
      openapi: '3.0.0',
      info: {
        title: 'API V1'
      },
      components: {
        schemas: {
          errors_object: {
            type: 'object',
            properties: {
              errors: { '$ref' => '#/components/schemas/errors_map' }
            }
          },
          errors_map: {
            type: 'object',
            additionalProperties: {
              type: 'array',
              items: { type: 'string' }
            }
          },
          blog: {
            type: 'object',
            properties: {
              id: { type: 'integer' },
              title: { type: 'string' },
              content: { type: 'string', nullable: true },
              thumbnail: { type: 'string', nullable: true }
            },
            required: %w[id title]
          }
        }
      }
    }
  }


  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs' do

      post 'Creates a blog' do

        response 422, 'invalid request' do
          schema '$ref' => '#/components/schemas/errors_object'
    ...
  end


  # spec/integration/comments_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}/comments' do

      post 'Creates a comment' do

        response 422, 'invalid request' do
          schema '$ref' => '#/components/schemas/errors_object'
    ...
  end

  ```


  ### Response headers ###


  In Rswag, you could use `header` method inside the response block to specify
  header objects for this response. 

  Rswag will validate your response headers with those header objects and inject
  them into the generated swagger file:


  ```ruby

  # spec/integration/comments_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}/comments' do

      post 'Creates a comment' do

        response 422, 'invalid request' do
          header 'X-Rate-Limit-Limit', type: :integer, description: 'The number of allowed requests in the current period'
          header 'X-Rate-Limit-Remaining', type: :integer, description: 'The number of remaining requests in the current period'
    ...
  end

  ```


  ### Response examples ###


  You can provide custom response examples to the generated swagger file by
  calling the method `examples` inside the response block:

  However, auto generated example responses are now enabled by default in rswag.
  See below.

  ```ruby

  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}' do

      get 'Retrieves a blog' do

        response 200, 'blog found' do
          examples 'application/json' => {
              id: 1,
              title: 'Hello world!',
              content: '...'
            }
    ...
  end

  ```



  ### Enable auto generation examples from responses ###



  To enable examples generation from responses add callback above run_test!
  like:


  ```

  after do |example|
    example.metadata[:response][:examples] = { 'application/json' => JSON.parse(response.body, symbolize_names: true) }
  end

  ```


  You need to disable --dry-run option for Rspec > 3


  <!-- This is now enabled by default in rswag. 

  You need to set the ``` config.swagger_dry_run = false``` value in the
  spec/spec_helper.rb file.

  This is one of the more powerful features of rswag. When rswag runs your
  integration test suite via ```bundle exec rspec```, it will capture the
  request and response bodies and output those values in the examples section.

  These integration tests are usually written with ```let``` variables for post
  body parameters, and since its an integration test the service is returning
  actual values. 

  We might as well re-use these values and embed them into the generated swagger
  to provide a more real world example for request/response examples. -->


  Add to config/environments/test.rb:

  ```ruby

  RSpec.configure do |config|
    config.swagger_dry_run = false
  end

  ```


  #### Running tests without documenting ####


  If you want to use Rswag for testing without adding it to you swagger docs,
  you can provide the document tag:

  ```ruby

  describe 'Blogs API' do
    path '/blogs/{blog_id}' do
      get 'Retrieves a blog' do
        # documentation is now disabled for this response only
        response 200, 'blog found', document: false do
          ...
  ```


  You can also reenable documentation for specific responses only:

  ```ruby

  # documentation is now disabled

  describe 'Blogs API', document: false do
    path '/blogs/{blog_id}' do
      get 'Retrieves a blog' do
        # documentation is reenabled for this response only
        response 200, 'blog found', document: true do
          ...
        end

        response 401, 'special case' do
          ...
        end
  ```


  ##### rswag helper methods #####

  <!-- 

  There are some helper methods to help with documenting request bodies. 

  ```ruby

  describe 'Blogs API', type: :request, swagger_doc: 'v1/swagger.json' do
    let(:api_key) { 'fake_key' }

    path '/blogs' do
      post 'Creates a blog' do
        tags 'Blogs'
        description 'Creates a new blog from provided data'
        operationId 'createBlog'
        consumes 'application/json'
        produces 'application/json'

        request_body_json schema: { '$ref' => '#/components/schemas/blog' },
                          examples: :blog

        request_body_text_plain
        request_body_xml schema: { '$ref' => '#/components/schemas/blog' }

        let(:blog) { { blog: { title: 'foo', content: 'bar' } } }

        response '201', 'blog created' do
          schema '$ref' => '#/components/schemas/blog'
          run_test!
        end

        response '422', 'invalid request' do
          schema '$ref' => '#/components/schemas/errors_object'
          let(:blog) { { blog: { title: 'foo' } } }

          run_test! do |response|
            expect(response.body).to include("can't be blank")
          end
        end
      end
    end
  end    

  ```


  In the above example, we see methods ```request_body_json```
  ```request_body_plain``` ```request_body_xml```.

  These methods can be used to describe json, plain text and xml body. They are
  just wrapper methods to setup posting JSON, plain text or xml into your
  endpoint.

  The simplest most common usage is for json formatted body to use the schema:
  to specify the location of the schema for the request body

  and the examples: :blog which will create a named example "blog" under the
  "requestBody / content / application/json / examples" section.

  Again, documenting request response examples changed in Open API 3.0. The
  example above would generate a swagger.json snippet that looks like this:


  ```json
          ... 
          {"requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "examples": {
                  "blog": {  // takes the name from  examples: :blog above
                    "value": {  //this is open api 3.0 structure -> https://swagger.io/docs/specification/adding-examples/
                      "blog": { // here is the actual JSON payload that is submitted to the service, and shows up in swagger UI as an example
                        "title": "foo",
                        "content": "bar"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              },
              "test/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              }
            }
          },
          }
  ```


  *NOTE:* for this example request body to work in the tests properly, you need
  to ``let`` a variable named *blog*. 

  The variable with the matching name (blog in this case) is eval-ed and
  captured to be placed in the examples section.

  This ```let``` value is used in the integration test to run the test AND
  captured and injected into the requestBody section. 


  ##### rswag response examples #####


  In the same way that requestBody examples can be captured and injected into
  the swagger output, response examples can also be captured.

  Using the above example, when the integration test is run - the swagger would
  include the following snippet providing more useful real world examples

  capturing the response from the execution of the integration test. Again 3.0
  swagger changed the structure of how these are documented.


  ```json
         ...  "responses": {
            "201": {
              "description": "blog created",
              "content": {
                "application/json": {
                  "example": {
                    "id": 1,
                    "title": "foo",
                    "content": "bar",
                    "thumbnail": null
                  },
                  "schema": {
                    "$ref": "#/components/schemas/blog"
                  }
                }
              }
            },
            "422": {
              "description": "invalid request",
              "content": {
                "application/json": {
                  "example": {
                    "errors": {
                      "content": [
                        "can't be blank"
                      ]
                    }
                  },
                  "schema": {
                    "$ref": "#/components/schemas/errors_object"
                  }
                }
              }
            }
          }
  ```
   -->
  ### Route Prefix for Swagger JSON Endpoints ###


  The functionality to expose Swagger files, such as those generated by
  rswag-specs, as JSON endpoints is implemented as a Rails Engine. As with any
  Engine, you can change it's mount prefix in _routes.rb_:


  ```ruby

  TestApp::Application.routes.draw do
    ...

    mount Rswag::Api::Engine => 'your-custom-prefix'
  end

  ```


  Assuming a Swagger file exists at &lt;swagger_root&gt;/v1/swagger.json, this
  configuration would expose the file as the following JSON endpoint:


  ```

  GET http://<hostname>/your-custom-prefix/v1/swagger.json

  ```


  ### Root Location for Swagger Files ###


  You can adjust this in the _rswag_api.rb_ initializer that's installed with
  __rspec-api__:


  ```ruby

  Rswag::Api.configure do |c|
    c.swagger_root = Rails.root.to_s + '/your-custom-folder-name'
    ...
  end

  ```


  __NOTE__: If you're using rswag-specs to generate Swagger files, you'll want
  to ensure they both use the same &lt;swagger_root&gt;. The reason for separate
  settings is to maintain independence between the two gems. For example, you
  could install rswag-api independently and create your Swagger files manually.


  ### Dynamic Values for Swagger JSON ##


  There may be cases where you need to add dynamic values to the Swagger JSON
  that's returned by rswag-api. For example, you may want to provide an explicit
  host name. Rather than hardcoding it, you can configure a filter that's
  executed prior to serializing every Swagger document:


  ```ruby

  Rswag::Api.configure do |c|
    ...

    c.swagger_filter = lambda { |swagger, env| swagger['host'] = env['HTTP_HOST'] }
  end

  ```


  Note how the filter is passed the rack env for the current request. This
  provides a lot of flexibilty. For example, you can assign the "host" property
  (as shown) or you could inspect session information or an Authorization header
  and remove operations based on user permissions.


  ### Custom Headers for Swagger Files ###


  You can specify custom headers for serving your generated Swagger JSON. For
  example you may want to force a specific charset for the 'Content-Type'
  header. You can configure a hash of headers to be sent with the request:


  ```ruby

  Rswag::Api.configure do |c|
    ...
    
    c.swagger_headers = { 'Content-Type' => 'application/json; charset=UTF-8' }
  end

  ```


  Take care when overriding Content-Type if you serve both YAML and JSON files
  as it will no longer switch the Content-Type header correctly.



  ### Enable Swagger Endpoints for swagger-ui ###


  You can update the _rswag-ui.rb_ initializer, installed with rswag-ui, to
  specify which Swagger endpoints should be available to power the documentation
  UI. If you're using rswag-api, these should correspond to the Swagger
  endpoints it exposes. When the UI is rendered, you'll see these listed in a
  drop-down to the top right of the page:


  ```ruby

  Rswag::Ui.configure do |c|
    c.swagger_endpoint '/api-docs/v1/swagger.json', 'API V1 Docs'
    c.swagger_endpoint '/api-docs/v2/swagger.json', 'API V2 Docs'
  end

  ```


  ### Enable Simple Basic Auth for swagger-ui


  You can also update the _rswag-ui.rb_ initializer, installed with rswag-ui to
  specify a username and password should you want to keep your documentation
  private.


  ```ruby

  Rswag::Ui.configure do |c|
    c.basic_auth_enabled = true
    c.basic_auth_credentials 'username', 'password'
  end

  ```


  ### Route Prefix for the swagger-ui ###


  Similar to rswag-api, you can customize the swagger-ui path by changing it's
  mount prefix in _routes.rb_:


  ```ruby

  TestApp::Application.routes.draw do
    ...

    mount Rswag::Api::Engine => 'api-docs'
    mount Rswag::Ui::Engine => 'your-custom-prefix'
  end

  ```


  ### Customizing the swagger-ui ###


  The swagger-ui provides several options for customizing it's behavior, all of
  which are documented here
  https://github.com/swagger-api/swagger-ui/tree/2.x#swaggerui. If you need to
  tweak these or customize the overall look and feel of your swagger-ui, then
  you'll need to provide your own version of index.html. You can do this with
  the following generator.


  ```ruby

  rails g rswag:ui:custom


  ```


  This will add a local version that you can modify at
  _app/views/rswag/ui/home/index.html.erb_


  ### Serve UI Assets Directly from your Web Server


  Rswag ships with an embedded version of the
  [swagger-ui](https://github.com/swagger-api/swagger-ui), which is a static
  collection of JavaScript and CSS files. These assets are served by the
  rswag-ui middleware. However, for optimal performance you may want to serve
  them directly from your web server (e.g. Apache or NGINX). To do this, you'll
  need to copy them to the web server root. This is the "public" folder in a
  typical Rails application.


  ```

  bundle exec rake rswag:ui:copy_assets[public/api-docs]

  ```


  __NOTE:__: The provided subfolder MUST correspond to the UI mount prefix -
  "api-docs" by default.



  Notes to test swagger output locally with swagger editor

  ```

  docker pull swaggerapi/swagger-editor

  ```

  ```

  docker run -d -p 80:8080 swaggerapi/swagger-editor

  ```

  This will run the swagger editor in the docker daemon and can be accessed 

  at ```http://localhost```. From here, you can use the UI to load the generated
  swagger.json to validate the output.

drewish/rspec-rails-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2811:342B:AF9253D:110A79B2:66148B7E.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
zalando/connexion: >-
  {"message":"API rate limit exceeded for 40.122.242.104. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more
  details.)","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
rochacbruno/flasgger: >+
  # Flasgger

  ## Easy Swagger UI for your Flask API


  [![Build
  Status](https://travis-ci.com/flasgger/flasgger.svg?branch=master)](https://travis-ci.com/flasgger/flasgger)

  [![Code
  Health](https://landscape.io/github/rochacbruno/flasgger/master/landscape.svg?style=flat)](https://landscape.io/github/rochacbruno/flasgger/master)

  [![Coverage
  Status](https://coveralls.io/repos/github/rochacbruno/flasgger/badge.svg?branch=master)](https://coveralls.io/github/rochacbruno/flasgger?branch=master)

  [![PyPI](https://img.shields.io/pypi/v/flasgger.svg)](https://pypi.python.org/pypi/flasgger)
   <a target="_blank" href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=rochacbruno%40gmail%2ecom&amp;lc=BR&amp;item_name=Flasgger&amp;no_note=0&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHostedGuest"><img alt='Donate with Paypal' src='http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif' /></a>


  ![flasgger](docs/flasgger.png)


  Flasgger is a Flask extension to **extract
  [OpenAPI-Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)**
  from all Flask views registered in your API.


  Flasgger also comes with **[SwaggerUI](http://swagger.io/swagger-ui/)
  embedded** so you can access
  [http://localhost:5000/apidocs](localhost:5000/apidocs) and visualize and
  interact with your API resources.


  Flasgger also **provides validation** of the incoming data, using the same
  specification it can validates if the data received as as a POST, PUT, PATCH
  is valid against the schema defined using **YAML**, **Python dictionaries** or
  **Marshmallow Schemas**.


  Flasgger can work with simple function views or MethodViews using docstring as
  specification, or using `@swag_from` decorator to get specification from
  **YAML** or **dict** and also provides **SwaggerView** which can use
  **Marshmallow Schemas**  as specification.


  Flasgger is compatible with `Flask-RESTful` so you can use `Resources` and
  `swag` specifications together, take a look at [restful
  example.](examples/restful.py)


  Flasgger also supports `Marshmallow APISpec` as base template for
  specification, if you are using APISPec from Marshmallow take a look at
  [apispec example.](examples/apispec_example.py)


  # Top Contributors


  [![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/0)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/0)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/1)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/1)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/2)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/2)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/3)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/3)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/4)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/4)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/5)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/5)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/6)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/6)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/7)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/7)


  # Examples and demo app


  There are some [example applications](examples/) and you can also play with
  examples in [Flasgger demo app](http://flasgger.pythonanywhere.com/)


  > NOTE: all the examples apps are also test cases and run automatically in
  Travis CI to ensure quality and coverage.


  ## Docker


  The examples and demo app can also be built and run as a Docker
  image/container:


  ```

  docker build -t flasgger .

  docker run -it --rm -p 5000:5000 --name flasgger flasgger

  ```

  Then access the Flasgger demo app at http://localhost:5000 .


  # Installation


  > under your virtualenv do:


  Ensure you have latest setuptools

  ```

  pip install -U setuptools

  ```


  then


  ```

  pip install flasgger

  ```


  or (dev version)


  ```

  pip install https://github.com/rochacbruno/flasgger/tarball/master

  ```


  > NOTE: If you want to use **Marshmallow Schemas** you also need to run `pip
  install marshmallow apispec`


  # Getting started


  ## Using docstrings as specification


  Create a file called for example `colors.py`


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger


  app = Flask(__name__)

  swagger = Swagger(app)


  @app.route('/colors/<palette>/')

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      This is using docstrings for specifications.
      ---
      parameters:
        - name: palette
          in: path
          type: string
          enum: ['all', 'rgb', 'cmyk']
          required: true
          default: all
      definitions:
        Palette:
          type: object
          properties:
            palette_name:
              type: array
              items:
                $ref: '#/definitions/Color'
        Color:
          type: string
      responses:
        200:
          description: A list of colors (may be filtered by palette)
          schema:
            $ref: '#/definitions/Palette'
          examples:
            rgb: ['red', 'green', 'blue']
      """
      all_colors = {
          'cmyk': ['cian', 'magenta', 'yellow', 'black'],
          'rgb': ['red', 'green', 'blue']
      }
      if palette == 'all':
          result = all_colors
      else:
          result = {palette: all_colors.get(palette)}

      return jsonify(result)

  app.run(debug=True)

  ```


  Now run:


  ```

  python colors.py

  ```


  And go to: [http://localhost:5000/apidocs/](http://localhost:5000/apidocs/)


  You should get:


  ![colors](docs/colors.png)


  ## Using external YAML files


  Save a new file `colors.yml`


  ```yaml

  Example endpoint returning a list of colors by palette

  In this example the specification is taken from external YAML file

  ---

  parameters:
    - name: palette
      in: path
      type: string
      enum: ['all', 'rgb', 'cmyk']
      required: true
      default: all
  definitions:
    Palette:
      type: object
      properties:
        palette_name:
          type: array
          items:
            $ref: '#/definitions/Color'
    Color:
      type: string
  responses:
    200:
      description: A list of colors (may be filtered by palette)
      schema:
        $ref: '#/definitions/Palette'
      examples:
        rgb: ['red', 'green', 'blue']
  ```



  lets use the same example changing only the view function.


  ```python

  from flasgger import swag_from


  @app.route('/colors/<palette>/')

  @swag_from('colors.yml')

  def colors(palette):
      ...
  ```


  If you do not want to use the decorator you can use the docstring `file:`
  shortcut.


  ```python

  @app.route('/colors/<palette>/')

  def colors(palette):
      """
      file: colors.yml
      """
      ...
  ```



  ## Using dictionaries as raw specs


  Create a Python dictionary as:


  ```python

  specs_dict = {
    "parameters": [
      {
        "name": "palette",
        "in": "path",
        "type": "string",
        "enum": [
          "all",
          "rgb",
          "cmyk"
        ],
        "required": "true",
        "default": "all"
      }
    ],
    "definitions": {
      "Palette": {
        "type": "object",
        "properties": {
          "palette_name": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Color"
            }
          }
        }
      },
      "Color": {
        "type": "string"
      }
    },
    "responses": {
      "200": {
        "description": "A list of colors (may be filtered by palette)",
        "schema": {
          "$ref": "#/definitions/Palette"
        },
        "examples": {
          "rgb": [
            "red",
            "green",
            "blue"
          ]
        }
      }
    }
  }

  ```


  Now take the same function and use the dict in the place of YAML file.


  ```python

  @app.route('/colors/<palette>/')

  @swag_from(specs_dict)

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      In this example the specification is taken from specs_dict
      """
      ...
  ```


  ## Using Marshmallow Schemas


  > FIRST: `pip install marshmallow apispec`


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger, SwaggerView, Schema, fields



  class Color(Schema):
      name = fields.Str()

  class Palette(Schema):
      pallete_name = fields.Str()
      colors = fields.Nested(Color, many=True)

  class PaletteView(SwaggerView):
      parameters = [
          {
              "name": "palette",
              "in": "path",
              "type": "string",
              "enum": ["all", "rgb", "cmyk"],
              "required": True,
              "default": "all"
          }
      ]
      responses = {
          200: {
              "description": "A list of colors (may be filtered by palette)",
              "schema": Palette
          }
      }

      def get(self, palette):
          """
          Colors API using schema
          This example is using marshmallow schemas
          """
          all_colors = {
              'cmyk': ['cian', 'magenta', 'yellow', 'black'],
              'rgb': ['red', 'green', 'blue']
          }
          if palette == 'all':
              result = all_colors
          else:
              result = {palette: all_colors.get(palette)}
          return jsonify(result)

  app = Flask(__name__)

  swagger = Swagger(app)


  app.add_url_rule(
      '/colors/<palette>',
      view_func=PaletteView.as_view('colors'),
      methods=['GET']
  )


  app.run(debug=True)


  ```


  > NOTE: take a look at `examples/validation.py` for a more complete example.



  > NOTE: when catching arguments in path rule always use explicit types, bad:
  ``/api/<username>`` good: ``/api/<string:username>``



  ## Using **Flask RESTful** Resources


  Flasgger is compatible with Flask-RESTful you only need to install `pip
  install flask-restful` and then:


  ```python


  from flask import Flask

  from flasgger import Swagger

  from flask_restful import Api, Resource


  app = Flask(__name__)

  api = Api(app)

  swagger = Swagger(app)


  class Username(Resource):
      def get(self, username):
         """
         This examples uses FlaskRESTful Resource
         It works also with swag_from, schemas and spec_dict
         ---
         parameters:
           - in: path
             name: username
             type: string
             required: true
         responses:
           200:
             description: A single user item
             schema:
               id: User
               properties:
                 username:
                   type: string
                   description: The name of the user
                   default: Steven Wilson
          """
          return {'username': username}, 200


  api.add_resource(Username, '/username/<username>')


  app.run(debug=True)


  ```


  ## Auto-parsing external YAML docs and `MethodView`s


  Flasgger can be configured to auto-parse external YAML API docs.  [Set a
  `doc_dir`](https://github.com/rochacbruno/flasgger/blob/aaef05c17cc559d01b7436211093463642eb6ae2/examples/parsed_view_func.py#L16)
  in your `app.config['SWAGGER']` and Swagger will load API docs by looking in
  `doc_dir` for YAML files stored by endpoint-name and method-name.  For
  example, `'doc_dir': './examples/docs/'` and a file
  `./examples/docs/items/get.yml` will provide a Swagger doc for `ItemsView`
  method `get`.


  Additionally, when using **Flask RESTful** per above, by passing `parse=True`
  when constructing `Swagger`, Flasgger will use 
  `flask_restful.reqparse.RequestParser`, locate all `MethodView`s and parsed
  and validated data will be stored in `flask.request.parsed_data`.


  ## Handling multiple http methods and routes for a single function


  You can separate specifications by endpoint or methods


  ```python

  from flasgger.utils import swag_from


  @app.route('/api/<string:username>', endpoint='with_user_name',
  methods=['PUT', 'GET'])

  @app.route('/api/', endpoint='without_user_name')

  @swag_from('path/to/external_file.yml', endpoint='with_user_name')

  @swag_from('path/to/external_file_no_user_get.yml',
  endpoint='without_user_name', methods=['GET'])

  @swag_from('path/to/external_file_no_user_put.yml',
  endpoint='without_user_name', methods=['PUT'])

  def fromfile_decorated(username=None):
      if not username:
          return "No user!"
      return jsonify({'username': username})
  ```


  And the same can be achieved with multiple methods in a `MethodView` or
  `SwaggerView` by

  registering the `url_rule` many times. Take a look at `examples/example_app`



  # Use the same data to validate your API POST body.


  Setting `swag_from`'s _validation_ parameter to `True` will validate incoming
  data automatically:


  ```python

  from flasgger import swag_from


  @swag_from('defs.yml', validation=True)

  def post():
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  Using `swagger.validate` annotation is also possible:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('UserSchema')

  def post():
      '''
      file: defs.yml
      '''
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  Yet you can call `validate` manually:


  ```python

  from flasgger import swag_from, validate


  @swag_from('defs.yml')

  def post():
      validate(request.json, 'UserSchema', 'defs.yml')
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  It is also possible to define `validation=True` in `SwaggerView` and also use

  `specs_dict` for validation.


  Take a look at `examples/validation.py` for more information.


  All validation options can be found at
  http://json-schema.org/latest/json-schema-validation.html


  ### Custom validation


  By default Flasgger will use
  [python-jsonschema](https://python-jsonschema.readthedocs.io/en/latest/)

  to perform validation.


  Custom validation functions are supported as long as they meet the
  requirements:
   - take two, and only two, positional arguments:
      - the data to be validated as the first; and
      - the schema to validate against as the second argument
   - raise any kind of exception when validation fails.

  Any return value is discarded.



  Providing the function to the Swagger instance will make it the default:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app, validation_function=my_validation_function)

  ```


  Providing the function as parameter of `swag_from` or `swagger.validate`

  annotations or directly to the `validate` function will force it's use

  over the default validation function for Swagger:


  ```python

  from flasgger import swag_from


  @swag_from('spec.yml', validation=True, validation_function=my_function)

  ...

  ```


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('Pet', validation_function=my_function)

  ...

  ```


  ```python

  from flasgger import validate


  ...

      validate(
          request.json, 'Pet', 'defs.yml', validation_function=my_function)
  ```


  ### Validation Error handling


  By default Flasgger will handle validation errors by aborting the

  request with a 400 BAD REQUEST response with the error message.


  A custom validation error handling function can be provided to

  supersede default behavior as long as it meets the requirements:
   - take three, and only three, positional arguments:
      - the error raised as the first;
      - the data which failed validation as the second; and
      - the schema used in to validate as the third argument


  Providing the function to the Swagger instance will make it the default:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app, validation_error_handler=my_handler)

  ```


  Providing the function as parameter of `swag_from` or `swagger.validate`

  annotations or directly to the `validate` function will force it's use

  over the default validation function for Swagger:


  ```python

  from flasgger import swag_from


  @swag_from(
      'spec.yml', validation=True, validation_error_handler=my_handler)
  ...

  ```


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('Pet', validation_error_handler=my_handler)

  ...

  ```


  ```python

  from flasgger import validate


  ...

      validate(
          request.json, 'Pet', 'defs.yml',
          validation_error_handler=my_handler)
  ```


  Examples of use of a custom validation error handler function can be

  found at [example
  validation_error_handler.py](examples/validation_error_handler.py)


  # Get defined schemas as python dictionaries


  You may wish to use schemas you defined in your Swagger specs as dictionaries

  without replicating the specification. For that you can use the `get_schema`

  method:


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger, swag_from


  app = Flask(__name__)

  swagger = Swagger(app)


  @swagger.validate('Product')

  def post():
      """
      post endpoint
      ---
      tags:
        - products
      parameters:
        - name: body
          in: body
          required: true
          schema:
            id: Product
            required:
              - name
            properties:
              name:
                type: string
                description: The product's name.
                default: "Guarana"
      responses:
        200:
          description: The product inserted in the database
          schema:
            $ref: '#/definitions/Product'
      """
      rv = db.insert(request.json)
      return jsonify(rv)

  ...


  product_schema = swagger.get_schema('product')

  ```


  This method returns a dictionary which contains the Flasgger schema id,

  all defined parameters and a list of required parameters.


  # HTML sanitizer


  By default Flasgger will try to sanitize the content in YAML definitions

  replacing every ```\n``` with ```<br>``` but you can change this behaviour

  setting another kind of sanitizer.


  ```python

  from flasgger import Swagger, NO_SANITIZER


  app =Flask()

  swagger = Swagger(app, sanitizer=NO_SANITIZER)

  ```


  You can write your own sanitizer


  ```python

  swagger = Swagger(app, sanitizer=lambda text: do_anything_with(text))

  ```


  There is also a Markdown parser available, if you want to be able to render

  Markdown in your specs description use **MK_SANITIZER**



  # Swagger UI and templates


  You can override the `templates/flasgger/index.html` in your application and

  this template will be the `index.html` for SwaggerUI. Use
  `flasgger/ui2/templates/index.html`

  as base for your customization.


  Flasgger supports Swagger UI versions 2 and 3, The version 3 is still
  experimental but you

  can try setting `app.config['SWAGGER']['uiversion']`.


  ```python

  app = Flask(__name__)

  app.config['SWAGGER'] = {
      'title': 'My API',
      'uiversion': 3
  }

  swagger = Swagger(app)


  ```


  # OpenAPI 3.0 Support


  There is experimental support for OpenAPI 3.0 that should work when using
  SwaggerUI 3. To use OpenAPI 3.0, set `app.config['SWAGGER']['openapi']` to a
  version that the current SwaggerUI 3 supports such as `'3.0.2'`.


  For an example of this that uses `callbacks` and `requestBody`, see the
  [callbacks example](examples/callbacks.py).


  ## Externally loading Swagger UI and jQuery JS/CSS


  Starting with Flasgger 0.9.2 you can specify external URL locations for
  loading the JavaScript and CSS for the Swagger and jQuery libraries loaded in
  the Flasgger default templates.  If the configuration properties below are
  omitted, Flasgger will serve static versions it includes - these versions may
  be older than the current Swagger UI v2 or v3 releases.


  The following example loads Swagger UI and jQuery versions from unpkg.com:


  ```

  swagger_config = Swagger.DEFAULT_CONFIG

  swagger_config['swagger_ui_bundle_js'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js'

  swagger_config['swagger_ui_standalone_preset_js'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js'

  swagger_config['jquery_js'] = '//unpkg.com/jquery@2.2.4/dist/jquery.min.js'

  swagger_config['swagger_ui_css'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui.css'

  Swagger(app, config=swagger_config)

  ```


  # Initializing Flasgger with default data.


  You can start your Swagger spec with any default data providing a template:


  ```python

  template = {
    "swagger": "2.0",
    "info": {
      "title": "My API",
      "description": "API for my data",
      "contact": {
        "responsibleOrganization": "ME",
        "responsibleDeveloper": "Me",
        "email": "me@me.com",
        "url": "www.me.com",
      },
      "termsOfService": "http://me.com/terms",
      "version": "0.0.1"
    },
    "host": "mysite.com",  # overrides localhost:500
    "basePath": "/api",  # base bash for blueprint registration
    "schemes": [
      "http",
      "https"
    ],
    "operationId": "getmyData"
  }


  swagger = Swagger(app, template=template)


  ```


  And then the template is the default data unless some view changes it. You

  can also provide all your specs as template and have no views. Or views in

  external APP.


  ## Getting default data at runtime


  Sometimes you need to get some data at runtime depending on dynamic values ex:
  you want to check `request.is_secure` to decide if `schemes` will be `https`
  you can do that by using `LazyString`.


  ```py

  from flask import Flask

  from flasgger import, Swagger, LazyString, LazyJSONEncoder


  app = Flask(__init__)


  # Set the custom Encoder (Inherit it if you need to customize)

  app.json_encoder = LazyJSONEncoder



  template = dict(
      info={
          'title': LazyString(lambda: 'Lazy Title'),
          'version': LazyString(lambda: '99.9.9'),
          'description': LazyString(lambda: 'Hello Lazy World'),
          'termsOfService': LazyString(lambda: '/there_is_no_tos')
      },
      host=LazyString(lambda: request.host),
      schemes=[LazyString(lambda: 'https' if request.is_secure else 'http')],
      foo=LazyString(lambda: "Bar")
  )

  Swagger(app, template=template)


  ```


  The `LazyString` values will be evaluated only when `jsonify` encodes the
  value at runtime, so you have access to Flask `request, session, g, etc..` and
  also may want to access a database.


  ## Behind a reverse proxy


  Sometimes you're serving your swagger docs behind an reverse proxy (e.g.
  NGINX).  When following the [Flask
  guidance](http://flask.pocoo.org/snippets/35/),

  the swagger docs will load correctly, but the "Try it Out" button points to
  the wrong place.  This can be fixed with the following code:


  ```python

  from flask import Flask, request

  from flasgger import Swagger, LazyString, LazyJSONEncoder


  app = Flask(__name__)

  app.json_encoder = LazyJSONEncoder


  template = dict(swaggerUiPrefix=LazyString(lambda :
  request.environ.get('HTTP_X_SCRIPT_NAME', '')))

  swagger = Swagger(app, template=template)


  ``` 


  # Customize default configurations


  Custom configurations such as a different specs route or disabling Swagger UI
  can be provided to Flasgger:


  ```python

  swagger_config = {
      "headers": [
      ],
      "specs": [
          {
              "endpoint": 'apispec_1',
              "route": '/apispec_1.json',
              "rule_filter": lambda rule: True,  # all in
              "model_filter": lambda tag: True,  # all in
          }
      ],
      "static_url_path": "/flasgger_static",
      # "static_folder": "static",  # must be set by user
      "swagger_ui": True,
      "specs_route": "/apidocs/"
  }


  swagger = Swagger(app, config=swagger_config)


  ```


  ## Extracting Definitions


  Definitions can be extracted when `id` is found in spec, example:


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger


  app = Flask(__name__)

  swagger = Swagger(app)


  @app.route('/colors/<palette>/')

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      ---
      parameters:
        - name: palette
          in: path
          type: string
          enum: ['all', 'rgb', 'cmyk']
          required: true
          default: all
      responses:
        200:
          description: A list of colors (may be filtered by palette)
          schema:
            id: Palette
            type: object
            properties:
              palette_name:
                type: array
                items:
                  schema:
                    id: Color
                    type: string
          examples:
            rgb: ['red', 'green', 'blue']
      """
      all_colors = {
          'cmyk': ['cian', 'magenta', 'yellow', 'black'],
          'rgb': ['red', 'green', 'blue']
      }
      if palette == 'all':
          result = all_colors
      else:
          result = {palette: all_colors.get(palette)}

      return jsonify(result)

  app.run(debug=True)

  ```


  In this example you do not have to pass `definitions` but need to add `id` to

  your schemas.

fotinakis/swagger-blocks: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:23D7A14:3964210:66148C9B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
westfieldlabs/apivore: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:27DEDD:AB2DAA0:10ABDB2A:661494D6.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
slanatech/swagger-stats: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B7D6368:11D74099:661491C5.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
notonthehighstreet/svelte: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2815:1319AB:B28DC77:1169D154:66148F47.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
domaindrivendev/Swashbuckle.AspNetCore: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280D:267BEE:ACD0216:10CB933D:66148B7C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
z0mt3c/hapi-swaggered: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:255BAEA:3BABD22:66149578.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
jfinkhaeuser/prance: >+
  |Posix Build Status| |Windows Build Status| |Docs| |License|

  |PyPI| |Python Versions| |Package Format| |Package Status| |FOSSA Status|
  |Liberapay|


  |Logo|


  Prance provides parsers for `Swagger/OpenAPI

  2.0 and 3.0 <http://swagger.io/specification/>`__ API specifications in
  Python.

  It uses `openapi\_spec\_validator
  <https://github.com/p1c2u/openapi-spec-validator>`__,

  `swagger\_spec\_validator <https://github.com/Yelp/swagger_spec_validator>`__
  or

  `flex <https://github.com/pipermerriam/flex>`__

  to validate specifications, but additionally resolves `JSON

  references <https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03>`__

  in accordance with the OpenAPI spec.


  Mostly the latter involves handling non-URI references; OpenAPI is fine

  with providing relative file paths, whereas JSON references require URIs

  at this point in time.


  Prance is `up for adoption
  <https://github.com/jfinkhaeuser/prance/issues/91>`__.


  Usage

  =====


  Installation

  ------------


  Prance is available from PyPI, and can be installed via pip:


  .. code:: bash

      $ pip install prance

  Note that this will install the code, but additional subpackages must be
  specified

  to unlock various pieces of functionality. At minimum, a parsing backend must
  be

  installed. For the CLI functionality, you need further dependencies.


  The recommended installation installs the CLI, uses ICU and installs one
  validation

  backend:


  .. code:: bash

      $ pip install prance[osv,icu,cli]

  Make sure you have `ICU Unicode Library <http://site.icu-project.org/home>`__
  installed,

  as well as Python dev library before running the commands above. If not, use
  the

  following commands:


  **Ubuntu**


  .. code:: bash

      $ sudo apt-get install libicu-dev
      $ sudo apt-get install python3-dev


  Command Line Interface

  ----------------------


  After installing prance, a CLI is available for validating (and resolving

  external references in) specs:


  .. code:: bash

      # Validates with resolving
      $ prance validate path/to/swagger.yml

      # Validates without resolving
      $ prance validate --no-resolve path/to/swagger.yml

      # Fetch URL, validate and resolve.
      $ prance validate http://petstore.swagger.io/v2/swagger.json
      Processing "http://petstore.swagger.io/v2/swagger.json"...
       -> Resolving external references.
      Validates OK as Swagger/OpenAPI 2.0!

  Validation is not the only feature of prance. One of the side effects of

  resolving is that from a spec with references, one can create a fully resolved

  output spec. In the past, this was done via options to the ``validate``
  command,

  but now there's a specific command just for this purpose:


  .. code:: bash

      # Compile spec
      $ prance compile path/to/input.yml path/to/output.yml


  Lastly, with the arrival of OpenAPI 3.0.0, it becomes useful for tooling to

  convert older specs to the new standard. Instead of re-inventing the wheel,

  prance just provides a CLI command for passing specs to the web API of

  `swagger2openapi <https://github.com/Mermade/swagger2openapi>`__ - a working

  internet connection is therefore required for this command:


  .. code:: bash

      # Convert spec
      $ prance convert path/to/swagger.yml path/to/openapi.yml


  Code

  ----


  Most likely you have spec file and want to parse it:


  .. code:: python

      from prance import ResolvingParser
      parser = ResolvingParser('path/to/my/swagger.yaml')
      parser.specification  # contains fully resolved specs as a dict

  Prance also includes a non-resolving parser that does not follow JSON

  references, in case you prefer that.


  .. code:: python

      from prance import BaseParser
      parser = BaseParser('path/to/my/swagger.yaml')
      parser.specification  # contains specs as a dict still containing JSON references

  On Windows, the code reacts correctly if you pass posix-like paths

  (``/c:/swagger``) or if the path is relative.  If you pass absolute

  windows path (like ``c:\swagger.yaml``), you can use

  ``prance.util.fs.abspath`` to convert them.


  URLs can also be parsed:


  .. code:: python

      parser = ResolvingParser('http://petstore.swagger.io/v2/swagger.json')

  Largely, that's it. There is a whole slew of utility code that you may

  or may not find useful, too. Look at the `full documentation

  <https://jfinkhaeuser.github.io/prance/#api-modules>`__ for details.



  Compatibility

  -------------


  *Python Versions*


  Version 0.16.2 is the last version supporting Python 2. It was released on

  Nov 12th, 2019. Python 2 reaches end of life at the end of 2019. If you wish

  for updates to the Python 2 supported packages, please contact the maintainer

  directly.


  Until fairly recently, we also tested with `PyPy <https://www.pypy.org/>`__.

  Unfortunately, Travis isn't very good at supporting this. So in the absence

  of spare time, they're disabled. `Issue 50
  <https://github.com/jfinkhaeuser/prance/issues/50>`__

  tracks progress on that.


  Similarly, but less critically, Python 3.4 is no longer receiving a lot of

  love from CI vendors, so automated builds on that version are no longer

  supported.


  *Backends*


  Different validation backends support different features.


  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | Backend                | Python Version | OpenAPI Version | Strict Mode |
  Notes                                                 | Available From |
  Link                                                                             
  |

  +========================+================+=================+=============+=======================================================+================+===================================================================================+

  | swagger-spec-validator | 2 and 3        | 2.0 only        | yes         |
  Slow; does not accept integer keys (see strict mode). | prance 0.1     |
  `swagger\_spec\_validator
  <https://github.com/Yelp/swagger_spec_validator>`__     |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | flex                   | 2 and 3        | 2.0 only        | n/a         |
  Fastest; unfortunately deprecated.                    | prance 0.8     | `flex
  <https://github.com/pipermerriam/flex>`__                                   |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | openapi-spec-validator | 2 and 3        | 2.0 and 3.0     | yes         |
  Slow; does not accept integer keys (see strict mode). | prance 0.11    |
  `openapi\_spec\_validator
  <https://github.com/p1c2u/openapi-spec-validator>`__    |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+


  You can select the backend in the constructor of the parser(s):


  .. code:: python

      parser = ResolvingParser('http://petstore.swagger.io/v2/swagger.json', backend = 'openapi-spec-validator')


  No backend is included in the dependencies; they are detected at run-time. If
  you install them,

  they can be used:


  .. code:: bash

      $ pip install openapi-spec-validator
      $ pip install prance
      $ prance validate --backend=openapi-spec-validator path/to/spec.yml

  *A note on flex usage:* While flex is the fastest validation backend,
  unfortunately it is no longer

  maintained and there are issues with its dependencies. For one thing, it
  depends on a version of `PyYAML`

  that contains security flaws. For another, it depends explicitly on older
  versions of `click`.


  If you use the flex subpackage, therefore, you do so at your own risk.


  *Compatibility*


  See `COMPATIBILITY.rst
  <https://github.com/jfinkhaeuser/prance/blob/master/COMPATIBILITY.rst>`__

  for a list of known issues.



  Partial Reference Resolution

  ----------------------------


  It's possible to instruct the parser to only resolve some kinds of references.

  This allows e.g. resolving references from external URLs, whilst keeping local

  references (i.e. to local files, or file internal) intact.


  .. code:: python

      from prance import ResolvingParser
      from prance.util.resolver import RESOLVE_HTTP

      parser = ResolvingParser('/path/to/spec', resolve_types = RESOLVE_HTTP)


  Multiple types can be specified by OR-ing constants together:


  .. code:: python

      from prance import ResolvingParser
      from prance.util.resolver import RESOLVE_HTTP, RESOLVE_FILES

      parser = ResolvingParser('/path/to/spec', resolve_types = RESOLVE_HTTP | RESOLVE_FILES)


  Extensions

  ----------


  Prance includes the ability to reference outside swagger definitions

  in outside Python packages. Such a package must already be importable

  (i.e. installed), and be accessible via the

  `ResourceManager API
  <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#resourcemanager-api>`__

  (some more info `here
  <https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files>`__).


  For example, you might create a package ``common_swag`` with the file

  ``base.yaml`` containing the definition


  .. code:: yaml

      definitions:
        Severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL

  In the ``setup.py`` for ``common_swag`` you would add lines such as


  .. code:: python

      packages=find_packages('src'),
      package_dir={'': 'src'},
      package_data={
          '': '*.yaml'
      }

  Then, having installed ``common_swag`` into some application, you could

  now write


  .. code:: yaml

      definitions:
        Message:
          type: object
          properties:
            severity:
              $ref: 'python://common_swag/base.yaml#/definitions/Severity'
            code:
              type: string
            summary:
              type: string
            description:
              type: string
          required:
          - severity
          - summary

  Contributing

  ============


  See `CONTRIBUTING.md
  <https://github.com/jfinkhaeuser/prance/blob/master/CONTRIBUTING.md>`__ for
  details.


  Professional support is available through `finkhaeuser consulting
  <https://finkhaeuser.de>`__.


  License

  =======


  Licensed under MITNFA (MIT +no-false-attribs) License. See the

  `LICENSE.txt
  <https://github.com/jfinkhaeuser/prance/blob/master/LICENSE.txt>`__ file for
  details.


  "Prancing unicorn" logo image Copyright (c) Jens Finkhaeuser.

  Made by `Moreven B <http://morevenb.com/>`__. Use of the logo is permitted
  under

  the `Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
  license <https://creativecommons.org/licenses/by-nc-sa/4.0/>`__.


  .. |Posix Build Status| image::
  https://travis-ci.org/jfinkhaeuser/prance.svg?branch=master
     :target: https://travis-ci.org/jfinkhaeuser/prance
  .. |Windows Build Status| image::
  https://ci.appveyor.com/api/projects/status/ic7lo8r95mkee7di/branch/master?svg=true
     :target: https://ci.appveyor.com/project/jfinkhaeuser/prance
  .. |Docs| image:: https://img.shields.io/badge/docs-passing-brightgreen.svg
     :target: https://jfinkhaeuser.github.io/prance/
  .. |License| image:: https://img.shields.io/pypi/l/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |PyPI| image:: https://img.shields.io/pypi/v/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Package Format| image:: https://img.shields.io/pypi/format/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Python Versions| image:: https://img.shields.io/pypi/pyversions/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Package Status| image:: https://img.shields.io/pypi/status/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |FOSSA Status| image::
  https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjfinkhaeuser%2Fprance.svg?type=shield
     :target: https://app.fossa.io/projects/git%2Bgithub.com%2Fjfinkhaeuser%2Fprance?ref=badge_shield
  .. |Liberapay| image::
  http://img.shields.io/liberapay/receives/jfinkhaeuser.svg?logo=liberapay
     :target: https://liberapay.com/jfinkhaeuser/donate
  .. |Logo| image::
  https://raw.githubusercontent.com/jfinkhaeuser/prance/master/docs/images/prance_logo_256.png

swimlane/qswag: >
  # qswag


  Fast & Light Swagger generator for .NET Core. For more information, checkout
  the [documentation](https://swimlane.gitbooks.io/qswag/content/)


  ## Example


  ```csharp

  using System;

  using System.Collections.Generic;

  using System.IO;

  using System.Linq;

  using System.Net.Http;

  using System.Reflection;

  using System.Text;

  using Microsoft.AspNetCore.Authorization;

  using Microsoft.AspNetCore.Mvc;

  using Newtonsoft.Json;

  using QSwagGenerator;

  using QSwagSchema;


  namespace Controllers

  {
      /// <summary>
      /// Swagger spec controller.
      /// </summary>
      /// <seealso cref="Microsoft.AspNetCore.Mvc.Controller" />
      public class SwaggerController : Controller
      {
          private readonly List<Type> _types;

          /// <summary>
          /// Initializes a new instance of the <see cref="SwaggerController"/> class.
          /// </summary>
          public SwaggerController()
          {
              _types = new List<Type>
              {
                  typeof(GroupsController),
                  typeof(SettingsController)

              };
          }
          /// <summary>
          /// Gets the swagger.
          /// </summary>
          /// <returns>Swagger specification Json
          /// </returns>
          [HttpGet("/swagger")]
          public ActionResult GetSwagger(params string[] type)
          {
              var types = type == null || type.Length <= 0 ? _types : type.Select(GetTypeFromString);
              var httpRequest = HttpContext?.Request;
              
              var generatorSettings = new GeneratorSettings(httpRequest)
              {
                  DefaultUrlTemplate = "/[controller]/{id?}",
                  IgnoreObsolete = true,
                  Info = new Info() { Title = "Swimlane API", Version = "3.0" },
                  XmlDocPath = Path.ChangeExtension(Assembly.GetEntryAssembly().Location, "xml"),
                  SecurityDefinitions = new Dictionary<string, SecurityDefinition>()
                  {
                      {
                          "jwt_token",
                          new SecurityDefinition("Authorization", SecuritySchemeType.ApiKey) {In = Location.Header}
                      }
                  },
                  JsonSchemaLicense = "YourJsonSchemaLicense"
              };
              
              generatorSettings.Security.Add(new SecurityRequirement("jwt_token"));
              var generateForControllers = WebApiToSwagger.GenerateForControllers(types, generatorSettings, nameof(GetSwagger));
              
              return new FileContentResult(Encoding.UTF8.GetBytes(generateForControllers), "application/json");
          }

          private Type GetTypeFromString(string type)
          {
              var typeFromString = Type.GetType(type);
              if (typeFromString != null)
                  return typeFromString;
              if (!type.Contains("."))
                  return GetTypeFromString(string.Join(".", GetType().Namespace, type));
              if (!type.EndsWith("controller", StringComparison.CurrentCultureIgnoreCase))
                  return GetTypeFromString(string.Concat(type, "Controller"));
              return null;
          }
      }
  }

  ```


  ## Building Locally

  Before running tests locally you must set an an environment variable called
  `Newtonsoft` that contains the your Newtonsoft JSONSchema key.  Tests will not
  execute successfully without this key.


  ## Build Job Details

  Before merging to master the semver version attrbutes (major, minor, or patch)
  must be updated to reflect the type of change made.  The publish to NuGet upon
  merging to master will fail if the version is not updated.


  ### Stages

  [Dotnet Restore] - Restore 3rd party NuGet packages for all projects

  [Dotnet Build] - Build all projects in release mode

  [Run Tests] - Run all tests

  [Publish] - Publishes QSwagGenerator and QSwagSchema to NuGet if a master
  branch build


  ## Credits

  `qswag` is a [Swimlane](http://swimlane.com) open-source project; we believe
  in giving back to the open-source community by sharing some of the projects we
  build for our application. Swimlane is an automated cyber security operations
  and incident response platform that enables cyber security teams to leverage
  threat intelligence, speed up incident response and automate security
  operations.
frankiesardo/pedestal-swagger: >
  # route-swagger


  [![Build
  status](https://circleci.com/gh/frankiesardo/route-swagger.svg?style=shield)](https://circleci.com/gh/frankiesardo/route-swagger)


  Generate Swagger documentation from pedestal (or tripod) routes


  - [Demo](https://pedestal-swagger.herokuapp.com)


  ## For old pedestal-swagger users


  This project now focuses solely on route transformation and schema validation
  and thus is pedestal-agnostic.


  Route-swagger is a much lower level library. Everything the old
  pedestal-swagger did is still possible (look at the example repo) but requires
  a bit more boilerplate. The major breaking difference is that now
  route-swagger uses ring specific keys for describing the schema rather than
  swagger ones, e.g.


  ```clj

  {:parameters {:body-params ..
                :form-params ..
                :query-params ..
                :path-params ..
                :headers ..}
    :responses {500 {:body .. :headers ..}}}            
  ```


  Instead of `body`, `formData`, `query`, `schema`, etc. That should make it
  much more user friendly for clojure users.


  For a nicer integration with pedestal, extra features and easier migration
  path from the old pedestal-swagger check out
  [pedestal-api](https://github.com/oliyh/pedestal-api).


  ## Download


  [![Clojars
  Project](http://clojars.org/frankiesardo/route-swagger/latest-version.svg)](http://clojars.org/frankiesardo/route-swagger)


  ## Usage


  Have a look at the project under the example folder for a working pedestal app


  ## License


  Copyright © 2015 Frankie Sardo


  Distributed under the Eclipse Public License either version 1.0 or (at

  your option) any later version.
gengo/grpc-gateway: >
  # grpc-gateway


  [![release](https://img.shields.io/github/release/grpc-ecosystem/grpc-gateway.svg?style=flat-square)](https://github.com/grpc-ecosystem/grpc-gateway/releases)
  [![CircleCI](https://img.shields.io/circleci/project/github/grpc-ecosystem/grpc-gateway/master.svg?style=flat-square)](https://circleci.com/gh/grpc-ecosystem/grpc-gateway)
  [![fuzzit](https://app.fuzzit.dev/badge?org_id=grpc-gateway)](https://app.fuzzit.dev/orgs/grpc-gateway/dashboard)
  [![coverage](https://img.shields.io/codecov/c/github/grpc-ecosystem/grpc-gateway/master.svg?style=flat-square)](https://codecov.io/gh/grpc-ecosystem/grpc-gateway)
  [![license](https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway.svg?style=flat-square)](LICENSE.txt)


  The grpc-gateway is a plugin of the Google protocol buffers compiler

  [protoc](https://github.com/protocolbuffers/protobuf).

  It reads protobuf service definitions and generates a reverse-proxy server
  which

  'translates a RESTful HTTP API into gRPC. This server is generated according
  to the

  [`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)

  annotations in your service definitions.


  This helps you provide your APIs in both gRPC and RESTful style at the same
  time.


  ![architecture introduction
  diagram](https://docs.google.com/drawings/d/12hp4CPqrNPFhattL_cIoJptFvlAqm5wLQ0ggqI5mkCg/pub?w=749&amp;h=370)


  ## Check out our
  [documentation](https://grpc-ecosystem.github.io/grpc-gateway/)!


  ## Background

  gRPC is great -- it generates API clients and server stubs in many programming

  languages, it is fast, easy-to-use, bandwidth-efficient and its design is

  combat-proven by Google. However, you might still want to provide a
  traditional

  RESTful JSON API as well. Reasons can range from maintaining

  backwards-compatibility, supporting languages or clients not well supported by

  gRPC, to simply maintaining the aesthetics and tooling involved with a RESTful

  JSON architecture.


  This project aims to provide that HTTP+JSON interface to your gRPC service.

  A small amount of configuration in your service to attach HTTP semantics is
  all

  that's needed to generate a reverse-proxy with this library.


  ## Installation


  The grpc-gateway requires a local installation of the Google protocol buffers

  compiler `protoc` v3.0.0 or above. Please install this via your local package

  manager or by downloading one of the releases from the official repository:


  https://github.com/protocolbuffers/protobuf/releases


  The following instructions assume you are using

  [Go Modules](https://github.com/golang/go/wiki/Modules) for dependency

  management. Use a

  [tool
  dependency](https://github.com/golang/go/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module)

  to track the versions of the following executable packages:


  ```go

  // +build tools


  package tools


  import (
      _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway"
      _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger"
      _ "github.com/golang/protobuf/protoc-gen-go"
  )

  ```


  Run `go mod tidy` to resolve the versions. Install by running


  ```sh

  $ go install \
      github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway \
      github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger \
      github.com/golang/protobuf/protoc-gen-go
  ```


  This will place three binaries in your `$GOBIN`;


  * `protoc-gen-grpc-gateway`

  * `protoc-gen-swagger`

  * `protoc-gen-go`


  Make sure that your `$GOBIN` is in your `$PATH`.


  ## Usage


  1. Define your [gRPC](https://grpc.io/docs/) service using protocol buffers 

     `your_service.proto`:
     ```protobuf
     syntax = "proto3";
     package example;
     message StringMessage {
       string value = 1;
     }

     service YourService {
       rpc Echo(StringMessage) returns (StringMessage) {}
     }
     ```

  2. Add a
  [`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)

  annotation to your .proto file

     `your_service.proto`:
     ```diff
      syntax = "proto3";
      package example;
     +
     +import "google/api/annotations.proto";
     +
      message StringMessage {
        string value = 1;
      }

      service YourService {
     -  rpc Echo(StringMessage) returns (StringMessage) {}
     +  rpc Echo(StringMessage) returns (StringMessage) {
     +    option (google.api.http) = {
     +      post: "/v1/example/echo"
     +      body: "*"
     +    };
     +  }
      }
     ```

     See [a_bit_of_everything.proto](examples/internal/proto/examplepb/a_bit_of_everything.proto)
     for examples of more annotations you can add to customize gateway behavior
     and generated Swagger output.

     If you do not want to modify the proto file for use with grpc-gateway you can
     alternatively use an external
     [gRPC Service Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config) file.
     [Check our documentation](https://grpc-ecosystem.github.io/grpc-gateway/docs/grpcapiconfiguration.html)
     for more information.

  3. Generate gRPC stub

     The following generates gRPC code for Golang based on `path/to/your_service.proto`:
     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --go_out=plugins=grpc:. \
       path/to/your_service.proto
     ```

     It will generate a stub file `path/to/your_service.pb.go`.

  4. Implement your service in gRPC as usual

     1. (Optional) Generate gRPC stub in the [other programming languages](https://grpc.io/docs/).

       For example, the following generates gRPC code for Ruby based on `path/to/your_service.proto`:
       ```sh
       protoc -I/usr/local/include -I. \
         -I$GOPATH/src \
         -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
         --ruby_out=. \
         path/to/your_service.proto

       protoc -I/usr/local/include -I. \
         -I$GOPATH/src \
         -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
         --plugin=protoc-gen-grpc=grpc_ruby_plugin \
         --grpc-ruby_out=. \
         path/to/your_service.proto
       ```
     2. Add the googleapis-common-protos gem (or your language equivalent) as a dependency to your project.
     3. Implement your gRPC service stubs

  5. Generate reverse-proxy using `protoc-gen-grpc-gateway`

     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --grpc-gateway_out=logtostderr=true:. \
       path/to/your_service.proto
     ```

     It will generate a reverse proxy `path/to/your_service.pb.gw.go`.

  6. Write an entrypoint for the HTTP reverse-proxy server

     ```go
     package main
   
     import (
       "context"  // Use "golang.org/x/net/context" for Golang version <= 1.6
       "flag"
       "net/http"
   
       "github.com/golang/glog"
       "github.com/grpc-ecosystem/grpc-gateway/runtime"
       "google.golang.org/grpc"
   
       gw "path/to/your_service_package"  // Update
     )
   
     var (
       // command-line options:
       // gRPC server endpoint
       grpcServerEndpoint = flag.String("grpc-server-endpoint",  "localhost:9090", "gRPC server endpoint")
     )
   
     func run() error {
       ctx := context.Background()
       ctx, cancel := context.WithCancel(ctx)
       defer cancel()
   
       // Register gRPC server endpoint
       // Note: Make sure the gRPC server is running properly and accessible
       mux := runtime.NewServeMux()
       opts := []grpc.DialOption{grpc.WithInsecure()}
       err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)
       if err != nil {
         return err
       }
   
       // Start HTTP server (and proxy calls to gRPC server endpoint)
       return http.ListenAndServe(":8081", mux)
     }
   
     func main() {
       flag.Parse()
       defer glog.Flush()
   
       if err := run(); err != nil {
         glog.Fatal(err)
       }
     }
     ```

  7. (Optional) Generate swagger definitions using `protoc-gen-swagger`

     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --swagger_out=logtostderr=true:. \
       path/to/your_service.proto
     ```

  ## Video intro


  This GopherCon UK 2019 presentation from our maintainer

  [@JohanBrandhorst](https://github.com/johanbrandhorst) provides a good intro
  to

  using the grpc-gateway. It uses the following boilerplate repo as a base:

  https://github.com/johanbrandhorst/grpc-gateway-boilerplate.


  [![gRPC-Gateway
  presentation](https://img.youtube.com/vi/Pq1paKC-fXk/0.jpg)](https://www.youtube.com/watch?v=Pq1paKC-fXk)


  ## Parameters and flags


  During code generation with `protoc`, flags to grpc-gateway tools must be
  passed

  through protoc using the `--<tool_suffix>_out=<flags>:<path>` pattern, for

  example:


  ```sh

  --grpc-gateway_out=logtostderr=true,repeated_path_param_separator=ssv:.

  --swagger_out=logtostderr=true,repeated_path_param_separator=ssv:.

  ```


  `protoc-gen-grpc-gateway` supports custom mapping from Protobuf `import` to

  Golang import paths. They are compatible to

  [the parameters with same names in
  `protoc-gen-go`](https://github.com/golang/protobuf#parameters)

  (except `source_relative`).


  In addition we also support the `request_context` parameter in order to use
  the

  `http.Request`'s Context (only for Go 1.7 and above). This parameter can be

  useful to pass request scoped context between the gateway and the gRPC
  service.


  `protoc-gen-grpc-gateway` also supports some more command line flags to
  control

  logging. You can give these flags together with parameters above. Run

  `protoc-gen-grpc-gateway --help` for more details about the flags.


  Similarly, `protoc-gen-swagger` supports command-line flags to control Swagger

  output (for example, `json_names_for_fields` to output JSON names for fields

  instead of protobuf names). Run `protoc-gen-swagger --help` for more flag

  details. Further Swagger customization is possible by annotating your `.proto`

  files with options from

  [openapiv2.proto](protoc-gen-swagger/options/openapiv2.proto) - see

  [a_bit_of_everything.proto](examples/internal/proto/examplepb/a_bit_of_everything.proto)

  for examples.


  ## More Examples

  More examples are available under `examples` directory.

  * `proto/examplepb/echo_service.proto`,
  `proto/examplepb/a_bit_of_everything.proto`,
  `proto/examplepb/unannotated_echo_service.proto`: service definition
    * `proto/examplepb/echo_service.pb.go`, `proto/examplepb/a_bit_of_everything.pb.go`, `proto/examplepb/unannotated_echo_service.pb.go`: [generated] stub of the service
    * `proto/examplepb/echo_service.pb.gw.go`, `proto/examplepb/a_bit_of_everything.pb.gw.go`, `proto/examplepb/uannotated_echo_service.pb.gw.go`: [generated] reverse proxy for the service
    * `proto/examplepb/unannotated_echo_service.yaml`: gRPC API Configuration for ```unannotated_echo_service.proto```
  * `server/main.go`: service implementation

  * `main.go`: entrypoint of the generated reverse proxy


  To use the same port for custom HTTP handlers (e.g. serving `swagger.json`),

  gRPC-gateway, and a gRPC server, see

  [this example by
  CoreOS](https://github.com/philips/grpc-gateway-example/blob/master/cmd/serve.go)

  (and its accompanying [blog
  post](https://coreos.com/blog/grpc-protobufs-swagger.html)).


  ## Features


  ### Supported


  * Generating JSON API handlers.

  * Method parameters in request body.

  * Method parameters in request path.

  * Method parameters in query string.

  * Enum fields in path parameter (including repeated enum fields).

  * Mapping streaming APIs to newline-delimited JSON streams.

  * Mapping HTTP headers with `Grpc-Metadata-` prefix to gRPC metadata (prefixed
  with `grpcgateway-`)

  * Optionally emitting API definitions for

  [OpenAPI (Swagger)
  v2](https://swagger.io/docs/specification/2-0/basic-structure/).

  * Setting [gRPC
  timeouts](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests)

  through inbound HTTP `Grpc-Timeout` header.

  * Partial support for [gRPC API
  Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config)

  files as an alternative to annotation.

  * Automatically translating PATCH requests into Field Mask gRPC requests. See

  [the docs](https://grpc-ecosystem.github.io/grpc-gateway/docs/patch.html)

  for more information.


  ### No plan to support

  But patch is welcome.

  * Method parameters in HTTP headers.

  * Handling trailer metadata.

  * Encoding request/response body in XML.

  * True bi-directional streaming.


  # Mapping gRPC to HTTP


  * [How gRPC error codes map to HTTP status codes in the
  response](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/runtime/errors.go#L15).

  * HTTP request source IP is added as `X-Forwarded-For` gRPC request header.

  * HTTP request host is added as `X-Forwarded-Host` gRPC request header.

  * HTTP `Authorization` header is added as `authorization` gRPC request header.

  * Remaining Permanent HTTP header keys (as specified by the IANA

  [here](http://www.iana.org/assignments/message-headers/message-headers.xhtml)

  are prefixed with `grpcgateway-` and added with their values to gRPC request

  header.

  * HTTP headers that start with 'Grpc-Metadata-' are mapped to gRPC metadata

  (prefixed with `grpcgateway-`).

  * While configurable, the default {un,}marshaling uses

  [jsonpb](https://godoc.org/github.com/golang/protobuf/jsonpb) with

  `OrigName: true`.


  # Contribution

  See
  [CONTRIBUTING.md](http://github.com/grpc-ecosystem/grpc-gateway/blob/master/CONTRIBUTING.md).


  # License

  grpc-gateway is licensed under the BSD 3-Clause License.

  See
  [LICENSE.txt](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt)
  for more details.
BigstickCarpet/swagger-express-middleware: >
  Swagger Express Middleware

  ============================

  ### Swagger 2.0 middleware and mocks for Express.js


  [![Cross-Platform
  Compatibility](https://apitools.dev/img/badges/os-badges.svg)](https://github.com/APIDevTools/swagger-express-middleware/blob/master/.github/workflows/CI-CD.yaml)

  [![Build
  Status](https://github.com/APIDevTools/swagger-express-middleware/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-express-middleware/blob/master/.github/workflows/CI-CD.yaml)


  [![Coverage
  Status](https://coveralls.io/repos/github/APIDevTools/swagger-express-middleware/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-express-middleware)

  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://apis.guru/browse-apis/)

  [![Dependencies](https://david-dm.org/APIDevTools/swagger-express-middleware.svg)](https://david-dm.org/APIDevTools/swagger-express-middleware)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-express-middleware.svg)](https://www.npmjs.com/package/@apidevtools/swagger-express-middleware)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-express-middleware.svg)](LICENSE)

  [![Buy us a
  tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-express-middleware)




  Features

  --------------------------

  - **Supports Swagger 2.0 specs in JSON or YAML** <br>

  Swagger Express Middleware uses
  [Swagger-Parser](https://github.com/APIDevTools/swagger-parser) to parse,
  validate, and dereference Swagger files.  You can even split your spec into
  multiple different files using `$ref` pointers.


  - **Thoroughly tested**<br>

  Over 1,000 unit tests and integration tests with 100% code coverage.  Tested
  on [**over 1,000 real-world APIs**](https://apis.guru/browse-apis/) from
  Google, Instagram, Spotify, etc.  All tests are run on Mac, Linux, and Windows
  using all LTS versions of Node.


  - [**Mock
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/mock.html)<br>

  **Fully-functional mock** implementations for every operation in your API,
  including data persistence, all with **zero code!**  This is a great way to
  test-drive your API as you write it, or for quick demos and POCs.  You can
  even extend the mock middleware with your own logic and data to fill in any
  gaps.


  - [**Metadata
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/metadata.html)<br>

  Annotates each request with all the relevant information from the Swagger
  definition.  The path, the operation, the parameters, the security
  requirements - they're all easily accessible at `req.swagger`.


  - [**Parse Request
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/parseRequest.html)<br>

  Parses incoming requests and converts everything into the correct data types,
  according to your Swagger API definition.


  - [**Validate Request
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/validateRequest.html)<br>

  Ensures that every request complies with your Swagger API definition, or
  returns the appropriate HTTP error codes if needed.  Of course, you can catch
  any validation errors and handle them however you want.


  - [**CORS
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/CORS.html)<br>

  Adds the appropriate CORS headers to each request and automatically responds
  to CORS preflight requests, all in compliance with your Swagger API
  definition.


  - [**Files
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/files.html)<br>

  Serves the Swagger API file(s) in JSON or YAML format so they can be used with
  front-end tools like [Swagger UI](http://www.swagger.io), [Swagger
  Editor](http://editor.swagger.io), and [Postman](http://getpostman.com).




  Installation and Use

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/).


  ```bash

  npm install @apidevtools/swagger-express-middleware

  ```

  Then use it in your [Node.js](http://nodejs.org/) script like this:


  ```javascript

  const express = require('express');

  const createMiddleware = require('@apidevtools/swagger-express-middleware');


  let app = express();


  createMiddleware('PetStore.yaml', app, function(err, middleware) {
      // Add all the Swagger Express Middleware, or just the ones you need.
      // NOTE: Some of these accept optional options (omitted here for brevity)
      app.use(
          middleware.metadata(),
          middleware.CORS(),
          middleware.files(),
          middleware.parseRequest(),
          middleware.validateRequest(),
          middleware.mock()
      );

      app.listen(8000, function() {
          console.log('The PetStore sample is now running at http://localhost:8000');
      });
  });

  ```




  Samples & Walkthroughs

  --------------------------

  Swagger Express Middleware comes two samples that use the [Swagger Pet Store
  API](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/PetStore.yaml).


  #### Sample 1

  This sample demonstrates the most simplistic usage of Swagger Express
  Middleware. It simply creates a new Express Application and adds all of the
  Swagger middleware without changing any options, and without adding any custom
  middleware.


  * [Source
  Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample1.js)

  *
  [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/running.html)



  #### Sample 2

  This sample demonstrates a few more advanced features of Swagger Express
  Middleware, such as setting a few options, initializing the mock data store,
  and adding custom middleware logic.


  * [Source
  Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample2.js)

  *
  [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/walkthrough2.html)




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [File an
  issue](https://github.com/APIDevTools/swagger-express-middleware/issues) on
  GitHub and [submit a pull
  request](https://github.com/APIDevTools/swagger-express-middleware/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-express-middleware.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`


  4. **Run the sample app**<br>

  `npm start`




  License

  --------------------------

  Swagger Express Middleware is 100% free and open-source, under the [MIT
  license](LICENSE). Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in
  production, then we ask that you [**buy the world a
  tree**](https://plant.treeware.earth/APIDevTools/swagger-express-middleware)
  to thank us for our work. By contributing to the Treeware forest you’ll be
  creating employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![Travis
  CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
RobWin/swagger2markup-gradle-plugin: >
  = Swagger2Markup Gradle Plugin

  :author: Robert Winkler

  :hardbreaks:


  image:https://travis-ci.org/Swagger2Markup/swagger2markup-gradle-plugin.svg?branch=master["Build
  Status",
  link="https://travis-ci.org/Swagger2Markup/swagger2markup-gradle-plugin"]
  image:https://coveralls.io/repos/Swagger2Markup/swagger2markup-gradle-plugin/badge.svg["Coverage
  Status",
  link="https://coveralls.io/r/Swagger2Markup/swagger2markup-gradle-plugin"]
  image:https://api.bintray.com/packages/swagger2markup/Maven/swagger2markup-gradle-plugin/images/download.svg[link="https://bintray.com/swagger2markup/Maven/swagger2markup-gradle-plugin/_latestVersion"]
  image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2",
  link="http://www.apache.org/licenses/LICENSE-2.0.txt"]
  image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter",
  link="https://twitter.com/rbrtwnklr"]
  image:https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/Swagger2Markup/swagger2markup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]


  == Reference documentation


  The documentation can be found at
  https://github.com/Swagger2Markup/swagger2markup#reference-documentation[Reference
  documentation]


  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
raphael/goa: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:3564:230F9E7:383B3B6:66148FE6.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
'BigstickCarpet/swagger-parser#swagger-parser': >-
  {"id":25453221,"node_id":"MDEwOlJlcG9zaXRvcnkyNTQ1MzIyMQ==","name":"swagger-parser","full_name":"APIDevTools/swagger-parser","private":false,"owner":{"login":"APIDevTools","id":43750074,"node_id":"MDEyOk9yZ2FuaXphdGlvbjQzNzUwMDc0","avatar_url":"https://avatars0.githubusercontent.com/u/43750074?v=4","gravatar_id":"","url":"https://api.github.com/users/APIDevTools","html_url":"https://github.com/APIDevTools","followers_url":"https://api.github.com/users/APIDevTools/followers","following_url":"https://api.github.com/users/APIDevTools/following{/other_user}","gists_url":"https://api.github.com/users/APIDevTools/gists{/gist_id}","starred_url":"https://api.github.com/users/APIDevTools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/APIDevTools/subscriptions","organizations_url":"https://api.github.com/users/APIDevTools/orgs","repos_url":"https://api.github.com/users/APIDevTools/repos","events_url":"https://api.github.com/users/APIDevTools/events{/privacy}","received_events_url":"https://api.github.com/users/APIDevTools/received_events","type":"Organization","site_admin":false},"html_url":"https://github.com/APIDevTools/swagger-parser","description":"Swagger
  2.0 and OpenAPI 3.0
  parser/validator","fork":false,"url":"https://api.github.com/repos/APIDevTools/swagger-parser","forks_url":"https://api.github.com/repos/APIDevTools/swagger-parser/forks","keys_url":"https://api.github.com/repos/APIDevTools/swagger-parser/keys{/key_id}","collaborators_url":"https://api.github.com/repos/APIDevTools/swagger-parser/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/APIDevTools/swagger-parser/teams","hooks_url":"https://api.github.com/repos/APIDevTools/swagger-parser/hooks","issue_events_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues/events{/number}","events_url":"https://api.github.com/repos/APIDevTools/swagger-parser/events","assignees_url":"https://api.github.com/repos/APIDevTools/swagger-parser/assignees{/user}","branches_url":"https://api.github.com/repos/APIDevTools/swagger-parser/branches{/branch}","tags_url":"https://api.github.com/repos/APIDevTools/swagger-parser/tags","blobs_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/refs{/sha}","trees_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/trees{/sha}","statuses_url":"https://api.github.com/repos/APIDevTools/swagger-parser/statuses/{sha}","languages_url":"https://api.github.com/repos/APIDevTools/swagger-parser/languages","stargazers_url":"https://api.github.com/repos/APIDevTools/swagger-parser/stargazers","contributors_url":"https://api.github.com/repos/APIDevTools/swagger-parser/contributors","subscribers_url":"https://api.github.com/repos/APIDevTools/swagger-parser/subscribers","subscription_url":"https://api.github.com/repos/APIDevTools/swagger-parser/subscription","commits_url":"https://api.github.com/repos/APIDevTools/swagger-parser/commits{/sha}","git_commits_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/commits{/sha}","comments_url":"https://api.github.com/repos/APIDevTools/swagger-parser/comments{/number}","issue_comment_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues/comments{/number}","contents_url":"https://api.github.com/repos/APIDevTools/swagger-parser/contents/{+path}","compare_url":"https://api.github.com/repos/APIDevTools/swagger-parser/compare/{base}...{head}","merges_url":"https://api.github.com/repos/APIDevTools/swagger-parser/merges","archive_url":"https://api.github.com/repos/APIDevTools/swagger-parser/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/APIDevTools/swagger-parser/downloads","issues_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues{/number}","pulls_url":"https://api.github.com/repos/APIDevTools/swagger-parser/pulls{/number}","milestones_url":"https://api.github.com/repos/APIDevTools/swagger-parser/milestones{/number}","notifications_url":"https://api.github.com/repos/APIDevTools/swagger-parser/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/APIDevTools/swagger-parser/labels{/name}","releases_url":"https://api.github.com/repos/APIDevTools/swagger-parser/releases{/id}","deployments_url":"https://api.github.com/repos/APIDevTools/swagger-parser/deployments","created_at":"2014-10-20T06:14:51Z","updated_at":"2020-04-06T17:57:45Z","pushed_at":"2020-04-01T13:01:11Z","git_url":"git://github.com/APIDevTools/swagger-parser.git","ssh_url":"git@github.com:APIDevTools/swagger-parser.git","clone_url":"https://github.com/APIDevTools/swagger-parser.git","svn_url":"https://github.com/APIDevTools/swagger-parser","homepage":"https://apitools.dev/swagger-parser","size":32415,"stargazers_count":584,"watchers_count":584,"language":"JavaScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"forks_count":93,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":41,"license":{"key":"mit","name":"MIT
  License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"forks":93,"open_issues":41,"watchers":584,"default_branch":"master","permissions":{"admin":false,"push":false,"pull":true},"temp_clone_token":"","organization":{"login":"APIDevTools","id":43750074,"node_id":"MDEyOk9yZ2FuaXphdGlvbjQzNzUwMDc0","avatar_url":"https://avatars0.githubusercontent.com/u/43750074?v=4","gravatar_id":"","url":"https://api.github.com/users/APIDevTools","html_url":"https://github.com/APIDevTools","followers_url":"https://api.github.com/users/APIDevTools/followers","following_url":"https://api.github.com/users/APIDevTools/following{/other_user}","gists_url":"https://api.github.com/users/APIDevTools/gists{/gist_id}","starred_url":"https://api.github.com/users/APIDevTools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/APIDevTools/subscriptions","organizations_url":"https://api.github.com/users/APIDevTools/orgs","repos_url":"https://api.github.com/users/APIDevTools/repos","events_url":"https://api.github.com/users/APIDevTools/events{/privacy}","received_events_url":"https://api.github.com/users/APIDevTools/received_events","type":"Organization","site_admin":false},"network_count":93,"subscribers_count":17}
kogosoftwarellc/express-openapi: >
  # @open-api [![Build Status][travis-image]][travis-url] [![Coveralls
  Status][coveralls-image]][coveralls-url] [![Gitter
  chat][gitter-image]][gitter-url] [![Greenkeeper
  badge](https://badges.greenkeeper.io/kogosoftwarellc/open-api.svg)](https://greenkeeper.io/)

  > A Monorepo of various packages to power OpenAPI in node.


  ## Quick Start Express


  * See
  [express-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/express-openapi)&nbsp;&nbsp;&nbsp;[![express-openapi
  Downloads][express-openapi-downloads-image]][express-openapi-npm-url]


  ## Quick Start Koa

  * See
  [koa-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/koa-openapi)&nbsp;&nbsp;&nbsp;[![koa-openapi
  Downloads][koa-openapi-downloads-image]][koa-openapi-npm-url]


  ## Packages

  *
  [express-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/express-openapi)

  *
  [fetch-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/fetch-openapi)

  *
  [fs-routes](https://github.com/kogosoftwarellc/open-api/tree/master/packages/fs-routes)

  *
  [openapi-default-setter](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-default-setter)

  *
  [openapi-framework](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-framework)

  *
  [openapi-jsonschema-parameters](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-jsonschema-parameters)

  *
  [openapi-request-coercer](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-request-coercer)

  *
  [openapi-request-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-request-validator)

  *
  [openapi-response-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-response-validator)

  *
  [openapi-schema-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-schema-validator)

  *
  [openapi-types](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-types)


  ## Development


  _Note:  One of the goals of this monorepo is to support independent package
  versions.  The author has used other popular options out there (like lerna),
  and has found independent versioning to behave strangely with them.  Another
  goal with the current approach is to reduce boilerplate code as much as
  possible (something tools like lerna don't help with).  The inspiration for
  the current approach came from
  [boennemann/alle](https://github.com/boennemann/alle).  The author isn't

  married to the current approach, so if you have ideas on how to simplify the
  development of this monorepo by all means please [open an
  issue](https://github.com/kogosoftwarellc/open-api/issues/new)._


  ### Typical Workflow for Contributors


  Let's say you're working on a package under
  [./packages](https://github.com/kogosoftwarellc/open-api/tree/master/packages). 
  Here's what you do:


  1. `cd open-api`

  1. `./bin/test packages/<package_you're_working_on>`

  1. Make your changes.
    1. _Do not bump the version in package.json._  A maintainer will handle that once your PR is merged.
  1. Once you're satisfied with your changes:
    1. Create a new branch `git checkout -b my-branch` (in case you haven't done so already).
    1. `./bin/commit packages/<package_you're_working_on> 'commit message describing your change.  can be multi line here.  just close with a single quote like so:'`
    1. Push your change to your fork
    1. Open a PR.

  ### bin


  Several scripts have been created to aid in the development of this monorepo
  (see [./bin](./bin)).  They assume that your `$PWD` is the root of the
  repository.  Here is a brief summary of common actions:


  * Testing
    * (Note: `./bin/test` will run `npm i` in the package _prior_ to running the tests)
    * Test a single package - `./bin/test packages/<package_to_test>` (starts the test in watch mode)
    * Test all packages - `./bin/test`
  * Commit changes to a package - `./bin/commit packages/<package_to_commit>
  'Commit message'` (the commit message will be prepended with the package name
  e.g. `<package_to_commit>: Commit message`


  #### dev-tools

  Scripts in this directory wrap common tools, like `nyc`, `tsc`, and `mocha`. 
  They reduce boilerplate and are called from npm scripts.


  ## LICENSE


  ```

  The MIT License (MIT)


  Copyright (c) 2018 Kogo Software LLC


  Permission is hereby granted, free of charge, to any person obtaining a copy

  of this software and associated documentation files (the "Software"), to deal

  in the Software without restriction, including without limitation the rights

  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell

  copies of the Software, and to permit persons to whom the Software is

  furnished to do so, subject to the following conditions:


  The above copyright notice and this permission notice shall be included in

  all copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN

  THE SOFTWARE.

  ```


  [express-openapi-downloads-image]:
  http://img.shields.io/npm/dm/express-openapi.svg

  [express-openapi-npm-url]: https://npmjs.org/package/express-openapi

  [koa-openapi-downloads-image]: http://img.shields.io/npm/dm/koa-openapi.svg

  [koa-openapi-npm-url]: https://npmjs.org/package/koa-openapi


  [travis-url]: https://travis-ci.org/kogosoftwarellc/open-api

  [travis-image]:
  https://api.travis-ci.org/kogosoftwarellc/open-api.svg?branch=master


  [coveralls-url]: https://coveralls.io/r/kogosoftwarellc/open-api

  [coveralls-image]:
  https://coveralls.io/repos/github/kogosoftwarellc/open-api/badge.svg?branch=master


  [gitter-url]: https://gitter.im/kogosoftwarellc/open-api

  [gitter-image]: https://badges.gitter.im/kogosoftwarellc/open-api.png
inaka/cowboy-swagger: >
  <img src="http://www.braveterry.com/wp-content/uploads/2015/03/swagger2.png"/>


  # cowboy-swagger

  [Swagger](http://swagger.io/) integration for
  [Cowboy](https://github.com/ninenines/cowboy) (built on
  [trails](https://github.com/inaka/cowboy-trails)).


  ## Contact Us

  If you find any **bugs** or have a **problem** while using this library,
  please

  [open an issue](https://github.com/inaka/elvis/issues/new) in this repo

  (or a pull request :)).


  ## Requirements

  Cowboy Swagger requires Erlang 18+ after 0.1.0 version


  ## Why Cowboy Swagger?

  Simple, because there isn't a tool in Erlang to document Cowboy RESTful APIs
  easy and fast,

  and to improve development productivity.


  With `cowboy_swagger` is possible to integrate Swagger to your Erlang projects
  that use Cowboy as a web server.

  It is extremely easy to use, and with just a few steps you'll have a nice Web
  documentation for your RESTful APIs.


  To learn a bit more about Swagger, please check this [blog
  post](http://inaka.net/blog/2015/06/23/erlang-swagger-2015/).


  ## How to Use it?

  This is the best part. It is extremely easy.


  ### 1. Document each Cowboy Handler

  Because `cowboy_swagger` runs on top of `trails`, the first thing that you
  have to do

  is document all about your handler within the trails metadata. Keep in mind
  that

  all fields defined within each method into the metadata must be compliant with
  the

  [Swagger specification](http://swagger.io/specification).


  For example, suppose that you have `example_echo_handler`, so it must
  implement the `trails/0`

  callback from `trails_handler` behaviour:


  ```erlang

  trails() ->
    Metadata =
      #{get =>
        #{tags => ["echo"],
          description => "Gets echo var from the server",
          produces => ["text/plain"]
        },
        put =>
        #{tags => ["echo"],
          description => "Sets echo var in the server",
          produces => ["text/plain"],
          parameters => [
            #{name => <<"echo">>,
              description => <<"Echo message">>,
              in => <<"path">>,
              required => false,
              type => <<"string">>}
          ]
        }
      },
    [trails:trail("/message/[:echo]", example_echo_handler, [], Metadata)].
  ```


  To get a better idea of how your handler should look like, please check
  [here](./example/src/example_echo_handler.erl).


  ### 2. Include cowboy_swagger in your app

  First, you need to include `cowboy_swagger_handler` module in your list of
  trails to be compiled.


  ```erlang

  % Include cowboy_swagger_handler in the trails list

  Trails = trails:trails([example_echo_handler,
                          example_description_handler,
                          cowboy_swagger_handler]),
  % store them

  trails:store(Trails),

  % and then compile them

  Dispatch = trails:single_host_compile(Trails),

  ```


  The snippet of code above is usually placed when you start `cowboy`. Check it
  [here](./example/src/example.erl#L31).


  Then add `cowboy_swagger` to the list of apps to be loaded in your `*.app.src`
  file.


  ```erlang

  {application, example,
   [
    {description, "Cowboy Swagger Basic Example."},
    {vsn, "0.1"},
    {applications,
     [kernel,
      stdlib,
      jsx,
      cowboy,
      trails,
      cowboy_swagger
     ]},
    {modules, []},
    {mod, {example, []}},
    {registered, []},
    {start_phases, [{start_trails_http, []}]}
   ]
  }.

  ```


  And that's it, you got it. Now start your application and then you will have
  access to the API docs

  under the path `/api-docs`. Supposing that you're running the app on
  `localhost:8080`,

  that will be [http://localhost:8080/api-docs](http://localhost:8080/api-docs).


  ## Configuration


  Additionally, `cowboy_swagger` can be configured/customized from a `*.config`
  file:


  ### app.config


  ```erlang

  [
   %% Other apps ...

   %% cowboy_swagger config
   {cowboy_swagger,
    [
     %% `static_files`: Static content directory. This is where Swagger-UI
     %% is located. Default: `priv/swagger`.
     %% Remember that Swagger-UI is embedded into `cowboy-swagger` project,
     %% within `priv/swagger` folder. BUT you have to reference that path,
     %% and depending on how you're using `cowboy-swagger` it will be different.
     %% For example, assuming that you want to run your app which has
     %% `cowboy-swagger` as dependency from the console, `static_files` will be:
     {static_files, "./deps/cowboy_swagger/priv/swagger"},

     %% `global_spec`: Global fields for Swagger specification.
     %% If these fields are not set, `cowboy_swagger` will set default values.
     {global_spec,
      #{swagger => "2.0",
        info => #{title => "Example API"},
        basePath => "/api-docs"
       }
     }
    ]
   }
  ].

  ```


  ### Definitions


  [Definitions](http://swagger.io/specification/#definitionsObject) can be used
  for describing

  [parameters](http://swagger.io/specification/#parametersDefinitionsObject),

  [responses](http://swagger.io/specification/#responsesDefinitionsObject) and

  [security](http://swagger.io/specification/#securityDefinitionsObject)
  schemas.


  For adding definitions to your app, you have 2 choices:


  1. Add a `definitions` key to your cowboy_swagger `global_spec` map.

  2. Add them by calling `cowboy_swagger:add_definition/2` and send the
     definition's name and properties.

  Let's say you want to describe a `POST` call to a `newspapers` endpoint that
  requires

  `name` and `description` fields only, you can do it like this:


  **Option 1:**

  ```erlang

  [ ... % other configurations

  , { cowboy_swagger
    , [ { global_spec
        , #{ swagger => "2.0"
           , info => #{title => "My app API"}
           , definitions => #{
               "RequestBody" =>
                 #{ "name" =>
                     #{ "type" => "string"
                      , "description" => "Newspaper name"
                      }
                  , "description" =>
                      #{ "type" => "string"
                       , "description" => "Newspaper description"
                       }
                  }
             }
           }
        }
      ]
    }
  ]

  ```


  **Option 2:**


  For the second choice, you can do it for example in one or several
  `start_phases`,

  directly in your handler or any other place you want.


  ```erlang

  -spec trails() -> trails:trails().

  trails() ->
    DefinitionName = <<"RequestBody">>,
    DefinitionProperties =
      #{ <<"name">> =>
           #{ type => <<"string">>
            , description => <<"Newspaper name">>
            }
       , <<"description">> =>
           #{ type => <<"string">>
            , description => <<"Newspaper description">>
            }
       },
    % Add the definition
    ok = cowboy_swagger:add_definition(DefinitionName, DefinitionProperties),
    ...
  ```



  Now in your handler's trails callback function you can use it:


  ```erlang

  ...
    RequestBody =
      #{ name => <<"request body">>
       , in => body
       , description => <<"request body (as json)">>
       , required => true
         % Use the previously created `RequestBody' definition
       , schema => cowboy_swagger:schema(<<"RequestBody">>)
       },
    Metadata =
      #{ get =>
         #{ tags => ["newspapers"]
          , description => "Returns the list of newspapers"
          , produces => ["application/json"]
          }
       , post =>
         # { tags => ["newspapers"]
           , description => "Creates a new newspaper"
           , consumes => ["application/json"]
           , produces => ["application/json"]
           , parameters => [RequestBody] % and then use that parameter here
           }
       },
    Path = "/newspapers",
    Options = #{path => Path},
    [trails:trail(Path, newspapers_handler, Options, Metadata)].
  ```


  What this does for you is add a nice `response`, `parameter` or `security`

  model in swagger-ui, so client developers will know exactly what parameters

  the API expects for every endpoint.


  ## Example

  For more information about `cowboy_swagger` and how to use it, please check
  this [Example](./example).
gedaiu/swaggarize: >
  # OpenApi


  I will not mantain this project in the future. Please have a loog at this
  fork: [https://github.com/gedaiu/OpenApi](https://github.com/gedaiu/OpenApi)
tjwebb/sails-swagger: >
  # sails-swagger


  [![NPM version][npm-image]][npm-url]

  [![Build status][ci-image]][ci-url]

  [![Dependency Status][daviddm-image]][daviddm-url]

  [![Code Climate][codeclimate-image]][codeclimate-url]



  [swagger.io](http://swagger.io/) (v2.0) hook for Sails. The application's
  models, controllers, and routes are aggregated and transformed into a Swagger
  Document. Supports the Swagger 2.0 specification.


  ## Install


  ```sh

  $ npm install sails-swagger --save

  ```


  ## Configuration

  ```js

  // config/swagger.js

  module.exports.swagger = {
    /**
     * require() the package.json file for your Sails app.
     */
    pkg: require('../package'),
    ui: {
      url: 'http://swagger.balderdash.io'
    }
  };

  ```


  ## Usage

  After installing and configuring swagger, you can find the docs output on the
  [/swagger/doc](http://localhost:1337/swagger/doc) route.


  You may also specify additional swagger endpoints by specifying the swagger
  spec in config/routes.js


  ```

  /**
   * Route Mappings
   * @file config/routes.js
   * (sails.config.routes)
   *
   * Your routes map URLs to views and controllers.
   */

  module.exports.routes = {

      /***************************************************************************
       *                                                                          *
       * Make the view located at `views/homepage.ejs` (or `views/homepage.jade`, *
       * etc. depending on your default view engine) your home page.              *
       *                                                                          *
       * (Alternatively, remove this and add an `index.html` file in your         *
       * `assets` directory)                                                      *
       *                                                                          *
       ***************************************************************************/

      '/': {
          view: 'homepage'
      },

      /***************************************************************************
       *                                                                          *
       * Custom routes here...                                                    *
       *                                                                          *
       * If a request to a URL doesn't match any of the custom routes above, it   *
       * is matched against Sails route blueprints. See `config/blueprints.js`    *
       * for configuration options and examples.                                  *
       *                                                                          *
       ***************************************************************************/
      'get /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['GET', 'POST'],
              summary: ' Get Groups ',
              description: 'Get Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'List of Groups',
                      schema: 'Group', // api/model/Group.js,
                      type: 'array'
                  }
              },
              parameters: []

          }
      },
      'put /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['PUT', 'POST'],
              summary: 'Update Groups ',
              description: 'Update Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'Updated Group',
                      schema: 'Group' // api/model/Group.js
                  }
              },
              parameters: [
                  'Group' // api/model/Group.js
              ]

          }
      }
  };



  ```


  ## License

  MIT


  ## Maintained By

  [<img src='http://i.imgur.com/Y03Jgmf.png' height='64px'>](http://langa.io)


  [sails-version-image]: https://goo.gl/gTUV5x

  [sails-url]: http://sailsjs.org

  [npm-image]: https://img.shields.io/npm/v/sails-swagger.svg?style=flat

  [npm-url]: https://npmjs.org/package/sails-swagger

  [ci-image]:
  https://img.shields.io/travis/langateam/sails-swagger/master.svg?style=flat

  [ci-url]: https://travis-ci.org/langateam/sails-swagger

  [daviddm-image]:
  http://img.shields.io/david/langateam/sails-swagger.svg?style=flat

  [daviddm-url]: https://david-dm.org/langateam/sails-swagger

  [codeclimate-image]:
  https://img.shields.io/codeclimate/github/langateam/sails-swagger.svg?style=flat

  [codeclimate-url]: https://codeclimate.com/github/langateam/sails-swagger
sarnowski/swagger1st: >
  ## swagger1st: A Swagger-First Clojure Ring handler


  ![Maven
  Central](https://img.shields.io/maven-central/v/org.zalando/swagger1st.svg)

  [![Build
  Status](https://travis-ci.org/zalando-stups/swagger1st.svg?branch=master)](https://travis-ci.org/zalando-stups/swagger1st)

  [![codecov](https://codecov.io/gh/zalando-stups/swagger1st/branch/master/graph/badge.svg)](https://codecov.io/gh/zalando-stups/swagger1st)


  swagger1st is a Clojure [Ring](https://github.com/ring-clojure/ring) handler
  that parses, validates and routes requests

  based on your [Swagger](http://swagger.io/)/OpenAPI definition. It takes the
  opposite approach of
  [ring-swagger](https://github.com/metosin/ring-swagger)—which enables you to
  generate your Swagger spec from your Clojure code—by allowing you to use your
  Swagger spec to generate Clojure code.


  Instead of defining routes and validation rules in your code, you can use
  swagger1st along with [Swagger/OpenAPI's great tool
  set](http://editor.swagger.io/) to specify your API according to the
  [Swagger/Open API 2.0
  Specification](https://github.com/swagger-api/swagger-spec). This enables you
  to specify your API in an API-First, technology-independent format. The
  resulting definition is the ultimate format for publishing, sharing and
  reviewing your API.


  #### Compatibility Overview

  swagger1st aims to implement all of the Swagger/OpenAPI spec's features, so
  that you only have to write your business logic. [This
  document](https://github.com/zalando-stups/swagger1st/blob/master/comp-2.0.md)
  shows which aspects of the spec it currently supports.


  swagger1st will use the Swagger definition of your API as a configuration file
  for processing incoming requests—ensuring that your implementation and
  specification always remain in sync. During runtime, you can inspect and
  easily test

  your API with the built-in [Swagger UI](http://petstore.swagger.io/). You can
  also extend the interpretation of

  your definition according to your own needs.


  Imagine a simple API definition like this:


  ```yaml

  swagger: '2.0'


  info:
    title: Example API
    version: '0.1'

  paths:
    /helloworld:
      get:
        summary: Returns a greeting.
        operationId: example.api/generate-greeting
        parameters:
          - name: firstname
            in: query
            type: string
            pattern: "^[A-Z][a-z]+"
        responses:
            200:
                description: say hello
  ```


  By default, this definition is connected to your business logic via the
  `operationId`, which might be defined like so:


  ```clojure

  (ns example.api
    (:require [ring.util.response :as r]))

  (defn generate-greeting [request]
    (let [firstname (-> request :parameters :query :firstname)]
      (-> (r/response (str "Hello " firstname "!"))
          (r/content-type "plain/text"))))
  ```


  This is all you need to do to define and implement your API. Only fully
  validated requests get to your function,

  so you can rely on swagger1st to properly check all input parameters according
  to your definition. The function itself

  is a normal Clojure function without any dependencies to swagger1st - simple
  as that.


  ### Quickstart


  The following provides instructions for simple, complex and manual setups. For
  all three approaches you'll need to install [Leiningen](http://leiningen.org/)
  as the build tool.


  #### Simple Setup

  If you're bootstrapping a completely new project, or just want to try out
  swagger1st, you can use this Leiningen template:


  ```

  $ lein new swagger1st myproject

  $ cd myproject

  $ lein ring server-headless

  ```


  This will run a local web server on port 3000, so you can interact with the
  API at <http://localhost:3000/>. Also, you might want to have a look at
  <http://localhost:3000/ui/> for a graphical interface to explore and
  experiment with your API (using [Swagger UI](http://petstore.swagger.io/)).


  ### Complex Setup


  To see how you can handle dependency injection with swagger1st, generate a
  project setup that includes Stuart Sierra's

  [component](https://github.com/stuartsierra/component) framework:


  ```

  $ lein new swagger1st myproject +component

  $ cd myproject

  $ lein run -m myproject.core

  ```


  As with the simple setup above, this will launch a local web server on port
  3000.


  ### Manual Setup


  The following steps describe how to manually set up swagger1st in a Clojure
  project. This is especially useful if you want to integrate it into an
  existing project or cannot use the provided template for other reasons.


  Use the following dependency in your [Leiningen](http://leiningen.org/)
  project:

      [org.zalando/swagger1st "<latest>"]

  This creates a Ring-compliant handler:


  ```clojure

  (ns example
    (:require [io.sarnowski.swagger1st.core :as s1st]
              [io.sarnowski.swagger1st.util.security :as s1stsec]))

  (def app
    (-> (s1st/context :yaml-cp "my-swagger-api.yaml")
        (s1st/discoverer)
        (s1st/mapper)
        (s1st/parser)
        (s1st/protector {"oauth2" (s1stsec/allow-all)})
        (s1st/executor)))
  ```


  ### Commands for Development


  ```shell

  # get the source

  $ git clone https://github.com/zalando-stups/swagger1st.git

  $ cd swagger1st


  # run the tests

  $ lein test


  # run all tests, including performance benchmarks

  $ lein test :all


  # build an own artifact for local development

  $ lein install


  # release a new version

  $ lein release :minor

  ```


  For interactive development, you can start a REPL by typing `lein repl`.


  ### Projects Using Swagger1st in Production


  - [Friboo](https://github.com/zalando/friboo), a utility library for writing
  microservices in Clojure, with support for Swagger and OAuth. It uses
  swagger1st at its base for RESTful HTTP endpoints and also integrates with the
  [component](https://github.com/stuartsierra/component) framework.

  - [STUPS.io](https://stups.io/) components
  [Kio](https://github.com/zalando-stups/kio),
  [PierOne](https://github.com/zalando-stups/pierone) (a complete Docker
  registry based on S3),
  [Essentials](https://github.com/zalando-stups/essentials),
  [TWINTIP](https://github.com/zalando-stups/twintip-storage) and
  [mint](https://github.com/zalando-stups/mint-storage)


  ### The Ring Handler in Detail


  * `s1st/context` (required)
      * Creates a new context from a given definition. This context will be used by the next steps to prepare the
        execution of requests.
  * `s1st/discoverer` (optional)
      * The discoverer enables certain HTTP endpoints, that makes it easy to work with your API. In particular, this
        enables the Swagger UI under the path `/ui/` and exposes the Swagger definition under `/swagger.json`.
  * `s1st/mapper` (required)
      * The mapper denormalizes the given definition (e.g. resolves all `$ref`s) and figures out, which request definition
        maps to the actual incoming request. After this function, your `request` map contains the `:swagger` key, which
        contains a `:request` key containing the denormalized definition of the request and a `:key` key which can be used
        to uniquely identify a request.
  * `s1st/parser` (required)
      * The parser parses the incoming request according to the definition and validates all inputs.
  * `s1st/protector` (optional)
      * The protector can enforce all security definitions for you. As the security check implementations vary depending
        on your environment, this is only a framework to hook into the system and define callbacks for the actual checks.
  * `s1st/executor` (required)
      * The executor executes your defined function in the end. At this point, the whole definition was validated and only
        valid requests make it up until here. You can also specify an own function resolver function in order to hook into
        your own framework.

  ### License


  Copyright (c) 2015, Tobias Sarnowski

  Copyright (c) 2016, Zalando SE


  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted,

  provided that the above copyright notice and this permission notice appear in
  all copies.


  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL

  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
  AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,

  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
  CONNECTION WITH THE USE OR PERFORMANCE OF

  THIS SOFTWARE.
lucybot/api-spec-converter: >
  # api-spec-converter

  [![Share on Twitter][twitter-image]][twitter-link]


  [![Chat on gitter][gitter-image]][gitter-link]

  [![NPM version][npm-image]][npm-link]

  [![Build status][travis-image]][travis-link]


  [![Dependency status][deps-image]][deps-link]

  [![devDependency status][devdeps-image]][devdeps-link]


  Convert between API description formats such as [Swagger](http://swagger.io/)
  and [RAML](http://raml.org/)


  **Currently only supports conversion to OpenAPI(fka Swagger) 2.0 format, and
  from OpenAPI 2.0 to OpenAPI 3.0.x**


  You can also use the online version at
  https://lucybot-inc.github.io/api-spec-converter/.


  ## Installation


  ### Command Line

  > Problems? See [issue
  #132](https://github.com/LucyBot-Inc/api-spec-converter/issues/132)

  ```bash

  npm install -g api-spec-converter

  ```


  ### NodeJS/Browser

  ```bash

  npm install --save api-spec-converter

  ```


  ## Usage


  ### Command Line

  ```bash

  $ api-spec-converter -h

    Usage: api-spec-converter [options] <URL|filename>

    Convert API descriptions between popular formats.

    Supported formats:
      * swagger_1
      * swagger_2
      * openapi_3
      * api_blueprint
      * io_docs
      * google
      * raml
      * wadl

    Options:

      -h, --help              output usage information
      -V, --version           output the version number
      -f, --from <format>     Specifies format to convert
      -t, --to <format>       Specifies output format
      -s, --syntax [syntax]   Specifies output data syntax: json or yaml. Defaults to json
      -o, --order [sortOrder] Specifies top fields ordering: openapi or alpha. Defaults to openapi
      -c, --check             Check if result is valid spec
      -d, --dummy             Fill missing required fields with dummy data
  ```


  Example:

  ```bash

  $ api-spec-converter --from=swagger_1 --to=swagger_2 --syntax=yaml
  --order=alpha
  https://raw.githubusercontent.com/LucyBot-Inc/api-spec-converter/master/test/input/swagger_1/petstore/pet.json
  > swagger.json

  ```


  ### NodeJS


  ### Options

  * `from` - source format (see formats below)

  * `to` - desired format (see formats below)

  * `source` - Filename, URL, or JS object for the source

  ### Simple example:

  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  }, function(err, converted) {
    console.log(converted.stringify());
    // For yaml and/or OpenApi field order output replace above line
    // with an options object like below
    //   var  options = {syntax: 'yaml', order: 'openapi'}
    //   console.log(converted.stringify(options));
  })

  ```

  ### Callback vs Promises

  This library has full support for both callback and promises.

  All async functions return promises but also will execute callback if
  provided.


  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })

  .then(function(converted) {
    console.log(converted.stringify());
  });

  ```

  ### Advanced features:

  ```js

  var Converter = require('api-spec-converter');

  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })
    .then(function(converted) {
      // [Optional] Fill missing fields with dummy values
      converted.fillMissing();

      // [Optional] Validate converted spec
      return converted.validate()
        .then(function (result) {
          if (result.errors)
            return console.error(JSON.stringify(errors, null, 2));
          if (result.warnings)
            return console.error(JSON.stringify(warnings, null, 2));

          fs.writeFileSync('swagger2.json', converted.stringify());
        });
    });
  ```


  ### Browser

  ```js

  <script
  src="node_modules/api-spec-converter/dist/api-spec-converter.js"></script>

  APISpecConverter.convert(...)

  ```


  ## Supported Formats


  * [Swagger
  1.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/1.2.md)
  (swagger_1)

  * [OpenAPI(fka Swagger)
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  (swagger_2)

  * [OpenAPI
  3.0.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  (openapi_3)

  * [I/O Docs](https://github.com/mashery/iodocs) (io_docs)

  * [API
  Blueprint](https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md)
  (api_blueprint)

  * [Google API
  Discovery](https://developers.google.com/discovery/v1/reference/apis) (google)

  * [RAML](http://raml.org/spec.html) (raml)

  * [WADL](http://www.w3.org/Submission/wadl/) (wadl)



  ## Conversion Table


  |from:            
  |swagger_1|swagger_2|openapi_3|io_docs|api_blueprint|google|raml|wadl|

  -------------------|:-------:|:-------:|:-----:|:-----:|:-----------:|:----:|:--:|:--:|

  |to swagger_1      |  n/a    |         |       |       |             |     
  |    |    |

  |to swagger_2      | :white_check_mark: |    n/a  | :white_check_mark:  |
  :white_check_mark: | :white_check_mark: | :white_check_mark: |
  :white_check_mark: | :white_check_mark: |

  |to openapi_3      |   :eight_spoked_asterisk:     | :white_check_mark: | 
  n/a  |   :eight_spoked_asterisk:  | :eight_spoked_asterisk: | 
  :eight_spoked_asterisk:   | :eight_spoked_asterisk:  |
  :eight_spoked_asterisk:  |

  |to io_docs        |         |         |       |  n/a  |             |     
  |    |    |

  |to api_blueprint  |         |         |       |       |    n/a      |     
  |    |    |

  |to google         |         |         |       |       |             |  n/a
  |    |    |

  |to raml           |         |         |       |       |             |      |
  n/a|    |

  |to wadl           |         |         |       |       |             |     
  |    | n/a|


  #### Key

  * :white_check_mark: - direct conversion

  * :eight_spoked_asterisk: - conversion via swagger_2


  ## Contributing

  Contributions are welcome and encouraged.


  ### Testing

  Please add a test case if you're adding features or fixing bugs. To run the
  tests:


  ```bash

  WRITE_GOLDEN=true npm test

  ```


  ### Releases

  ```

  npm run browserify

  git commit -a -m "Build browser distribution"

  npm version minor # or major/patch

  npm publish

  git push --follow-tags

  ```


  [twitter-image]:
  https://img.shields.io/twitter/url/http/lucybot.github.io/api-spec-converter.svg?style=social

  [twitter-link]:
  https://twitter.com/intent/tweet?text=Convert+between+API+description+formats+such+as+Swagger+and+RAML:&url=http%3A%2F%2Flucybot.github.io%2Fapi-spec-converter

  [gitter-image]:
  https://img.shields.io/gitter/room/lucybot/api-spec-converter.svg

  [gitter-link]: https://gitter.im/lucybot/api-spec-converter

  [npm-image]: https://img.shields.io/npm/v/api-spec-converter.svg

  [npm-link]: https://npmjs.org/package/api-spec-converter

  [travis-image]:
  https://img.shields.io/travis/LucyBot-Inc/api-spec-converter.svg

  [travis-link]: https://travis-ci.org/LucyBot-Inc/api-spec-converter

  [deps-image]: https://img.shields.io/david/lucybot/api-spec-converter.svg

  [deps-link]: https://david-dm.org/lucybot/api-spec-converter

  [devdeps-image]:
  https://img.shields.io/david/dev/lucybot/api-spec-converter.svg

  [devdeps-link]:
  https://david-dm.org/lucybot/api-spec-converter#info=devDependencies
zalando/play-swagger: >
  ## The Play-Swagger plugin is now renamed
  [api-first-hand](https://github.com/zalando/api-first-hand). This version is
  no longer under active development.

  ## Api-First-Hand is actively mantained and offers full functionality of
  Play-Swagger with an exception of Play 2.4 support. Please navigate to
  [api-first-hand](https://github.com/zalando/api-first-hand) if you'd like to
  check out Play-Swagger or create an issue.


  --

  --

  --

  --



  # Play-Swagger


  [![Build
  Status](https://travis-ci.org/zalando/play-swagger.svg)](https://travis-ci.org/zalando/play-swagger)

  [![codecov](https://codecov.io/gh/zalando/play-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/zalando/play-swagger)

  [![Gitter
  Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/zalando/play-swagger?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)


  ## Compatibility


  - Play 2.4

  - Swagger (OpenAPI) 2.0


  ## Status


  This plugin should be enabled using the
  [play-swagger-service](http://www.typesafe.com/activator/template/play-swagger-service)
  activator template 

  as the version in this repository is under active development. The status of
  this software is beta, 

  an end-to-end functional release intended to demonstrate the possibility to
  generate following from a Swagger specification:


  - Play route files

  - Generators of random test data

  - Wrappers for Play route files to convert semantics from http-related to
  domain-related (controller_base)

  - Skeletons for the domain-driven controller implementation

  - Model classes and validation rules

  - Unit tests for invalid and valid parameter sets

  - Security extractors (if needed)

  - Skeletons for custom deserializers (if needed)


  We benefit from community feedback. All comments are welcome!


  # Play-Swagger Tutorial


  This tutorial is based on the
  [play-swagger-service](http://www.typesafe.com/activator/template/play-swagger-service)
  activator template.


  ```bash

  $ activator new playground play-swagger-service

  ```


  The template project contains following:


  - `tutorial` folder with HTML tutorial

  - `public/swagger` folder containing static files needed for swagger UI

  - `project` folder containing pre-configured `plugins.sbt` file with a
  definition of all required resolvers and plugins

  - `conf` folder with following customized contents:
      * `routes` file with route configuration for Swagger UI, example specification and commented out links to other examples
      * `example.yaml`, a demo Swagger specification. The specification has a dummy implementation in `app` folder. 
      * `examples` folder containing other different Swagger specification examples. Each specification in this folder represents some aspect of the Play-Swagger plugin in more details.
          For the specification to be picked up by the plugin it must be moved into the `conf` folder. It is allowed to have multiple Swagger specifications in the `conf` folder at the same time. 
  - `app` directory with following template implementations:
      * `controllers/Swagger.scala` - a backend side of the Swagger UI
      * `generated_controllers/example.yaml.scala` - a dummy implementation of the example controller. Will be (re)generated if deleted
      * `security/example.yaml.scala` - a marshaller for OAuth2 tokens. Will not be regenerated until 
          a) deleted or renamed
          b) explicitly requested by issuing a `apiFirstSecurity` command 


  ## Welcome to Play-Swagger


  Congratulations, you just created a new Play-Swagger application!


  The [Play Framework](http://www.playframework.com/) with the
  [Play-Swagger](https://github.com/zalando/play-Swagger/) 

  plugin make it easy to build RESTful web services from a Swagger API
  specification as the single source of truth. 

  Play is based on a lightweight, stateless, web-friendly architecture. Built on
  [Akka](http://akka.io), 

  Play provides predictable and minimal resource consumption for highly-scalable
  applications. 

  The Play-Swagger plugin takes Swagger API definitions and treats them as the
  single source of truth of your REST services.


  Play-Swagger supports round-trip regeneration and compilation of:


  - Play routes definitions (managed).

  - Swagger domain model definitions and parameters onto Scala case classes
  (managed).

  - Swagger domain model constraints onto Play validations (managed).

  - Generators for random test data generation of parameter values (managed).

  - Unit tests for validating your service at the API boundary (managed).

  - Swagger path definitions onto skeletons for Play controller implementations
  (unmanaged).


  In the list above, "(managed)" means that the code is managed by sbt. The code
  is not controlled 

  and altered by you, the programmer of the REST service. The plugin takes your
  Swagger API definition as the single 

  source of truth and regenerates these code parts in a consistent manner.

  You'll instead be focusing on implementing the service business logic in an
  (unmanaged) Play controller class 

  that is generated once. Subsequent regenerations keep the code that you have
  added, either by commenting out the 

  parts that are no longer valid, or by adding parts that are needed because you
  have made a change to the API.


  Manual generation and compilation of:


  - Security extractors

  - Unmarshallers for custom content types 


  is supported in the case if


  a) No security extractor or unmarshaller with the same name already exists

  b) The developer issues `apiFirstSecurity` or `apiFirstMarshallers` sbt
  command 


  ## Run Your Application


  Before we go any further, let's run the application.


  - Open a shell and `cd` into your service project directory.

  - Start `sbt` and `run` the service.

  - View the running application at
  [http://localhost:9000](http://localhost:9000).


  The service template comes with the Swagger UI frontend included, 

  run statically from the within Play, which provides a sandbox for your
  service. 

  The template is configured with a template Swagger API definition called
  `example.yaml` 

  and located in the `conf` directory of the Play application. 


  The `example.yaml` definition provides an example [API
  description](https://github.com/zalando/play-swagger-service/blob/master/conf/example.yaml)


  This definition contains three end points: 

  - the `/token` path, which accept the `GET` and `POST` methods

  - the `/todos/{user_id}`, which accepts the `GET` method. 


  The `GET /token` API plays a role of an authentication server and is used by
  the Swagger UI for OAuth token requests.

  The `POST /token` API represents an authorization server and is used by the
  security part of the 

  generated code to validate OAuth tokens.
   
  The `GET /todos/{user_id}` takes a path parameter `user_id` and returns a TODO
  list for given user. 

  For the client to be allowed to access this endpoint, it must provide an OAuth
  token with the scope `admin:org`. 

  The token can be requested using the Swagger UI.


  Try it out for yourself: 


  Click the [default](http://localhost:9000/) button to expand the API
  definition in the Swagger UI.



  # Play Routes Integration


  As a Play application developer, you are used to defining your endpoints in
  the `conf/routes` file. 

  Not so with the Play-Swagger plugin! Swagger API specifications already define
  endpoints as `path` definitions, 

  as seen in the example above. So why do the work twice, right? Instead, the
  Play-Swagger plugin requires you to 

  link your API definition in the routes file ones—making all Swagger
  API-defined endpoints available as children 

  of one single path context location, and generating Play route definitions
  from them (as shown below):


  ```

  ->      /example        example.yaml.Routes

  ```


  Note that the `conf/routes` file provided by this activator template also
  contains a couple of additional `GET` 

  mappings required for the the Swagger UI sandbox.


  There are a couple of commented out links to other examples. If you activate
  some specification by moving it from 

  the `examples` folder into the `conf` folder, you'll need to uncomment an
  appropriate line in the `routes` file in

  order for play to be able to find it.  



  ## Swagger Domain Definitions


  Scala domain model definitions are generated for all data types defined as
  Swagger parameters in an API specification. 

  Swagger parameters can be of path, query, header, form or body types, and
  consist of either primitive data types or 

  more complex types composed from objects and arrays with primitives as
  leaves. 


  Both primitive types and complex types are mapped to scala.


  As an example, let's look at the Swagger API specification file
  [`simple.petstore.api.yaml`](https://github.com/zalando/play-swagger-service/blob/master/conf/examples/simple.petstore.api.yaml), 

  which defines the API of a simple pet store. It contains a model definition
  for a pet.


  ```yaml

  definitions:
    pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
  ```


  This definition consists of an object `pet` containing the required properties
  `id` and `name` 

  and the optional property `tag`. The Swagger primitive types of these
  properties are a 64-bit `integer` 

  and (twice) a `string`, successively.  The Play-Swagger plugin will map this
  definition on to a generated Scala model.


  ```scala

  package simple.petstore.api


  package object yaml {

      type PetTag = Option[String]

      case class Pet(id: Long, name: String, tag: PetTag)
  }

  ```


  This generated model contains a type definition `PetTag`, which declares a
  type alias for the optional `tag` property, 

  and a `Pet` case class with the properties as named in the Swagger API
  definition and mapped on the subsequent 

  Scala primitive or declared types. The case class and type alias are generated
  in an package object `yaml`, 

  this package  object itself is contained in the package `simple.petstore.api`
  so that full object name corresponds 

  to the API filename.


  Note that models are generated within a Play application as _managed_ code in
  the target folder. 

  Generated model code is not intended to be altered.  We should instead look
  upon the Swagger definition as the single 

  source of truth, and as the source code that defines our model.

  The Swagger specification file of our API is, in that sense, part of the
  codebase. 

  Even though the generated `Pet` case class is managed by the plugin, and not
  us, it can (of course) 

  be used in our application codebase after being imported.


  ```scala

  import simple.petstore.api.yaml._


  val pet = Pet(0L, "Tucker", Some("Greyhound"))

  ```


  ## Specification Cross-References


  A `$ref` element of the specification is allowed to contain a name of file as
  it's part. Because of this, it is possible to split 

  a single specification into multiple files as shown in
  [`cross_spec_references.yaml`](https://github.com/zalando/play-swagger-service/blob/master/conf/examples/cross_spec_references.yaml) 

  example. It is also possible to reference a definition in one specification
  from another specification. 

  In this case for each reference an independent copy of the class definition
  will be created for each referencing specification. 

  The definition is then placed into the appropriate package for each
  specification. 


  Thus, even if multiple classes with  the same name and structure might be
  generated, they all will coexist in their 

  own separate namespaces and won't be interchangeable.



  ## Primitive Types


  Swagger version 2.0 allows for primitive data types based on the types defined
  by 

  [JSON-Schema](http://json-schema.org/latest/json-schema-core.html#anchor8).


  When generated as Scala, the following mapping applies:


  | Common Name | Swagger Type | Swagger Format | Scala
  Type                                  |

  |-------------|--------------|----------------|---------------------------------------------|

  | integer     | integer      | int32          |
  scala.Int                                   |

  | long        | integer      | int64          |
  scala.Long                                  |

  | float       | number       | float          |
  scala.Float                                 |

  | double      | number       | double         |
  scala.Double                                |

  | big int     | integer      |                |
  scala.math.BigInt                           |

  | big decimal | number       |                |
  scala.math.BigDecimal                       |

  | boolean     | boolean      |                |
  scala.Boolean                               |

  | string      | string       |                |
  scala.String                                |

  | byte        | string       | byte           |
  de.zalando.play.controllers.Base64String    |

  | binary      | string       | binary         |
  de.zalando.play.controllers.BinaryString    |

  | date        | string       | date           |
  org.joda.time.LocalDate                     |

  | datetime    | string       | date-time      |
  org.joda.time.DateTime                      |

  | password    | string       | password       |
  scala.String                                |

  | file        | file         |                |
  java.io.File                                |


  Additionally, if a validation of type "enum" is defined for some primitive
  type, a trait and a set of case objects forming an ADT 

  will be generated for this enum.


  ## Complex Types


  Complex types are made up of primitive objects, or nested objects.


  ### Objects


  Complex object types are defined in Swagger model definitions as either
  objects or arrays.


  Objects are, again, based on the
  [JSON-Schema](http://json-schema.org/latest/json-schema-core.html#anchor8)
  specification 

  and defined as Swagger [Schema
  Objects](https://github.com/Swagger-api/Swagger-spec/blob/master/versions/2.0.md#schema-object) 

  for parameter definitions of `type: "object"`.

  For example, given a Swagger API definition file `api.yaml` containing a model
  that defines a `person` as an object 

  with the properties `name` and `age` of the primitive types `string` and
  `integer` subsequently, 

  this object will be mapped on a Scala case class, and generated in a Scala
  package object (namespace) with the same name 

  as the extension of the file the specification is read from and in a package
  with the same name as the 

  Swagger definition file in which the model is defined—that is, `api`


  ```yaml

  definitions:
    person:
      type: object
      required:
        - name
        - age
      properties:
        name:
          type: string
        age:
          type: integer
          format: int32
  ```


  Is generated into:


  ```scala

  package api

  package object yaml {
      case class Person(name: String, age: Int) 
  }

  ```


  ### Nested Objects


  Nested objects are generated adjourned but referenced hierarchically. E.g.


  ```yaml

  definitions:
    parent:
      type: object
      required:
        - child
      properties:
        child:
          type: object
          required:
            - name
          properties:
            name:
              type: string
  ```


  Is generated into:


  ```scala

  package api

  package object yaml {
      case class Parent(child: ParentChild) 
      case class ParentChild(name: String) 
  }


  ```


  ### Optionality


  Swagger, by default, defines object properties to be optional, which can be
  overridden by providing a list of `required` 

  object properties as already used in the examples above. Optional properties
  are mapped upon Scala's `Option` type, 

  for which a type alias is generated for each property that is optional. E.g.


  ```yaml

  definitions:
    product:
      required:
        - name
      properties:
        name:
          type: string
        tag:
          type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
      type ProductTag = Option[String]
      case class Product(name: String, tag: ProductTag) 
  }


  ```


  As objects can be nested, so can object property optionality. To facilitate
  for nested optionality, we generate a nested scala `Option` type alias. E.g.


  ```yaml

  definitions:
    Basic:
      properties:
        optional:
          type: object
          properties:
            nested:
              type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
      type BasicOptional = Option[BasicOptionalOpt]
      type BasicOptionalNested = Option[String]

      case class BasicOptionalOpt(nested: BasicOptionalNested) 
      case class Basic(optional: BasicOptional) 
  }

  ```



  ### Parameter optionality


  As object properties can be optional, so can be query, header, body or form
  parameters. 

  In the case if they are not required, they are mapped to the Scala's `Option`
  type. 


  Path parameters are _must_ be declared as required.


  In the case, if a parameter is _not_ required, it is allowed to have a default
  value.



  ### Extension


  Objects can extend other objects via employment of Swagger's `allOff`
  property. In the example below, the `ExtendedErrorModel` inherits _all of_ the
  properties of the `ErrorModel` which it refers to—that is, the properties
  `message` and `code`—and _extends_ this model with the property `rootCause`.
  Swagger object extension is mapped by duplicating inherited properties in the
  object that extends. E.g.


  ```yaml

  definitions:
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
    ExtendedErrorModel:
      allOf:
      - $ref: '#/definitions/ErrorModel'
      - type: object
        required:
        - rootCause
        properties:
          rootCause:
            type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
    import scala.math.BigInt
    case class ErrorModel(message: String, code: BigInt) 
    case class ExtendedErrorModel(message: String, code: BigInt, rootCause: String) 
  }


  ```


  ### Polymorphism


  Polymorphic object definitions are possible through employment of the Swagger
  `discriminator` property. 

  In the example definition below, an abstract `Pet` defines what concrete `Cat`
  and `Dog`s have in common. 

  Swagger object models define data, so a discriminator property is required to
  distinguish concrete cat and dog 

  instances as they are serialised to and from the API. In this sense, the
  discriminator property works 

  in the same way as a discriminator column works in ORM frameworks when mapping
  a class hierarchy onto a single table. 

  It simply contains a value that maps onto one of the concrete types—for
  example, `petType: "Cat"` or `petType: "Dog"`.


  ```yaml

  definitions:
    Pet:
      discriminator: petType
      properties:
        name:
          type: string
        petType:
          type: string
      required:
      - name
      - petType
    Cat:
      allOf:
      - $ref: '#/definitions/Pet'
      - properties:
          huntingSkill:
            type: string
            default: lazy
            enum:
            - clueless
            - lazy
            - adventurous
            - aggressive
        required:
        - huntingSkill
    Dog:
      allOf:
      - $ref: '#/definitions/Pet'
      - properties:
          packSize:
            type: integer
            format: int32
        required:
        - packSize
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      trait IPet {
          def name: String
          def petType: String
      }

      case class Cat(name: String, petType: String, huntingSkill: CatHuntingSkill) extends IPet
      case class Dog(name: String, petType: String, packSize: Int) extends IPet
      case class Pet(name: String, petType: String) extends IPet

      sealed trait CatHuntingSkill { def value: String }
      case object Clueless extends CatHuntingSkill { val value = "clueless" }
      case object Lazy extends CatHuntingSkill { val value = "lazy" }
      case object Adventurous extends CatHuntingSkill { val value = "adventurous" }
      case object Aggressive extends CatHuntingSkill { val value = "aggressive" }
      implicit def stringToCatHuntingSkill(in: String): CatHuntingSkill = in match {
          case "clueless" => Clueless
          case "lazy" => Lazy
          case "adventurous" => Adventurous
          case "aggressive" => Aggressive
      }
  }


  ```


  Please note how the enumeration of cat's `huntingSkill`'s get's translated
  into the ADT with a sealed trait `CatHuntingSkill`

  and four case objects implementing that trait.


  ### Additional Properties


  Swagger's model language allows objects' additional properties to be loosely
  defined employing the `additionalProperties` annotation 

  in order to model dictionaries. These dictionaries are mapped to Scala's `Map`
  type, for which a type alias is 

  generated following the same (by now) well-known pattern as for optional
  properties, with the map's key parameter type being a Scala `String`.


  A Swagger additional property definition takes as its type property the
  element type of the dictionary, 

  which can be of primitive or complex type and which is mapped on Scala as the
  map's value parameter type. 

  Swagger allows for one `additionalProperties` annotation per object
  definition, so we can generate this Scala parameter 

  with the static name `additionalProperties`.


  In the following example we define a Swagger model object definition
  `KeyedArray` that uses the `additionalProperties` 

  annotation to provide the object with a set of key value mappings from string
  to array. E.g.


  ```yaml

  definitions:
    KeyedArrays:
      type: object
      additionalProperties:
        type: array
        items:
          type: integer
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper
      import scala.math.BigInt
      import scala.collection.immutable.Map

      type KeyedArraysAdditionalPropertiesCatchAll = ArrayWrapper[BigInt]
      type KeyedArraysAdditionalProperties = Map[String, KeyedArraysAdditionalPropertiesCatchAll]
      case class KeyedArrays(additionalProperties: KeyedArraysAdditionalProperties) 
  }

  ```


  ## Arrays


  Swagger's `array` is used to define properties that hold sets or lists of
  model values—possibly of a primitive type, 

  but complex element types are also allowed. Depending on the place where the
  array definition appears, Swagger array can be mapped to one of two Scala
  types, parametrised for the element type that it contains:

  - if an array only defined inline as a part of the response definition, it is
  translated to a `Seq` type

  - otherwise (array appears in the parameter definition or in the `definitions`
  part of the specification) it is 

  defined as a `de.zalando.play.controllers.ArrayWrapper`


  For example, in the snippet below, an `Activity` object definition is referred
  to as an item element in the 

  `messages` property of `type: array` of the containing object definition
  `Example`. 

  A Scala type alias will be generated for the array type (just as we've seen
  before with optional properties), 

  after which the array-containing property can be generated within the case
  class as being of this alias type. 

  E.g. in the Swagger definition and code


  ```yaml

  definitions:
    Activity:
      type: object
      required:
      - actions
      properties:
        actions:
          type: string
    Example:
      type: object
      required:
      - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/definitions/Activity'
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper

      type ExampleMessages = ArrayWrapper[Activity]

      case class Activity(actions: String) 
      case class Example(messages: ExampleMessages) 
  }


  ```


  If the description of the same array is inlined as a part of the response
  definition like that:


  ```yaml

  paths:
    /api:
      get:
        responses:
          200:
            schema:
              type: object
              required:
              - messages
              properties:
                messages:
                  type: array
                  items:
                    $ref: '#/definitions/Activity'
            description: array payload
  definitions:
    Activity:
      type: object
      required:
      - actions
      properties:
        actions:
          type: string
  ```


  than the `Seq` scala type will be used:

  ```scala

  package api

  package object yaml {
      type ApiGetResponses200Messages = Seq[Activity]
      case class Activity(actions: String) 
      case class ApiGetResponses200(messages: ApiGetResponses200Messages) 
  }

  ```



  ### Nested Arrays


  Array definition types can be nested and are possibly optional. 

  The following (contrived) snippet depicts the generated Scala code when both
  definition types are 

  employed in a somewhat non-useful manner. The intent of this example is to
  show that the case 

  class definitions are rather concisely generated, even though a stack of type
  aliases is needed 

  to make sure that we still refer in Scala code to an aptly named Swagger
  definition—especially 

  in conjunction with the object properties being optional. Next to its
  benefits, 

  type safety against `null` pointers does have an associated cost as well.


  ```yaml

  definitions:
    Activity:
      type: object
      properties:
        actions:
          type: string
    Example:
      type: object
      properties:
        messages:
          type: array
          items:
            type: array
            items:
              $ref: '#/definitions/Activity'
        nested:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: array
                items:
                  type: string
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper

      type ExampleMessagesOpt = ArrayWrapper[ExampleMessagesOptArr]
      type ExampleMessages = Option[ExampleMessagesOpt]
      type ExampleNested = Option[ExampleNestedOpt]
      type ExampleMessagesOptArr = ArrayWrapper[Activity]
      type ExampleNestedOptArrArrArr = ArrayWrapper[String]
      type ExampleNestedOptArrArr = ArrayWrapper[ExampleNestedOptArrArrArr]
      type ActivityActions = Option[String]
      type ExampleNestedOptArr = ArrayWrapper[ExampleNestedOptArrArr]
      type ExampleNestedOpt = ArrayWrapper[ExampleNestedOptArr]

      case class Activity(actions: ActivityActions) 
      case class Example(messages: ExampleMessages, nested: ExampleNested) 
  }


  ```


  ## Swagger Validations


  Swagger API definitions allow for constraints to be put on parameter types. 

  We have already seen the `required` constraint, used to mark a parameter or
  specific field within 

  a domain definition to be required upon input. Additional constraints, as
  defined by the 

  [Parameter
  Object](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameterObject), 

  can be added to your API definition. The Play-Swagger plugin will generate
  validations for these parameter 

  constraints and make sure that your controller methods are only called if the
  input of your service 

  complies to those constraints. 


  In the example below, the API definition of the `token` parameter of 

  type `Base64String`, as the form parameter, contains validation rules for the
  lenght of the perameter as well as a regexp pattern the value of the parameter
  must confirm to.

  The parameter is also required.


  ```yaml

  ...

  parameters:
        - name: token
          in: formData
          description: oauth2 token
          type: string
          format: byte
          pattern: "[A-Za-z0-9]*"
          minLength: 5
          maxLength: 100
          required: true
  ...

  ```


  Let's take another example:


  ```yaml

  ...
      get:
        parameters:
        - name: state
          in: query
          description: Any application state to be forwarded back to the frontend
          type: string
          minLength: 1
          maxLength: 110
          required: false
  ...

  ```


  The `state` parameter is of type string, is not required and has no default
  value. 

  It is also only allowed to have a state of length between 1 and 110, otherwise
  it won't pass validation. 

  For the demo purposes, let's change it's type to `integer` and make it
  required. 


  As the parameter is required now, the `default` value cannot be present. The
  `maxLength` and `maxLength` validations 

  are not allowed for integer parameters, therefore let's replace them with
  `minimum` and `maximum` values:
      
  ```yaml

  ...
      get:
        parameters:
        - name: state
          in: query
          description: Any application state to be forwarded back to the frontend
          type: integer
          format: int32
          required: true
          minimum: 2000
          maximum: 2100      
  ...

  ```    



  As we just changed the parameter type, refreshing Swagger UI will, in addition
  to generating validations 

  for that parameter type, also force a regeneration of the model consistent
  with the validation. 

  That's nice, but note that it will break the current implementation of the
  controller class, as the 

  implementation of the `postAction` expects `state` to be of type `String`.


  ![Validation screenshot](/docs/validations-01.png)


  Let's change the implementation. The second parameter `state` is no longer 

  of type `Option[String]` but of type `Int`. We change the implementation to
  take this fact into the account:


  ```scala

  ...

  val tokenGet = tokenGetAction { input: (String, String, String, Int) =>
      val (redirect_uri, scope, response_type, state) = input
      // ----- Start of unmanaged code area for action  TokenService.tokenGet
      val statePart = s"""state=$state"""
  ...

  }

  ```


  Refreshing Swagger UI and trying out a couple of integer values for `state`
  shows that the service 

  now excepts value within the range `[2000..2100]`, but returns a descriptive
  error when outside. I.e.


  ```json

  [
    {
      "messages": [
        "error.max"
      ],
      "args": [
        2100
      ]
    }
  ]

  ```


  ## Test Generators


  Having an API definition as the single source of truth in your codebase—with
  formal type specification of the in- and output values, 

  including their constraints—provides for a powerful feature when it comes to
  testing. 

  The Play-Swagger plugin automates the creation of test data generators that
  can drive property checks directly 

  from the API specification. Play-Swagger derives data generators and unit
  tests directly from your Swagger API specification.


  Property-based testing using generator-driven property checks is a cool way to
  test the validity of your application 

  according to the rules or properties that apply to your application.
  Properties, in this sense, are high-level 

  specifications that should always hold for a range of data values. The idea is
  to generate a range of data 

  values for your data types and let (also generated) tests assert that the
  properties of these data types hold. 

  A Swagger API definition contains formal type definitions _and_ constraints
  for all data values, and the Play-Swagger 

  plugin maps these types on managed Scala source code that represents the data
  types, so it is also possible to map 

  these API definitions on test data generators that provide a range of data
  values for these types. 

  The plugin does exactly that: It creates managed test data generators and unit
  tests that assert whether your 

  application still complies to your specification. It does so in a
  single-source-of-truth manner, 

  taking the Swagger API definition as the source.


  We employ the ScalaTest [property-based
  testing](http://www.scalatest.org/user_guide/property_based_testing) 

  functionality as the framework to generate the data values, and map the data
  types of our API definition on 

  the test data generators that are created by the plugin. ScalaTest provides 

  `org.scalacheck.Gen` and `org.scalacheck.Arbitrary` objects with utility
  methods that help generate a range of 

  (possibly arbitrary) data values for common Scala types and primitives. The
  Play-Swagger plugin uses these 

  methods to create test data generators specific for the data types of our API
  definition. When necessary, 

  it composes generators from primitive types into generators for complex types,
  so that you end up with a 

  set of generators that provide test data for your complete API.


  As an example, let's take the API definition for the simple pet store—trimmed
  down to the parts defining 

  parameter types, and (for brevity) omitting any non-data definitions and error
  definitions:


  ```yaml

  paths:
    /pets:
      get:
        parameters:
          - name: limit
            in: query
            required: false
            type: integer
            format: int32
        responses:
          default:
            description: error payload
      post:
        parameters:
          - name: pet
            in: body
            required: true
            schema:
              $ref: '#/definitions/newPet'
        responses:
          default:
            description: error payload
    /pets/{id}:
      get:
        parameters:
          - name: id
            in: path
            required: true
            type: integer
            format: int64
        responses:
          default:
            description: error payload
      delete:
        parameters:
          - name: id
            in: path
            required: true
            type: integer
            format: int64
        responses:
          default:
            description: error payload
  definitions:
    pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    newPet:
        required:
          - name
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          tag:
            type: string
  ```


  The `get` method on path `/pets` takes an optional `limit` parameter of common
  type `integer`. 

  The `post` method takes a `newPet` body parameter comprising of the primitive
  attributes `id`, `name` and `tag`, 

  subsequently of common types `long` and `string` (twice). Of these, only the
  `name` attribute is mandatory. 

  The `get` method on the path `/pets/{id}` takes the path parameter `id` of
  common type `long` and returns 

  an array of `pet`s consisting of the same attributes and primitive types as a
  `newPet` - but this time 

  with both `name` and `id` being mandatory. This specification maps to the
  following managed Scala domain model code:



  ```scala

  package example


  package object yaml {

      import de.zalando.play.controllers.PlayPathBindables

      type PetsIdDeleteResponsesDefault = Null
      type NewPetTag = Option[String]
      type PetsIdDeleteId = Long
      type PetsGetLimit = Option[Int]
      type NewPetId = Option[Long]

      case class Pet(id: Long, name: String, tag: NewPetTag) 
      case class NewPet(name: String, id: NewPetId, tag: NewPetTag) 

      implicit val bindable_OptionIntQuery = PlayPathBindables.createOptionQueryBindable[Int]
  }

  ```


  We want to have test data generators that generate an arbitrary range of
  values for the model 

  code shown above - composed from primitive, and sometimes optional, data
  definitions. 

  The Play-Swagger plugin does this by generating two Scala objects: one for the
  Swagger API definition, 

  and one for the API path parts. Each object contains generator factory methods
  for the defined data types, 

  prefixed by `create`, which returns a generator function. A generator function
  takes a given integer count 

  and returns a generated amount of test data for the data type it was created
  for.


  Data types are composed from primitive types, Scala optional types, and
  possibly more complex types. 

  Test data values for the primitive types are generated arbitrarily, employing
  the ScalaCheck 

  `org.scalacheck.Arbitrary.arbitrary[T]` method (the type parameter, replaced
  with Scala's primitive type, 

  on which the Swagger common type is mapped).


  In the code shown below, starting with primitive leaf data values, the `pet`
  parameter's attribute `id` 

  of common type `long` is arbitrarily generated from a `scala.Long`.  Note that
  the `id` attribute is optional, 

  though, for the `newPet` definition. As with the generated model, we created a
  `NewPetIdGenerator` value that 

  takes an arbitrarily generated `scala.Long` id value and generates an option
  value from it, employing the 

  ScalaCheck `org.scalacheck.Gen.option[T]`.  This generator will generate test
  data values comprising of `None` 

  and `Some` arbitrarily id value. It's probably best to let the Scala generator
  code speak for itself. 

  Note how it composes according to the same structure as the Scala model code.


  ```scala

  package example.yaml


  import org.scalacheck.Gen

  import org.scalacheck.Arbitrary

  import play.api.libs.json.scalacheck.JsValueGenerators

  import Arbitrary._


  object Generators extends JsValueGenerators {

      def createNullGenerator = _generate(NullGenerator)
      def createNewPetTagGenerator = _generate(NewPetTagGenerator)
      def createLongGenerator = _generate(LongGenerator)
      def createPetsGetLimitGenerator = _generate(PetsGetLimitGenerator)
      def createNewPetIdGenerator = _generate(NewPetIdGenerator)

      def createPetGenerator = _generate(PetGenerator)
      def createNewPetGenerator = _generate(NewPetGenerator)

      def NullGenerator = arbitrary[Null]
      def NewPetTagGenerator = Gen.option(arbitrary[String])
      def LongGenerator = arbitrary[Long]
      def PetsGetLimitGenerator = Gen.option(arbitrary[Int])
      def NewPetIdGenerator = Gen.option(arbitrary[Long])

      def PetGenerator = for {
          id <- arbitrary[Long]
          name <- arbitrary[String]
          tag <- NewPetTagGenerator
      } yield Pet(id, name, tag)
      def NewPetGenerator = for {
          name <- arbitrary[String]
          id <- NewPetIdGenerator
          tag <- NewPetTagGenerator
      } yield NewPet(name, id, tag)

      def _generate[T](gen: Gen[T]) = (count: Int) => for (i <- 1 to count) yield gen.sample
  }

  ```


  A `PetGenerator` and `NewPetGenerator` are created and implemented by the
  plugin as a for comprehension 

  that generates data values for each attribute, yielding an instance of a test
  pet. Other generators follow 

  the same pattern but, if necessary, delegate to different child generators.
  From this we acquire a set of 

  test data generators to implement our property-based testing.


  Running the test is as simple as running a test set from sbt. Just type `test`
  from your `sbt` prompt.


  # Building a Play-Swagger Plugin


  To build a plugin, do the following:


  - Clone the repository to your local filesystem

  - Run ```sbt +publishLocal``` in the Play-Swagger directory. This will publish
  the plugin into your local ivy repository


  To use the plugin in a plain Play project:


  - Create a new Play-Swagger project using activator template, for example:
  ```activator new hello-world play-swagger-service```

  - Take a look at the `project/plugins.sbt` of the generated project and add
  required plugins and resolvers to the `project/plugins.sbt` of your Play
  project

  - Do the same for `build.sbt`

  - Put a Swagger specification with a ```.yaml``` or ```.json``` extension into
  the ```conf``` directory

  - Add a specification link (`->`) to the play's routes file



  ## Plugin Architecture


  Ths Play-Swagger plugin has a three-tier architecture:


  * specification - this tier is responsible for finding and parsing a
  specification and converting it into the raw AST format

  * normalisation - this tier performs a couple of optimisations on the AST
  including type deduplication, flattening and parameter dereferencing

  * generation - a final step including transformation of the AST into the
  source-code related data and generation of source code from it   


  The separation of the specification and generation tiers allows for plugging
  in different specification standards 

  and generating source code for different frameworks.



  ## Plugin Project Structure


  There are a couple of sub-projects:


  * `swagger-model` - A standalone Scala Swagger model and a Jackson parser for
  it. Can be used by another projects

  * `api` - This is the project that's automatically added to the runtime
  classpath of any projects that use this plugin.

  * `swagger-parser` - A converter of the Swagger model to the internal AST of
  the plugin

  * `api-first-core` - This is a core of the plugin with minimal functionality.
  It includes defining an AST structure and some transformations on AST.  

  * `play-scala-generator` - The standalone generator for transforming an AST
  into the skeleton of Play-Scala application. 

  * `plugin` - A coupble of sbt plugins, one for each tier:
      - `ApiFirstSwaggerParser` - a plugin wrapping Swagger parsing part 
      - `ApiFirstCore` - a wrapper for AST-related functionality
      - `ApiFirstPlayScalaCodeGenerator` - a wrapper for the Play-Scala generator

  Because of the modular plugin architecture, all modules must be enabled
  separatly in sbt's build.sbt. 

  It is also necessary to configure which parser(s) must be used by the plugin,
  like that: 


  ```scala

  lazy val root = (project in file(".")).enablePlugins(PlayScala, ApiFirstCore,
  ApiFirstPlayScalaCodeGenerator, ApiFirstSwaggerParser)


  apiFirstParsers := Seq(ApiFirstSwaggerParser.swaggerSpec2Ast.value).flatten

  ```


  Please take a look at activator template's configuration for complete example.



  ## Custom Templates For Code Generation


  The PlayScala generator supports custom templates. In order to override
  default template for some of the components,

  please provide your custom template named in accordance to the following list:

      * `play_scala_test.mustache` - for unit tests
      * `play_validation.mustache` - for validators 
      * `generators.mustache` - for test data generators
      * `model.mustache` - for model classes and query and path bindables
      * `play_scala_controller_base.mustache` - for play controller bases 
      * `play_scala_controller_security.mustache` - for security adapters used by controller bases
      * `play_scala_form_parser.mustache` - for form parsers used by the controller bases
      * `play_scala_controller.mustache` - for play controller skeletons supposed to be augmented by the programmer
      * `play_scala_response_writers.mustache` - for custom serializers to be augmented by the programmer
      * `play_scala_security_extractors.mustache` - for custom security extractors to be augmented by the programmer 


  Please be aware that generated artifacts need to preserve some specific shape
  in order to be compiled together without errors.


  The location where custom templates reside needs to be configured by
  overriding the plugin setting `playScalaCustomTemplateLocation`.


  For example following configuration will set this place to be `conf/templates`
  folder of the project:

  ```scala

  playScalaCustomTemplateLocation := Some(((resourceDirectory in Compile) /
  "templates").value)

  ```



  ## Plugin Developing


  sbt doesn't allow sub-projects to depend on each other as sbt plugins. To test
  an sbt plugin, you need a separate 

  project.  This project is `swagger-tester`.  To test your changes as you're
  developing the plugin, cd into this 

  directory, and run sbt. This project uses an sbt `ProjectRef` to the sbt
  plugin, which means you don't need to 

  `publishLocal` the plugin after each change. Just run `reload` in the sbt
  console, and it will pick up your changes.


  The play-swagger plugin provides a couple of commands useful for development: 


  * `apiFirstPrintDenotations` - outputs a common names of different parts of
  the AST as they are intended to be used in generated Scala code

  * `apiFirstPrintRawAstTypes` - outputs all type definitions as they read from
  the specification before type optimisations

  * `apiFirstPrintRawAstParameters` - outputs all parameters definitions before
  type optimisations

  * `apiFirstPrintFlatAstTypes` - outputs type definitions after type
  optimisations

  * `apiFirstPrintFlatAstParameters` - outputs parameter definitions after type
  optimisations



  ## Plugin Testing


  We're using the sbt scripted framework for testing. You can find the tests in
  `plugin/src/sbt-test`, and run them 

  by running `scripted` in the sbt console.



  ## Code quality


  There are some quality checks embedded into the build script:

  * the source code is (re)formatted using
  [scalariform](https://github.com/scala-ide/scalariform) each time it is
  compiled (currently deactivated).

  * [`scalastyle`](http://www.scalastyle.org) sbt command shall be used to
  perform code style checks before putting changes into the repository.

  * [`lint:compile`](https://github.com/HairyFotr/linter) sbt command shall be
  used to perform static code analysis before putting changes into the
  repository.

  * code coverage for api and compiler modules can be executed by issuing `sbt
  clean coverage test` command for these 

  projects. Coverage statistics can be generated using `coverageReport` sbt
  command. 
casualjim/go-swagger: >
  # Swagger 2.0 [![Build
  Status](https://circleci.com/gh/go-swagger/go-swagger.svg?style=shield)](https://circleci.com/gh/go-swagger/go-swagger)
  [![Build
  status](https://ci.appveyor.com/api/projects/status/x377t5o9ennm847o/branch/master?svg=true)](https://ci.appveyor.com/project/casualjim/go-swagger/branch/master)
  [![codecov](https://codecov.io/gh/go-swagger/go-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/go-swagger/go-swagger)
  [![GitHub
  version](https://badge.fury.io/gh/go-swagger%2Fgo-swagger.svg)](https://badge.fury.io/gh/go-swagger%2Fgo-swagger)

  [![Slack
  Status](https://slackin.goswagger.io/badge.svg)](https://slackin.goswagger.io)

  [![license](http://img.shields.io/badge/license-Apache%20v2-orange.svg)](https://raw.githubusercontent.com/swagger-api/swagger-spec/master/LICENSE)

  [![GoDoc](https://godoc.org/github.com/go-swagger/go-swagger?status.svg)](http://godoc.org/github.com/go-swagger/go-swagger)

  [![Docker Repository on
  Quay](https://quay.io/repository/goswagger/swagger/status "Docker Repository
  on Quay")](https://quay.io/repository/goswagger/swagger)

  [![FOSSA
  Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_shield)

  [![GolangCI](https://golangci.com/badges/github.com/go-swagger/go-swagger.svg)](https://golangci.com)

  [![Go Report
  Card](https://goreportcard.com/badge/github.com/go-swagger/go-swagger)](https://goreportcard.com/report/github.com/go-swagger/go-swagger)


  This package contains a golang implementation of Swagger 2.0 (aka [OpenAPI
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)):

  it knows how to serialize and deserialize swagger specifications.


  [Swagger](https://swagger.io/) is a simple yet powerful representation of your
  RESTful API.<br>


  >
  ![swagger](https://raw.githubusercontent.com/go-swagger/go-swagger/master/docs/favicon-16x16.png)
  **Swagger in a nutshell**

  >

  > With the largest ecosystem of API tooling on the planet, thousands of
  developers are supporting Swagger in almost every modern programming language
  and deployment environment.

  >

  > With a Swagger-enabled API, you get interactive documentation, client SDK
  generation and discoverability. We created Swagger to help fulfill the promise
  of APIs.

  >

  > Swagger helps companies like Apigee, Getty Images, Intuit, LivingSocial,
  McKesson, Microsoft, Morningstar, and PayPal build the best possible services
  with RESTful APIs. Now in version 2.0, Swagger is more enabling than ever. And
  it's 100% open source software.


  ##  Features

  `go-swagger` brings to the go community a complete suite of fully-featured,
  high-performance, API components to  work with a Swagger API: server, client
  and data model.


  * Generates a server from a swagger specification

  * Generates a client from a swagger specification

  * Supports most features offered by jsonschema and swagger, including
  polymorphism

  * Generates a swagger specification from annotated go code

  * Additional tools to work with a swagger spec

  * Great customization features, with vendor extensions and customizable
  templates


  Our focus with code generation is to produce idiomatic, fast go code, which
  plays nice with golint, go vet etc.


  ##  Project status

  `go-swagger` is now feature complete and has stabilized its API.


  Most features and building blocks are now in a stable state, with a rich set
  of CI tests.


  The go-openapi community actively continues bringing fixes and enhancements to
  this code base.


  There is still much room for improvement: contributors and PR's are welcome.
  You may also get in touch with maintainers on [our slack
  channel](https://slackin.goswagger.io).


  ## Documentation

  <https://goswagger.io>


  ## FAQ

  Q&A contributed by the community:


  <https://goswagger.io/faq/>


  ## How is this different from go generator in swagger-codegen?

  **tl;dr** The main difference at this moment is that this one actually
  works...


  The swagger-codegen project only generates a _workable_ go client and even
  there it will only support flat models.

  Further, the go server generated by swagger-codegen is mostly a stub.


  > **Motivation**

  > Why is this not done as a part of the swagger-codegen project? Because:

  >

  > * I don't really know java very well and so I'd be learning both java and
  the object model of the codegen which was in heavy flux as opposed to doing go
  and I really wanted to go experience of designing a large codebase with it.

  > * Go's super limited type system makes it so that it doesn't fit well in the
  model of swagger-codegen

  > * Go's idea of polymorphism doesn't reconcile very well with a solution
  designed for languages that actually have inheritance and so forth.

  > * For supporting types like `[][][]map[string][][]int64` I don't think it's
  possible with mustache

  >

  > I gravely underestimated the amount of work that would be involved in making
  something useful out of it.

  > My personal mission: I want the jvm to go away, it was great way back when
  now it's just silly (vm in container on vm in vm in container)


  ## What's inside?


  Here is an outline of available features (see the full list
  [here](https://goswagger.io/features.html)):


  - An object model that serializes swagger-compliant yaml or json

  - A tool to work with swagger
    - Serve swagger UI for any swagger spec file
    - Flexible code generation, with customizable templates
      - Generate go API server based on swagger spec
      - Generate go API client from a swagger spec
    -  Validate a swagger spec document, with extra rules outlined [here](https://github.com/apigee-127/sway/blob/master/docs/README.md#semantic-validation)
    -  Generate a spec document based on annotated code
  - A runtime to work with Rest API and middlewares
    - Serve spec
    - Routing
    - Validation
    - Authorization
    - Swagger docs UI
    - A Diff tool which will cause a build to fail if a change in the spec breaks backwards compatibility

  There is more to that...


  - A [typed JSON Schema implementation](https://goswagger.io/use/model.html),
  supporting most Draft 4 features

  - Extended string and numeric formats:
  [strfmt](https://github.com/go-openapi/strfmt)

  - Utilities to work with JSON, convert data types and pointers:
  [swag](https://github.com/go-openapi/swag)

  - A jsonschema (Draft 4) validator, with full $ref support:
  [validate](https://github.com/go-openapi/validate)

  - Custom validation interface


  ## Installing

  `go-swagger` is available as binary or docker releases as well as from source:
  [more details](https://goswagger.io/install.html).


  ## Use-cases

  The main package of the toolkit, go-swagger/go-swagger, provides command line
  tools to help working with swagger.


  The toolkit is highly customizable and allows endless possibilities to work
  with OpenAPI2.0 specifications.


  Beside the go-swagger CLI tool and generator, the [go-openapi
  packages](https://github.com/go-openapi) provide modular functionality to
  build custom solutions on top of OpenAPI.


  The CLI supports shell autocompletion utilities: see
  [here](https://goswagger.io/cli_helpers.html).


  ### Serve specification UI

  Most basic use-case: serve a UI for your spec:


  ```

  swagger serve
  https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json

  ```


  ### Validate a specification

  To [validate](https://goswagger.io/usage/validate.html) a Swagger
  specification:


  ```

  swagger validate
  https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json

  ```


  ### Generate an API server

  To generate a [server for a swagger
  spec](https://goswagger.io/generate/server.html) document:


  ```

  swagger generate server [-f ./swagger.json] -A [application-name [--principal
  [principal-name]]

  ```


  ### Generate an API client

  To generate a [client for a swagger
  spec](https://goswagger.io/generate/client.html) document:


  ```

  swagger generate client [-f ./swagger.json] -A [application-name [--principal
  [principal-name]]

  ```


  ### Generate a spec from source

  To generate a [swagger spec document for a go
  application](https://goswagger.io/generate/spec.html):


  ```

  swagger generate spec -o ./swagger.json

  ```


  ### Generate a data model

  To generate model structures and validators exposed by the API:


  ```

  swagger generate model --spec={spec}

  ```


  ### Transform specs


  There are [several commands](https://goswagger.io/use/transform.html) allowing
  you to transform your spec.


  Resolve and expand $ref's in your spec as inline definitions:

  ```

  swagger expand {spec}

  ```


  Flatten your spec: all external $ref's are imported into the main document and
  inline schemas reorganized as definitions.

  ```

  swagger flatten {spec}

  ```


  Merge specifications (composition):

  ```

  swagger mixin {spec1} {spec2}

  ```


  ### Compare specs


  The  diff command allows you to check backwards compatibility.

  Type ```swagger diff --help``` for info.


  ```

  swagger diff {spec1} {spec2}

  ```


  ## Try it


  Try `go-swagger` in a free online workspace using Gitpod:


  [![Open in
  Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io#https://github.com/go-swagger/go-swagger)


  ## Licensing


  The toolkit itself is licensed as Apache Software License 2.0. Just like
  swagger, this does not cover code generated by the toolkit. That code is
  entirely yours to license however you see fit.



  [![FOSSA
  Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_large)


  ## Who is using this project?


  To name but a few... (feel free to sign in there if you are using this
  project):


  > In the list below, we tried to figure out the public repos where you'll find
  examples on how to use `go-swagger` and `go-openapi`:


  [3DSIM](https://github.com/3DSIM)  

  [Alibaba PouchAPI](https://github.com/alibaba/pouch)  

  [CheckR](https://github.com/checkr/flagr)  

  [Cilium](https://github.com/cilium/cilium)  

  [CoreOS](https://github.com/coreos/go-quay)  

  [NetBox Community](https://github.com/netbox-community/go-netbox)  

  [EVE Central](https://github.com/evecentral)  

  Iron.io

  [JaegerTracing](https://github.com/jaegertracing/jaeger)  

  [Kubernetes-Helm](https://github.com/kubernetes-helm/monocular)  

  [Kubernetes](https://godoc.org/k8s.io/apiextensions-apiserver/pkg/apiserver)  

  [ManifoldCo](https://github.com/manifoldco)  

  [Metaparticle.io](https://github.com/metaparticle-io/metaparticle-ast)  

  [Netlify](https://github.com/netlify/open-api)  

  [Nutanix](https://github.com/nutanix)  

  [OAS2](https://github.com/hypnoglow/oas2)  

  [OVH API](https://github.com/appscode/go-ovh)  

  [RackHD](https://github.com/RackHD/RackHD)  

  [ScaleFT](https://github.com/authclub/billforward)  

  [StratoScale](https://github.com/Stratoscale/swagger)  

  [Terraform Provider
  OpenAPI](https://github.com/dikhan/terraform-provider-openapi)  

  [VMWare](https://github.com/vmware/dispatch)  

  ...


  ## Note to users migrating from older releases


  ### Using 0.5.0


  Because 0.5.0 and master have diverged significantly, you should checkout the
  tag 0.5.0 for go-swagger when you use the currently released version.


  ### Migrating from 0.5.0 to 0.6.0


  You will have to rename some imports:


  ```

  github.com/go-swagger/go-swagger/httpkit/validate to
  github.com/go-openapi/validate

  github.com/go-swagger/go-swagger/httpkit to github.com/go-openapi/runtime

  github.com/naoina/denco to github.com/go-openapi/runtime/middleware/denco

  github.com/go-swagger/go-swagger to github.com/go-openapi

  ```


  ### Migrating from 0.12 to 0.13


  Spec flattening and $ref resolution brought breaking changes in model
  generation, since all complex things generate their own definitions.


  ### Migrating from 0.14 to 0.15


  Generated servers no more import the following package (replaced by go1.8
  native functionality):

  ```

  github.com/tylerb/graceful

  ```


  Spec flattening now defaults to minimal changes to models and should be
  workable for 0.12 users.


  Users who prefer to stick to 0.13 and 0.14 default flattening mode may now use
  the `--with-flatten=full` option.


  Note that the `--skip-flatten` option has been phased out and replaced by the
  more explicit `--with-expand` option.
krakenjs/swaggerize-hapi: >
  # hapi-openapi


  [![Build
  Status](https://travis-ci.org/krakenjs/hapi-openapi.svg?branch=master)](https://travis-ci.org/krakenjs/hapi-openapi)

  [![NPM
  version](https://badge.fury.io/js/hapi-openapi.png)](http://badge.fury.io/js/hapi-openapi)


  ### Note: this project was renamed from 'swaggerize-hapi' to 'hapi-openapi'.


  `hapi-openapi` is a design-driven approach to building RESTful services with
  [OpenAPI (Swagger)](http://openapis.org) and [Hapi](http://hapijs.com)
  (OpenAPI 3.0 support coming soon).


  `hapi-openapi` provides the following features:


  - API schema validation.

  - Routes based on the OpenAPI document.

  - API documentation route.

  - Input validation.


  ### Why "Design Driven"


  There are already a number of modules that help build RESTful APIs for node
  with OpenAPI. However,

  these modules tend to focus on building the documentation or specification as
  a side effect of writing

  the application business logic.


  `hapi-openapi` begins with the OpenAPI document first. This facilitates
  writing APIs that are easier to design, review, and test.


  At runtime, `hapi-openapi` uses the API specification to build routes from
  previously defined paths. This ensures that everything specified is what is
  implemented.


  ### Quick Start with a Generator


  This guide will let you go from an `api.json` to a service project in no time
  flat.


  First install `generator-swaggerize` (and `yo` if you haven't already):


  ```bash

  $ npm install -g yo

  $ npm install -g generator-swaggerize

  ```


  Now run the generator.


  ```bash

  $ mkdir petstore && cd $_

  $ yo swaggerize

  ```


  Follow the prompts (note: make sure to choose `hapi` as your framework
  choice).


  You now have a working api and can use something like
  [SwaggerHub](https://swaggerhub.com/?_ga=2.118604234.2143392684.1515431456-1673703125.1481054263)
  to explore it.


  ### Manual Usage


  ```javascript

  const Hapi = require('@hapi/hapi');


  const server = new Hapi.Server();


  await server.register({
      plugin: require('hapi-openapi'),
      options: {
          api: Path.join(__dirname, './config/pets.json'),
          handlers: Path.join(__dirname, './handlers')
      }
  });

  ```


  ### Hapi Plugin


  The plugin will be registered as `openapi` on `server.plugins` with the
  following exposed:


  - `getApi()` - the resolved Swagger document.

  - `setHost(host)` - a helper function for setting the `host` property on the
  `api`.


  ### Configuration Options


  - `api` - a path to a valid OpenAPI 2.0 document, or a valid document in the
  form of an object.

  - *deprecated* `docspath` - the path to expose api docs for swagger-ui, etc.
  Defaults to `/api-docs`.

  - `docs` - an object used to configure the api docs route.
      - `path` - the path to expose api docs for swagger-ui, etc. Defaults to `/api-docs`.
      - `auth` - options auth config for this route.
      - `stripExtensions` - strip vendor extensions from docs. Defaults to true.
      - `prefixBasePath` - prefix path of docs with he OpenAPI document's `basePath` value. Defaults to true.
  - `handlers` - either a string directory structure for route handlers, object,
  or not set if using `x-hapi-handler`.

  - `extensions` - an array of file extension types to use when scanning for
  handlers. Defaults to `['js']`.

  - `vhost` - *optional* domain string (see [hapi route
  options](http://hapijs.com/api#route-options)).

  - `cors` - *optional* cors setting (see [hapi route
  options](http://hapijs.com/api#route-options)).

  - `outputvalidation` - *optional* validate response data.


  ### Mount Path


  Api `path` values will be prefixed with the OpenAPI document's `basePath`
  value.  This behavior can be negated if you set the option
  `docs.prefixBasePath` to `false`.


  ### Handlers Directory


  The `options.handlers` option specifies a directory to scan for handlers.
  These handlers are bound to the api `paths` defined in the OpenAPI document.


  ```

  handlers
    |--foo
    |    |--bar.js
    |--foo.js
    |--baz.js
  ```


  Will route as:


  ```

  foo.js => /foo

  foo/bar.js => /foo/bar

  baz.js => /baz

  ```


  ### Path Parameters


  The file and directory names in the handlers directory can also represent path
  parameters.


  For example, to represent the path `/users/{id}`:


  ```shell

  handlers
    |--users
    |    |--{id}.js
  ```


  This works with directory names as well:


  ```shell

  handlers
    |--users
    |    |--{id}.js
    |    |--{id}
    |        |--foo.js
  ```


  To represent `/users/{id}/foo`.


  ### Handlers File


  Each provided javascript file should export an object containing functions
  with HTTP verbs as keys.


  Example:


  ```javascript

  module.exports = {
      get: function (req, h) { ... },
      put: function (req, h) { ... },
      ...
  }

  ```


  Optionally, `pre` handlers can be used by providing an array of handlers for a
  method:


  ```javascript

  module.exports = {
      get: [
          function p1(req, h) { ... },
          function handler(req, h) { ... }
      ],
  }

  ```


  ### Handlers Object


  The directory generation will yield this object, but it can be provided
  directly as `options.handlers`.


  Example:


  ```javascript

  {
      'foo': {
          'get': function (req, h) { ... },
          'bar': {
              'get': function (req, h) { ... },
              'post': function (req, h) { ... }
          }
      }
      ...
  }

  ```


  ### X-Hapi-Handler


  Alternatively the API document can set `x-hapi-handler` attribute on each
  defined `paths` element if `handlers` is not defined.


  Example:


  ```

  "/pets/{id}": {
      "x-hapi-handler": "./routes/pets-by-id.js",
      .
      .
      .
  ```


  This will construct a `handlers` object from the given `x-hapi-handler` files.


  ### X-Hapi-Options


  There is now support at the operations level for `x-hapi-options` which
  represent individual [Hapi Route
  Optijons](https://github.com/hapijs/hapi/blob/master/API.md#route-options).


  This support is limited to configuration supported by the JSON file type.


  Example:


  ```

  "/internal": {
    "post": {
      "x-hapi-options": {
        "isInternal": true
      }
      .
      .
      .
  ```


  ### Authentication


  Support for OpenAPI [security
  schemes](http://swagger.io/specification/#securitySchemeObject) requires that
  relevant authentication scheme and strategy are registered before the
  hapi-openapi plugin. See the [hapi docs](http://hapijs.com/tutorials/auth) for
  information about authentication schemes and strategies.


  The name of the hapi authentication strategy is expected to match the name
  field of the OpenAPI [security requirement
  object](http://swagger.io/specification/#securityRequirementObject).


  Example:


  ```yaml

  securityDefinitions:
    api_key:
      type: apiKey
      name: Authorization
      in: header
  paths:
    '/users/':
      get:
        security:
          - api_key: []
  ```


  ```javascript

  const server = new Hapi.Server();


  await server.register({ plugin: AuthTokenScheme });


  server.auth.strategy('api_key', 'auth-token-scheme', {
      validateFunc: async function (token) {
        // Implement validation here, return { credentials, artifacts }.
      }
  });


  await server.register({
      plugin: require('hapi-openapi'),
      options: {
          api: require('./config/pets.json'),
          handlers: Path.join(__dirname, './handlers')
      }
  });

  ```


  ### X-Hapi-Auth


  Alternatively it may be easier to automatically register a plugin to handle
  registering the necessary schemes and strategies.


  **x-hapi-auth-schemes**


  The root document can contain an `x-hapi-auth-schemes` object specifying
  different plugins responsible for registering auth schemes.


  Example:


  ```

  "x-hapi-auth-schemes": {
      "apiKey": "../lib/xauth-scheme.js"
  }

  ```


  This plugin will be passed the following options:


  - `name` - the auth scheme name, in this example `apiKey`.


  **x-hapi-auth-strategy**


  The `securityDefinitions` entries can contain an `x-hapi-auth-strategy`
  attribute pointing to a plugin responsible for registering auth strategies.


  Example:


  ```

  "securityDefinitions": {
    "api_key": {
      "x-hapi-auth-strategy": "../lib/xauth-strategy.js",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  }

  ```


  The plugin will be passed the following options:


  - `name` - the `securityDefinitions` entry's key. In this example, `api_key`.
  This is typically used as the strategy name.

  - `scheme` - the `securityDefinitions` `type`. In this example, `apiKey`. This
  should match a `x-hapi-auth-scheme` name.

  - `where` - `securityDefinitions` entry `in` attribute. This is search for the
  `lookup` value; in this example `header`.

  - `lookup` - `securityDefinitions` entry `name` attribute. Used as the name to
  look up against `where`.


  The way you can make these play together is that for every `type`, a scheme
  exists that delegates some lookup or evaluation to the appropriate strategy.


  Example:


  ```javascript

  //xauth-scheme.js


  const register = function (server, { name  }) {
      server.auth.scheme(name /*apiKey*/, (server, /* options received from the strategy */ { validate }) => {
          return {
              authenticate: async function (request, h) {
                  return h.authenticated(await validate(request));
              }
          };
      });
  };


  module.exports = { register, name: 'x-hapi-auth-scheme' };

  ```


  and


  ```javascript

  //xauth-strategy.js


  const Boom = require('@hapi/boom');


  const register = function (server, { name, scheme, where, lookup }) {
      server.auth.strategy(name, /* the scheme to use this strategy with */ scheme, {
          //Define a validate function for the scheme above to receive
          validate: async function (request) {
              const token = request.headers[lookup];

              //Some arbitrary example
              if (token === '12345') {
                  return { credentials: { scope: ['read'] }, artifacts: { token } };
              }

              throw Boom.unauthorized();
          }
      });
  };


  module.exports = { register, name: 'x-hapi-auth-strategy' };

  ```
AntXlab/pyswagger: >+
  pyswagger

  =========


  [![Build
  Status](https://travis-ci.org/mission-liao/pyswagger.svg?branch=master)](https://travis-ci.org/mission-liao/pyswagger)

  [![Coverage
  Status](https://coveralls.io/repos/mission-liao/pyswagger/badge.svg?branch=master&style=flat)](https://coveralls.io/r/mission-liao/pyswagger?branch=master)


  A python client for [Swagger](https://helloreverb.com/developers/swagger)
  enabled REST API. It wouldn't be easier to

  try Swagger REST API by [Swagger-UI](https://github.com/wordnik/swagger-ui).
  However, when it's time to **unittest**

  your API, the first option you find would be
  [Swagger-codegen](https://github.com/wordnik/swagger-codegen), but the better
  option is us.


  This project is developed after
  [swagger-py](https://github.com/digium/swagger-py), which is a nicely
  implemented one, and inspired many aspects of this project. Another project is
  [flex](https://github.com/pipermerriam/flex), which focuses on parameter
  validation, try it if you can handle other parts by yourselves. For other
  projects related to Swagger tools in python, check
  [here](https://github.com/swagger-api/swagger-spec#python).


  **pyswagger** is much easier to use (compared to swagger-codegen, you don't
  need to prepare a scala environment) and tries hard to **fully supports**
  [Swagger Spec](https://helloreverb.com/developers/swagger) in all aspects.


  - [NEWs: upcoming support for OpenAPI 3.0](docs/md/news.md)

  - [Features](README.md#features)

  - [Tutorial](README.md#tutorial)

  - [Quick Start](README.md#quick-start)

  - [Installation](README.md#installation)

  - [Reference](README.md#reference)

  - [Contributors](README.md#contributors)

  - [Contribution Guideline](README.md#contribution-guildeline)

  - [FAQ](docs/md/faq.md)

  - [Changes](CHANGES.md)


  ---------


  ## Features

  - convert Swagger Document from older version to newer one. (ex. convert from
  1.2 to 2.0)

  - support Swagger **1.2**, **2.0** on python ~~2.6~~, **2.7**, **3.3**,
  **3.5**, **3.6**

  - support YAML via [Pretty-YAML](https://github.com/mk-fg/pretty-yaml)

  - support $ref to **External Document**, multiple swagger.json will be
  organized into a group of App. And external document with self-describing
  resource is also supported (refer to
  [issue](https://github.com/swagger-api/swagger-spec/issues/219)).

  - type safe, input/output are converted to python types according to [Data
  Type](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#43-data-types)
  described in Swagger. You don't need to touch any json schema when using
  pyswagger. Limitations like **minimum/maximum** or **enum** are also checked.
  **Model inheritance** also supported.

  - provide function **App.validate** to check validity of the loaded API
  definition according to spec.

  - builtin client implementation based on various http clients in python. For
  usage of these clients, please refer to `pyswagger.tests.contrib.client` for
  details
    - [requests](https://github.com/kennethreitz/requests)
    - [tornado.httpclient.AsyncHTTPClient](http://tornado.readthedocs.org/en/latest/httpclient.html)
    - [flask.testing.FlaskClient](http://flask.pocoo.org/docs/0.10/api/#flask.testing.FlaskClient)
    - [webapp2](http://webapp2.readthedocs.io/en/latest/guide/testing.html)
  - not implemented parts, fire me a bug if you need it
    - [ ] Swagger 2.0
      - [ ] Schema.pattern
      - [ ] Scheme.patternProperties
      - [ ] Schema.readonly
      - [ ] Schema.allowEmptyValue
      - [ ] A scanner to validate schema
    - [ ] A WebSocket client
    - [ ] dump extension field

  ---------


  ## Tutorial


  - [Initialization](docs/md/tutorial/init.md)

  - [Making a Request](docs/md/tutorial/request.md)

  - [Access the Response](docs/md/tutorial/response.md)

  - [Testing a Local Server](docs/md/tutorial/local.md)

  - [Converting Document into another version](docs/md/tutorial/converter.md)

  - [Exntending Primitive Factory for user-defined
  primitives](docs/md/tutorial/extend_prim.md)

  - [Rendering Random Requests for BlackBox Testing](docs/md/tutorial/render.md)

  - [Operation MIME Support](docs/md/tutorial/mime.md)

  - [Test with Invalid Input](docs/md/tutorial/invalid.md)

  - [Load Spec from a Restricted
  Service](docs/md/tutorial/restricted_service.md)

  - [Customized Headers](docs/md/tutorial/customized_headers.md)


  ---------


  ## Quick Start


  Before running this script, please make sure
  [requests](https://github.com/kennethreitz/requests) is installed on your
  environment.


  ```python

  from pyswagger import App, Security

  from pyswagger.contrib.client.requests import Client

  from pyswagger.utils import jp_compose


  # load Swagger resource file into App object

  app = App._create_('http://petstore.swagger.io/v2/swagger.json')


  auth = Security(app)

  auth.update_with('api_key', '12312312312312312313q') # api key

  auth.update_with('petstore_auth', '12334546556521123fsfss') # oauth2


  # init swagger client

  client = Client(auth)


  # a dict is enough for representing a Model in Swagger

  pet_Tom=dict(id=1, name='Tom', photoUrls=['http://test']) 

  # a request to create a new pet

  client.request(app.op['addPet'](body=pet_Tom))


  # - access an Operation object via App.op when operationId is defined

  # - a request to get the pet back

  req, resp = app.op['getPetById'](petId=1)

  # prefer json as response

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  assert pet.name == 'Tom'


  # new ways to get Operation object corresponding to 'getPetById'.

  # 'jp_compose' stands for JSON-Pointer composition

  req, resp = app.resolve(jp_compose('/pet/{petId}',
  base='#/paths')).get(petId=1)

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  ```


  ---------


  ## Installation

  We support pip installtion.

  ```bash

  pip install pyswagger

  ```


  Additional dependencies must be prepared before firing a request. If you are
  going to access a remote/local web server, you must install
  [requests](https://github.com/kennethreitz/requests) first.

  ```bash

  pip install requests

  ```


  If you want to test a local tornado server, please make sure tornado is ready
  on your environment

  ``` bash

  pip install tornado

  ```


  We also provide native client for flask app, but to use it, flask is also
  required

  ``` bash

  pip install flask

  ```



  ---------


  ## Reference

  All exported API are described in following sections. ![A diagram about
  relations between
  components](https://docs.google.com/drawings/d/1DZiJgl4i9L038UJJp3kpwkWRvcNQktf5h-e4m96_C-k/pub?w=849&h=530)


  - [App](docs/md/ref/app.md)

  - [SwaggerClient](docs/md/ref/client.md)

  - [Security](docs/md/ref/security.md)


  ---------


  ## Contributors

  - [Marcin Goliński](https://github.com/mjgolinski)

  - [Andrey Mikhailov](https://github.com/zlovred)

  - [Telepenin Nikolay](https://github.com/prefer)

  - [WangJiannan](https://github.com/WangJiannan)


  ---------


  ## Contribution Guildeline


  #### report an issue:

  - issues can be reported
  [here](https://github.com/mission-liao/pyswagger/issues)

  - include swagger.json if possible

  - turn on logging and report with messages on console

  ```python

  import logging

  logger = logging.getLogger('pyswagger')


  formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s -
  %(message)s')


  console = logging.StreamHandler()

  console.setLevel(logging.DEBUG)

  console.setFormatter(formatter)


  logger.addHandler(console)

  logger.setLevel(logging.DEBUG)


  ... your stuff


  ```


  - describe expected behavior, or more specific, the input/output


  #### submit a PR

  - test included

  - only PR to `develop` would be accepted


  env preparation

  ```bash

  pip install -r requirement-dev.txt

  ```


  unit testing

  ```bash

  python -m pytest -s -v --cov=pyswagger --cov-config=.coveragerc
  pyswagger/tests

  ```

RobWin/swagger2markup: >
  = Swagger2Markup

  :author: Robert Winkler

  :hardbreaks:


  image:https://travis-ci.org/Swagger2Markup/swagger2markup.svg?branch=master["Build
  Status", link="https://travis-ci.org/Swagger2Markup/swagger2markup"]
  image:https://coveralls.io/repos/Swagger2Markup/swagger2markup/badge.svg["Coverage
  Status", link="https://coveralls.io/r/Swagger2Markup/swagger2markup"]
  image:https://api.codacy.com/project/badge/grade/498a6a39d7d84ff687546359f58ee18d["Codacy
  code quality", link="https://www.codacy.com/app/robwin/swagger2markup"]
  image:https://api.bintray.com/packages/swagger2markup/Maven/swagger2markup/images/download.svg[link="https://bintray.com/swagger2markup/Maven/swagger2markup/_latestVersion"]
  image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2",
  link="http://www.apache.org/licenses/LICENSE-2.0.txt"]
  image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter",
  link="https://twitter.com/rbrtwnklr"]
  image:https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/RobWin/swagger2markup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]



  == Overview



  NOTE: Dear community,

  unfortunately I can't maintain Swagger2Markup alone anymore. There are many
  interesting new topics:

  1) Swagger v3 support

  2) Fixing bugs

  2) Merge Swagger2Markup repositories and create a new multi-module repository.

  Any help is welcome.

  Kind regards,

  Robert



  The primary goal of this project is to *simplify the generation of an
  up-to-date RESTful API documentation by combining documentation that's been
  hand-written with auto-generated API documentation* produced by
  https://github.com/swagger-api[Swagger]. The result is intended to be an
  *up-to-date, easy-to-read, on- and offline user guide*, comparable to
  https://developer.github.com/v3/[GitHub's API documentation]. The output of
  Swagger2Markup can be used as an alternative to
  https://github.com/swagger-api/swagger-ui[swagger-ui] and can be served as
  static content.

  NOTE: The Swagger Specification has been donated to to the
  https://openapis.org/[Open API Initiative (OAI)] and has been renamed to the
  https://github.com/OAI/OpenAPI-Specification[OpenAPI Specification].


  Swagger2Markup converts a Swagger JSON or YAML file into several *AsciiDoc* or
  *GitHub Flavored Markdown* documents which can be combined with hand-written
  documentation. The Swagger source file can be located locally or remotely via
  HTTP. Swagger2Markup supports the Swagger 1.2 and 2.0 specification.
  Internally it uses the _official_
  https://github.com/swagger-api/swagger-parser[swagger-parser] and my
  https://github.com/RobWin/markup-document-builder[markup-document-builder].


  You can use Swagger2Markup to convert your contract-first Swagger YAML file
  into a human-readable format and combine it with hand-written documentation.
  As an alternative, you can choose the code-first approach and use
  Swagger2Markup together with
  https://github.com/swagger-api/swagger-core/wiki/Swagger-Core-JAX-RS-Project-Setup-1.5.X[Swagger
  JAX-RS], https://github.com/springfox/springfox[springfox] or
  https://github.com/spring-projects/spring-restdocs[spring-restdocs]. If you
  are Gradle or Maven user, you can also use the
  https://github.com/RobWin/swagger2markup-gradle-plugin[Swagger2Markup Gradle
  Plugin] or
  https://github.com/redowl/swagger2markup-maven-plugin[Swagger2markup Maven
  Plugin].


  http://asciidoctor.org/docs/asciidoc-writers-guide/[AsciiDoc] is preferable to
  Markdown as it has more features. AsciiDoc is a text document format for
  writing documentation, articles, books, ebooks, slideshows, web pages and
  blogs. AsciiDoc files can be converted to *HTML*, *PDF* and *EPUB*. AsciiDoc
  is much better suited for describing public APIs than *JavaDoc* or
  *Annotations*.


  You can generate your HTML5, PDF and EPUB documentation via
  https://github.com/asciidoctor/asciidoctorj[asciidoctorj] or even better via
  the
  https://github.com/asciidoctor/asciidoctor-gradle-plugin[asciidoctor-gradle-plugin]
  or
  https://github.com/asciidoctor/asciidoctor-maven-plugin[asciidoctor-maven-plugin].


  The project requires at least JDK 8.


  == Example


  image::swagger2markup-documentation/src/docs/asciidoc/images/Swagger2Markup.PNG[]


  image::swagger2markup-documentation/src/docs/asciidoc/images/Swagger2Markup_definitions.PNG[]


  == Reference documentation

  - http://swagger2markup.github.io/swagger2markup/1.3.3/[Reference
  Documentation]

  -
  https://github.com/Swagger2Markup/swagger2markup/blob/master/RELEASENOTES.adoc[Release
  notes]

  - https://github.com/Swagger2Markup/spring-swagger2markup-demo[Demo using
  Swagger2Markup, Spring Boot, Springfox and spring-restdocs]


  == Contributing


  === Community contributions


  Pull requests are welcome.


  === Questions

  You can ask questions about Swagger2Markup in
  https://gitter.im/Swagger2Markup/swagger2markup[Gitter].


  === Bugs

  If you believe you have found a bug, please take a moment to search the
  existing issues. If no one else has reported the problem, please open a new
  issue that describes the problem in detail and, ideally, includes a test that
  reproduces it.


  === Enhancements

  If you’d like an enhancement to be made to Swagger2Markup, pull requests are
  most welcome. The source code is on GitHub. You may want to search the
  existing issues and pull requests to see if the enhancement is already being
  worked on. You may also want to open a new issue to discuss a possible
  enhancement before work on it begins.


  == Companies who use Swagger2Markup


  * Deutsche Telekom AG

  * https://restlet.com/[Restlet] -- Restlet offers an API platform, covering
  the https://restlet.com/products/restlet-studio/[design],
  https://restlet.com/products/dhc/[test] and
  https://restlet.com/products/apispark/[operation] of Web APIs, and uses
  Swagger2Markup to generate appealing HTML documentation from API definitions.

  * http://www.qaware.de/[QAware GmbH]

  * http://www.appdirect.com/[AppDirect] -- The leading commerce platform for
  selling cloud services.

  * http://www.wescale.com[wescale]

  * http://taskassure.com[TaskAssure] 

  * https://www.isaac.nl[ISAAC]

  * https://www.spreadshirt.de[Spreadshirt]


  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
OpenAPITools/openapi-generator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:A4E47:B60FBB7:119E3AF3:661487BA.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
marshmallow-code/apispec: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:386A368:5769CE3:66148E42.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
APIs-guru/awesome-openapi3: >+
  # awesome-openapi3
  [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

  A list of awesome projects related to OpenAPI 3.0.x.


  <div align="center">
    <img src="https://github.com/Mermade/awesome-openapi3/blob/master/openapi_awesome1.png?raw=true"/>
    <img src="https://raw.githubusercontent.com/APIs-guru/openapi-directory/master/branding/icon-96x96.png"/>
  </div>


  Why not make your project discoverable by using the topic
  [openapi3](https://github.com/search?utf8=%E2%9C%93&q=topic%3Aopenapi3&type=Repositories&ref=advsearch&l=&l=)
  on GitHub and using the hashtags **#openapi3** and **#OASv3** on social media?


  ## Tools


  * Please see [APIs.guru Awesome-OpenAPI3](https://apis.guru/awesome-openapi3/)


  ## Contributing


  The best way to get your project added to the list is to tag it with the
  github topic `openapi3`. 


  Pull requests should only be for visual / functional changes, or
  projects/products not hosted on GitHub.


  ## API Access


  * [categories.json](https://apis.guru/awesome-openapi3/api/categories.json)

  * [tools.json](https://apis.guru/awesome-openapi3/api/tools.json)


  The raw data contains OpenAPI 2.0 and Swagger 1.x-related projects.


  ## RSS Feed


  * [feed.xml](https://apis.guru/awesome-openapi3/rss/feed.xml)

Orange-OpenSource/angular-swagger-ui: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B5EDA55:11A93D49:661487DA.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Mermade/openapi-codegen: >+
  # OpenAPI-CodeGen


  [![Build
  status](https://travis-ci.org/Mermade/openapi-codegen.svg?branch=master)](https://travis-ci.org/Mermade/openapi-codegen)


  Node.js-based codegen for OpenAPI documents. This project was initially a
  24-hour hackathon. The local model adaptor code is entirely original and has
  been reverse-engineered from the existing documentation and template usage.


  **Work in progress**


  Supports OpenAPI 3.0.x natively, and Swagger/OpenAPI 1.2 and 2.0 by internal
  conversion. Node.js LTS versions are supported.


  ## Usage


  ### Installing


  `npm i -g openapi-codegen`


  or


  * clone the repository, and

  * `npm i`


  or


  `npx -p openapi-codegen cg ...`


  ### CLI


  ```

  cg [options] {[path]configName} {openapi-definition}


  Options:
    --help           Show help                                           [boolean]
    --version        Show version number                                 [boolean]
    --filter         Filter term to use with --list                       [string]
    --list           List available templates for provider (og or sc)     [string]
    -d, --debug      Turn on debugging information in the model          [boolean]
    -f, --flat       Do not include config-name in output directory structure
                                                                         [boolean]
    -l, --lint       Lint input definition                               [boolean]
    -o, --output     Specify output directory         [string] [default: "./out/"]
    -s, --stools     Use swagger-tools to validate OpenAPI 2.0 definitions
                                                                         [boolean]
    -t, --templates  Specify templates directory                          [string]
    -v, --verbose    Increase verbosity                                  [boolean]
    -z, --zip        Create a .zip file instead of individual files      [boolean]
  ```


  e.g.


  ```

  node cg --verbose nodejs defs/generator.yaml

  ```


  In this case, the generated code will be written to the `.out/nodejs`
  directory.


  You can also load the OpenAPI definition from a URL.


  ### API


  ```javascript

  const renderer = require('openapi-codegen');

  // load a config and a definition

  renderer.main(definition,config,configName);

  ```


  ## Templates


  The local templates were taken directly from `swagger-codegen`. This project
  is also licensed under [Apache-2.0](LICENSE) for this reason. Generated code
  is explicitly covered by the [Unlicense](templates/_common/UNLICENSE). Code to
  downconvert OpenAPI 3.0 definitions is taken from
  [Angular-Swagger-UI](https://github.com/Orange-OpenSource/angular-swagger-ui)
  and is MIT licensed.


  You can also use the latest online templates from two providers: `og`
  ([openapi-generator](https://github.com/OpenAPITools/openapi-generator)) and
  `sc` ([swagger-codegen](https://github.com/swagger-api/swagger-codegen)). The
  `--list` and `--filter` options allow you to see which templates are
  available. Note that using the online templates involves sending your API
  definition to a remote server.


  ### Contributors


  See [here](https://github.com/swagger-api/swagger-codegen#template-creator)
  for a partial list of template contributors.


  ### Status of the template configurations


  The local templates with a status have a working (if not necessarily tested)
  configuration in the **configs** directory. Contributions are welcomed from
  the community of new and updated configurations and template updates.


  <details>

  <summary>Click here to expand...</summary>


  |Template|Type|Status|README|Authors (TODO)|Config Maintainer|

  |---|---|---|---|---|---|

  |**\_common**|meta| *contains Apache-2.0 and Unlicense licenses*||

  |**Ada**|client|**Untested**

  |akka-scala||

  |android||

  |**apache2**|configuration|**needs work**||

  |apex||

  |aspnetcore||

  |**bash**|client|**Syntax ok, needs testing**||@bkryza|@MikeRalphson

  |**clojure**|client|**Untested**|

  |**codegen**|meta|**Demo only**|||@MikeRalphson

  |**confluenceWikiDocs**|documentation|**Tested** with Docker
  [server](https://hub.docker.com/r/atlassian/confluence-server/)||

  |cpprest||

  |csharp||

  |**csharp-dotnet2**|client|**Untested**||

  |dart||

  |**debug**|meta|*used for dumping the model state*||@Mermade|@MikeRalphson

  |Eiffel||

  |elixir||

  |**erlang-client**|client|**Untested**||

  |erlang-server|server|

  |finch||

  |flash||

  |**flaskConnexion**|server|**Needs testing**||

  |**go**|client|**Builds, needs testing**||

  |**go-server**|server|**Builds and runs**||

  |**Groovy**|?|**untested**||

  |haskell-http-client|client||||

  |**haskell-servant**|server|**Untested**||

  |**htmlDocs**|documentation|*Appears to work*||

  |**htmlDocs2**|documentation|*Appears to work, no console errors logged*||

  |Java||

  |JavaInflector||

  |JavaJaxRS||

  |JavaPlayFramework||

  |**Javascript**|client|**Untested**||

  |**Javascript-Closure-Angular**|client|**Untested**

  |JavaSpring||

  |JavaVertXServer||

  |**JMeter**|meta|**Untested**||

  |kotlin-client||

  |**lua**|client|**Compiles OK**|

  |lumen||

  |MSF4J||

  |nancyfx||

  |**nodejs**|server|**tested** :white_check_mark:||@jfiala|@MikeRalphson|

  |objc||

  |**openapi**|meta|*outputs the input definition (in OpenAPI 3.0.x form)*
  :white_check_mark:||@Mermade|@MikeRalphson

  |perl||

  |php||

  |**php-silex**|?|**untested**||

  |php-symfony||

  |pistache-server||

  |powershell||

  |**python**|client|**needs testing**|||@mpnordland

  |qt5cpp||

  |r||

  |rails5||

  |**restbed**|server|**Untested**||

  |ruby||

  |rust||

  |rust-server||

  |scala||

  |scalatra||

  |scalaz|client|**Untested**||

  |**sinatra**|server|**Syntax checks OK**||

  |**slim**|server|**Untested**||

  |**swagger**|meta|*outputs the input definition (in original form if OpenAPI
  2.0)* :white_check_mark:||

  |**swagger-static**|documentation|**tested** *template modified to include
  partials*||

  |swift||

  |swift3||

  |swift4||

  |tizen||

  |typescript-angular||

  |typescript-angularjs||

  |**typescript-axios**|client|**tested**||jaredpalmer|

  |typescript-aurelia||

  |**typescript-fetch**|client|**compiles with tsc ok**||

  |typescript-jquery||

  |**typescript-node**|client|**compiles with tsc ok**||

  |undertow||

  |**validator**|meta|*uses swagger2openapi's OpenAPI 3.0 validator internally*
  :white_check_mark:||

  |ze-ph|


  ### New Templates


  These templates are examples of how features of OpenAPI Codegen may be used,
  and best-practices in naming model properties.


  |Template|Type|Status|README|Authors|Config Maintainer|

  |---|---|---|---|---|---|

  |testing.dredd|testing|**In
  progress**|[README](templates/testing.dredd/README.md.mustache)|@Mermade|@MikeRalphson|

  </details>


  ## Documentation


  * [See here](docs/README.md) - contributions welcome

thomaxxl/safrs: >
  [![Latest
  Version](https://img.shields.io/pypi/v/safrs.svg)](https://pypi.python.org/pypi/safrs/)

  [![Supported Python
  versions](https://img.shields.io/pypi/pyversions/safrs.svg)](https://pypi.python.org/pypi/safrs/)

  [![License: GPL
  v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)

  ![Python
  application](https://github.com/thomaxxl/safrs/workflows/Python%20application/badge.svg)

  [![Codacy
  Badge](https://app.codacy.com/project/badge/Grade/de12c50717e8487db5dcc31907e627f7)](https://www.codacy.com/gh/thomaxxl/safrs/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=thomaxxl/safrs)

  [![Downloads](https://pepy.tech/badge/safrs)](https://pepy.tech/project/safrs)


  # SAFRS: Python OpenAPI & JSON:API Framework


  ![demo](docs/images/safrs.gif)


  <a class="mk-toclify" id="table-of-contents"></a>


  - [Introduction](#overview)

  - [Installation](#installation)

  - [JSON:API Interface](#http-methods)

  - [Resource Objects](#resource-objects)

  - [Relationships](#relationships)

  - [Methods](#methods)
      - [Custom Methods](#custom-methods)
      - [Class Methods](#class-methods)
  - [Initialization](#initialization)

  - [Endpoint Naming](#endpoint-naming)

  - [Configuration](#configuration)

  - [Exposing Existing Databases](#expose-existing)

  - [More Examples and Use Cases](#more-examples-and-use-cases)

  - [Advanced Functionality](#advanced-usage)
      - [Filtering](#filtering)
  - [Customization](#customization)
      - [Custom Serialization](#custom-serialization)
      - [Excluding Attributes and Relationships](#excluding-attrs-rels)
      - [HTTP Decorators](#http-decorators)
      - [API Methods](#api-methods)
      - [Custom Swagger](#custom-swagger)
      - [Classes Without SQLAlchemy Models](#Classes-Without-Models)

  <a class="mk-toclify" id="overview"></a>

  ## Introduction


  SAFRS exposes SQLAlchemy database models as a [JSON:API](https://jsonapi.org)
  webservice and generates the corresponding
  [swagger/OpenAPI](https://swagger.io/).


  Documentation can be found in the
  [wiki](https://github.com/thomaxxl/safrs/wiki).


  __A [LIVE DEMO](https://thomaxxl.pythonanywhere.com) is available__, where
  much of the basic functionality is implemented using a simple
  [example](examples/demo_pythonanywhere_com.py).


  <a class="mk-toclify" id="installation"></a>

  ## Installation


  SAFRS can be installed as a [pip package](https://pypi.python.org/pypi/safrs/)
  or by downloading the latest version from github, for example:


  ```bash

  git clone https://github.com/thomaxxl/safrs

  cd safrs

  pip install .

  ```


  Once the dependencies are installed, the [examples](examples) can be started,
  for example

  ```

  python examples/demo_relationship.py "your-interface-ip"

  ```


  <a class="mk-toclify" id="http-methods"></a>

  ## JSON:API Interface


  Exposed resource objects can be queried using the [JSON:API
  format](http://jsonapi.org/format/). The API supports following HTTP
  operations:


  - GET : Retrieve an object or a list of objects

  - PATCH : Update an object.

  - DELETE: Delete an object.

  - POST : Create an object. 


  Please check the [JSON:API spec](http://jsonapi.org/format/) for more
  implementation details. 

  You can also try out the interface in the [live
  demo](http://thomaxxl.pythonanywhere.com/api).


  <a class="mk-toclify" id="resource-objects"></a>

  ## Resource Objects


  Database objects are implemented as subclasses of the SAFRSBase and SQLAlchemy
  model classes. The SQLAlchemy columns are serialized to JSON when the
  corresponding REST API is invoked. 


  Following example [app](examples/demo_relationship.py) illustrates how the API
  is built and documented:


  ```python

  class User(SAFRSBase, db.Model):
      """
          description: User description
      """

      __tablename__ = "Users"
      id = db.Column(db.Integer, primary_key=True)
      name = db.Column(db.String)
      email = db.Column(db.String)

  ```


  The User class is implemented as a subclass of 

  - db.Model: SQLAlchemy base

  - SAFRSBase: Implements JSON serialization for the object and generates
  (swagger) API documentation


  This User object is then exposed through the web interface using the Api
  object


  ```python 

  api.expose_object(User)

  ``` 


  The User object REST methods are available on /User, the swagger schema is
  available on /api/swagger.json and the UI is available on /api/:

  ![User Swagger](docs/images/USER_swagger.png)



  <a class="mk-toclify" id="relationships"></a>

  ## Relationships


  Database object such as the User class from the demo.py example can be
  extended to include relationships with other objects. The demo_relationship.py
  contains following extension of the User class where a relationship with the
  Book class is implemented:


  ```python

  class User(SAFRSBase, db.Model):
      '''
          description: User description
      '''
      __tablename__ = 'Users'
      id = db.Column(db.String, primary_key=True)
      name = db.Column(db.String, default='')
      email = db.Column(db.String, default='')
      books = db.relationship('Book', back_populates="user")
  ...

  ``` 


  A many-to-one database association is declared by the back_populates
  relationship argument.

  The Book class is simply another subclass of SAFRSBase and db.Model, similar
  to the previous User class:


  ```python

  class Book(SAFRSBase, db.Model):
      '''
          description: Book description
      '''
      __tablename__ = 'Books'
      id = db.Column(db.String, primary_key=True)
      name = db.Column(db.String, default='')
      user_id = db.Column(db.String, db.ForeignKey('Users.id'))
      user = db.relationship('User', back_populates='books')
  ```


  The User.book relationship can be queried in the API through the following
  endpoints:

  ![Relations Swagger](docs/images/Relations_swagger.png)


  - POST adds an item to the relationship

  - DELETE removes an item from the relationship

  - GET retrieves a list of item ids


  The relationship API endpoints work similarly for one-to-many relationships.


  Relationship members can also be included in the response when querying an
  instance, by specifying the relationship names as a comma separated list in
  the `include` query argument.


  ![relationship include swagger](docs/images/rel_include.PNG)


  For example, to retrieve all items in the `books_read` relationship from the
  People endpoint, you may add the `include=books_read` url parameter



  http://thomaxxl.pythonanywhere.com/api/People/?include=books_read


  To retrieve nested relationship items, you can specify the nested relationship
  name after the '.', to retrieve the authors of the books_read instances for
  instance, you can use


  http://thomaxxl.pythonanywhere.com/api/People/?include=books_read.author


  <a class="mk-toclify" id="methods"></a>

  ## Methods


  <a class="mk-toclify" id="custom-methods"></a>

  ### Custom Methods


  Safrs allows the user to implement custom methods on the exposed objects. This
  methods can be invoked through the json API by sending an HTTP POST request to
  the method endpoint

  The following example implements a "send_mail" method fro example:


  ```python

  class User(SAFRSBase, db.Model):
      '''
          description: User description
      '''
      __tablename__ = 'Users'
      id = Column(String, primary_key=True)
      name = Column(String, default='')
      email = Column(String, default='')

      # Following method is exposed through the REST API 
      # This means it can be invoked with a HTTP POST
      @jsonapi_rpc(http_methods=['POST','GET'])
      def send_mail(self, email):
          '''
              description : Send an email
              args:
                  email:
                      type : string 
                      example : test email
          '''
          content = 'Mail to {} : {}\n'.format(self.name, email)
          return { 'result' : 'sent {}'.format(content)}

  ```


  This method shows up in the swagger interface:


  ![Method Swagger](docs/images/method_swagger.PNG)


  The ```send_mail``` method is documented with the ```jsonapi_rpc```
  decorator. 

  This decorator generates a schema based on the function documentation. This
  documentation contains yaml specification of the API which is used by the
  swagger UI. 


  [api_methods.py](safrs/api_methods.py) contains a couple of methods that can
  be used in your models.


  The yaml specification has to be in the first part of the function and class
  comments. These parts are delimited by four dashes ("----") . The rest of the
  comment may contain additional documentation.


  <a class="mk-toclify" id="class-methods"></a>

  ### Class Methods


  Two class-level methods have been defined to facilitate object retrieval:


  * **lookup** : retrieve a list of objects that match the argument list. For
  example, following HTTP POST request to a container will retrieve a list of
  itemswhere the name is "thomas"

  ```json

  {
    "method": "lookup",
    "args": {
      "name": "thomas"
    }
  }

  ```


  * **get_list** : retrieve a list of the items with the specified ID's


  <a class="mk-toclify" id="initialization"></a>

  ## Application Initialization

  The API can be initialized like this:

  ```python

  api = SafrsApi(app, host=HOST, port=PORT, prefix=API_PREFIX)

  ```

  Then you can expose objects with `expose_object`

  ```python

  api.expose_object(User)    

  ```


  An example that uses the flask app factory pattern is implement in
  [examples/mini_app.py](examples/mini_app.py)


  <a class="mk-toclify" id="endpoint-naming"></a>

  ## Endpoint Naming

  As can be seen in the swagger UI:

  - the endpoint collection path names are the SQLAlchemy \_\_tablename\_\_
  properties (e.g. /Users )

  - the parameter names are derived from the SAFRSBase class names (e.g.
  {UserId} )

  - the the relationship names are the SAFRSBase class relationship names (e.g
  /books )

  The URL path format is [configurable](#configuration)


  <a class="mk-toclify" id="configuration"></a>

  ## Configuration


  Some configuration parameters can be set in [config.py](safrs/config.py):

  - USE_API_METHODS: set this to false in case you want to disable the
  `jsonapi_rpc` functionality

  - INSTANCE_URL_FMT: This parameter declares the instance url path format

  - RELATIONSHIP_URL_FMT: This parameter declares the relationship endpoint path
  format


  <a class="mk-toclify" id="expose-existing"></a>

  ## Exposing Existing Databases

  Safrs allows you to Expose existing databases as jsona:api services with the
  [expose_existing.py](expose_existing/expose_existing.py) script, for example:


  ```bash

  python3 expose_existing.py mysql+pymysql://root:password@localhost/sakila
  --host localhost

  ```


  This script uses sqlacodegen to generate a source file containing the
  SQLAlchemy and `SAFRSBase` database models and starts the API webservice.


  More details [here](docs/ExposeDB.md). This approach is used by the
  [ApiLogicServer](https://github.com/valhuber/ApiLogicServer) project.


  <a class="mk-toclify" id="more-examples-and-use-cases"></a>

  ## More Examples and Use Cases

  The [examples](examples) folder contains more example scripts:

  - Using a sha hash as primary key (id)

  - CORS usage

  - Flask-Admin integration example, eg.:

  ![demo](docs/images/flask-admin.png)


  A docker image can be found here:

  [https://github.com/thomaxxl/safrs-example](https://github.com/thomaxxl/safrs-example)


  <a class="mk-toclify" id="advanced-usage"></a>

  ## Advanced Functionality


  <a class="mk-toclify" id="filtering"></a>

  ### Filtering

  The swagger shows the jsonapi filters that can be used in the url query
  arguments. Items with an exact match of the specified attribute value can be
  fetched by specifying the corresponding key-value query parameter. For
  example, suppose the `User` class, exposed at `/Users` has a `name` attribute,
  to retrieve all instances with the name "John", you can use a `GET` request
  to 

  `/Users?filter[name]=John`.


  It is also possible to use more generic filters by specifiying a JSON string,
  for example
  `filter=[{"name":"timestamp","op":"gt","val":"2020-08-01"},{"name":"timestamp","op":"lt","val":"2020-08-02"}]`.


  More info can be found in the
  [wiki](https://github.com/thomaxxl/safrs/wiki/API-Functionality#filtering).


  <a class="mk-toclify" id="custom-serialization"></a>

  ### Custom Serialization

  Serialization and deserialization are implemented by the SAFRSBase `to_dict`
  and `__init__` : you can extend these methods as usual.

  For example, if you would like to add some attributes to the json payload of
  the User object, you can override the to_dict method:


  ```python

  class User(SAFRSBase, db.Model):
      '''
          description: User description
      '''
      __tablename__ = 'Users'
      id = db.Column(db.String, primary_key=True)
      name = db.Column(db.String, default='')
      email = db.Column(db.String, default='')
      books = db.relationship('Book', back_populates="user")

      def to_dict(self):
          result = SAFRSBase.to_dict(self)
          result['custom_field'] = 'custom'
          return result
  ``` 


  This will add the `custom_field` attribute to the result attributes:

  ```json

  "attributes": {
      "custom_field": "custom",
      "email": "reader_email0",
      "name": "Reader 0"
  }

  ```


  <a class="mk-toclify" id="customization"></a>

  ## Customization


  <a class="mk-toclify" id="excluding-attrs-rels"></a>

  ### Excluding Attributes and Relationships

  It is possible to specify attributes and relationships that should not be
  serialized by specifying the respective `exclude_attrs` and èxclude_rels`
  class attributes in your SAFRSBase instances.

  Examples can be found [here](examples/demo_pythonanywhere_com.py#L81) and
  [here](examples/demo_http_get.py#L21)


  <a class="mk-toclify" id="limit-http-verbs"></a>

  ### Limiting HTTP Methods

  It is possible to limit the HTTP methods that are allowed by overriding the
  `http_methods` class attribute. An example can be found
  [here](examples/demo_http_get.py#L20)


  <a class="mk-toclify" id="HTTP-decorators"></a>

  ### HTTP Decorators

  The `decorators` class attribute list can be used to add custom decorators to
  the HTTP endpoints. An example of this functionality is implemented

  in the [authentication examples](examples/authentication).



  <a class="mk-toclify" id="api-methods"></a>

  ### API Methods

  Some additional API RPC methods are implemented in
  [api_methods.py](safrs/api_methods.py), e.g. mysql regex search. 


  <a class="mk-toclify" id="custom-swagger"></a>

  ### Custom swagger

  The swagger schema can be merged with a modified schema dictionary by
  supplying the to-be-merged dictionary as the `custom_swagger` argument to
  `SafrsApi`, e.g.

  ```python

  custom_swagger = {"info": {"title" : "New Title" }} # Customized swagger title
  will be merged

  api = SafrsApi(app, host=swagger_host, port=PORT, prefix=OAS_PREFIX,
  api_spec_url=OAS_PREFIX+'/swagger',
                 custom_swagger=custom_swagger, schemes=['http', 'https'], description=description)
  ```


  <a class="mk-toclify" id="Classes-Without-Models"></a>

  ### Classes Without SQLAlchemy Models

  You can implement a serializable class without a model but this requires some
  extra work because safrs needs to know which attributes and relationships to
  serialize. An example is implemented [here](examples/demo_stateless.py)


  ### More Customization

  The documentation is being moved to the
  [wiki](https://github.com/thomaxxl/safrs/wiki)


  <details>

  <summary>About</summary>

  SAFRS is an acronym for **S**ql**A**lchemy **F**lask-**R**estful **S**wagger.
  The purpose of this framework is to help python developers create a
  self-documenting JSON API for sqlalchemy database objects and relationships.
  These objects can be serialized to JSON and can be created, retrieved, updated
  and deleted through the JSON API. 

  Optionally, custom resource object methods can be exposed and invoked using
  JSON.

  Class and method descriptions and examples can be provided in yaml syntax in
  the code comments. The description is parsed and shown in the swagger web
  interface. 


  The result is an easy-to-use [swagger/OpenAPI](https://swagger.io/) and
  [JSON:API](https://jsonapi.org) compliant API implementation.

  </details>


  <details>

  <summary>limitations & Todos</summary>

  This code was developed for a specific use-case and may not be flexible enough
  for everyone's needs. A lot of the functionality is available but not
  documented for the sake of brevity.

  Performance is reasonable for regular databases, but once you start exposing
  really big tables you may run into problems, for example: the `count()` for
  mysql innodb is slow on large(1M rows) tables, a workaround can be implemented
  by querying the `sys` tables or using werkzeug caching. 

  Feel free to open an issue or drop
  [me](mailto:thomas.pollet+no+spam+@gmail.com) an email if you run into
  problems or something isn't clear!

  </details>


  <details>

  <summary>References</summary>


  - [JSON:API specification](http://jsonapi.org/format/)

  - [OpenApi (Swagger)](https://www.openapis.org/)

  - [Flask](http://flask.pocoo.org/)

  - [SQLAlchemy](https://www.sqlalchemy.org/)

  </details>


  <details>

  <summary>Thanks</summary>

  I developed this code when I worked at [Excellium
  Services](https://www.excellium-services.com/). They allowed me to open source
  it when I stopped working there.

  </details>
cebe/php-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:382C5E3:56BDEF6:66148A9B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
AresS31/swurg: >
  <p align="center">
    <img alt="logo" src="https://raw.githubusercontent.com/AresS31/swurg/dev/images/logo3.png" height="200">
    <p align="center">
        <a href="https://portswigger.net/bappstore/6bf7574b632847faaaa4eb5e42f1757c"><img alt="bapp store" src="https://img.shields.io/badge/BApp-Published-orange.svg"></a>
        <a href="https://www.java.com"><img alt="lang" src="https://img.shields.io/badge/Lang-Java-blue.svg"></a>
        <a href="https://opensource.org/licenses/Apache-2.0"><img alt="license" src="https://img.shields.io/badge/License-Apache%202.0-red.svg"></a>
        <img alt="version" src="https://img.shields.io/badge/Version-2.3-green.svg">
        <img alt="bitcoin" src="https://img.shields.io/badge/Bitcoin-15aFaQaW9cxa4tRocax349JJ7RKyj7YV1p-yellow.svg">
        <img alt="bitcoin cash" src="https://img.shields.io/badge/Bitcoin%20Cash-qqez5ed5wjpwq9znyuhd2hdg86nquqpjcgkm3t8mg3-yellow.svg">
        <img alt="ether" src="https://img.shields.io/badge/Ether-0x70bC178EC44500C17B554E62BC31EA2B6251f64B-yellow.svg">
    </p>
  </p>


  ## Swurg is a Burp Suite extension designed for OpenAPI testing.

  > The OpenAPI Specification (OAS) defines a standard, programming
  language-agnostic interface description for REST APIs, which allows both
  humans and computers to discover and understand the capabilities of a service
  without requiring access to source code, additional documentation, or
  inspection of network traffic. When properly defined via OpenAPI, a consumer
  can understand and interact with the remote service with a minimal amount of
  implementation logic. Similar to what interface descriptions have done for
  lower-level programming, the OpenAPI Specification removes guesswork in
  calling a service. 

  > 

  > Use cases for machine-readable API definition documents include, but are not
  limited to: interactive documentation; code generation for documentation,
  clients, and servers; and automation of test cases. OpenAPI documents describe
  an API's services and are represented in either YAML or JSON formats. These
  documents may either be produced and served statically or be generated
  dynamically from an application.

  > 

  > \- [OpenAPI Initiative](https://github.com/OAI/OpenAPI-Specification)


  Performing security assessment of OpenAPI-based APIs can be a tedious task due
  to Burp Suite (industry standard) lacking native OpenAPI parsing capabilities.
  A solution to this situation, is to use third-party tools (e.g. `SOAP-UI`) or
  to implement custom scripts (often on a per engagement basis) to handle the
  parsing of OpenAPI documents and integrate/chain the results to Burp Suite to
  use its first class scanning capabilities.


  Swurg is an OpenAPI parser that aims to streamline this entire process by
  allowing security professionals to use Burp Suite as a standalone tool for
  security assessment of OpenAPI-based APIs.


  ## Supported Features

  * Parse OpenAPI documents, formerly known as the `Swagger specification`,
  fully compliant with OpenAPI 2.0/3.0 Specifications (OAS). Supports both JSON
  and YAML formats.

  * OpenAPI documents can be parsed either from a supplied file or URL. The
  extension can fetch OpenAPI documents directly from a URL using the `Send to
  Swagger Parser` feature under the `Target -> Site map` context menu.

  * Requests can be sent to the `Comparer, Intruder, Repeater, Scanner and Site
  map` Burp tools.


  ## Installation

  ### Compilation 

  #### Windows & Linux

  1. Install gradle (<https://gradle.org/>)

  2. Download the repository.

  ```console

  $ git clone https://github.com/AresS31/swurg

  $ cd .\swurg\

  ```

  3. Create the swurg jarfile:

  ```console

  $ gradle fatJar

  ```


  ### Burp Suite settings

  In Burp Suite, under the `Extender/Options` tab, click on the `Add` button and
  load the `swurg-all` jarfile. 


  ## Possible Improvements

  - [ ] Beautify the graphical user interface.

  - [ ] Enable cells editing to change API calls directly from the GUI.

  - [x] Further optimise the source code.

  - [ ] Implement support for authenticated testing (via user-supplied
  API-keys).

  - [ ] Improve the Param column by adding the type of parameters (e.g. inquery,
  inbody, etc.).

  - [ ] Increase the extension verbosity (via the bottom panel).


  ## Dependencies

  ### Third-party libraries

  #### Swagger Parser:

  The [Swagger
  Parser](https://mvnrepository.com/artifact/io.swagger.parser.v3/swagger-parser)
  library is required and automatically imported in this project.


  ## Project information

  In July 2016, after posting a request for improvement on the [PortSwigger
  support
  forum](https://support.portswigger.net/customer/portal/questions/16358278-swagger-parser-and-wsdler-improvement),
  I decided to take the initiative and to implement a solution myself.


  The extension is still in development, feedback, comments and contributions
  are therefore much appreciated.


  ## One-time donation

  * Donate via Bitcoin      : **15aFaQaW9cxa4tRocax349JJ7RKyj7YV1p**

  * Donate via Bitcoin Cash : **qqez5ed5wjpwq9znyuhd2hdg86nquqpjcgkm3t8mg3**

  * Donate via Ether        : **0x70bC178EC44500C17B554E62BC31EA2B6251f64B**


  ## License

  Copyright (C) 2016 - 2018 Alexandre Teyar


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at


  <http://www.apache.org/licenses/LICENSE-2.0>


  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.
danielgtaylor/apisprout: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:3564:224DFBE:3717520:66148B3A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
tobilg/api2html: >
  # api2html

  A CLI tool to transform Swagger/OpenAPI/AsyncAPI docs to beautiful HTML pages
  via
  [Shins](https://github.com/mermade/shins)/[Widdershins](https://github.com/mermade/widdershins).


  You can find an example generated page at
  [http://tobilg.github.io/api2html/petstore/](http://tobilg.github.io/api2html/petstore/).


  ## Installation


  To install `api2html` globally, use


  ```bash

  $ npm i api2html -g

  ```


  You can also install it to use as `devDependencies`, and use it locally via a
  `npm run` task in your `package.json`:


  ```bash

  $ npm i api2html --save-dev

  ```


  Usage in `package.json`:


  ```javascript

  {
    "scripts": {
      "api-docs": "node_modules/.bin/api2html -o docs/api.html -l shell,javascript--nodejs docs/openapi/api.yml"
    }
  }

  ```


  ## Usage


  ### Available commands


  ```bash

  $ api2html --help 

  Usage: api2html [options] <sourcePath>
    
    Options:
      -V, --version                   output the version number
      -r, --resolve <source>          resolve external dependencies, source should be a url or a path
      -o, --out <outputPath>          output path for the resulting HTML document
      -t, --theme <themeName>         theme to use (see https://highlightjs.org/static/demo/ for a list)
      -c, --customLogo <logoPath>     use custom logo at the respective path
      -u, --customLogoUrl <logoURL>   url for the custom logo to point to
      -C, --customCss                 use custom css
      -P, --customCssPath <cssPath>   use custom css file
      -i, --includes <includesList>   comma-separated list of files to include
      -l, --languages <languageList>  comma-separated list of languages to use for the language tabs (out of shell, http, javascript, javascript--nodejs, ruby, python, java, go)
      -N, --noCodeSamples             omit all code samples (overrides --languages)
      -s, --search                    enable search
      -S, --summary                   use summary instead of operationId for TOC
      -b, --omitBody                  Omit top-level fake body parameter object
      -R, --raw                       Show raw schemas in samples, not example values
      -h, --help                      output usage information
  ```


  ### Usage examples


  #### Render OpenAPI v3 file as HTML


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the current directory.


  ```bash

  $ api2html -o myapi.html myapi.yml

  ```


  #### Use custom logo


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the same directory, and use the custom logo `mylogo.png`.


  ```bash

  $ api2html -o myapi.html -c mylogo.png myapi.yml

  ```


  #### Define which language examples should be generated


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the same directory, and use `go` and `javascript` examples.


  ```bash

  $ api2html -o myapi.html -l go,javascript myapi.yml

  ```


  #### Use different syntax highlighter


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the same directory, and use `go` and `javascript` examples, as well as
  a different syntax higlighter from
  [highlight.js](https://highlightjs.org/static/demo/).


  ```bash

  $ api2html -o myapi.html -l go,javascript -t arta myapi.yml

  ```


  #### Resolve external dependencies


  If you add refs to external files in your source file, you can enable them by
  using `-r <source>`. The following command will resolve all your relative
  imports from the current directory.


  ```bash

  $ api2html -o myapi.html -r ./ myapi.yml

  ```
epiphone/routing-controllers-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:23B0907:3928E1D:66148BBE.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
koumoul-dev/vue-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BE41F55:1281C279:66148D83.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
sanjayvacharya/sleeplessinslc: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:38313E:392B19C:5849ACD:661490A9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
epiphone/class-validator-jsonschema: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:7601:2034BBB:340097F:66148B9E.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
apisyouwonthate/openapi.tools: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2806:D3E08:3969CF5:58EE301:661489BC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
fsprojects/OpenAPITypeProvider: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:3564:228EC53:3779F50:66148CBC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
outofcoffee/vertx-oas: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2B3526E:41B62E7:66149065.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cdimascio/openapi-spring-webflux-validator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:20D8B49:3498C2F:66148A7B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
fmvilas/openapi3-generator: >
  <h1 align="center">OpenAPI 3 Generator</h1>

  <p align="center">
    Use your API OpenAPI 3 definition to generate code, documentation, and literally anything you need.
  </p>


  ## Install


  To use it from the CLI:


  ```bash

  npm install -g openapi3-generator

  ```


  ## Requirements


  * Node.js v7.6+


  ## Usage


  ### From the command-line interface (CLI)


  ```bash
    Usage: og [options] <openapiFileOrURL> <template>


    Options:

      -V, --version                  output the version number
      -o, --output <outputDir>       directory where to put the generated files (defaults to current directory)
      -t, --templates <templateDir>  directory where templates are located (defaults to internal templates directory)
      -b, --basedir <baseDir>        directory to use as the base when resolving local file references (defaults to OpenAPI file directory)
      -h, --help                     output usage information
  ```


  #### Examples


  The shortest possible syntax:

  ```bash

  og openapi.yaml markdown

  ```


  Specify where to put the generated code:

  ```bash

  og -o ./my-docs openapi.yaml markdown

  ```


  ## Templates


  ### Creating your own templates

  Templates are the sources where the result will be generated from. There are
  already some templates

  you can use to generate code and documentation.


  The files in your template can be of the following types:

  1. Static: This kind of files will be simply copied to the output directory.

  2. Templates: This kind of files will be compiled using
  [Handlebars](http://handlebarsjs.com/), and copied to the output directory.

  3. Path templates: This kind of files will be compiled using
  [Handlebars](http://handlebarsjs.com/), but it will generate one file per
  OpenAPI path.


  Assuming we have the following OpenAPI Spec:

  ```yaml

  openapi: "3.0.0"

  info:
    version: 1.0.0
    title: OpenAPI Petstore
    license:
      name: MIT
  servers:
    - url: http://petstore.openapi.io/v1
  paths:
    /pet:
      get:...
      post:...
    /pet/{petId}:
      get:...
    /user/login:
      post:...
    /user/{username}:
      get:...
      put:...
      delete:...
  ...

  ```

  And some template files like this:

  ```

  |- index.js            // This file contains static code, e.g. starting a
  webserver and including ./api/index.js

  |+ api/
   |- index.js.hbs       // This is a static template, it contains placeholders that will be filled in, e.g. includes for each file in routes
   |+ routes/
    |- $$path$$.route.js.hbs      // This file will be generated for each operation and contains skeleton code for each method for an operation.
    |+ $$path$$/                  // This folder will also be generated for each operation.
      |- route.js.hbs             // This is another example of an operation file.
  ```

  The first important thing to notice here is the variable notation in
  `$$path$$.route.js.hbs`. It will be replaced by the name of the path.


  This example also shows `$$path$$` used in a folder name - the generated
  folder names here will replace $$path$$ with

  the name of the path (in kebab-case).


  In this example the generated directory structure will be like this:

  ```

  |- index.js            // This file still contains static code like before.

  |+ api/
   |- index.js           // This file will now e.g. have included the two files in routes.
   |+ routes/
    |- pet.route.js      // This file contains the code for methods on pets.
    |                    // (e.g. getPet, postPet, getPetByPetId).
    |- user.route.js     // This file will contain the code for methods on users.
    |                    // (e.g. postUserLogin, getUserByUsername, putUserByUsername, deleteUserByUsername).
    |+ pet/
     | - route.js        // this file also contains the code for methods on pets.
    |+ user/
     | - route.js        // this file also contains the code for methods on users.
  ```


  ### Template file extensions

  You can (optionally) name your template files with `.hbs` extensions, which
  will be removed when writing the generated

  file. e.g. `index.js.hbs` writes `index.js`. `index.js` would also write to
  `index.js`, if you prefer to omit the hbs

  extension.


  The only case where the `.hbs` extension isn't optional would be if you are
  writing handlebars templates with the

  templates. In that case the the template would need the extension `.hbs.hbs`.
  `usertpl.hbs.hbs` writes `usertpl.hbs`

  (but `usertpl.hbs` as a source would write `usertpl` with no extension).


  ### Template file content

  The generator passes the OpenAPI spec to template files, so all information
  should be available there.

  In addition to that, the code generator adds a bit [more
  data](#data-passed-to-handlebars-templates) that can be helpful.


  #### Examples:

  ##### Dynamically require files in JavaScript

  ```mustache

  {{#each @root.openapi.endpoints}}

  const {{.}} = require('./routes/{{.}}.route.js')

  {{/each}}

  ```

  will produce (using the OAS Spec example from above):

  ```js

  const pet = require('./routes/pet.route.js')

  const user = require('./routes/user.route.js')

  ```


  ### Data passed to Handlebars templates

  | Param | Type | Description |

  | --- | --- | --- |

  |openapi|object|The OpenAPI spec.|

  |openapi.endpoints| object | All first level endpoints (e.g  `pet` and `user`)
  |


  ### Custom handlebars helpers

  If your template needs Handlebars helpers, you can define them in a directory
  called `.helpers` inside your template.


  Check out some examples in the [markdown](./templates/markdown/.helpers)
  template.


  ### Using handlebars partials

  If you want to use partials in your template, define them in a directory
  called `.partials` inside your template.


  Check out some examples in the [markdown](./templates/markdown/.partials)
  template.


  > The name of the partial will be obtained from the file name, converted to
  camel case. So, for instance, if the file name is `my-partial.js`, you can use
  the partial with `{{> myPartial}}`.


  ## Authors


  * Fran Méndez ([@fmvilas](http://twitter.com/fmvilas))

  * Richard Klose ([@richardklose](http://github.com/richardklose))
atlassian/oas3-chow-chow: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280A:38313E:36D6143:54DBAE5:661489BD.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mrTimofey/vue-admin: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2ABFAB3:410D260:66148F03.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Microsoft/OpenAPI.NET.OData: >

  VSTS Build  | Status

  --------|---------

  Rolling | <img
  src="https://identitydivision.visualstudio.com/_apis/public/build/definitions/2cfe7ec3-b94f-4ab9-85ab-2ebff928f3fd/410/badge"/>

  Nightly | <img
  src="https://identitydivision.visualstudio.com/_apis/public/build/definitions/2cfe7ec3-b94f-4ab9-85ab-2ebff928f3fd/427/badge"/>



  AzurePipeline|Status

  --------|--------------
   Rolling |<img src="https://identitydivision.visualstudio.com/OData/_apis/build/status/OpenApi/OpenAPI.OData-Master-Rolling?branchName=master" />
    Nightly |<img src="https://identitydivision.visualstudio.com/OData/_apis/build/status/OpenApi/OpenAPI.OData-Master-Nightly?branchName=master" />

  # Convert OData to OpenAPI.NET [Preview]


  [**Disclaimer:This library is in a preview state. Feedback and contribution is
  welcome!**]


  ## Introduction


  The **Microsoft.OpenAPI.OData.Reader** library helps represent an OData
  service metadata as an OpenApi description. It converts
  [OData](http://www.odata.org)
  [CSDL](http://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html),
  the XML representation of the Entity Data Model (EDM) describing an OData
  service into [Open API](https://github.com/OAI/OpenAPI-Specification) based on
  [OpenAPI.NET](http://aka.ms/openapi) object model.


  The conversion is based on the mapping doc from [OASIS OData OpenAPI
  v1.0](https://www.oasis-open.org/committees/document.php?document_id=61852&wg_abbrev=odata)
  and uses the following :


  1. [Capabilities vocabulary
  annotation](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Capabilities.V1.xml)

  2. [Authorization vocabulary
  annotation](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Authorization.V1.xml)

  3. [Core vocabulary
  annotation](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Core.V1.xml)

  4. Navigation property path

  5. Edm operation and operation import path


  ## Overview


  The image below is generic overview of how this library can convert the EDM
  model to an [OpenAPI.NET
  document](https://github.com/Microsoft/OpenAPI.NET/blob/master/src/Microsoft.OpenApi/Models/OpenApiDocument.cs)
  object.


  ![Convert OData CSDL to OpenAPI](docs/images/odata-2-openapi.png "Map ///
  OData CSDL --> OpenAPI.NET")


  For more information on the CSDL and Entity Data model, please refer to
  [http://www.odata.org/documentation](http://www.odata.org/documentation).

  For more information about the Open API object of model, please refer to
  [http://github.com/microsoft/OpenAPI.NET](http://github.com/microsoft/OpenAPI.NET)


  ## Sample code


  The following sample code illustrates the use of the library


  ```csharp

  public static void GenerateOpenApiDescription()

  {
      IEdmModel model = GetEdmModel();
      OpenApiDocument document = model.ConvertToOpenApi();
      var outputJSON = document.SerializeAsJson(OpenApiSpecVersion.OpenApi3_0);
      var outputYAML = document.SerializeAsYaml(OpenApiSpecVersion.OpenApi3_0);
  }


  public static IEdmModel GetEdmModel()

  {
      // load EDM model here...
  }

  ```


  Or with the convert settings:


  ```csharp

  public static void GenerateOpenApiDescription()

  {
      IEdmModel model = GetEdmModel();
      OpenApiConvertSettings settings = new OpenApiConvertSettings
      {
          // configuration
      };
      OpenApiDocument document = model.ConvertToOpenApi(settings);
      var outputJSON = document.SerializeAsJson(OpenApiSpecVersion.OpenApi3_0);
      var outputYAML = document.SerializeAsYaml(OpenApiSpecVersion.OpenApi3_0);
  }


  public static IEdmModel GetEdmModel()

  {
      // load EDM model here...
  }

  ```


  The `GetEdmModel()` method can load a model in 3 ways:


  1. Create the Edm model from scratch. For details refer [building a basic
  model](http://odata.github.io/odata.net/#02-01-build-basic-model)


  2. Load the Edm model from CSDL file. The following shows a code sample that
  loads a model from a csdl file.

      ```csharp
      public static IEdmModel GetEdmModel()
      {
          string csdlFilePath = @"c:\csdl.xml";
          string csdl = System.IO.File.ReadAllText(csdlFilePath);
          IEdmModel model = CsdlReader.Parse(XElement.Parse(csdl).CreateReader());
          return model;
      }
      ```

  3. Create the Edm model using Web API OData model builder. For details refer
  to the [web api model builder
  article](http://odata.github.io/WebApi/#02-01-model-builder-abstract)


  ## Nightly builds


  The nightly build process will upload a Nuget package for OpenAPI.OData.reader
  to [OpenAPIOData MyGet gallery](https://www.myget.org/gallery/openapiodata).


  To connect to OpenAPI.OData.reader feed, use
  [this](https://www.myget.org/F/openapiodata/api/v3/index.json) URL source.


  ## Nuget packages


  The OpenAPI.OData.reader nuget package is at:
  [https://www.nuget.org/packages/Microsoft.OpenApi.OData/](https://www.nuget.org/packages/Microsoft.OpenApi.OData)


  ---


  # Contributing


  This project welcomes contributions and suggestions.  Most contributions
  require you to agree to a

  Contributor License Agreement (CLA) declaring that you have the right to, and
  actually do, grant us

  the rights to use your contribution. For details, visit
  [https://cla.microsoft.com](https://cla.microsoft.com).


  When you submit a pull request, a CLA-bot will automatically determine whether
  you need to provide

  a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow
  the instructions

  provided by the bot. You will only need to do this once across all repos using
  our CLA.


  This project has adopted the [Microsoft Open Source Code of
  Conduct](https://opensource.microsoft.com/codeofconduct/).

  For more information see the [Code of Conduct
  FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or

  contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any
  additional questions or comments.
Mermade/openapi-lint-vscode: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3717203:552C08F:66148755.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
tavis-software/Tavis.OpenApi: >
  # Tavis.OpenAPI


  **Note: This library has been superceded by
  [Microsoft.OpenAPI.NET](https://github.com/Microsoft/OpenAPI.NET).  I don't
  expect any further development on this project.**


  This library is a parser for the [OpenAPI
  Specification](https://openapis.org/).  The model is based around OpenAPI 3.0
  specification.


  ## Simple Example


  ```csharp
              var parsingContext = OpenApiParser.Parse(@"
                      openapi: 3.0.0
                      info:
                          title: A simple inline example
                          version: 1.0.0
                      paths:
                        /api/home:
                          get:
                            responses:
                              200:
                                description: A home document
                      ");

              Assert.Equal("3.0.0", parsingContext.OpenApiDoc.Version);
              Assert.Equal(0, parsingContext.ParsingErrors.Count());
  ```


  ## Goals


  - Import OpenAPI V3 definitions in both YAML and JSON formats.

  - Export OpenAPI definition in YAML format

  - Import OpenAPI V2 definitions

  - Provide comprehensive syntax and semantic error reporting 

  - Enable constructing of OpenAPI descriptions via a document object model
rafaelcaricio/sticker: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280F:1D7486:21E440D:365E731:66149088.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cdimascio/kotlin-spring-mvc-template: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:237B093:38D9133:66148A7B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
wzshiming/gen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:25509C4:3B9B920:66149536.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
technocreatives/openapi-eller: >
  <p align="center">
    <img width="256" height="256" src="https://user-images.githubusercontent.com/279099/39677264-396f9568-5178-11e8-9afc-b845fdd2218f.png" alt="Eller logo"/>
  </p>


  [![Actions
  Status](https://github.com/technocreatives/openapi-eller/workflows/nodejs-build/badge.svg)](https://github.com/technocreatives/openapi-eller/actions)
  [![NPM
  version](https://img.shields.io/npm/v/openapi-eller.svg?style=flat)](https://www.npmjs.org/package/openapi-eller)


  # OpenAPI Generator, eller?


  Generate OpenAPI v3 clients and servers from the command line with nothing
  more

  than Node.js.



  Just run:


  ```

  npm i -g openapi-eller

  ```


  See `openapi-eller --help` for usage details.


  - [Documentation](https://technocreatives.github.io/openapi-eller)


  ---


  Looking for an easy way to generate a mock server from an OpenAPI v3 spec?
  We've got you covered.


  Try
  [openapi-mock-eller](https://github.com/technocreatives/openapi-mock-eller)
  today!


  ---


  **PLEASE NOTE: This codebase is still a work-in-progress, but it does produce
  production-grade code

  for those targets listed as supported. Behaviour is subject to change between
  variants until 1.0.0.**


  ## Features


  - Supports* the full OpenAPI v3 specification

  - Uses an interceptor pattern for handling security schemas in clients

  - OAuth 2 clients comply with [RFC6749](https://tools.ietf.org/html/rfc6749)
  and 
    [RFC6750](https://tools.ietf.org/html/rfc6750) (Bearer Token Usage)
  - Targets can be configured with a JSON or YAML file for simple, reproducable
  generations

  - Easily extensible Handlebars templates for core structure of files, with
  TypeScript 
    target-specific code for handling with pointy bits

  ## Supported targets


  - Clients:
    - Kotlin (Android)
    - Swift (iOS)
    - TypeScript
  - Servers:
    - ASP.NET (MVC Framework 4.5)

  There are other targets in the tree, though they are a work-in-progress.


  ## Roadmap to 0.4


  - [ ] Generating platform-conformant API documentation

  - [ ] Handle returning headers, status codes and raw response objects where
  necessary

  - [ ] Handle mandatory configuration for targets

  - [ ] Generate documentation for target configuration


  ## Users


  - The Techno Creatives


  ## Contributing


  We happily accept contributions! We simply ask that you please make sure that
  any dependencies 

  of your targets use a permissive license compatible with the ISC license
  (which means no AGPL or 

  GPL dependencies, unfortunately.)


  If you're unsure, open an issue and we can help you out!


  ## License


  ISC license - see LICENSE file.


  Any code outputted by this generator is the license of your choice.
go-courier/oas: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2815:7C58:250FE2F:3B889A8:66148CBF.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
koumoul-dev/data-fair: >-
  # <img alt="Data FAIR logo"
  src="https://cdn.jsdelivr.net/gh/data-fair/data-fair@master/public/assets/logo.svg"
  width="40"> Data FAIR


  *Findable, Accessible, Interoperable and Reusable Data*


  [Visit documentation website](https://data-fair.github.io/3/)


  ![](doc/static/data-fair.gif)


  ## Sponsors


  | | Click [here to support the development of this
  project](https://github.com/sponsors/koumoul-dev). |

  |-|-|

  | [<img alt="Koumoul logo" src="https://koumoul.com/static/logo-slogan.png"
  height="40">](https://koumoul.com) | [Koumoul](https://koumoul.com) develops
  the Data Fair ecosystem and hosts it as an online service. |

  | [<img alt="Dawizz logo"
  src="https://dawizz.fr/logo-Dawizz-all-about-your-data-home.png"
  height="40">](https://dawizz.fr) | [Dawizz](https://dawizz.fr) uses Data Fair
  inside its platform and supports its development. |


  ## Developers


  Take a look at the [contribution guidelines](./CONTRIBUTING.md).
Mermade/openapi3-examples: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:2302B48:382544D:66148798.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Rots/n26-api: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:14372A:BA3B21C:1226E7B4:6614887A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
isa-group/oas-tools: >-
  {"message":"API rate limit exceeded for 40.77.92.214. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more
  details.)","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
ckaratzas/vertx-openapi-spec-generator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:29529AF:3EF8EE6:66148ABC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
OpenAPITools/openapi-petstore: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD23A1C:1266BA79:661487DA.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
technocreatives/openapi-mock-eller: >
  # OpenAPI v3 Mock Server


  A very alpha server for generating mock data from an OpenAPI v3 spec.


  The codebase is very small, contributions are very welcome. :smile:


  ## Usage


  No npm module yet, sorry. You can clone this repo though and execute it from
  wherever you like:


  ```

  node server.js <spec.yaml> [--port=8001] [--host=localhost]

  ```


  Your server is now running on <http://localhost:8001>.

  You can find the rendered documentation for your spec at
  <http://localhost:8001/docs>,

  and, if you ever need it, the JSON source of your spec at
  <http://localhost:8001/docs/schema.json>.


  ## License


  ISC license - see LICENSE file.
serafin-labs/serafin: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3A4A498:59D426C:661490C9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
yayoc/swagger-to-mock: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280B:1D25BE:2402DDA:3A34157:66149539.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
rinold/Steamer: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2B4B298:41D5EF2:661490A8.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
wzshiming/openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:228ABCA:3725256:66149536.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
isa-group/oas-generator: >-
  {"message":"API rate limit exceeded for 20.171.133.141. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more
  details.)","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
erasys/openapi-php: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:38998C0:575DC27:66148BDE.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
SkeLLLa/fastify-oas: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:28A08BA:3DF1CE2:661488B9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
SabzCity/go-library: >-
  # go-library

  It was deprecated in favor of
  [ChaparKhane](https://github.com/SabzCity/ChaparKhane)
lendingblock/aio-openapi: >
  # aio-openapi


  [![PyPI
  version](https://badge.fury.io/py/aio-openapi.svg)](https://badge.fury.io/py/aio-openapi)

  [![Python
  versions](https://img.shields.io/pypi/pyversions/aio-openapi.svg)](https://pypi.org/project/aio-openapi)

  [![Build](https://github.com/quantmind/aio-openapi/workflows/build/badge.svg)](https://github.com/quantmind/aio-openapi/actions?query=workflow%3Abuild)

  [![Coverage
  Status](https://coveralls.io/repos/github/quantmind/aio-openapi/badge.svg?branch=HEAD)](https://coveralls.io/github/quantmind/aio-openapi?branch=HEAD)

  [![Documentation
  Status](https://readthedocs.org/projects/aio-openapi/badge/?version=latest)](https://aio-openapi.readthedocs.io/en/latest/?badge=latest)


  Asynchronous web middleware for [aiohttp][] and serving Rest APIs with
  [OpenAPI][] v 3

  specification and with optional [PostgreSql][] database bindings.


  <!-- START doctoc generated TOC please keep comment here to allow auto update
  -->

  <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->


  **Table of Contents**


  - [Installation](#installation)

  - [Development](#development)

  - [Features](#features)

  - [Web App](#web-app)

  - [OpenAPI Documentation](#openapi-documentation)

  - [Database Integration](#database-integration)

  - [Websockets](#websockets)
    - [RPC protocol](#rpc-protocol)
    - [Publish/Subscribe](#publishsubscribe)
  - [Environment Variables](#environment-variables)


  <!-- END doctoc generated TOC please keep comment here to allow auto update
  -->


  ## Installation


  ```

  pip install aio-openapi

  ```


  ## Development


  Clone the repository and create a virtual environment `venv`.


  Install dependencies by running the install script


  ```

  ./dev/install

  ```


  To run tests


  ```

  pytest --cov

  ```


  ## Features


  - Asynchronous web routes with
  [aiohttp](https://aiohttp.readthedocs.io/en/stable/)

  - Data validation, serialization and unserialization with python
  [dataclasses](https://docs.python.org/3/library/dataclasses.html)

  - [OpenApi][] v 3 auto documentation

  - [SqlAlchemy][] expression language

  - Asynchronous DB interaction with [asyncpg][]

  - Migrations with [alembic][]

  - SqlAlchemy tables as python dataclasses

  - Support [click][] command line interface

  - Optional [sentry](https://sentry.io) middleware


  ## Web App


  To create an openapi RESTful application follow this schema (lets call the
  file `main.py`)


  ```python

  from openapi.rest import rest


  def create_app():
      return rest(
          openapi=dict(
              title='A REST API',
              ...
          ),
          base_path='/v1',
          allowed_tags=[...],
          validate_docs=True,
          setup_app=setup_app,
          commands=[...]
      )


  def setup_app(app):
      app.router.add_routes(...)
      return app


  if __name__ == '__main__':
      create_app().main()
  ```


  The `create_app` function creates the [aiohttp][] server application by
  invoking the `rest` function.

  This function adds the [click][] command in the `cli` mapping entry and add

  documentation for routes which support OpenAPI docs.

  The `setup_app` function is used to actually setup the custom application,
  usually by adding middleware, routes,

  shutdown callbacks, database integration and so forth.


  ## OpenAPI Documentation


  The library provide tools for creating OpenAPI v 3 compliant endpoints and

  auto-document them.


  An example from test `tests/example` directory


  ```python

  from typing import List


  from aiohttp import web


  from openapi.db.path import SqlApiPath

  from openapi.spec import op



  routes = web.RouteTableDef()



  @routes.view('/tasks')

  class TasksPath(SqlApiPath):
      """
      ---
      summary: Create and query Tasks
      tags:
          - name: Task
            description: Task tag description
      """
      table = 'tasks'

      @op(query_schema=TaskOrderableQuery, response_schema=List[Task])
      async def get(self) -> web.Response:
          """
          ---
          summary: Retrieve Tasks
          description: Retrieve a list of Tasks
          responses:
              200:
                  description: Authenticated tasks
          """
          paginated = await self.get_list()
          return paginated.json_response()

      @op(response_schema=Task, body_schema=TaskAdd)
      async def post(self) -> web.Response:
          """
          ---
          summary: Create a Task
          description: Create a new Task
          responses:
              201:
                  description: the task was successfully added
              422:
                  description: Failed validation
          """
          data = await self.create_one()
          return self.json_response(data, status=201)
  ```


  ## Database Integration


  This library provides integration with [asyncpg][], an high performant
  asynchronous

  connector with [PostgreSql][] database.

  To add the database extension simply use the `get_db` function in the
  applicatiuon `setup_app` function:


  ```python

  from aiohttp import web


  from openapi.db import get_db


  def setup_app(app: web.Application) -> None:
      db = get_db(app)
      meta = db.metadata

  ```


  This will enable database connection and command line tools (most of them from
  [alembic][]):


  ```

  python main.py db --help

  ```


  The database container is available at the `db` app key:


  ```python

  app['db']

  ```


  ## Websockets


  This library provides a simple distributed websocket utility for creating

  websocket remote procedure calls (RPC) and pub/sub.


  ```python

  from aiohttp import web


  from openapi.ws import Sockets


  app = web.Application()

  ...

  app['web_sockets'] = Sockets(app)

  ```


  ### RPC protocol


  The RPC protocol has the following structure for incoming messages


  ```javascript

  {
      "id": "abc",
      "method": "rpc_method_name",
      "payload": {
          ...
      }
  }

  ```


  The `id` is used by clients to link the request with the corresponding
  response.

  The response for an RPC call is eitrher a success


  ```javascript

  {
      "id": "abc",
      "method": "rpc_method_name",
      "response": {
          ...
      }
  }

  ```


  or error


  ```

  {
      "id": "abc",
      "method": "rpc_method_name":
      "error": {
          ...
      }
  }

  ```


  ### Publish/Subscribe


  To subscribe to messages, one need to use the `Subscribe` mixin with the
  subscribe RPC handler.

  Messages take the form:


  ```javascript

  {
      "channel": "channel_name",
      "event": "event_name",
      "data": {
          ...
      }
  }

  ```


  ## Environment Variables


  Several environment variables are used by the library to support testing and
  deployment.


  - `DATASTORE`: PostgreSql connection string (same as [SqlAlchemy][] syntax)

  - `DBPOOL_MIN_SIZE`: minimum size of database connection pool (default is 10)

  - `DBPOOL_MAX_SIZE`: maximum size of database connection pool (default is 10)


  [aiohttp]: https://aiohttp.readthedocs.io/en/stable/

  [openapi]: https://www.openapis.org/

  [postgresql]: https://www.postgresql.org/

  [sqlalchemy]: https://www.sqlalchemy.org/

  [click]: https://github.com/pallets/click

  [alembic]: http://alembic.zzzcomputing.com/en/latest/

  [asyncpg]: https://github.com/MagicStack/asyncpg
Mermade/swaggerplusplus: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:206494F:33E93F6:66148799.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
niteoweb/pyramid_openapi3: >
  ## Validate [Pyramid](https://trypyramid.com) views against an [OpenAPI
  3.0](https://swagger.io/specification/) document


  <p align="center">
    <img height="200" src="https://github.com/Pylons/pyramid_openapi3/blob/master/header.jpg?raw=true" />
  </p>


  <p align="center">
    <a href="https://circleci.com/gh/Pylons/pyramid_openapi3">
      <img alt="CircleCI for pyramid_openapi3 (master branch)"
           src="https://circleci.com/gh/Pylons/pyramid_openapi3.svg?style=shield">
    </a>
    <img alt="Test coverage (master branch)"
         src="https://img.shields.io/badge/tests_coverage-100%25-brightgreen.svg">
    <img alt="Test coverage (master branch)"
         src="https://img.shields.io/badge/types_coverage-100%25-brightgreen.svg">
    <a href="https://pypi.org/project/pyramid_openapi3/">
      <img alt="latest version of pyramid_openapi3 on PyPI"
           src="https://img.shields.io/pypi/v/pyramid_openapi3.svg">
    </a>
    <a href="https://pypi.org/project/pyramid_openapi3/">
      <img alt="Supported Python versions"
           src="https://img.shields.io/pypi/pyversions/pyramid_openapi3.svg">
    </a>
    <a href="https://github.com/Pylons/pyramid_openapi3/blob/master/LICENSE">
      <img alt="License: MIT"
           src="https://img.shields.io/badge/License-MIT-yellow.svg">
    </a>
    <a href="https://github.com/Pylons/pyramid_openapi3/graphs/contributors">
      <img alt="Built by these great folks!"
           src="https://img.shields.io/github/contributors/Pylons/pyramid_openapi3.svg">
    </a>
    <a href="https://webchat.freenode.net/?channels=pyramid">
      <img alt="Talk to us in #pyramid on Freenode IRC"
           src="https://img.shields.io/badge/irc-freenode-blue.svg">
    </a>
  </p>


  ## Peace of Mind


  The reason this package exists is to give you peace of mind when providing a
  RESTful API. Instead of chasing down preventable bugs and saying sorry to
  consumers, you can focus on more important things in life.


  - Your **API documentation is never out-of-date**, since it is generated out
  of the API document that you write.

  - The documentation comes with **_try-it-out_ examples** for every endpoint in
  your API. You don't have to provide (and maintain) `curl` commands to showcase
  how your API works. Users can try it themselves, right in their browsers.

  - Your **API document is always valid**, since your Pyramid app won't even
  start if the document is not according to OpenAPI 3.0 specification.

  - Automatic request **payload validation and sanitization**. Your views do not
  require any code for validation and input sanitation. Your view code only
  deals with business logic. Tons of tests never need to be written since every
  request, and its payload, is validated against your API document before it
  reaches your view code.

  - Your API **responses always match your API document**. Every response from
  your view is validated against your document and a `500 Internal Server Error`
  is returned if the response does not exactly match what your document says the
  output of a certain API endpoint should be. This decreases the effects of the
  [Hyrum's Law](https://www.hyrumslaw.com).

  - **A single source of truth**. Because of the checks outlined above you can
  be sure that whatever your API document says is in fact what is going on in
  reality. You have a single source of truth to consult when asking an API
  related question, such as "Remind me again, which fields does the endpoint
  /user/info return?".

  - Based on [Pyramid](https://trypyramid.com), a **mature Python Web
  framework**. Companies such as Mozilla, Yelp, RollBar and SurveyMonkey [trust
  Pyramid](https://trypyramid.com/community-powered-by-pyramid.html), and the
  new [pypi.org](https://github.com/pypa/warehouse) runs on Pyramid too. Pyramid
  is thoroughly [tested](https://travis-ci.org/Pylons/pyramid) and
  [documented](http://docs.pylonsproject.org/projects/pyramid/en/latest/),
  providing flexibility, performance, and a large ecosystem of [high-quality
  add-ons](https://trypyramid.com/extending-pyramid.html).


  ## Features


  - Validates your API document (for example, `openapi.yaml` or `openapi.json`)
  against the OpenAPI 3.0 specification using the
  [openapi-spec-validator](https://github.com/p1c2u/openapi-spec-validator).

  - Generates and serves the [Swagger try-it-out
  documentation](https://swagger.io/tools/swagger-ui/) for your API.

  - Validates incoming requests *and* outgoing responses against your API
  document using [openapi-core](https://github.com/p1c2u/openapi-core).



  ## Getting started


  1. Declare `pyramid_openapi3` as a dependency in your Pyramid project.


  2. Include the following lines:


  ```python

  config.include("pyramid_openapi3")

  config.pyramid_openapi3_spec('openapi.yaml', route='/api/v1/openapi.yaml')

  config.pyramid_openapi3_add_explorer(route='/api/v1/')

  ```


  3. Use the `openapi` [view
  predicate](https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/viewconfig.html#view-configuration-parameters)
  to enable request/response validation:


  ```python

  @view_config(route_name="foobar", openapi=True, renderer='json')

  def myview(request):
      return request.openapi_validated.parameters
  ```


  For requests, `request.openapi_validated` is available with two fields:
  `parameters` and `body`.

  For responses, if the payload does not match the API document, an exception is
  raised.



  ## Demo / Examples


  There are two examples provided with this package:

  * A fairly simple [single-file app providing a Hello World
  API](https://github.com/Pylons/pyramid_openapi3/tree/master/examples/singlefile).

  * A slightly more [built-out app providing a TODO app
  API](https://github.com/Pylons/pyramid_openapi3/tree/master/examples/todoapp).


  Both examples come with tests that exhibit pyramid_openapi's error handling
  and validation capabilities.


  A **fully built-out app**, with 100% test coverage, providing a
  [RealWorld.io](https://realworld.io) API is available at
  [niteoweb/pyramid-realworld-example-app](https://github.com/niteoweb/pyramid-realworld-example-app).
  It is a Heroku-deployable Pyramid app that provides an API for a
  Medium.com-like social app. You are encouraged to use it as a scaffold for
  your next project.



  ## Design defense


  The authors of pyramid_openapi3 believe that the approach of validating a
  manually-written API document is superior to the approach of generating the
  API document from Python code. Here are the reasons:


  a) Both generation and validation against a document are lossy processes. The
  underlying libraries running the generation/validation will always have
  something missing. Either a feature from the latest OpenAPI specification, or
  an implementation bug. Having to fork the underlying library in order to
  generate the part of your API document that might only be needed for the
  frontend is unfortunate.

     Validation on the other hand allows one to skip parts of validation that are not supported yet, and not block a team from shipping the document.

  b) Validation approach does sacrifice DRY-ness, one has to write the API
  document and then the (view) code in Pyramid. Feels a bit redundant at first.
  However, this provides a clear separation between the intent and the
  implementation.


  c) Generation approach has the drawback of having to write Python code even
  for parts of the API document that the Pyramid backend does not handle, as it
  might be handled by a different system, or be specific only to documentation
  or only to the client side of the API. This bloats your Pyramid codebase with
  code that does not belong there.


  ## Running tests


  You need to have [pipenv](https://pipenv.readthedocs.io/) and Python 3.7 or
  3.8 installed on your machine. Then you can run:

      $ make tests

  ## Related packages


  These packages tackle the same problem-space:


  - [pyramid_oas3](https://github.com/kazuki/pyramid-oas3) seems to do things
  very similarly to pyramid_openapi3, but the documentation is not in English
  and we sadly can't fully understand what it does just reading the code.

  - [pyramid_swagger](https://github.com/striglia/pyramid_swagger) does a
  similar
    thing, but for Swagger 2.0 documents.
  - [connexion](https://github.com/zalando/connexion) takes the same "write spec
  first, code second" approach as pyramid_openapi3, but is based on Flask.

  - [bottle-swagger](https://github.com/ampedandwired/bottle-swagger) takes the
  same "write spec first, code second" approach too, but is based on Bottle.

  - [pyramid_apispec](https://github.com/ergo/pyramid_apispec) uses generation
  with
    help of apispec and marshmallow validation library. See above [why we prefer validation instead of generation](#design-defense).

  ## Deprecation policy


  We do our best to follow the rules below.


  * Support the latest two releases of Python, currently Python 3.7 and 3.8.

  * Support only a single release of `openapi-core` and its sub-dependencies.
  See `Pipfile.lock` for a frozen-in-time known-good-set of all dependencies.


  ## Use in the wild


  A couple of projects that use pyramid_openapi3 in production:


  - [WooCart API](https://app.woocart.com/api/v1/) - User control panel for
  WooCart Managed WooCommerce service.

  - [Kafkai API](https://app.kafkai.com/api/v1) - User control panel for Kafkai
  text generation service.
OverSpeedIO/koa2-oas3: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:374D037:557A060:661487F9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Mermade/openapi-webconverter: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:22FCEDD:381C876:66148774.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
zweidenker/OpenAPI: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2D0AAEC:445986D:661495D7.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
denismakogon/fn-openapi-v3: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:27DEDD:A985BF1:1084335B:66148B7A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
nasa9084/go-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:27DEDD:AA30F75:10944637:66148F43.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
foxel/openapi3-typescript-codegen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:212FEF1:351C7BB:66148C9C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
muskratjs/muskrat: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2ACAB1D:411CEF9:66148F23.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
kinecosystem/ecosystem-api: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2808:307920:39F781D:59C7502:66148D43.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
microprofile-extensions/openapi-ext: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:3874F1B:57795BA:66148E64.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
philosowaffle/vs-openapi-designer: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BEAE55B:128BEF4D:66148FA6.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
ckaratzas/tus-server-implementation: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:383763A:56CE3CF:66148ABB.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Dzoukr/OpenAPIParser: >-
  <img src="https://github.com/Dzoukr/OpenAPITypeProvider/raw/master/logo.jpg"
  alt="drawing" width="100px"/>


  # Open API F# Parser


  Simple library for parsing YAML/JSON Open API (previously called as Swagger)
  specification (version 3.0.1). Originally part of my type provider, but I will
  probably never finish it, so at least community can use part of it for own
  projects. :)


  ## Installation

  First install NuGet package

      Install-Package OpenAPIParser

  or using [Paket](http://fsprojects.github.io/Paket/getting-started.html)

      nuget OpenAPIParser

  ## How to use


  Typically, you would use some existing specification (see [official examples
  for version
  3](https://github.com/OAI/OpenAPI-Specification/tree/master/examples/v3.0)):


  ```fsharp

  open OpenAPIParser.Version3.Parser

  let openAPI = Document.loadFromYamlFile "mySpec.yaml" 

  ```


  Then you have basic F# record filled


  ```fsharp

  let version = openAPI.Info.Version

  let title = openAPI.Info.Title

  let paths = openAPI.Paths

  ...

  ```


  Please check [test
  project](https://github.com/Dzoukr/OpenAPIParser/tree/master/tests/OpenAPIParser.Tests)
  for more examples.


  ## Limitations


  Not all properties from [3.0.1
  specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md)
  are implemented. Especially `anyOf` and `oneOf` Schema objects, which will be
  probably implemented in future versions. Please check [Specification record
  definition](https://github.com/Dzoukr/OpenAPIParser/blob/master/src/OpenAPIParser/Version3/Specification.fs)
  for already implemented properties.


  ## Contribution


  You know the drill. Code + Tests = Good PR. Any contribution more than
  welcome!
confuser/exegesis-koa: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3841CE5:56DD4B3:66148ADB.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
unifysell/unifysell-sdk-php: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:3A7008D:5A562B8:66149457.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
kumuluz/kumuluzee-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:394AF70:5860986:66148DE2.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
koumoul-dev/soas: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:A4E47:B7A4723:11C42B80:66149007.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
entrepreneur-interet-general/open_api_schemas_to_markdown: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:3564:225EBB8:3730EF2:66148B9E.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
brreg/openAPI: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD8F590:1270EE37:661489FC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
funa1g/multi-file-oas-example: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:836C:22F9212:3826FEC:66148CBD.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
koshevy/oapi3codegen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3920184:58221DD:66148D64.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
acme-software/typeswagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2813:3BE432:B7B064A:11D675A8:6614891C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
unjello/openapi-mockk: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2808:307920:3C6D3F3:5D5C0DB:66149457.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Bankdata/gradle-swagger-plugin: >-
  {"message":"Not
  Found","documentation_url":"https://docs.github.com/rest/repos/contents#get-a-repository-readme"}
chrisdostert/listener-from-oas3-js: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:320223:390894F:58952D4:66148A9C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
smartrecruiters/openapi-schemas-validator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:24C0C27:3AC2528:66149204.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
kazuki/pyramid-oas3: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3914C2E:5811CA0:66148D42.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
vivek-26/koa-openapi3-router: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BFB61B9:12A4BE5C:661494B6.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
tandfgroup/schema-oas: |
  # OpenAPI Specifications for Schema.org

  ## Table of Contents

  - [About the Service](#about)
    - [Features](#features)
  - [Usage](#usage)
  - [Contributing](CONTRIBUTING.md)
  - [License](#license)

  ---

  ## About the Service <a id="about"></a>

  This is a collection of OpenAPI Specs for all the Schema.org entities.

  ## Usage <a id="usage"></a>

  TBD...

  > :point_up: _more instructions coming soon._

  ---

  ## License <a id="license"></a>

  Copyright 2018 Taylor & Francis Group

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  <http://www.apache.org/licenses/LICENSE-2.0>

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
data-studio/data-studio: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BDDBAB5:12782885:66148B7A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
unjello/openapi-parser: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3B90BDE:5BAB440:66149477.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
joar/py-openapilib: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2808:0950:AC0C526:10BCE5FF:66148D03.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
SensibleWood/swaggerui-webpack-boilerplate: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280B:09A3:BD42C9B:1269AF02:6614887A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
pglass/py-openapi-schema-to-json-schema: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:24831B2:3A67210:66149085.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
riddhi89/simple-flask-project: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BEC1B80:128DC210:66149006.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Mermade/openapi-gui: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:370D128:551DAA1:66148736.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Mermade/widdershins: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:3564:21BA26D:3639A98:66148799.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Mermade/oas-kit: >
  # OAS-Kit


  This is the mono-repo for the following related projects


  * [swagger2openapi](packages/swagger2openapi/README.md)

  * [oas-validator](packages/oas-validator/README.md)

  * [oas-linter](packages/oas-linter/README.md)

  * [oas-resolver](packages/oas-resolver/README.md)

  * [oas-schema-walker](packages/oas-schema-walker/README.md)

  * [oas-kit-common](packages/oas-kit-common/README.md)

  * [reftools](packages/reftools/README.md)


  ## Documentation


  * [Main site](https://mermade.github.io/oas-kit)

  *
  [CHANGELOG](https://github.com/Mermade/oas-kit/blob/master/CHANGELOG.md#change-log)


  ## Online converter/validator


  * [OpenAPI-webconverter](https://mermade.org.uk/openapi-converter)


  ## Supported Node.js versions


  Any LTS version. It is **not** recommended to use Node.js 12.17.x,12.18.x or
  12.19.x due to an [http2 bug](https://github.com/nodejs/node/issues/28001).


  ## Development


  * clone the repository

  * `npm i` in the top level directory

  * `npx lerna bootstrap`


  Please try and keep commits related to a single package or piece of
  functionality. Please review the

  [CONTRIBUTING.md](CONTRIBUTING.md) for additional details.


  ## Supporting development


  * [APIs.guru open-collective](https://opencollective.com/openapi-directory)

  * [Linode VPS referral
  link](https://www.linode.com/?r=5734be467cc501b23267cf66d451bc339042ddfa)
OpenAPITools/openapi-generator-cli: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:14372A:BA16A8D:122375BD:661487BA.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
stoplightio/spectral: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:24D94B1:3AE6A3D:66149294.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
m3-moretv/smogger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:395606A:5870CCA:66148E02.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
anupsaund/vertx-auto-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:36C8BAB:550B8E5:6614893E.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mrin9/OpenAPI-Viewer: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  27C0:38313E:389BECA:57784A8:66148F03.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
tiangolo/fastapi: "<p align=\"center\">\n  <a href=\"https://fastapi.tiangolo.com\"><img src=\"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" alt=\"FastAPI\"></a>\n</p>\n<p align=\"center\">\n    <em>FastAPI framework, high performance, easy to learn, fast to code, ready for production</em>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/tiangolo/fastapi/actions?query=workflow%3ATest+event%3Apush+branch%3Amaster\" target=\"_blank\">\n    <img src=\"https://github.com/tiangolo/fastapi/workflows/Test/badge.svg?event=push&branch=master\" alt=\"Test\">\n</a>\n<a href=\"https://coverage-badge.samuelcolvin.workers.dev/redirect/tiangolo/fastapi\" target=\"_blank\">\n    <img src=\"https://coverage-badge.samuelcolvin.workers.dev/tiangolo/fastapi.svg\" alt=\"Coverage\">\n</a>\n<a href=\"https://pypi.org/project/fastapi\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/fastapi?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n</a>\n<a href=\"https://pypi.org/project/fastapi\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/pyversions/fastapi.svg?color=%2334D058\" alt=\"Supported Python versions\">\n</a>\n</p>\n\n---\n\n**Documentation**: <a href=\"https://fastapi.tiangolo.com\" target=\"_blank\">https://fastapi.tiangolo.com</a>\n\n**Source Code**: <a href=\"https://github.com/tiangolo/fastapi\" target=\"_blank\">https://github.com/tiangolo/fastapi</a>\n\n---\n\nFastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.8+ based on standard Python type hints.\n\nThe key features are:\n\n* **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic). [One of the fastest Python frameworks available](#performance).\n* **Fast to code**: Increase the speed to develop features by about 200% to 300%. *\n* **Fewer bugs**: Reduce about 40% of human (developer) induced errors. *\n* **Intuitive**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging.\n* **Easy**: Designed to be easy to use and learn. Less time reading docs.\n* **Short**: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.\n* **Robust**: Get production-ready code. With automatic interactive documentation.\n* **Standards-based**: Based on (and fully compatible with) the open standards for APIs: <a href=\"https://github.com/OAI/OpenAPI-Specification\" class=\"external-link\" target=\"_blank\">OpenAPI</a> (previously known as Swagger) and <a href=\"https://json-schema.org/\" class=\"external-link\" target=\"_blank\">JSON Schema</a>.\n\n<small>* estimation based on tests on an internal development team, building production applications.</small>\n\n## Sponsors\n\n<!-- sponsors -->\n\n<a href=\"https://cryptapi.io/\" target=\"_blank\" title=\"CryptAPI: Your easy to use, secure and privacy oriented payment gateway.\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/cryptapi.svg\"></a>\n<a href=\"https://platform.sh/try-it-now/?utm_source=fastapi-signup&utm_medium=banner&utm_campaign=FastAPI-signup-June-2023\" target=\"_blank\" title=\"Build, run and scale your apps on a modern, reliable, and secure PaaS.\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/platform-sh.png\"></a>\n<a href=\"https://www.porter.run\" target=\"_blank\" title=\"Deploy FastAPI on AWS with a few clicks\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/porter.png\"></a>\n<a href=\"https://bump.sh/fastapi?utm_source=fastapi&utm_medium=referral&utm_campaign=sponsor\" target=\"_blank\" title=\"Automate FastAPI documentation generation with Bump.sh\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/bump-sh.svg\"></a>\n<a href=\"https://reflex.dev\" target=\"_blank\" title=\"Reflex\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/reflex.png\"></a>\n<a href=\"https://github.com/scalar/scalar/?utm_source=fastapi&utm_medium=website&utm_campaign=main-badge\" target=\"_blank\" title=\"Scalar: Beautiful Open-Source API References from Swagger/OpenAPI files\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/scalar.svg\"></a>\n<a href=\"https://www.propelauth.com/?utm_source=fastapi&utm_campaign=1223&utm_medium=mainbadge\" target=\"_blank\" title=\"Auth, user management and more for your B2B product\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/propelauth.png\"></a>\n<a href=\"https://www.withcoherence.com/?utm_medium=advertising&utm_source=fastapi&utm_campaign=banner%20january%2024\" target=\"_blank\" title=\"Coherence\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/coherence.png\"></a>\n<a href=\"https://www.mongodb.com/developer/languages/python/python-quickstart-fastapi/?utm_campaign=fastapi_framework&utm_source=fastapi_sponsorship&utm_medium=web_referral\" target=\"_blank\" title=\"Simplify Full Stack Development with FastAPI & MongoDB\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/mongodb.png\"></a>\n<a href=\"https://training.talkpython.fm/fastapi-courses\" target=\"_blank\" title=\"FastAPI video courses on demand from people you trust\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/talkpython-v2.jpg\"></a>\n<a href=\"https://github.com/deepset-ai/haystack/\" target=\"_blank\" title=\"Build powerful search from composable, open source building blocks\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/haystack-fastapi.svg\"></a>\n<a href=\"https://databento.com/\" target=\"_blank\" title=\"Pay as you go for market data\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/databento.svg\"></a>\n<a href=\"https://speakeasyapi.dev?utm_source=fastapi+repo&utm_medium=github+sponsorship\" target=\"_blank\" title=\"SDKs for your API | Speakeasy\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/speakeasy.png\"></a>\n<a href=\"https://www.svix.com/\" target=\"_blank\" title=\"Svix - Webhooks as a service\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/svix.svg\"></a>\n<a href=\"https://www.codacy.com/?utm_source=github&utm_medium=sponsors&utm_id=pioneers\" target=\"_blank\" title=\"Take code reviews from hours to minutes\"><img src=\"https://fastapi.tiangolo.com/img/sponsors/codacy.png\"></a>\n\n<!-- /sponsors -->\n\n<a href=\"https://fastapi.tiangolo.com/fastapi-people/#sponsors\" class=\"external-link\" target=\"_blank\">Other sponsors</a>\n\n## Opinions\n\n\"_[...] I'm using **FastAPI** a ton these days. [...] I'm actually planning to use it for all of my team's **ML services at Microsoft**. Some of them are getting integrated into the core **Windows** product and some **Office** products._\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Kabir Khan - <strong>Microsoft</strong> <a href=\"https://github.com/tiangolo/fastapi/pull/26\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_We adopted the **FastAPI** library to spawn a **REST** server that can be queried to obtain **predictions**. [for Ludwig]_\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - <strong>Uber</strong> <a href=\"https://eng.uber.com/ludwig-v0-2/\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_**Netflix** is pleased to announce the open-source release of our **crisis management** orchestration framework: **Dispatch**! [built with **FastAPI**]_\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Kevin Glisson, Marc Vilanova, Forest Monsen - <strong>Netflix</strong> <a href=\"https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_I’m over the moon excited about **FastAPI**. It’s so fun!_\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Brian Okken - <strong><a href=\"https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855\" target=\"_blank\">Python Bytes</a> podcast host</strong> <a href=\"https://twitter.com/brianokken/status/1112220079972728832\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted **Hug** to be - it's really inspiring to see someone build that._\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Timothy Crosley - <strong><a href=\"https://www.hug.rest/\" target=\"_blank\">Hug</a> creator</strong> <a href=\"https://news.ycombinator.com/item?id=19455465\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_If you're looking to learn one **modern framework** for building REST APIs, check out **FastAPI** [...] It's fast, easy to use and easy to learn [...]_\"\n\n\"_We've switched over to **FastAPI** for our **APIs** [...] I think you'll like it [...]_\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Ines Montani - Matthew Honnibal - <strong><a href=\"https://explosion.ai\" target=\"_blank\">Explosion AI</a> founders - <a href=\"https://spacy.io\" target=\"_blank\">spaCy</a> creators</strong> <a href=\"https://twitter.com/_inesmontani/status/1144173225322143744\" target=\"_blank\"><small>(ref)</small></a> - <a href=\"https://twitter.com/honnibal/status/1144031421859655680\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n\"_If anyone is looking to build a production Python API, I would highly recommend **FastAPI**. It is **beautifully designed**, **simple to use** and **highly scalable**, it has become a **key component** in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer._\"\n\n<div style=\"text-align: right; margin-right: 10%;\">Deon Pillsbury - <strong>Cisco</strong> <a href=\"https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-activity-6963242628536487936-trAp/\" target=\"_blank\"><small>(ref)</small></a></div>\n\n---\n\n## **Typer**, the FastAPI of CLIs\n\n<a href=\"https://typer.tiangolo.com\" target=\"_blank\"><img src=\"https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg\" style=\"width: 20%;\"></a>\n\nIf you are building a <abbr title=\"Command Line Interface\">CLI</abbr> app to be used in the terminal instead of a web API, check out <a href=\"https://typer.tiangolo.com/\" class=\"external-link\" target=\"_blank\">**Typer**</a>.\n\n**Typer** is FastAPI's little sibling. And it's intended to be the **FastAPI of CLIs**. ⌨️ \U0001F680\n\n## Requirements\n\nPython 3.8+\n\nFastAPI stands on the shoulders of giants:\n\n* <a href=\"https://www.starlette.io/\" class=\"external-link\" target=\"_blank\">Starlette</a> for the web parts.\n* <a href=\"https://docs.pydantic.dev/\" class=\"external-link\" target=\"_blank\">Pydantic</a> for the data parts.\n\n## Installation\n\n<div class=\"termy\">\n\n```console\n$ pip install fastapi\n\n---> 100%\n```\n\n</div>\n\nYou will also need an ASGI server, for production such as <a href=\"https://www.uvicorn.org\" class=\"external-link\" target=\"_blank\">Uvicorn</a> or <a href=\"https://github.com/pgjones/hypercorn\" class=\"external-link\" target=\"_blank\">Hypercorn</a>.\n\n<div class=\"termy\">\n\n```console\n$ pip install \"uvicorn[standard]\"\n\n---> 100%\n```\n\n</div>\n\n## Example\n\n### Create it\n\n* Create a file `main.py` with:\n\n```Python\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n<details markdown=\"1\">\n<summary>Or use <code>async def</code>...</summary>\n\nIf your code uses `async` / `await`, use `async def`:\n\n```Python hl_lines=\"9  14\"\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n**Note**:\n\nIf you don't know, check the _\"In a hurry?\"_ section about <a href=\"https://fastapi.tiangolo.com/async/#in-a-hurry\" target=\"_blank\">`async` and `await` in the docs</a>.\n\n</details>\n\n### Run it\n\nRun the server with:\n\n<div class=\"termy\">\n\n```console\n$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n</div>\n\n<details markdown=\"1\">\n<summary>About the command <code>uvicorn main:app --reload</code>...</summary>\n\nThe command `uvicorn main:app` refers to:\n\n* `main`: the file `main.py` (the Python \"module\").\n* `app`: the object created inside of `main.py` with the line `app = FastAPI()`.\n* `--reload`: make the server restart after code changes. Only do this for development.\n\n</details>\n\n### Check it\n\nOpen your browser at <a href=\"http://127.0.0.1:8000/items/5?q=somequery\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/items/5?q=somequery</a>.\n\nYou will see the JSON response as:\n\n```JSON\n{\"item_id\": 5, \"q\": \"somequery\"}\n```\n\nYou already created an API that:\n\n* Receives HTTP requests in the _paths_ `/` and `/items/{item_id}`.\n* Both _paths_ take `GET` <em>operations</em> (also known as HTTP _methods_).\n* The _path_ `/items/{item_id}` has a _path parameter_ `item_id` that should be an `int`.\n* The _path_ `/items/{item_id}` has an optional `str` _query parameter_ `q`.\n\n### Interactive API docs\n\nNow go to <a href=\"http://127.0.0.1:8000/docs\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/docs</a>.\n\nYou will see the automatic interactive API documentation (provided by <a href=\"https://github.com/swagger-api/swagger-ui\" class=\"external-link\" target=\"_blank\">Swagger UI</a>):\n\n![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)\n\n### Alternative API docs\n\nAnd now, go to <a href=\"http://127.0.0.1:8000/redoc\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/redoc</a>.\n\nYou will see the alternative automatic documentation (provided by <a href=\"https://github.com/Rebilly/ReDoc\" class=\"external-link\" target=\"_blank\">ReDoc</a>):\n\n![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)\n\n## Example upgrade\n\nNow modify the file `main.py` to receive a body from a `PUT` request.\n\nDeclare the body using standard Python types, thanks to Pydantic.\n\n```Python hl_lines=\"4  9-12  25-27\"\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\nThe server should reload automatically (because you added `--reload` to the `uvicorn` command above).\n\n### Interactive API docs upgrade\n\nNow go to <a href=\"http://127.0.0.1:8000/docs\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/docs</a>.\n\n* The interactive API documentation will be automatically updated, including the new body:\n\n![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)\n\n* Click on the button \"Try it out\", it allows you to fill the parameters and directly interact with the API:\n\n![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)\n\n* Then click on the \"Execute\" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:\n\n![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)\n\n### Alternative API docs upgrade\n\nAnd now, go to <a href=\"http://127.0.0.1:8000/redoc\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/redoc</a>.\n\n* The alternative documentation will also reflect the new query parameter and body:\n\n![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)\n\n### Recap\n\nIn summary, you declare **once** the types of parameters, body, etc. as function parameters.\n\nYou do that with standard modern Python types.\n\nYou don't have to learn a new syntax, the methods or classes of a specific library, etc.\n\nJust standard **Python 3.8+**.\n\nFor example, for an `int`:\n\n```Python\nitem_id: int\n```\n\nor for a more complex `Item` model:\n\n```Python\nitem: Item\n```\n\n...and with that single declaration you get:\n\n* Editor support, including:\n    * Completion.\n    * Type checks.\n* Validation of data:\n    * Automatic and clear errors when the data is invalid.\n    * Validation even for deeply nested JSON objects.\n* <abbr title=\"also known as: serialization, parsing, marshalling\">Conversion</abbr> of input data: coming from the network to Python data and types. Reading from:\n    * JSON.\n    * Path parameters.\n    * Query parameters.\n    * Cookies.\n    * Headers.\n    * Forms.\n    * Files.\n* <abbr title=\"also known as: serialization, parsing, marshalling\">Conversion</abbr> of output data: converting from Python data and types to network data (as JSON):\n    * Convert Python types (`str`, `int`, `float`, `bool`, `list`, etc).\n    * `datetime` objects.\n    * `UUID` objects.\n    * Database models.\n    * ...and many more.\n* Automatic interactive API documentation, including 2 alternative user interfaces:\n    * Swagger UI.\n    * ReDoc.\n\n---\n\nComing back to the previous code example, **FastAPI** will:\n\n* Validate that there is an `item_id` in the path for `GET` and `PUT` requests.\n* Validate that the `item_id` is of type `int` for `GET` and `PUT` requests.\n    * If it is not, the client will see a useful, clear error.\n* Check if there is an optional query parameter named `q` (as in `http://127.0.0.1:8000/items/foo?q=somequery`) for `GET` requests.\n    * As the `q` parameter is declared with `= None`, it is optional.\n    * Without the `None` it would be required (as is the body in the case with `PUT`).\n* For `PUT` requests to `/items/{item_id}`, Read the body as JSON:\n    * Check that it has a required attribute `name` that should be a `str`.\n    * Check that it has a required attribute `price` that has to be a `float`.\n    * Check that it has an optional attribute `is_offer`, that should be a `bool`, if present.\n    * All this would also work for deeply nested JSON objects.\n* Convert from and to JSON automatically.\n* Document everything with OpenAPI, that can be used by:\n    * Interactive documentation systems.\n    * Automatic client code generation systems, for many languages.\n* Provide 2 interactive documentation web interfaces directly.\n\n---\n\nWe just scratched the surface, but you already get the idea of how it all works.\n\nTry changing the line with:\n\n```Python\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\n...from:\n\n```Python\n        ... \"item_name\": item.name ...\n```\n\n...to:\n\n```Python\n        ... \"item_price\": item.price ...\n```\n\n...and see how your editor will auto-complete the attributes and know their types:\n\n![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)\n\nFor a more complete example including more features, see the <a href=\"https://fastapi.tiangolo.com/tutorial/\">Tutorial - User Guide</a>.\n\n**Spoiler alert**: the tutorial - user guide includes:\n\n* Declaration of **parameters** from other different places as: **headers**, **cookies**, **form fields** and **files**.\n* How to set **validation constraints** as `maximum_length` or `regex`.\n* A very powerful and easy to use **<abbr title=\"also known as components, resources, providers, services, injectables\">Dependency Injection</abbr>** system.\n* Security and authentication, including support for **OAuth2** with **JWT tokens** and **HTTP Basic** auth.\n* More advanced (but equally easy) techniques for declaring **deeply nested JSON models** (thanks to Pydantic).\n* **GraphQL** integration with <a href=\"https://strawberry.rocks\" class=\"external-link\" target=\"_blank\">Strawberry</a> and other libraries.\n* Many extra features (thanks to Starlette) as:\n    * **WebSockets**\n    * extremely easy tests based on HTTPX and `pytest`\n    * **CORS**\n    * **Cookie Sessions**\n    * ...and more.\n\n## Performance\n\nIndependent TechEmpower benchmarks show **FastAPI** applications running under Uvicorn as <a href=\"https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7\" class=\"external-link\" target=\"_blank\">one of the fastest Python frameworks available</a>, only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)\n\nTo understand more about it, see the section <a href=\"https://fastapi.tiangolo.com/benchmarks/\" class=\"internal-link\" target=\"_blank\">Benchmarks</a>.\n\n## Optional Dependencies\n\nUsed by Pydantic:\n\n* <a href=\"https://github.com/JoshData/python-email-validator\" target=\"_blank\"><code>email_validator</code></a> - for email validation.\n* <a href=\"https://docs.pydantic.dev/latest/usage/pydantic_settings/\" target=\"_blank\"><code>pydantic-settings</code></a> - for settings management.\n* <a href=\"https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/\" target=\"_blank\"><code>pydantic-extra-types</code></a> - for extra types to be used with Pydantic.\n\nUsed by Starlette:\n\n* <a href=\"https://www.python-httpx.org\" target=\"_blank\"><code>httpx</code></a> - Required if you want to use the `TestClient`.\n* <a href=\"https://jinja.palletsprojects.com\" target=\"_blank\"><code>jinja2</code></a> - Required if you want to use the default template configuration.\n* <a href=\"https://github.com/Kludex/python-multipart\" target=\"_blank\"><code>python-multipart</code></a> - Required if you want to support form <abbr title=\"converting the string that comes from an HTTP request into Python data\">\"parsing\"</abbr>, with `request.form()`.\n* <a href=\"https://pythonhosted.org/itsdangerous/\" target=\"_blank\"><code>itsdangerous</code></a> - Required for `SessionMiddleware` support.\n* <a href=\"https://pyyaml.org/wiki/PyYAMLDocumentation\" target=\"_blank\"><code>pyyaml</code></a> - Required for Starlette's `SchemaGenerator` support (you probably don't need it with FastAPI).\n* <a href=\"https://github.com/esnme/ultrajson\" target=\"_blank\"><code>ujson</code></a> - Required if you want to use `UJSONResponse`.\n\nUsed by FastAPI / Starlette:\n\n* <a href=\"https://www.uvicorn.org\" target=\"_blank\"><code>uvicorn</code></a> - for the server that loads and serves your application.\n* <a href=\"https://github.com/ijl/orjson\" target=\"_blank\"><code>orjson</code></a> - Required if you want to use `ORJSONResponse`.\n\nYou can install all of these with `pip install \"fastapi[all]\"`.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n"
ReDoc-ly/create-openapi-repo: "# create-openapi-repo\n\n[![NPM version][npm-image]][npm-url] [![Dependency Status][daviddm-image]][daviddm-url]\n\n> Generate an organized multi-file OpenAPI repository.\n\n<center>\n\n<img src=\"./logo.png\" width=\"500px\"/>\n\n</center>\n\n## Who?\nYou! Hello.  Do you need to write or contribute to an OpenAPI definition?  If so, read on...\n\n## What?\nWe recommend a docs-like-code approach to OpenAPI definitions:\n- Write it using your favorite text-editor or IDE (we love VSCode).\n- Organize it into multiple files and folders to make it easy to navigate.\n- Store it using source control (such as GitHub).\n- Continuously validate it using our free [openapi-cli tool](https://github.com/redocly/openapi-cli) or our free continuous validation service (coming soon).\n- Bundle it (for a smaller footprint to use in other tools or for tools that do not support a multi-file format).\n\n## Why?\nThere are a few advantages in hosting your API definition on GitHub:\n - Community engagement (PR's and issues -- if you have a public repo)\n - Advertisment in the GitHub community\n - Hosting on GitHub pages (perfect uptime, CDN, Jekyll, custom domains with CNAME)\n - Revision history, branching, CI\n - Review and approval workflows using Pull Requests\n - Fast on-boarding time (developers and tech writers know how to use GitHub :smile:)\n - Fully compatible with Redocly API Reference too\n\n There are also some advantages to a multi-file YAML format OpenAPI definition:\n - Reuse schema objects to keep things DRY (don't repeat yourself) \n - Smaller diffs compared to JSON (especially for markdown descriptions)\n - Easier to navigate\n - Easier to edit with confidence\n\n## Features\nThis generator helps to create a GitHub repo with the following features:\n - Split a big (or small) OpenAPI definition into smaller files organized into folders\n - Bundle it into a single file for deployment\n - Continuous integration/deployment on Travis or Redocly Workflows\n - Code samples as separate files\n - Automate deployment of your OpenAPI definition and docs\n - OpenAPI definition is validated after each commit\n - Live editing in your editor of choice :heart_eyes:\n\n## Structure\n\nYou will have a structure similar to this:\n```\n    ├── .redocly.yaml\n    ├── LICENSE\n    ├── README.md\n    ├── docs\n    │\_\_ ├── favicon.png\n    │\_\_ └── index.html\n    ├── openapi\n    │\_\_ ├── README.md\n    │\_\_ ├── code_samples\n    │\_\_ │\_\_ ├── C#\n    │\_\_ │\_\_ │\_\_ └── echo\n    │\_\_ │\_\_ │\_\_     └── post.cs\n    │\_\_ │\_\_ ├── PHP\n    │\_\_ │\_\_ │\_\_ └── echo\n    │\_\_ │\_\_ │\_\_     └── post.php\n    │\_\_ │\_\_ └── README.md\n    │\_\_ ├── components\n    │\_\_ │\_\_ └── README.md\n    │\_\_ └── paths\n    │\_\_     └── README.md\n    └── package.json\n```\n\nHowever, you can adjust it to any structure you prefer.\n\nThe `openapi` folder is where your OpenAPI definition will live.  Inside there, and the sub-folders, there are `README.md` files to help guide you further. This is also where your entrypoint `openapi.yaml` will live.\n\nThe `components` folder is where you will organize sub-folders such as `schema` to define your schema.\n\nThe `paths` folder is where you will organize your paths. There will be a 'README.md' file in there with suggestions for how to organize it into specially named files (or folders) that use an `@` in place of a `/` (because files cannot have a `/` character in them).  You will also be able to use path parameters by wrapping them in curly braces `{example}`.\n\nThe `.redocly.yaml` file is a universal configuration for various Redocly tools including the lint tool and reference doc engine.\n\n## Commands\n\nThe generated repository includes installing a dependency for our `openapi-cli` tool which supports commands such as `validate`, `bundle`, and more.  There are scripted shortcuts defined in the repository's `package.json`.  \n\n\n## Examples of generated repositories\n- https://github.com/Rebilly/RebillyAPI\n- https://github.com/thingful/openapi-spec\n- https://github.com/TwineHealth/TwineDeveloperDocs\n\n## How to generate your repository\n\nWe assume you already have [node.js](https://nodejs.org/) installed.\n\n- Install `create-openapi-repo` globally:\n```bash\nnpm install -g create-openapi-repo\n```\nor use [`npx`](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b):\n\nWe'll use `npx` in this example.  However, remove `npx` if you installed it globally.\n\n```bash\nnpx create-openapi-repo\n```\n\nYou will be presented with some questions. You can create a new definition or use an existing definition to initialize your project.\n\nPlease note, if you do start a new one, remember to [create a GitHub repo](https://help.github.com/articles/create-a-repo/#create-a-new-repository-on-github) where your OpenAPI definition will live.\n\nIf you use the prior version of this generated repository, please read the following upgrade instructions.\n\n#### Upgrading from a prior version\n\nMigrate your repository from a previous structure of OpenAPI repo to this newer structure with our migration tool. \n\nRun this in the root folder of your repo.\n\n```bash\nnpx create-openapi-repo --migrate-2-3\n```\n\nNote: the migration tool does not migrate plugins automatically. You would need to manually add them to the `transformers` folder. \n\n## Support\n\nThank you for wanting to support us. Here are some ideas how to support us:\n\n* Star us\n* Tell a friend or colleague about us (or Tweet about us)\n* Write an article about it (and let us know) -- open an issue to let us know, with the link.\n* Consider our commercial products if are looking for automation to ease the docs-like code workflow, hosting along with conveniences like custom domains, access controls and previews, API reference documentation, or a full developer portal:  https://redoc.ly\n\n[npm-image]: https://badge.fury.io/js/generator-openapi-repo.svg\n[npm-url]: https://npmjs.org/package/generator-openapi-repo\n[daviddm-image]: https://david-dm.org/Rebilly/generator-openapi-repo.svg?theme=shields.io\n[daviddm-url]: https://david-dm.org/Rebilly/generator-openapi-repo\n"
postmanlabs/openapi-to-postman: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:21AF25C:35DBF3D:66148FC6.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
hh-h/aiohttp-swagger3: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BE21F2D:127EC28E:66148CE1.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
dolmen-go/openapi-preprocessor: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280B:09A3:BDDC0D2:127831B2:66148B7C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
matthewtrask/disapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2808:307920:3A4EAE2:5A46975:66148E42.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
APIs-guru/openapi-directory: "\n\n\n![banner]\n\n[![APIs in collection][numApis-image]][apisDir-link]\n[![OpenAPI definitions][numSpecs-image]][apisDir-link]\n[![Endpoints][endpoints-image]][apisDir-link]\n[![Fixes][fixes-image]][apisDir-link]\n[![Providers][providers-image]][apisDir-link]\n[![Drivers][drivers-image]][apisDir-link]\n\n![oad Actions](https://api.meercode.io/badge/Mermade/oad?type=ci-count&token=y7EdP0Hxb6q8PoG3h2JEmDVQDatZmttj&lastDay=7)\n[![Chat on Slack][slack-image]][slack-link]\n\n[![Share on Twitter][twitter-image]][twitter-link]\n[![Follow on Twitter][twitterFollow-image]][twitterFollow-link]\n<a href=\"#backers\" alt=\"sponsors on Open Collective\"><img src=\"https://opencollective.com/openapi-directory/backers/badge.svg\" /></a> <a href=\"#sponsors\" alt=\"Sponsors on Open Collective\"><img src=\"https://opencollective.com/openapi-directory/sponsors/badge.svg\" /></a> <a href=\"#partners\" alt=\"Partners on Open Collective\"><img src=\"https://opencollective.com/openapi-directory/partner/badge.svg\" /></a>\n\nDirectory of API definitions in [OpenAPI(fka Swagger)](https://openapis.org) [2.0](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md) and [3.x](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md) formats.<BR>\nAPI access to collection: [Go!][apiDoc-link] - We also have RSS feeds for [added](https://api.apis.guru/v2/added.rss) and [updated](http://api.apis.guru/v2/list.rss) APIs.\n\n[![Add API][addAPI-image]][addAPI-link]\n\nOur goal is to create the most comprehensive, standards-compliant and up-to-date directory of machine-readable API definitions, with the following principles:\n- Open source, community driven project.\n- Only publicly available APIs (free or paid).\n- Anyone can add or change an API, not only API owners.\n- All data can be accessed through a [REST API][apiDoc-link].\n\nIf you want to reference this project and you need an icon or even a banner, check our [branding guide](https://github.com/APIs-guru/branding).\n\nThe project was started by [Ivan Goncharov](https://github.com/IvanGoncharov) of APIs.guru, it is now maintained by [Mike Ralphson](https://github.com/MikeRalphson) of [Mermade Software](https://github.com/mermade). Check out our other [OpenAPI-related projects](https://github.com/search?q=org%3AMermade+openapi).\n\nAPIs.guru provide services and consultancy around the GraphQL and OpenAPI specifications and APIs in general.\nYou can contact us at founders@apis.guru / mike.ralphson@gmail.com\n\nThe OpenAPI Directory is sponsored by [Speakeasy](https://www.speakeasyapi.dev/?utm_source=apigurus+repo&utm_medium=github+sponsorship) - Your API: Enterprise ready in a click.\n\n[![Speakeasy logo](https://apis.guru/assets/images/speakeasy-github-sponsor-dark.svg)](https://www.speakeasyapi.dev/?utm_source=apigurus+repo&utm_medium=github+sponsorship)\n\n[![Become a partner](https://opencollective.com/openapi-directory/tiers/partner.svg?avatarHeight=36&width=600)](https://opencollective.com/openapi-directory)\n\nWhat does APIs.guru do?\n--------------------------\n* Filter out private and non-reliable APIs\n* [Convert](https://github.com/Mermade/oas-kit) non-OpenAPI formats into OpenAPI 3.x\n* Fix mistakes, ~80% of definitions have some\n* Add additional data, like: logo, categories, …\n* Update definitions on at least a weekly basis\n\nAPI definition acceptance criteria\n----------------------------------\n* Public - anyone can access it as long as they follow some clearly defined steps (subscribe, pay fees, etc.).\n* Persistent - API is made with long-lived goal, and not for a particular event (conference, hackathon, etc.).\n* Useful - API should provide useful functionality not only for its owner.\n\nUpdate procedure\n--------------------------\nAll definitions are automatically updated from their original source.\nYou can see this in the `x-origin` property within each [openapi.yaml](https://github.com/APIs-guru/openapi-directory/search?utf8=%E2%9C%93&q=x-origin+filename%3Aopenapi.yaml) or [swagger.yaml](https://github.com/APIs-guru/openapi-directory/search?utf8=%E2%9C%93&q=x-origin+filename%3Aswagger.yaml) file.\nWe run our update script at least weekly and automatically revalidate before committing.\nIf you see some APIs are not updated for more than 2 weeks please open [an issue](https://github.com/APIs-guru/openapi-directory/issues/new).\n\n[@seriousme](https://github.com/seriousme) kindly runs a backup validation process based on the official OpenAPI-Specification [JSON Schemas](https://github.com/OAI/OpenAPI-Specification/tree/main/schemas) [here](https://github.com/seriousme/openapi-schema-validator/blob/master/test/realworld/failed.md#results-of-real-world-testing).\n\nOwn-Label API Directory\n-----------------------\n\n![Own-Label logo](branding/own-label.png)\n\n**Do you want an 'own-label' or internal version of the OpenAPI Directory to create your own marketplace or keep track and document both your internal APIs and the external API definitions your organisation depends on? If so contact us now!**\n\nExisting integrations\n--------------------------\n\n[![Become a backer](https://opencollective.com/openapi-directory/tiers/backer.svg?avatarHeight=36&width=600)](https://opencollective.com/openapi-directory)\n\n - [HTTP Toolkit](https://httptoolkit.tech/) **Beautiful & open-source tools to debug, test and develop with HTTP(S)**\n - [OpenAPI-Directory-JS](https://github.com/httptoolkit/openapi-directory-js) - The OpenAPI directory precompiled & indexed for JS usage & searching\n - [Apideck](https://apideck.com) - Faster data integration through Unified APIs\n - [Microsoft Kiota](https://microsoft.github.io/kiota/) - Generate an API client to call any OpenAPI described API\n - [API Tracker](https://apitracker.io/) - Aggregates 14,000+ APIs, SDKs, API specifications, integrations and DX profiles. It aims to help developers access the information they need to integrate APIs faster\n - [API Watch](https://www.apiwatch.io) - Keep track of the APIs you use\n - https://pipedream.com/ - The integration platform built for developers\n - https://any-api.com - Documentation and Test Consoles for Public APIs\n - https://datafire.io - Allows you to process and transfer data between APIs, databases, and more\n - [https://sdks.io](https://sdks.io/Search/FindSDKs?Bridge=APIs.guru) - Explore Automatically Generated SDKs\n - [https://cenit.io](https://cenit.io/directory?spec=swagger) - Data integration platform\n - [commandcar](https://github.com/tikalk/commandcar#installing-from-api-models) - Curl on steroids\n - [Material Swagger UI Hub](https://darosh.github.io/angular-swagger-ui-material/hub/) - testing and exploring hub for Material Swagger UI demo\n - [Paw](https://paw.cloud/) - HTTP client for Mac - You can import definitions and directly play with the APIs, [see how](https://paw.cloud/docs/examples/search-apis)\n - [Bitscoop](https://bitscoop.com/) - A better way to create and maintain integrations\n - [WinSwag](https://github.com/SvenEV/WinSwag) - A UWP app for loading Swagger definitions and exploring REST APIs\n - [ReadMe.io](https://preview.readme.io) - Beautiful, personalized, interactive developer hubs\n - [Velosimo](https://connect.velosimo.io/open_api_directory) - Integration platform for eGovernment\n - [Mockcoon](https://mockoon.com/mock-samples/category/all/) - API mock samples for your project\n\nAlso used as test suite in the following projects:\n - [Speakeasy](https://www.speakeasyapi.dev/?utm_source=apigurus+repo&utm_medium=github+sponsorship) - **Generate SDKs Now. Gives your users the DevEx that makes API integrations easy**\n - [ReDoc](https://github.com/Redocly/redoc) - OpenAPI-generated API Reference Documentation\n - [swagger-parser](https://github.com/BigstickCarpet/swagger-parser) - OpenAPI parser and validator for Node and browsers\n - [OpenAPI-schema-validator](https://github.com/seriousme/openapi-schema-validator) - OpenApi schema validation for OpenApi versions v2, v3.0.x and v3.1.x\n - [SwaggerProvider](https://github.com/sergey-tihon/SwaggerProvider) - F# Type Provider for Swagger\n - [ardoq-swagger-addon](https://github.com/ardoq/ardoq-swagger-addon) - Ardoq OpenAPI addon\n - [swagvali](https://github.com/subeeshcbabu/swagvali/) - Module to build validators for OpenAPI Request parameters and Response objects\n - [swagger-search](https://github.com/IG-Group/swagger-search) - An application that collects and indexes swagger docs from your microservices architecture\n\n\nIntegration with 3rd-party services\n--------------------------\nWe discourage you from using Github RAW links or Git directly, the repository structure may change in the future.\nInstead, we strongly recommend you to use our [REST API][apiDoc-link].\n\nLicenses\n--------------------------\nAll API definitions contributed to project by authors are covered by the [CC01.0](https://creativecommons.org/publicdomain/zero/1.0/) license.<br>\nAll API definitions acquired from public sources under the [Fair use](http://en.wikipedia.org/wiki/Fair_use) principle.\n\nDefinition sources\n--------------------------\nSome definitions are taken from Open Source projects:\n - [darklynx/swagger-api-collection](https://github.com/darklynx/swagger-api-collection) - OpenAPI description for Instagram API\n - [Mermade/bbcapis](https://github.com/Mermade/bbcapis) - OpenAPI definitions for the BBC Nitro and iBL APIs\n - [amardeshbd/medium-api-specification](https://github.com/amardeshbd/medium-api-specification) - OpenAPI 2.0 description for Medium API\n - [faragorn/open-api-specs](https://github.com/faragorn/open-api-specs) - OpenAPI definition for the Giphy API\n\n[banner]: https://apis.guru/branding/banner.svg \"APIs.guru\"\n[twitter-image]: https://img.shields.io/twitter/url/http/APIs.guru.svg?style=social\n[twitter-link]: https://twitter.com/intent/tweet?text=http%3A%2F%2FAPIs.guru%20-%20Wikipedia%20for%20%23Web%20%23APIs%20by%20@APIs_guru%20pic.twitter.com/UhlhbMw1NP\n[twitterFollow-image]: https://img.shields.io/twitter/follow/APIs_guru.svg?style=social\n[twitterFollow-link]: https://twitter.com/intent/follow?screen_name=APIs_guru\n[slack-image]: https://img.shields.io/badge/Slack-APIs_Working_Group-brightgreen\n[slack-link]: https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA\n[numApis-image]: https://api.apis.guru/badges/apis_in_collection.svg\n[numSpecs-image]: https://api.apis.guru/badges/openapi_specs.svg\n[endpoints-image]: https://api.apis.guru/badges/endpoints.svg\n[fixes-image]: https://api.apis.guru/badges/fixes.svg\n[providers-image]: https://api.apis.guru/badges/providers.svg\n[drivers-image]: https://api.apis.guru/badges/drivers.svg\n[apisDir-link]: ./APIs\n[addAPI-image]: https://cloud.githubusercontent.com/assets/8336157/15861614/7e31511a-2cd5-11e6-8b79-38ad0f61e598.png\n[addAPI-link]: https://apis.guru/add-api/\n[apiDoc-link]: https://apis.guru/api-doc/\n\n## Contributors\n\nThis project exists thanks to all the people who [contribute](CONTRIBUTING.md).\n<a href=\"https://github.com/APIs-guru/openapi-directory/graphs/contributors\"><img src=\"https://opencollective.com/openapi-directory/contributors.svg?width=890&button=false\" /></a>\n\n## Asynchronous APIs\n\nSee also [AsyncAPI-Directory](https://apis.guru/asyncapi-directory/APIs/)\n\n## Backers\n\nThank you to all our backers! \U0001F64F [Become a backer](https://opencollective.com/openapi-directory#backer).\n\n<a href=\"https://opencollective.com/openapi-directory#backers\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/backers.svg?width=890\"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor](https://opencollective.com/openapi-directory#sponsor).\n\n<a href=\"https://opencollective.com/openapi-directory/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/9/avatar.svg\"></a>\n\n## Partners\n\nSupport this project by becoming a partner. Your logo will be displayed prominently in this project and we will work with you to publicise and showcase your projects. [Become a partner](https://opencollective.com/openapi-directory#partner).\n"
apiaryio/dredd-transactions: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:37C26EC:56242FA:6614895D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mrin9/RapiDoc: >+
  <img alt="MrinDoc logo"
  src="https://github.com/rapi-doc/RapiDoc/blob/master/logo.png" width="60px" />



  <p align="center">
      <img src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square"/>
      <img src="https://img.shields.io/github/size/rapi-doc/rapidoc/dist/rapidoc-min.js.svg?colorB=blue&label=minified&style=flat-square">
      <img src="https://img.shields.io/github/size/rapi-doc/rapidoc/dist/rapidoc-min.js.gz.svg?colorB=blue&label=zip&style=flat-square">
      <a href="https://discord.gg/X9evUeFY" alt="Join us on Discord">
          <img src="https://img.shields.io/discord/848913990360629268?style=flat-square" />
      </a>
      <a href="https://www.webcomponents.org/element/rapidoc" alt="published on webcomponents.org">
          <img src="https://img.shields.io/badge/webcomponents.org-rapidoc-blue.svg?style=social"/>
      </a>
  </p>        


  # RapiDoc

  Custom Element for Open-API spec viewing


  Join the [RapiDoc community on Discord](https://discord.gg/X9evUeFY)


  Sponsored by [Zuplo](https://zuplo.link/rapidoc-2) - Get a Stripe-like API
  experience for your customers in minutes - documentation, rate-limiting and
  API-key auth in minutes. 


  ## Features

  - Supports Swagger 2.0, OpenAPI 3.x.x 

  - Works with any framework or with no framework

  - Allows making API calls

  - Better Usability, 
    - all Models and Examples are expanded by default, eliminates the need to click and reveal.
    - Request fields are pre-populated with sample data
    - Takes only one click to make an API call
    - Request and response can be placed side-by-side for easy comparison
  - Branding and Personalization features makes it easy to follow any style
  guide
    - Comes with 2 Themes (Dark and Light)
    - Replace default logo with yours
    - Typography, allows changing fonts
    - Allows changing text-color, button-color, header-color and color of other UI elements
  - Plenty of customization options 
    - Add external contents at the top and bottom of the document,  you may add images, link, text, forms etc
    - Allows disabling API calling feature
    - Hide the header, so the user can't load any other OpenAPI Spec
    - Hide Authentication and provide your own pre-generated api-key 
    - Embed it inside another HTML document
    - Use it inside another framework (react, vue, angular, lit-element)
    - Use JavaScript to change its attributes, and it will react to those changes
    - Style the element with standard css (change padding, position, border, margin )
  - Lightweight and fast

  - Load local json spec from the disk

  - Supported on Chrome, FireFox and Safari. (Not yet tested on Edge)



  ## Documentation

  [Check out the usage and demos](https://rapi-doc.github.io/RapiDoc/)


  ## Examples

  [Examples and Test cases](https://rapi-doc.github.io/RapiDoc/list.html)



  ## Build Process

  ```bash

  # Clone / Download the project then

  npm install


  # build will generate rapidoc-min.js, this is the only file you will need.

  # use it in the script tag of your html <script type="text/javascript"
  src="rapidoc-min.js"></script></body>

  npm run build 


  # for developement use yarn serve (this will start an webserver at port 8080,
  then navigate to localhost:8080) 

  npm run serve

  ```


  ## Roadmap

  - ✅ Upgrade to use `lit 2`

  - Pre Rendering / Server Side Rendering (SSR) of RapiDoc

  - Improve PDF generation of OpenAPI spec Using RapiPDF

  - Create a Command Line interface (CLI) to make it automation friendly

  - Add localization support

  - Follow Web Content Accessibility Guidelines (WCAG 2)

  - Improve Homepage, Documentation and Examples

  - Create groundwork for automated testing

  - Create a live playground (Something like swagger editor)

  - Create a short animation/video to show how RapiDoc/RapiPDF works

swagger-api/swagger-js: >
  # Swagger Client <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  [![Build
  Status](https://github.com/swagger-api/swagger-js/actions/workflows/nodejs.yml/badge.svg)](https://github.com/swagger-api/swagger-js/actions)


  **Swagger Client** is a JavaScript module that allows you to fetch, resolve,
  and interact with Swagger/OpenAPI documents.


  ## New!


  **This is the new version of swagger-js, 3.x.** The new version supports
  Swagger 2.0 as well as OpenAPI 3.


  Want to learn more? Check out our
  [FAQ](docs/migration/migration-2-x-to-3-x.md).


  For features known to be missing from 3.x please see the
  [Graveyard](docs/migration/graveyard-3-x.md).



  For the older version of swagger-js, refer to the [*2.x
  branch*](https://github.com/swagger-api/swagger-js/tree/2.x).


  > *The npm package is called `swagger-client` and the GitHub repository is
  `swagger-js`.

  We'll be consolidating that soon. Just giving you the heads-up. You may see
  references to both names.*


  ## Compatibility

  The OpenAPI Specification has undergone multiple revisions since initial
  creation in 2010. 

  Compatibility between Swagger Client and the OpenAPI Specification is as
  follows:


  Swagger Client Version | Release Date | OpenAPI Spec compatibility            
  | Notes

  ------------------ |--------------|----------------------------------------|
  -----

  3.19.x | 2023-01-23   | 2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.1.0 | [tag
  v3.19.0-alpha.3](https://github.com/swagger-api/swagger-js/releases/tag/v3.19.0-alpha.3)

  3.10.x | 2020-01-17   | 2.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3        | [tag
  v3.10.0](https://github.com/swagger-api/swagger-js/tree/v3.10.0)

  2.1.32 | 2017-01-12   | 1.0, 1.1, 1.2                          | [tag
  v2.1.32](https://github.com/swagger-api/swagger-js/tree/v2.1.32). This
  [release](https://github.com/swagger-api/swagger-js/releases/tag/v2.1.32) is
  only available on GitHub.


  ## Documentation


  #### Usage


  - [Installation](docs/usage/installation.md)

  - [Tags Interface](docs/usage/tags-interface.md)

  - [HTTP client for OAS
  operations](docs/usage/http-client-for-oas-operations.md)

  - [OpenAPI Definition Resolver](docs/usage/openapi-definition-resolver.md)

  - [HTTP Client](docs/usage/http-client.md)

  - [Swagger Client API](docs/usage/api.md)


  #### Development


  -
  [Contributing](https://github.com/swagger-api/.github/blob/master/CONTRIBUTING.md)

  - [Setting up](docs/development/setting-up.md)

  - [Scripts](docs/development/scripts.md)


  #### Migrations 


  - [Migration guide](docs/migration/migration-2-x-to-3-x.md)

  - [Graveyard](docs/migration/graveyard-3-x.md)


  ### Runtime 


  ### Node.js


  `swagger-client` requires Node.js `>=12.20.0` and uses different `fetch`
  implementation depending

  on Node.js version.


  - `>=12.20.0 <18` - [node-fetch@3](https://www.npmjs.com/package/node-fetch) 

  - `>=18` - [native Node.js
  fetch](https://nodejs.org/dist/latest-v18.x/docs/api/globals.html#fetch)


  > NOTE: swagger-client minimum Node.js runtime version aligns with [Node.js
  Releases](https://nodejs.org/en/about/releases/)

  > which means that we can drop support for **EOL** (End Of Life) Node.js
  versions without doing major version bump.


  ### Browsers


  `swagger-client` works in the latest versions of Chrome, Safari, Firefox, and
  Edge

  and uses [native
  fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)
  implementation

  provided by each supported browser.


  ## Security contact


  Please disclose any security-related issues or vulnerabilities by emailing
  [security@swagger.io](mailto:security@swagger.io), instead of using the public
  issue tracker.
swagger-api/validator-badge: >
  # Swagger Validator Badge <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  [![Build
  Status](https://img.shields.io/jenkins/build.svg?jobUrl=https://jenkins.swagger.io/job/oss-swagger-validator-badge-master)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-validator-badge-master)


  This project shows a "valid swagger" badge on your site, supporting
  Swagger/OpenAPI 2.0 and OpenAPI 3.x specifications.  


  There is an online version hosted on http://validator.swagger.io.  


  ### Using Docker


  You can also pull a docker image of the validator directly from
  [DockerHub](https://hub.docker.com/r/swaggerapi/swagger-validator-v2/), e.g.:


  ```

  docker pull swaggerapi/swagger-validator-v2:v2.1.5

  docker run -it -p 8080:8080 --name swagger-validator-v2
  swaggerapi/swagger-validator-v2:v2.1.5

  ```


  Since version `2.0.2` local and non http/https urls are rejected by default,
  along with redirects; this is controllable with docker env variables / java
  system properties:


  ```

  docker run -it -p 8080:8080 -e "REJECT_LOCAL=false" -e "REJECT_REDIRECT=false"
  --name swagger-validator-v2 swaggerapi/swagger-validator-v2:v2.1.5

  ```


  In non docker environments, system properties `rejectLocal` and
  `rejectRedirect` can be used.




  Web UI is reachable at http://localhost:8080/index.html and OpenAPI spec at
  http://localhost:8080/validator/openapi.json




  You can validate OpenAPI specifications version 2.0 (Swagger), 3.0 and 3.1.
  [Swagger
  Parser](https://github.com/swagger-api/swagger-parser/blob/master/README.md)
  is used for semantic validation.

  Depending on `jsonSchemaValidation` query parameter value also JSON Schema
  validation can be executed (default to `true`) 


  Additional parameters allow to customize parsing and validation mode.


  ```

  <img src="https://validator.swagger.io/validator?url={YOUR_URL}">

  ```


  Of course the `YOUR_URL` needs to be addressable by the validator (i.e. won't
  find anything on localhost).  If it validates, you'll get a nice green VALID
  logo.  Failures will give an INVALID logo, and if there are errors parsing the
  specification or reaching it, an ugly red ERROR logo.


  For example, using
  [https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/json/petstore-expanded.json](https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/json/petstore-expanded.json)
  as a source, we get ...


  ![](https://validator.swagger.io/validator?url=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/json/petstore-expanded.json)


  If your specification fails to validate for some reason, or if there is an
  error, you can get more information on why by visiting
  ```https://validator.swagger.io/validator/debug?url={YOUR_URL}```.


  Since the validator uses a browserless back-end to fetch the contents and
  schema, it's not subject to the terrible world of CORS.


  ### Using cURL


  You can also post a spec up to the service with cURL:


  ```bash

  curl -X POST -d @swagger.json -H 'Content-Type:application/json'
  https://validator.swagger.io/validator/debug

  ```


  In this example, `swagger.json` is the swagger definition in JSON format, in
  the CWD.


  If your swagger definition file is in YAML format, the command needs to be
  adapted like so:


  ```bash

  curl --data-binary @swagger.yaml -H 'Content-Type:application/yaml'
  https://validator.swagger.io/validator/debug

  ```


  Note the use of `--data-binary` to avoid stripping newlines, along with a
  different `Content-Type` header.


  ### Note


  All of the above is also applicable to OpenAPI 3.x specifications; for
  example, using
  [https://petstore3.swagger.io/api/v3/openapi.json](https://petstore3.swagger.io/api/v3/openapi.json)
  as a source, we get ...


  ![](https://validator.swagger.io/validator?url=https://petstore3.swagger.io/api/v3/openapi.json)


  Since version 2.1.0 a `/parseByUrl` and `/parseByContent` are available,
  returning a serialized parsed specification, with parsing and result
  configurable by

  parameters, e.g. passing `resolve`, etc. See [Swagger
  Parser](https://github.com/swagger-api/swagger-parser/blob/master/README.md#options).


  ### Running locally


  You can build and run the validator locally:


  ```bash

  mvn package jetty:run

  ```


  And access the validator like such:


  ```

  http://localhost:8080/validator?url={URL}

  ```


  or


  ```

  http://localhost:8080/validator?url=http://petstore.swagger.io/v2/swagger.json

  ```

  ```

  http://localhost:8080/validator?url=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml

  ```


  ## Security contact


  Please disclose any security-related issues or vulnerabilities by emailing
  [security@swagger.io](mailto:security@swagger.io), instead of using the public
  issue tracker.
tiangolo/uvicorn-gunicorn-fastapi-docker: "[![Test](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/actions/workflows/test.yml/badge.svg)](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/actions/workflows/test.yml) [![Deploy](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/workflows/Deploy/badge.svg)](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/actions?query=workflow%3ADeploy)\n\n## Supported tags and respective `Dockerfile` links\n\n* [`python3.11`, `latest` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.11.dockerfile)\n* [`python3.10`, _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.10.dockerfile)\n* [`python3.9`, _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.9.dockerfile)\n* [`python3.8`, _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.8.dockerfile)\n* [`python3.7`, _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.7.dockerfile)\n* [`python3.11-slim` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.11-slim.dockerfile)\n* [`python3.10-slim` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.10-slim.dockerfile)\n* [`python3.9-slim` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.9-slim.dockerfile)\n* [`python3.8-slim` _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/docker-images/python3.8-slim.dockerfile)\n\n## Deprecated tags\n\n\U0001F6A8 These tags are no longer supported or maintained, they are removed from the GitHub repository, but the last versions pushed might still be available in Docker Hub if anyone has been pulling them:\n\n* `python3.9-alpine3.14`\n* `python3.8-alpine3.10`\n* `python3.7-alpine3.8`\n* `python3.6`\n* `python3.6-alpine3.8`\n\nThe last date tags for these versions are:\n\n* `python3.9-alpine3.14-2024-03-11`\n* `python3.8-alpine3.10-2024-01-29`\n* `python3.7-alpine3.8-2024-03-11`\n* `python3.6-2022-11-25`\n* `python3.6-alpine3.8-2022-11-25`\n\n---\n\n**Note**: There are [tags for each build date](https://hub.docker.com/r/tiangolo/uvicorn-gunicorn-fastapi/tags). If you need to \"pin\" the Docker image version you use, you can select one of those tags. E.g. `tiangolo/uvicorn-gunicorn-fastapi:python3.7-2019-10-15`.\n\n# uvicorn-gunicorn-fastapi\n\n[**Docker**](https://www.docker.com/) image with [**Uvicorn**](https://www.uvicorn.org/) managed by [**Gunicorn**](https://gunicorn.org/) for high-performance [**FastAPI**](https://fastapi.tiangolo.com/) web applications in **[Python](https://www.python.org/)** with performance auto-tuning.\n\n**GitHub repo**: [https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker)\n\n**Docker Hub image**: [https://hub.docker.com/r/tiangolo/uvicorn-gunicorn-fastapi/](https://hub.docker.com/r/tiangolo/uvicorn-gunicorn-fastapi/)\n\n## Description\n\n**FastAPI** has shown to be a Python web framework with [one of the best performances, as measured by third-party benchmarks](https://www.techempower.com/benchmarks/#section=test&runid=a979de55-980d-4721-a46f-77298b3f3923&hw=ph&test=fortune&l=zijzen-7), thanks to being based on and powered by [**Starlette**](https://www.starlette.io/).\n\nThe achievable performance is on par with (and in many cases superior to) **Go** and **Node.js** frameworks.\n\nThis image has an **auto-tuning** mechanism included to start a number of worker processes based on the available CPU cores. That way you can just add your code and get **high performance** automatically, which is useful in **simple deployments**.\n\n## \U0001F6A8 WARNING: You Probably Don't Need this Docker Image\n\nYou are probably using **Kubernetes** or similar tools. In that case, you probably **don't need this image** (or any other **similar base image**). You are probably better off **building a Docker image from scratch** as explained in the docs for [FastAPI in Containers - Docker: Build a Docker Image for FastAPI](https://fastapi.tiangolo.com/deployment/docker/#replication-number-of-processes).\n\n---\n\nIf you have a cluster of machines with **Kubernetes**, Docker Swarm Mode, Nomad, or other similar complex system to manage distributed containers on multiple machines, then you will probably want to **handle replication** at the **cluster level** instead of using a **process manager** (like Gunicorn with Uvicorn workers) in each container, which is what this Docker image does.\n\nIn those cases (e.g. using Kubernetes) you would probably want to build a **Docker image from scratch**, installing your dependencies, and running **a single Uvicorn process** instead of this image.\n\nFor example, your `Dockerfile` could look like:\n\n```Dockerfile\nFROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\nYou can read more about this in the [FastAPI documentation about: FastAPI in Containers - Docker](https://fastapi.tiangolo.com/deployment/docker/#replication-number-of-processes).\n\n## When to Use this Docker Image\n\n### A Simple App\n\nYou could want a process manager like Gunicorn running Uvicorn workers in the container if your application is **simple enough** that you don't need (at least not yet) to fine-tune the number of processes too much, and you can just use an automated default, and you are running it on a **single server**, not a cluster.\n\n### Docker Compose\n\nYou could be deploying to a **single server** (not a cluster) with **Docker Compose**, so you wouldn't have an easy way to manage replication of containers (with Docker Compose) while preserving the shared network and **load balancing**.\n\nThen you could want to have **a single container** with a Gunicorn **process manager** starting **several Uvicorn worker processes** inside, as this Docker image does.\n\n### Prometheus and Other Reasons\n\nYou could also have **other reasons** that would make it easier to have a **single container** with **multiple processes** instead of having **multiple containers** with **a single process** in each of them.\n\nFor example (depending on your setup) you could have some tool like a Prometheus exporter in the same container that should have access to **each of the requests** that come.\n\nIn this case, if you had **multiple containers**, by default, when Prometheus came to **read the metrics**, it would get the ones for **a single container each time** (for the container that handled that particular request), instead of getting the **accumulated metrics** for all the replicated containers.\n\nThen, in that case, it could be simpler to have **one container** with **multiple processes**, and a local tool (e.g. a Prometheus exporter) on the same container collecting Prometheus metrics for all the internal processes and exposing those metrics on that single container.\n\n---\n\nRead more about it all in the [FastAPI documentation about: FastAPI in Containers - Docker](https://fastapi.tiangolo.com/deployment/docker/).\n\n## Technical Details\n\n### Uvicorn\n\n**Uvicorn** is a lightning-fast \"ASGI\" server.\n\nIt runs asynchronous Python web code in a single process.\n\n### Gunicorn\n\nYou can use **Gunicorn** to start and manage multiple Uvicorn worker processes.\n\nThat way, you get the best of concurrency and parallelism in simple deployments.\n\n### FastAPI\n\nFastAPI is a modern, fast (high-performance), web framework for building APIs with Python.\n\nThe key features are:\n\n* **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic).\n* **Fast to code**: Increase the speed to develop features by about 200% to 300% *.\n* **Less bugs**: Reduce about 40% of human (developer) induced errors. *\n* **Intuitive**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging.\n* **Easy**: Designed to be easy to use and learn. Less time reading docs.\n* **Short**: Minimize code duplication. Multiple features from each parameter declaration. Less bugs.\n* **Robust**: Get production-ready code. With automatic interactive documentation.\n* **Standards-based**: Based on (and fully compatible with) the open standards for APIs: <a href=\"https://github.com/OAI/OpenAPI-Specification\" target=\"_blank\">OpenAPI</a> (previously known as Swagger) and <a href=\"http://json-schema.org/\" target=\"_blank\">JSON Schema</a>.\n\n<small>* estimation based on tests on an internal development team, building production applications.</small>\n\n### `tiangolo/uvicorn-gunicorn-fastapi`\n\nThis image will set a sensible configuration based on the server it is running on (the amount of CPU cores available) without making sacrifices.\n\nIt has sensible defaults, but you can configure it with environment variables or override the configuration files.\n\nThere are also slim versions. If you want one of those, use one of the tags from above.\n\n### `tiangolo/uvicorn-gunicorn`\n\nThis image (`tiangolo/uvicorn-gunicorn-fastapi`) is based on [**tiangolo/uvicorn-gunicorn**](https://github.com/tiangolo/uvicorn-gunicorn-docker).\n\nThat image is what actually does all the work.\n\nThis image just installs FastAPI and has the documentation specifically targeted at FastAPI.\n\nIf you feel confident about your knowledge of Uvicorn, Gunicorn and ASGI, you can use that image directly.\n\n### `tiangolo/uvicorn-gunicorn-starlette`\n\nThere is a sibling Docker image: [**tiangolo/uvicorn-gunicorn-starlette**](https://github.com/tiangolo/uvicorn-gunicorn-starlette-docker)\n\nIf you are creating a new [**Starlette**](https://www.starlette.io/) web application and you want to discard all the additional features from FastAPI you should use [**tiangolo/uvicorn-gunicorn-starlette**](https://github.com/tiangolo/uvicorn-gunicorn-starlette-docker) instead.\n\n**Note**: FastAPI is based on Starlette and adds several features on top of it. Useful for APIs and other cases: data validation, data conversion, documentation with OpenAPI, dependency injection, security/authentication and others.\n\n## How to use\n\nYou don't need to clone the GitHub repo.\n\nYou can use this image as a base image for other images.\n\nAssuming you have a file `requirements.txt`, you could have a `Dockerfile` like this:\n\n```Dockerfile\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.11\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n```\n\nIt will expect a file at `/app/app/main.py`.\n\nOr otherwise a file at `/app/main.py`.\n\nAnd will expect it to contain a variable `app` with your FastAPI application.\n\nThen you can build your image from the directory that has your `Dockerfile`, e.g:\n\n```bash\ndocker build -t myimage ./\n```\n\n## Quick Start\n\n### Build your Image\n\n* Go to your project directory.\n* Create a `Dockerfile` with:\n\n```Dockerfile\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.11\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n```\n\n* Create an `app` directory and enter in it.\n* Create a `main.py` file with:\n\n```Python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n* You should now have a directory structure like:\n\n```\n.\n├── app\n│   └── main.py\n└── Dockerfile\n```\n\n* Go to the project directory (in where your `Dockerfile` is, containing your `app` directory).\n* Build your FastAPI image:\n\n```bash\ndocker build -t myimage .\n```\n\n* Run a container based on your image:\n\n```bash\ndocker run -d --name mycontainer -p 80:80 myimage\n```\n\nNow you have an optimized FastAPI server in a Docker container. Auto-tuned for your current server (and number of CPU cores).\n\n### Check it\n\nYou should be able to check it in your Docker container's URL, for example: <a href=\"http://192.168.99.100/items/5?q=somequery\" target=\"_blank\">http://192.168.99.100/items/5?q=somequery</a> or <a href=\"http://127.0.0.1/items/5?q=somequery\" target=\"_blank\">http://127.0.0.1/items/5?q=somequery</a> (or equivalent, using your Docker host).\n\nYou will see something like:\n\n```JSON\n{\"item_id\": 5, \"q\": \"somequery\"}\n```\n\n### Interactive API docs\n\nNow you can go to <a href=\"http://192.168.99.100/docs\" target=\"_blank\">http://192.168.99.100/docs</a> or <a href=\"http://127.0.0.1/docs\" target=\"_blank\">http://127.0.0.1/docs</a> (or equivalent, using your Docker host).\n\nYou will see the automatic interactive API documentation (provided by <a href=\"https://github.com/swagger-api/swagger-ui\" target=\"_blank\">Swagger UI</a>):\n\n![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)\n\n### Alternative API docs\n\nAnd you can also go to <a href=\"http://192.168.99.100/redoc\" target=\"_blank\">http://192.168.99.100/redoc</a> or <a href=\"http://127.0.0.1/redoc\" target=\"_blank\">http://127.0.0.1/redoc</a>(or equivalent, using your Docker host).\n\nYou will see the alternative automatic documentation (provided by <a href=\"https://github.com/Rebilly/ReDoc\" target=\"_blank\">ReDoc</a>):\n\n![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)\n\n## Dependencies and packages\n\nYou will probably also want to add any dependencies for your app and pin them to a specific version, probably including Uvicorn, Gunicorn, and FastAPI.\n\nThis way you can make sure your app always works as expected.\n\nYou could install packages with `pip` commands in your `Dockerfile`, using a `requirements.txt`, or even using [Poetry](https://python-poetry.org/).\n\nAnd then you can upgrade those dependencies in a controlled way, running your tests, making sure that everything works, but without breaking your production application if some new version is not compatible.\n\n### Using Poetry\n\nHere's a small example of one of the ways you could install your dependencies making sure you have a pinned version for each package.\n\nLet's say you have a project managed with [Poetry](https://python-poetry.org/), so, you have your package dependencies in a file `pyproject.toml`. And possibly a file `poetry.lock`.\n\nThen you could have a `Dockerfile` using Docker multi-stage building with:\n\n```Dockerfile\nFROM python:3.9 as requirements-stage\n\nWORKDIR /tmp\n\nRUN pip install poetry\n\nCOPY ./pyproject.toml ./poetry.lock* /tmp/\n\nRUN poetry export -f requirements.txt --output requirements.txt --without-hashes\n\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.11\n\nCOPY --from=requirements-stage /tmp/requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n```\n\nThat will:\n\n* Install poetry and configure it for running inside of the Docker container.\n* Copy your application requirements.\n    * Because it uses `./poetry.lock*` (ending with a `*`), it won't crash if that file is not available yet.\n* Install the dependencies.\n* Then copy your app code.\n\nIt's important to copy the app code *after* installing the dependencies, that way you can take advantage of Docker's cache. That way it won't have to install everything from scratch every time you update your application files, only when you add new dependencies.\n\nThis also applies for any other way you use to install your dependencies. If you use a `requirements.txt`, copy it alone and install all the dependencies on the top of the `Dockerfile`, and add your app code after it.\n\n## Advanced usage\n\n### Environment variables\n\nThese are the environment variables that you can set in the container to configure it and their default values:\n\n#### `MODULE_NAME`\n\nThe Python \"module\" (file) to be imported by Gunicorn, this module would contain the actual application in a variable.\n\nBy default:\n\n* `app.main` if there's a file `/app/app/main.py` or\n* `main` if there's a file `/app/main.py`\n\nFor example, if your main file was at `/app/custom_app/custom_main.py`, you could set it like:\n\n```bash\ndocker run -d -p 80:80 -e MODULE_NAME=\"custom_app.custom_main\" myimage\n```\n\n#### `VARIABLE_NAME`\n\nThe variable inside of the Python module that contains the FastAPI application.\n\nBy default:\n\n* `app`\n\nFor example, if your main Python file has something like:\n\n```Python\nfrom fastapi import FastAPI\n\napi = FastAPI()\n\n\n@api.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n```\n\nIn this case `api` would be the variable with the FastAPI application. You could set it like:\n\n```bash\ndocker run -d -p 80:80 -e VARIABLE_NAME=\"api\" myimage\n```\n\n#### `APP_MODULE`\n\nThe string with the Python module and the variable name passed to Gunicorn.\n\nBy default, set based on the variables `MODULE_NAME` and `VARIABLE_NAME`:\n\n* `app.main:app` or\n* `main:app`\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:80 -e APP_MODULE=\"custom_app.custom_main:api\" myimage\n```\n\n#### `GUNICORN_CONF`\n\nThe path to a Gunicorn Python configuration file.\n\nBy default:\n\n* `/app/gunicorn_conf.py` if it exists\n* `/app/app/gunicorn_conf.py` if it exists\n* `/gunicorn_conf.py` (the included default)\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:80 -e GUNICORN_CONF=\"/app/custom_gunicorn_conf.py\" myimage\n```\n\nYou can use the [config file from the base image](https://github.com/tiangolo/uvicorn-gunicorn-docker/blob/master/docker-images/gunicorn_conf.py) as a starting point for yours.\n\n#### `WORKERS_PER_CORE`\n\nThis image will check how many CPU cores are available in the current server running your container.\n\nIt will set the number of workers to the number of CPU cores multiplied by this value.\n\nBy default:\n\n* `1`\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:80 -e WORKERS_PER_CORE=\"3\" myimage\n```\n\nIf you used the value `3` in a server with 2 CPU cores, it would run 6 worker processes.\n\nYou can use floating point values too.\n\nSo, for example, if you have a big server (let's say, with 8 CPU cores) running several applications, and you have a FastAPI application that you know won't need high performance. And you don't want to waste server resources. You could make it use `0.5` workers per CPU core. For example:\n\n```bash\ndocker run -d -p 80:80 -e WORKERS_PER_CORE=\"0.5\" myimage\n```\n\nIn a server with 8 CPU cores, this would make it start only 4 worker processes.\n\n**Note**: By default, if `WORKERS_PER_CORE` is `1` and the server has only 1 CPU core, instead of starting 1 single worker, it will start 2. This is to avoid bad performance and blocking applications (server application) on small machines (server machine/cloud/etc). This can be overridden using `WEB_CONCURRENCY`.\n\n#### `MAX_WORKERS`\n\nSet the maximum number of workers to use.\n\nYou can use it to let the image compute the number of workers automatically but making sure it's limited to a maximum.\n\nThis can be useful, for example, if each worker uses a database connection and your database has a maximum limit of open connections.\n\nBy default it's not set, meaning that it's unlimited.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:80 -e MAX_WORKERS=\"24\" myimage\n```\n\nThis would make the image start at most 24 workers, independent of how many CPU cores are available in the server.\n\n#### `WEB_CONCURRENCY`\n\nOverride the automatic definition of number of workers.\n\nBy default:\n\n* Set to the number of CPU cores in the current server multiplied by the environment variable `WORKERS_PER_CORE`. So, in a server with 2 cores, by default it will be set to `2`.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:80 -e WEB_CONCURRENCY=\"2\" myimage\n```\n\nThis would make the image start 2 worker processes, independent of how many CPU cores are available in the server.\n\n#### `HOST`\n\nThe \"host\" used by Gunicorn, the IP where Gunicorn will listen for requests.\n\nIt is the host inside of the container.\n\nSo, for example, if you set this variable to `127.0.0.1`, it will only be available inside the container, not in the host running it.\n\nIt's is provided for completeness, but you probably shouldn't change it.\n\nBy default:\n\n* `0.0.0.0`\n\n#### `PORT`\n\nThe port the container should listen on.\n\nIf you are running your container in a restrictive environment that forces you to use some specific port (like `8080`) you can set it with this variable.\n\nBy default:\n\n* `80`\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e PORT=\"8080\" myimage\n```\n\n#### `BIND`\n\nThe actual host and port passed to Gunicorn.\n\nBy default, set based on the variables `HOST` and `PORT`.\n\nSo, if you didn't change anything, it will be set by default to:\n\n* `0.0.0.0:80`\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e BIND=\"0.0.0.0:8080\" myimage\n```\n\n#### `LOG_LEVEL`\n\nThe log level for Gunicorn.\n\nOne of:\n\n* `debug`\n* `info`\n* `warning`\n* `error`\n* `critical`\n\nBy default, set to `info`.\n\nIf you need to squeeze more performance sacrificing logging, set it to `warning`, for example:\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e LOG_LEVEL=\"warning\" myimage\n```\n\n#### `WORKER_CLASS`\n\nThe class to be used by Gunicorn for the workers.\n\nBy default, set to `uvicorn.workers.UvicornWorker`.\n\nThe fact that it uses Uvicorn is what allows using ASGI frameworks like FastAPI, and that is also what provides the maximum performance.\n\nYou probably shouldn't change it.\n\nBut if for some reason you need to use the alternative Uvicorn worker: `uvicorn.workers.UvicornH11Worker` you can set it with this environment variable.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e WORKER_CLASS=\"uvicorn.workers.UvicornH11Worker\" myimage\n```\n\n#### `TIMEOUT`\n\nWorkers silent for more than this many seconds are killed and restarted.\n\nRead more about it in the [Gunicorn docs: timeout](https://docs.gunicorn.org/en/stable/settings.html#timeout).\n\nBy default, set to `120`.\n\nNotice that Uvicorn and ASGI frameworks like FastAPI are async, not sync. So it's probably safe to have higher timeouts than for sync workers.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e TIMEOUT=\"20\" myimage\n```\n\n#### `KEEP_ALIVE`\n\nThe number of seconds to wait for requests on a Keep-Alive connection.\n\nRead more about it in the [Gunicorn docs: keepalive](https://docs.gunicorn.org/en/stable/settings.html#keepalive).\n\nBy default, set to `2`.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e KEEP_ALIVE=\"20\" myimage\n```\n\n#### `GRACEFUL_TIMEOUT`\n\nTimeout for graceful workers restart.\n\nRead more about it in the [Gunicorn docs: graceful-timeout](https://docs.gunicorn.org/en/stable/settings.html#graceful-timeout).\n\nBy default, set to `120`.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e GRACEFUL_TIMEOUT=\"20\" myimage\n```\n\n#### `ACCESS_LOG`\n\nThe access log file to write to.\n\nBy default `\"-\"`, which means stdout (print in the Docker logs).\n\nIf you want to disable `ACCESS_LOG`, set it to an empty value.\n\nFor example, you could disable it with:\n\n```bash\ndocker run -d -p 80:8080 -e ACCESS_LOG= myimage\n```\n\n#### `ERROR_LOG`\n\nThe error log file to write to.\n\nBy default `\"-\"`, which means stderr (print in the Docker logs).\n\nIf you want to disable `ERROR_LOG`, set it to an empty value.\n\nFor example, you could disable it with:\n\n```bash\ndocker run -d -p 80:8080 -e ERROR_LOG= myimage\n```\n\n#### `GUNICORN_CMD_ARGS`\n\nAny additional command line settings for Gunicorn can be passed in the `GUNICORN_CMD_ARGS` environment variable.\n\nRead more about it in the [Gunicorn docs: Settings](https://docs.gunicorn.org/en/stable/settings.html#settings).\n\nThese settings will have precedence over the other environment variables and any Gunicorn config file.\n\nFor example, if you have a custom TLS/SSL certificate that you want to use, you could copy them to the Docker image or mount them in the container, and set [`--keyfile` and `--certfile`](http://docs.gunicorn.org/en/latest/settings.html#ssl) to the location of the files, for example:\n\n```bash\ndocker run -d -p 80:8080 -e GUNICORN_CMD_ARGS=\"--keyfile=/secrets/key.pem --certfile=/secrets/cert.pem\" -e PORT=443 myimage\n```\n\n**Note**: instead of handling TLS/SSL yourself and configuring it in the container, it's recommended to use a \"TLS Termination Proxy\" like [Traefik](https://docs.traefik.io/). You can read more about it in the [FastAPI documentation about HTTPS](https://fastapi.tiangolo.com/deployment/#https).\n\n#### `PRE_START_PATH`\n\nThe path where to find the pre-start script.\n\nBy default, set to `/app/prestart.sh`.\n\nYou can set it like:\n\n```bash\ndocker run -d -p 80:8080 -e PRE_START_PATH=\"/custom/script.sh\" myimage\n```\n\n### Custom Gunicorn configuration file\n\nThe image includes a default Gunicorn Python config file at `/gunicorn_conf.py`.\n\nIt uses the environment variables declared above to set all the configurations.\n\nYou can override it by including a file in:\n\n* `/app/gunicorn_conf.py`\n* `/app/app/gunicorn_conf.py`\n* `/gunicorn_conf.py`\n\n### Custom `/app/prestart.sh`\n\nIf you need to run anything before starting the app, you can add a file `prestart.sh` to the directory `/app`. The image will automatically detect and run it before starting everything.\n\nFor example, if you want to add Alembic SQL migrations (with SQLALchemy), you could create a `./app/prestart.sh` file in your code directory (that will be copied by your `Dockerfile`) with:\n\n```bash\n#! /usr/bin/env bash\n\n# Let the DB start\nsleep 10;\n# Run migrations\nalembic upgrade head\n```\n\nand it would wait 10 seconds to give the database some time to start and then run that `alembic` command.\n\nIf you need to run a Python script before starting the app, you could make the `/app/prestart.sh` file run your Python script, with something like:\n\n```bash\n#! /usr/bin/env bash\n\n# Run custom Python script before starting\npython /app/my_custom_prestart_script.py\n```\n\nYou can customize the location of the prestart script with the environment variable `PRE_START_PATH` described above.\n\n### Development live reload\n\nThe default program that is run is at `/start.sh`. It does everything described above.\n\nThere's also a version for development with live auto-reload at:\n\n```bash\n/start-reload.sh\n```\n\n#### Details\n\nFor development, it's useful to be able to mount the contents of the application code inside of the container as a Docker \"host volume\", to be able to change the code and test it live, without having to build the image every time.\n\nIn that case, it's also useful to run the server with live auto-reload, so that it re-starts automatically at every code change.\n\nThe additional script `/start-reload.sh` runs Uvicorn alone (without Gunicorn) and in a single process.\n\nIt is ideal for development.\n\n#### Usage\n\nFor example, instead of running:\n\n```bash\ndocker run -d -p 80:80 myimage\n```\n\nYou could run:\n\n```bash\ndocker run -d -p 80:80 -v $(pwd):/app myimage /start-reload.sh\n```\n\n* `-v $(pwd):/app`: means that the directory `$(pwd)` should be mounted as a volume inside of the container at `/app`.\n    * `$(pwd)`: runs `pwd` (\"print working directory\") and puts it as part of the string.\n* `/start-reload.sh`: adding something (like `/start-reload.sh`) at the end of the command, replaces the default \"command\" with this one. In this case, it replaces the default (`/start.sh`) with the development alternative `/start-reload.sh`.\n\n#### Development live reload - Technical Details\n\nAs `/start-reload.sh` doesn't run with Gunicorn, any of the configurations you put in a `gunicorn_conf.py` file won't apply.\n\nBut these environment variables will work the same as described above:\n\n* `MODULE_NAME`\n* `VARIABLE_NAME`\n* `APP_MODULE`\n* `HOST`\n* `PORT`\n* `LOG_LEVEL`\n\n## \U0001F6A8 Alpine Python Warning\n\nIn short: You probably shouldn't use Alpine for Python projects, instead use the `slim` Docker image versions.\n\n---\n\nDo you want more details? Continue reading \U0001F447\n\nAlpine is more useful for other languages where you build a static binary in one Docker image stage (using multi-stage Docker building) and then copy it to a simple Alpine image, and then just execute that binary. For example, using Go.\n\nBut for Python, as Alpine doesn't use the standard tooling used for building Python extensions, when installing packages, in many cases Python (`pip`) won't find a precompiled installable package (a \"wheel\") for Alpine. And after debugging lots of strange errors you will realize that you have to install a lot of extra tooling and build a lot of dependencies just to use some of these common Python packages. \U0001F629\n\nThis means that, although the original Alpine image might have been small, you end up with a an image with a size comparable to the size you would have gotten if you had just used a standard Python image (based on Debian), or in some cases even larger. \U0001F92F\n\nAnd in all those cases, it will take much longer to build, consuming much more resources, building dependencies for longer, and also increasing its carbon footprint, as you are using more CPU time and energy for each build. \U0001F333\n\nIf you want slim Python images, you should instead try and use the `slim` versions that are still based on Debian, but are smaller. \U0001F913\n\n## Tests\n\nAll the image tags, configurations, environment variables and application options are tested.\n\n## Release Notes\n\n### Latest Changes\n\n#### Docs\n\n* \U0001F4DD Add security policy. PR [#283](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/283) by [@tiangolo](https://github.com/tiangolo).\n\n#### Internal\n\n* \U0001F527 Add GitHub templates for discussions and templates. PR [#281](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/281) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F527 Update `latest-changes.yml`. PR [#276](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/276) by [@alejsdev](https://github.com/alejsdev).\n\n### 0.8.0\n\n#### Features\n\n* ✨ Add support for multi-arch builds, including support for arm64 (e.g. Mac M1). PR [#273](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/273) by [@tiangolo](https://github.com/tiangolo).\n\n#### Docs\n\n* \U0001F4DD Update test badge in `README.md`. PR [#275](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/275) by [@alejsdev](https://github.com/alejsdev).\n* \U0001F4DD Update test badge in `README.md`. PR [#274](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/274) by [@alejsdev](https://github.com/alejsdev).\n\n#### Upgrades\n\n* ⬆ Bump gunicorn from 20.1.0 to 21.2.0. PR [#270](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/270) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Bump fastapi[all] from 0.87.0 to 0.88.0. PR [#222](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/222) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n#### Internal\n\n* ⬆ Update mypy requirement from ^0.991 to ^1.4. PR [#269](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/269) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆ Bump actions/checkout from 3 to 4. PR [#266](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/266) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆ Bump peter-evans/dockerhub-description from 3 to 4. PR [#267](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/267) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆ Bump actions/setup-python from 4.3.0 to 5.0.0. PR [#265](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/265) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆ Bump tiangolo/issue-manager from 0.4.0 to 0.5.0. PR [#264](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/264) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \U0001F477 Update dependabot. PR [#253](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/253) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Update token for latest changes. PR [#247](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/247) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Add GitHub Action for Docker Hub description. PR [#221](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/221) by [@tiangolo](https://github.com/tiangolo).\n* ⬆️ Update mypy requirement from ^0.971 to ^0.991. PR [#214](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/214) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update autoflake requirement from ^1.3.1 to ^2.0.0. PR [#215](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/215) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n### 0.7.0\n\nHighlights of this release:\n\n* Support for Python 3.10 and 3.11.\n* Deprecation of Python 3.6.\n    * The last Python 3.6 image tag was pushed and is available in Docker Hub, but it won't be updated or maintained anymore.\n    * The last image with a date tag is `python3.6-2022-11-25`.\n* Upgraded versions of all the dependencies.\n\n#### Features\n\n* ✨ Add support for Python 3.10 and 3.11. PR [#220](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/220) by [@tiangolo](https://github.com/tiangolo).\n* ✨ Add Python 3.9 and Python 3.9 Alpine. PR [#67](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/67) by [@graue70](https://github.com/graue70).\n\n#### Breaking Changes\n\n* \U0001F525 Deprecate and remove Python 3.6. PR [#211](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/211) by [@tiangolo](https://github.com/tiangolo).\n\n#### Upgrades\n\n* ⬆️ Upgrade FastAPI and Uvicorn versions. PR [#212](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/212) by [@tiangolo](https://github.com/tiangolo).\n* ⬆️ Upgrade packages to the last version that supports Python 3.6. PR [#207](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/207) by [@tiangolo](https://github.com/tiangolo).\n\n#### Docs\n\n* \U0001F4DD Add note to discourage Alpine with Python. PR [#122](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/122) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F4DD Add warning for Kubernetes, when to use this image. PR [#121](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/121) by [@tiangolo](https://github.com/tiangolo).\n* ✏ Fix typo, repeated word on README. PR [#96](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/96) by [@shelbylsmith](https://github.com/shelbylsmith).\n\n#### Internal\n\n* ⬆️ Update black requirement from ^20.8b1 to ^22.10. PR [#216](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/216) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update docker requirement from ^5.0.3 to ^6.0.1. PR [#217](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/217) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \U0001F525 Remove old Travis file. PR [#219](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/219) by [@tiangolo](https://github.com/tiangolo).\n* ⬆️ Upgrade CI OS. PR [#218](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/218) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F527 Update Dependabot config. PR [#213](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/213) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Add scheduled CI. PR [#210](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/210) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Add alls-green GitHub Action. PR [#209](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/209) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Do not run double CI, run on push only on master. PR [#208](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/208) by [@tiangolo](https://github.com/tiangolo).\n* ⬆️ Bump actions/setup-python from 4.1.0 to 4.3.0. PR [#201](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/201) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update black requirement from ^19.10b0 to ^20.8b1. PR [#113](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/113) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update docker requirement from ^4.2.0 to ^5.0.3. PR [#125](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/125) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Bump actions/checkout from 2 to 3.1.0. PR [#194](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/194) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update mypy requirement from ^0.770 to ^0.971. PR [#184](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/184) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update isort requirement from ^4.3.21 to ^5.8.0. PR [#116](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/116) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Bump tiangolo/issue-manager from 0.2.0 to 0.4.0. PR [#110](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/110) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Bump actions/setup-python from 1 to 4.1.0. PR [#182](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/182) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* ⬆️ Update pytest requirement from ^5.4.1 to ^7.0.1. PR [#153](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/153) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \U0001F4CC Add external dependencies and Dependabot to get automatic upgrade PRs. PR [#109](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/109) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Update Latest Changes. PR [#108](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/108) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Allow GitHub workflow dispatch to trigger test and deploy. PR [#93](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/93) by [@tiangolo](https://github.com/tiangolo).\n* \U0001F477 Add latest-changes GitHub action, update issue-manager, add funding. PR [#70](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/70) by [@tiangolo](https://github.com/tiangolo).\n\n### 0.6.0\n\n* Add docs about installing and pinning dependencies. PR [#41](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/41).\n* Add `slim` version. PR [#40](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/40).\n* Update and refactor bringing all the new features from the base image. Includes:\n    * Centralize, simplify, and deduplicate code and setup\n    * Move CI to GitHub actions\n    * Add Python 3.8 (and Alpine)\n    * Add new configs and docs:\n        * `WORKER_CLASS`\n        * `TIMEOUT`\n        * `KEEP_ALIVE`\n        * `GRACEFUL_TIMEOUT`\n        * `ACCESS_LOG`\n        * `ERROR_LOG`\n        * `GUNICORN_CMD_ARGS`\n        * `MAX_WORKERS`\n    * PR [#39](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/39).\n* Disable pip cache during installation. PR [#38](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/38).\n* Migrate local development from Pipenv to Poetry. PR [#34](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/34).\n* Add docs for custom `PRE_START_PATH` env var. PR [#33](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/33).\n\n### 0.5.0\n\n* Refactor tests to use env vars and add image tags for each build date, like `tiangolo/uvicorn-gunicorn-fastapi:python3.7-2019-10-15`. PR [#17](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/17).\n* Upgrade Travis. PR [#9](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/9).\n\n### 0.4.0\n\n* Add support for live auto-reload with an additional custom script `/start-reload.sh`, check the [updated documentation](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker#development-live-reload). PR <a href=\"https://github.com/tiangolo/uvicorn-gunicorn-docker/pull/6\" target=\"_blank\">#6</a> in parent image.\n\n### 0.3.0\n\n* Set `WORKERS_PER_CORE` by default to `1`, as it shows to have the best performance on benchmarks.\n* Make the default web concurrency, when `WEB_CONCURRENCY` is not set, to a minimum of 2 workers. This is to avoid bad performance and blocking applications (server application) on small machines (server machine/cloud/etc). This can be overridden using `WEB_CONCURRENCY`. This applies for example in the case where `WORKERS_PER_CORE` is set to `1` (the default) and the server has only 1 CPU core. PR <a href=\"https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/6\" target=\"_blank\">#6</a> and PR <a href=\"https://github.com/tiangolo/uvicorn-gunicorn-docker/pull/5\" target=\"_blank\">#5</a> in parent image.\n\n### 0.2.0\n\n* Make `/start.sh` run independently, reading and generating used default environment variables. And remove `/entrypoint.sh` as it doesn't modify anything in the system, only reads environment variables. PR <a href=\"https://github.com/tiangolo/uvicorn-gunicorn-docker/pull/4\" target=\"_blank\">#4</a> in parent image.\n\n### 0.1.0\n\n* Add support for `/app/prestart.sh`.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n"
httptoolkit/openapi-directory-js: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B6E41E0:11C08B3A:66148CE2.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Frameio/rolodex: >
  # Rolodex


  [![hex.pm
  version](https://img.shields.io/hexpm/v/rolodex.svg)](https://hex.pm/packages/rolodex)
  [![CircleCI](https://circleci.com/gh/Frameio/rolodex.svg?style=svg)](https://circleci.com/gh/Frameio/rolodex)


  Rolodex generates documentation for your Phoenix API.


  Simply annotate your Phoenix controller action functions with `@doc` metadata,
  and Rolodex will turn these descriptions into valid documentation for any
  platform.


  Currently supports:

  - [OpenAPI 3.0](https://swagger.io/specification/)


  ## Disclaimer


  Rolodex is currently under active development! The API is a work in progress
  as we head towards v1.0.


  ## Documentation


  See [https://hexdocs.pm/rolodex](https://hexdocs.pm/rolodex/Rolodex.html)


  ## Installation


  Rolodex is [available in Hex](https://hex.pm/packages/rolodex). Add it to your

  deps in `mix.exs`:


  ```elixir

  def deps do
    [
      {:rolodex, "~> 0.10.0"}
    ]
  end

  ```
quantmind/aio-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:2468D07:3A40437:66148FE5.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
swagger-mock/swagger-mock: >
  # OpenAPI Mock Server


  ![CI](https://github.com/muonsoft/openapi-mock/workflows/CI/badge.svg?branch=master)

  [![Scrutinizer Code
  Quality](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/?branch=master)

  [![Code
  Coverage](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/?branch=master)

  ![GitHub release (latest by
  date)](https://img.shields.io/github/v/release/muonsoft/openapi-mock)


  OpenAPI API mock server with random data generation by specified schemas.


  * OpenAPI 3.x support.

  * Load specification from a local file or URL.

  * JSON and YAML format supported.

  * Generates fake response data by provided schemas or by examples.

  * Content negotiation by Accept header.

  * Can be used as standalone application (Linux and Windows) or can be run via
  Docker container.


  ## Supported features


  | Feature | Support status |

  | --- | --- |

  | generating xml response | basic support ([without xml
  tags](https://swagger.io/docs/specification/data-models/representing-xml/)) |

  | generating json response | supported |

  | generation of [basic
  types](https://swagger.io/docs/specification/data-models/data-types/) |
  supported |

  | generation of
  [enums](https://swagger.io/docs/specification/data-models/enums/) | supported
  |

  | generation of [associative
  arrays](https://swagger.io/docs/specification/data-models/dictionaries/) |
  supported |

  | generation of [combined
  types](https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/)
  | supported (without tag `not` and discriminator) |

  | local reference resolving | supported |

  | remote reference resolving | not supported |

  | URL reference resolving | not supported |

  | validating request data | not supported |

  | force using custom response schema | not supported (schema detected
  automatically) |


  ## Quick start


  Download latest binary and run a server.


  ```bash

  # runs a local server on port 8080

  ./openapi-mock serve --specification-url
  https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml


  # to test that the server successfully ran

  curl 'http://localhost:8080/v1/pets'

  ```


  Alternatively, you can use [Docker](https://www.docker.com/) image.


  ```bash

  # downloads an image

  docker pull muonsoft/openapi-mock


  # runs a docker container with exported port 8080

  docker run -p 8080:8080 -e
  "OPENAPI_MOCK_SPECIFICATION_URL=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml"
  --rm muonsoft/openapi-mock


  # to test that the server successfully ran

  curl 'http://localhost:8080/v1/pets'

  ```


  Also, you can use [Docker Compose](https://docs.docker.com/compose/). Example
  of `docker-compose.yml`


  ```yaml

  version: '3.0'


  services:
    openapi_mock:
      container_name: openapi_mock
      image: muonsoft/openapi-mock
      environment:
        OPENAPI_MOCK_SPECIFICATION_URL: 'https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml'
      ports:
        - "8080:8080"
  ```


  To start up a container run command.


  ```bash

  docker-compose up -d

  ```


  ## Usage guide


  * [Console commands](docs/usage_guide.md#console-commands)

  * [Setting up a configuration](docs/usage_guide.md#setting-up-a-configuration)

  * [Configuration file example](docs/usage_guide.md#configuration-file-example)

  * [Configuration options](docs/usage_guide.md#configuration-options)


  ## License


  This project is licensed under the MIT License - see the LICENSE file for
  details.
tiangolo/full-stack-fastapi-couchbase: "## \U0001F6A8 DEPRECATION WARNING \U0001F6A8\n\nI'm currently not actively using Couchbase nor this generator for any project.\n\nYou might still find some internal pieces of code useful for your own use cases, but I won't be able to fix bugs and add features.\n\nIf you are starting a new project from scratch, check the alternatives at the [FastAPI docs: Project Generation](https://fastapi.tiangolo.com/project-generation/).\n\nYou are still free to use this project if you want to, you might still find some internal pieces of code useful for your own use case. And if you already have a project generated with it that's fine as well (and you probably already updated it to suit your needs).\n\n# Full Stack FastAPI Couchbase - project generator\n\n[![Build Status](https://travis-ci.org/tiangolo/full-stack-fastapi-couchbase.svg?branch=master)](https://travis-ci.org/tiangolo/full-stack-fastapi-couchbase)\n\n### To have in mind\n\nHere are some extra thoughts you might want to consider if you decide to go with Couchbase and/or this project generator.\n\n#### Pros\n\nCouchbase has a great set of features that is not easily or commonly found in alternatives.\n\nIt's a distributed database, so, if you have a cluster of several nodes with the data replicated, you don't have a single point of failure.\n\nIt provides very high performance.\n\nIt has built-in full-text search integrated (using Bleve). It's possible to make all the records be automatically indexed in the search engine without additional code or extra components.\n\nIt can be connected/integrated with the Couchbase Sync Gateway, that can be used to synchronize a subset of documents (records) with mobile devices. And with some effort, it can be connected with PouchBD for frontend synchronization (although not querying and/or searching from the frontend, as would be possible with CouchDB).\n\n#### Cons\n\nThe documentation is very scarce. This is sadly a big problem. Many features are not well documented, or not documented at all.\n\nMany configurations are not documented and have to be inferred from comments in forums, reading source code, or checking the configurations for the C client and trying different query parameters in URLs, that becomes quite error prone.\n\nCouchbase didn't seem to be designed to be integrated into CI systems as in this project (or alternatives), at least until the last time I used it. It expects all the set up to be done once via the web UI, not automated. The official Docker image can't be configured. So, this project does all the configuration by sending the HTTP requests from the backend code to the container replicating the HTTP requests done in the web UI. But those steps are not documented, there's no \"official\" way to configure and start it without using the web UI, so the integration with CI could be error prone.\n\nThe Couchbase Sync Gateway official Docker image is not designed to be configured much either, so, the `Dockerfile` included in this project adds a good amount of custom logic to support that, but that's not really official.\n\nAs it uses N1QL, a flavor of SQL, and there's no easy integration with Python, you have to do all the operations in N1QL strings and integrate them with your own code. Without editor support, completion, nor syntax checks for N1QL.\n\n---\n\nGenerate a backend and frontend stack using Python, including interactive API documentation.\n\n[![Screenshot](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)](https://github.com/tiangolo/full-stack-fastapi-couchbase)\n\n## Features\n\n* Full **Docker** integration (Docker based).\n* Docker Swarm Mode deployment.\n* **Docker Compose** integration and optimization for local development.\n* **Production ready** Python web server using Uvicorn and Gunicorn.\n* Python **[FastAPI](https://github.com/tiangolo/fastapi)** backend:\n    * **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic).\n    * **Intuitive**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging.\n    * **Easy**: Designed to be easy to use and learn. Less time reading docs.\n    * **Short**: Minimize code duplication. Multiple features from each parameter declaration.\n    * **Robust**: Get production-ready code. With automatic interactive documentation.\n    * **Standards-based**: Based on (and fully compatible with) the open standards for APIs: <a href=\"https://github.com/OAI/OpenAPI-Specification\" target=\"_blank\">OpenAPI</a> and <a href=\"http://json-schema.org/\" target=\"_blank\">JSON Schema</a>.\n    * [**Many other features**](https://github.com/tiangolo/fastapi) including automatic validation, serialization, interactive documentation, authentication with OAuth2 JWT tokens, etc.\n* **Secure password** hashing by default.\n* **JWT token** authentication.\n* **CORS** (Cross Origin Resource Sharing).\n* **Celery** worker that can import and use code from the rest of the backend selectively (you don't have to install the complete app in each worker).\n* **NoSQL Couchbase** database that supports direct synchronization via Couchbase Sync Gateway for offline-first applications.\n* **Full Text Search** integrated, using Couchbase.\n* REST backend tests based on Pytest, integrated with Docker, so you can test the full API interaction, independent on the database. As it runs in Docker, it can build a new data store from scratch each time (so you can use ElasticSearch, MongoDB, or whatever you want, and just test that the API works).\n* Easy Python integration with **Jupyter** Kernels for remote or in-Docker development with extensions like Atom Hydrogen or Visual Studio Code Jupyter.\n* **Email notifications** for account creation and password recovery, compatible with:\n    * Mailgun\n    * SparkPost\n    * SendGrid\n    * ...any other provider that can generate standard SMTP credentials.\n* **Vue** frontend:\n    * Generated with Vue CLI.\n    * **JWT Authentication** handling.\n    * Login view.\n    * After login, main dashboard view.\n    * Main dashboard with user creation and edition.\n    * Self user edition.\n    * **Vuex**.\n    * **Vue-router**.\n    * **Vuetify** for beautiful material design components.\n    * **TypeScript**.\n    * Docker server based on **Nginx** (configured to play nicely with Vue-router).\n    * Docker multi-stage building, so you don't need to save or commit compiled code.\n    * Frontend tests ran at build time (can be disabled too).\n    * Made as modular as possible, so it works out of the box, but you can re-generate with Vue CLI or create it as you need, and re-use what you want.\n* **Flower** for Celery jobs monitoring.\n* Load balancing between frontend and backend with **Traefik**, so you can have both under the same domain, separated by path, but served by different containers.\n* Traefik integration, including Let's Encrypt **HTTPS** certificates automatic generation.\n* GitLab **CI** (continuous integration), including frontend and backend testing.\n\n## How to use it\n\nGo to the directory where you want to create your project and run:\n\n```bash\npip install cookiecutter\ncookiecutter https://github.com/tiangolo/full-stack-fastapi-couchbase\n```\n\n### Generate passwords\n\nYou will be asked to provide passwords and secret keys for several components. Open another terminal and run:\n\n```bash\nopenssl rand -hex 32\n# Outputs something like: 99d3b1f01aa639e4a76f4fc281fc834747a543720ba4c8a8648ba755aef9be7f\n```\n\nCopy the contents and use that as password / secret key. And run that again to generate another secure key.\n\n\n### Input variables\n\nThe generator (cookiecutter) will ask you for some data, you might want to have at hand before generating the project.\n\nThe input variables, with their default values (some auto generated) are:\n\n* `project_name`: The name of the project\n* `project_slug`: The development friendly name of the project. By default, based on the project name\n* `domain_main`: The domain in where to deploy the project for production (from the branch `production`), used by the load balancer, backend, etc. By default, based on the project slug.\n* `domain_staging`: The domain in where to deploy while staging (before production) (from the branch `master`). By default, based on the main domain.\n\n* `docker_swarm_stack_name_main`: The name of the stack while deploying to Docker in Swarm mode for production. By default, based on the domain.\n* `docker_swarm_stack_name_staging`: The name of the stack while deploying to Docker in Swarm mode for staging. By default, based on the domain.\n\n* `secret_key`: Backend server secret key. Use the method above to generate it.\n* `first_superuser`: The first superuser generated, with it you will be able to create more users, etc. By default, based on the domain.\n* `first_superuser_password`: First superuser password. Use the method above to generate it.\n* `backend_cors_origins`: Origins (domains, more or less) that are enabled for CORS (Cross Origin Resource Sharing). This allows a frontend in one domain (e.g. `https://dashboard.example.com`) to communicate with this backend, that could be living in another domain (e.g. `https://api.example.com`). It can also be used to allow your local frontend (with a custom `hosts` domain mapping, as described in the project's `README.md`) that could be living in `http://dev.example.com:8080` to communicate with the backend at `https://stag.example.com`. Notice the `http` vs `https` and the `dev.` prefix for local development vs the \"staging\" `stag.` prefix. By default, it includes origins for production, staging and development, with ports commonly used during local development by several popular frontend frameworks (Vue with `:8080`, React, Angular).\n* `smtp_port`: Port to use to send emails via SMTP. By default `587`.\n* `smtp_host`: Host to use to send emails, it would be given by your email provider, like Mailgun, Sparkpost, etc.\n* `smtp_user`: The user to use in the SMTP connection. The value will be given by your email provider.\n* `smtp_password`: The password to be used in the SMTP connection. The value will be given by the email provider.\n* `smtp_emails_from_email`: The email account to use as the sender in the notification emails, it would be something like `info@your-custom-domain.com`.\n \n* `couchbase_user`: Couchbase main user to be used by the application (code). By default `admin`.\n* `couchbase_password`: Password of the main user, for the backend code. Generate it with the method above.\n* `couchbase_sync_gateway_cors`: List of CORS origins that the Sync Gateway should allow to talk to directly. Similar to `backend_cors_origins`.\n* `couchbase_sync_gateway_user`: User to be created for the Couchbase Sync Gateway. This is what allows synchronization using the CouchDB protocol, with Couchbase Lite in mobile apps and PouchDB in the web and hybrid mobile apps.\n* `couchbase_sync_gateway_password`: Couchbase Sync Gateway password. Generate it with the method above.\n \n* `traefik_constraint_tag`: The tag to be used by the internal Traefik load balancer (for example, to divide requests between backend and frontend) for production. Used to separate this stack from any other stack you might have. This should identify each stack in each environment (production, staging, etc).\n* `traefik_constraint_tag_staging`: The Traefik tag to be used while on staging. \n\n* `traefik_public_network`: This assumes you have another separate publicly facing Traefik at the server / cluster level. This is the network that main Traefik lives in.\n* `traefik_public_constraint_tag`: The tag that should be used by stack services that should communicate with the public.\n\n* `flower_auth`: Basic HTTP authentication for flower, in the form`user:password`. By default: \"`root:changethis`\".\n\n* `sentry_dsn`: Key URL (DSN) of Sentry, for live error reporting. If you are not using it yet, you should, is open source. E.g.: `https://1234abcd:5678ef@sentry.example.com/30`.\n\n* `docker_image_prefix`: Prefix to use for Docker image names. If you are using GitLab Docker registry it would be based on your code repository. E.g.: `git.example.com/development-team/my-awesome-project/`.\n* `docker_image_backend`: Docker image name for the backend. By default, it will be based on your Docker image prefix, e.g.: `git.example.com/development-team/my-awesome-project/backend`. And depending on your environment, a different tag will be appended ( `prod`, `stag`, `branch` ). So, the final image names used will be like: `git.example.com/development-team/my-awesome-project/backend:prod`.\n* `docker_image_celeryworker`: Docker image for the celery worker. By default, based on your Docker image prefix.\n* `docker_image_frontend`: Docker image for the frontend. By default, based on your Docker image prefix.\n* `docker_image_sync_gateway`: Docker image for the Sync Gateway. By default, based on your Docker image prefix.\n\n## How to deploy\n\nThis stack can be adjusted and used with several deployment options that are compatible with Docker Compose, but it is designed to be used in a cluster controlled with pure Docker in Swarm Mode with a Traefik main load balancer proxy handling automatic HTTPS certificates, using the ideas from <a href=\"https://dockerswarm.rocks\" target=\"_blank\">DockerSwarm.rocks</a>.\n\nPlease refer to <a href=\"https://dockerswarm.rocks\" target=\"_blank\">DockerSwarm.rocks</a> to see how to deploy such a cluster in 20 minutes.\n\n## More details\n\nAfter using this generator, your new project (the directory created) will contain an extensive `README.md` with instructions for development, deployment, etc. You can pre-read [the project `README.md` template here too](./{{cookiecutter.project_slug}}/README.md).\n\n## Sibling project generators\n\n* Based on PostgreSQL: [https://github.com/tiangolo/full-stack-fastapi-postgresql](https://github.com/tiangolo/full-stack-fastapi-postgresql).\n\n## Release Notes\n\n### Latest Changes\n\n* Fix Windows line endings for shell scripts after project generation with Cookiecutter hooks. PR [#28](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/28).\n* Remove `package-lock.json` to let everyone lock their own versions (depending on OS, etc).\n* Simplify Traefik labels for services. PR [#27](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/27).\n* Fix Flower Docker configuration. PR [#24](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/24).\n* Update testing scripts and typo.\n* Add normal user Pytest fixture. PR [#23](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/23).\n* Update Dockerfiles to use Couchbase from Debian image. PR [#20](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/20) by [@Gjacquenot](https://github.com/Gjacquenot).\n* Use new Pydantic types. PR [#21](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/21) by [@tehtbl](https://github.com/tehtbl).\n\n### 0.4.0\n\n* Fix security on resetting a password. Receive `password` and `token` as body, not query. PR [#16](https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/16).\n\n* Forward arguments from script to `pytest` inside container.\n\n* Update Jupyter Lab installation and util script/environment variable for local development.\n\n### 0.3.0\n\n* PR <a href=\"https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/15\" target=\"_blank\">#15</a>:\n    * Update CRUD utils to use types better.\n    * Simplify Pydantic model names, from `UserInCreate` to `UserCreate`, etc.\n    * Upgrade packages.\n    * Add new generic \"Items\" models, crud utils, endpoints, and tests. To facilitate re-using them to create new functionality. As they are simple and generic (not like Users), it's easier to copy-paste and adapt them to each use case.\n    * Update endpoints/*path operations* to simplify code and use new utilities, prefix and tags in `include_router`.\n    * Update testing utils.\n    * Update linting rules, relax vulture to reduce false positives.\n    * Add full text search for items.\n    * Update project README.md with tips about how to start with backend.\n\n### 0.2.1\n\n* Fix frontend hijacking /docs in development. Using latest https://github.com/tiangolo/node-frontend with custom Nginx configs in frontend. <a href=\"https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/14\" target=\"_blank\">PR #14</a>.\n\n* Update generated README. Minor typos.\n\n* Update Couchbase installation, to include Couchbase command line tools.\n\n* Set `/start-reload.sh` as a command override for development by default.\n\n### 0.2.0\n\n**<a href=\"https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/7\" target=\"_blank\">PR #7</a>**:\n\n* Simplify and update backend `Dockerfile`s.\n* Refactor and simplify backend code, improve naming, imports, modules and \"namespaces\".\n* Improve and simplify Vuex integration with TypeScript accessors.\n* Standardize frontend components layout, buttons order, etc.\n* Add local development scripts (to develop this project generator itself).\n* Add logs to startup modules to detect errors early.\n* Improve FastAPI dependency utilities, to simplify and reduce code (to require a superuser).\n* Fix/update logic to update users.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n"
tiangolo/full-stack-fastapi-postgresql: "# Full Stack FastAPI Template\n\n<a href=\"https://github.com/tiangolo/full-stack-fastapi-template/actions?query=workflow%3ATest\" target=\"_blank\"><img src=\"https://github.com/tiangolo/full-stack-fastapi-template/workflows/Test/badge.svg\" alt=\"Test\"></a>\n<a href=\"https://coverage-badge.samuelcolvin.workers.dev/redirect/tiangolo/full-stack-fastapi-template\" target=\"_blank\"><img src=\"https://coverage-badge.samuelcolvin.workers.dev/tiangolo/full-stack-fastapi-template.svg\" alt=\"Coverage\"></a>\n\n## Technology Stack and Features\n\n- ⚡ [**FastAPI**](https://fastapi.tiangolo.com) for the Python backend API.\n    - \U0001F9F0 [SQLModel](https://sqlmodel.tiangolo.com) for the Python SQL database interactions (ORM).\n    - \U0001F50D [Pydantic](https://docs.pydantic.dev), used by FastAPI, for the data validation and settings management.\n    - \U0001F4BE [PostgreSQL](https://www.postgresql.org) as the SQL database.\n- \U0001F680 [React](https://react.dev) for the frontend.\n    - \U0001F483 Using TypeScript, hooks, Vite, and other parts of a modern frontend stack.\n    - \U0001F3A8 [Chakra UI](https://chakra-ui.com) for the frontend components.\n    - \U0001F916 An automatically generated frontend client.\n    - \U0001F987 Dark mode support.\n- \U0001F40B [Docker Compose](https://www.docker.com) for development and production.\n- \U0001F512 Secure password hashing by default.\n- \U0001F511 JWT token authentication.\n- \U0001F4EB Email based password recovery.\n- ✅ Tests with [Pytest](https://pytest.org).\n- \U0001F4DE [Traefik](https://traefik.io) as a reverse proxy / load balancer.\n- \U0001F6A2 Deployment instructions using Docker Compose, including how to set up a frontend Traefik proxy to handle automatic HTTPS certificates.\n- \U0001F3ED CI (continuous integration) and CD (continuous deployment) based on GitHub Actions.\n\n### Dashboard Login\n\n[![API docs](img/login.png)](https://github.com/tiangolo/full-stack-fastapi-template)\n\n### Dashboard - Admin\n\n[![API docs](img/dashboard.png)](https://github.com/tiangolo/full-stack-fastapi-template)\n\n### Dashboard - Create User\n\n[![API docs](img/dashboard-create.png)](https://github.com/tiangolo/full-stack-fastapi-template)\n\n### Dashboard - Items\n\n[![API docs](img/dashboard-items.png)](https://github.com/tiangolo/full-stack-fastapi-template)\n\n### Dashboard - User Settings\n\n[![API docs](img/dashboard-user-settings.png)](https://github.com/tiangolo/full-stack-fastapi-template)\n\n### Dashboard - Dark Mode\n\n[![API docs](img/dashboard-dark.png)](https://github.com/tiangolo/full-stack-fastapi-template)\n\n### Interactive API Documentation\n\n[![API docs](img/docs.png)](https://github.com/tiangolo/full-stack-fastapi-template)\n\n## How To Use It\n\nYou can **just fork or clone** this repository and use it as is.\n\n✨ It just works. ✨\n\n### How to Use a Private Repository\n\nIf you want to have a private repository, GitHub won't allow you to simply fork it as it doesn't allow changing the visibility of forks.\n\nBut you can do the following:\n\n- Create a new GitHub repo, for example `my-full-stack`.\n- Clone this repository manually, set the name with the name of the project you want to use, for example `my-full-stack`:\n\n```bash\ngit clone git@github.com:tiangolo/full-stack-fastapi-template.git my-full-stack\n```\n\n- Enter into the new directory:\n\n```bash\ncd my-full-stack\n```\n\n- Set the new origin to your new repository, copy it from the GitHub interface, for example:\n\n```bash\ngit remote set-url origin git@github.com:octocat/my-full-stack.git\n```\n\n- Add this repo as another \"remote\" to allow you to get updates later:\n\n```bash\ngit remote add upstream git@github.com:tiangolo/full-stack-fastapi-template.git\n```\n\n- Push the code to your new repository:\n\n```bash\ngit push -u origin master\n```\n\n### Update From the Original Template\n\nAfter cloning the repository, and after doing changes, you might want to get the latest changes from this original template.\n\n- Make sure you added the original repository as a remote, you can check it with:\n\n```bash\ngit remote -v\n\norigin    git@github.com:octocat/my-full-stack.git (fetch)\norigin    git@github.com:octocat/my-full-stack.git (push)\nupstream    git@github.com:tiangolo/full-stack-fastapi-template.git (fetch)\nupstream    git@github.com:tiangolo/full-stack-fastapi-template.git (push)\n```\n\n- Pull the latest changes without merging:\n\n```bash\ngit pull --no-commit upstream master\n```\n\nThis will download the latest changes from this template without committing them, that way you can check everything is right before committing.\n\n- If there are conflicts, solve them in your editor.\n\n- Once you are done, commit the changes:\n\n```bash\ngit merge --continue\n```\n\n### Configure\n\nYou can then update configs in the `.env` files to customize your configurations.\n\nBefore deploying it, make sure you change at least the values for:\n\n- `SECRET_KEY`\n- `FIRST_SUPERUSER_PASSWORD`\n- `POSTGRES_PASSWORD`\n\nYou can (and should) pass these as environment variables from secrets.\n\nRead the [deployment.md](./deployment.md) docs for more details.\n\n### Generate Secret Keys\n\nSome environment variables in the `.env` file have a default value of `changethis`.\n\nYou have to change them with a secret key, to generate secret keys you can run the following command:\n\n```bash\npython -c \"import secrets; print(secrets.token_urlsafe(32))\"\n```\n\nCopy the content and use that as password / secret key. And run that again to generate another secure key.\n\n## How To Use It - Alternative With Copier\n\nThis repository also supports generating a new project using [Copier](https://copier.readthedocs.io).\n\nIt will copy all the files, ask you configuration questions, and update the `.env` files with your answers.\n\n### Install Copier\n\nYou can install Copier with:\n\n```bash\npip install copier\n```\n\nOr better, if you have [`pipx`](https://pipx.pypa.io/), you can run it with:\n\n```bash\npipx install copier\n```\n\n**Note**: If you have `pipx`, installing copier is optional, you could run it directly.\n\n### Generate a Project With Copier\n\nDecide a name for your new project's directory, you will use it below. For example, `my-awesome-project`.\n\nGo to the directory that will be the parent of your project, and run the command with your project's name:\n\n```bash\ncopier copy https://github.com/tiangolo/full-stack-fastapi-template my-awesome-project --trust\n```\n\nIf you have `pipx` and you didn't install `copier`, you can run it directly:\n\n```bash\npipx run copier copy https://github.com/tiangolo/full-stack-fastapi-template my-awesome-project --trust\n```\n\n**Note** the `--trust` option is necessary to be able to execute a [post-creation script](https://github.com/tiangolo/full-stack-fastapi-template/blob/master/.copier/update_dotenv.py) that updates your `.env` files.\n\n### Input Variables\n\nCopier will ask you for some data, you might want to have at hand before generating the project.\n\nBut don't worry, you can just update any of that in the `.env` files afterwards.\n\nThe input variables, with their default values (some auto generated) are:\n\n- `project_name`: (default: `\"FastAPI Project\"`) The name of the project, shown to API users (in .env).\n- `stack_name`: (default: `\"fastapi-project\"`) The name of the stack used for Docker Compose labels and project name (no spaces, no periods) (in .env).\n- `secret_key`: (default: `\"changethis\"`) The secret key for the project, used for security, stored in .env, you can generate one with the method above.\n- `first_superuser`: (default: `\"admin@example.com\"`) The email of the first superuser (in .env).\n- `first_superuser_password`: (default: `\"changethis\"`) The password of the first superuser (in .env).\n- `smtp_host`: (default: \"\") The SMTP server host to send emails, you can set it later in .env.\n- `smtp_user`: (default: \"\") The SMTP server user to send emails, you can set it later in .env.\n- `smtp_password`: (default: \"\") The SMTP server password to send emails, you can set it later in .env.\n- `emails_from_email`: (default: `\"info@example.com\"`) The email account to send emails from, you can set it later in .env.\n- `postgres_password`: (default: `\"changethis\"`) The password for the PostgreSQL database, stored in .env, you can generate one with the method above.\n- `sentry_dsn`: (default: \"\") The DSN for Sentry, if you are using it, you can set it later in .env.\n\n## Backend Development\n\nBackend docs: [backend/README.md](./backend/README.md).\n\n## Frontend Development\n\nFrontend docs: [frontend/README.md](./frontend/README.md).\n\n## Deployment\n\nDeployment docs: [deployment.md](./deployment.md).\n\n## Development\n\nGeneral development docs: [development.md](./development.md).\n\nThis includes using Docker Compose, custom local domains, `.env` configurations, etc.\n\n## Release Notes\n\nCheck the file [release-notes.md](./release-notes.md).\n\n## License\n\nThe Full Stack FastAPI Template is licensed under the terms of the MIT license.\n"
fsprojects/SwaggerProvider: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:7601:205FEA8:3441A34:66148CBC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cebe/yii2-app-api: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:294753D:3EE8640:66148A9B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cdimascio/express-openapi-validator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B65C043:11B3B4DE:66148A1D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cebe/yii2-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:37394E5:55AE9B1:66148A9C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cdimascio/generator-express-no-stress: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD9C860:127230F9:66148A3C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
dansharisan/larapiauth: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:836C:22BBDFD:37CBC12:66148B3B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cdimascio/generator-express-no-stress-typescript: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:2375E42:38D15A9:66148A5B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
namsor/namsor-r-sdk2: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BE9AD5D:128A1914:66148F43.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
lezhnev74/openapi-psr7-validator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  27C0:38313E:383C969:56EC92B:66148DE3.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Pylons/pyramid_openapi3: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:375751E:5588F1E:66148818.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Redocly/create-openapi-repo: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:231D583:384D985:66148839.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mrin9/RapiPdf: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2806:D3E08:3B3BF7C:5B969B6:66148F04.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Redocly/redoc: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:23225F5:3855165:66148858.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
deepmap/oapi-codegen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B69ED6D:11BA03D9:66148B7A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
sugarkubes/generators: "# Rest/GraphQL APIs + React Components Generator \U0001F525\n\n[![Buy Ligit License](https://s3.us-west-1.wasabisys.com/public.sugarkubes/ligit_embed.svg)](https://ligit.dev)\n[![Follow on Twitter](https://img.shields.io/twitter/follow/andrewpierno.svg?label=follow)](https://twitter.com/andrewpierno)\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/sugarkubes/generators.svg)](http://isitmaintained.com/project/sugarkubes/generators \"Average time to resolve an issue\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/sugarkubes/generators.svg)](http://isitmaintained.com/project/sugarkubes/generators \"Percentage of issues still open\")\n[![npm package](https://img.shields.io/npm/v/sugar-generate/latest.svg)](https://www.npmjs.com/package/sugar-generate)\n[![NPM Downloads](https://img.shields.io/npm/dt/sugar-generate.svg?style=flat)](https://npmcharts.com/compare/sugar-generate?minimal=true)\n\n\n![Sugar Generator - API Edition](https://github.com/sugarkubes/generators/blob/master/logo.png?raw=true)\n\n[![App Demo](https://img.youtube.com/vi/E7_ABK7nZT8/0.jpg)](https://www.youtube.com/watch?v=E7_ABK7nZT8)\n\n\nThis project is sponsored by\n\n[![SponsoredBy.dev](https://api.sponsoredby.dev/img/d8c4307b-ba42-400e-b475-9487c76d15c8.png)](https://api.sponsoredby.dev/link/d8c4307b-ba42-400e-b475-9487c76d15c8)\n\n# Quick Start\n\n\n1. Install the npm module\n\n```sh\n# install\nnpm i -g sugar-generate\n```\n\n2. Create a json schema save, this to **monkey.json**\n\n\n```json\n{\n  \"name\": \"monkey\",\n  \"schema\": {\n    \"name\": {\n      \"type\": \"String\",\n      \"default\": \"\"\n    },\n    \"alive\": {\n      \"type\": \"Boolean\",\n      \"default\": false\n    },\n    \"age\": {\n      \"type\": \"Number\",\n      \"default\": false\n    }\n  }\n}\n```\n\n3. Generate your api and app\n\n```sh\nsugar-generate \\\n--schema monkey.json \\\n--destination ./my-monkeys\n```\n\nBoom, you now have:\n\nAPI:\n- GraphQL API\n- REST API\n- Working Tests\n\nAPP:\n- React create item form\n- React table that supports\n  - search\n  - sort\n  - filter\n  - pagination\n  - edit item\n  - create item\n\n\n### Start the API\n\n```sh\ncd ./my-monkeys/api\nnpm i\nnpm run start\n\n# http://localhost:7777\n```\n\n### Start the APP\n\n```sh\ncd ./my-monkeys/app\nnpm i\nnpm run dev\n\n# http://localhost:3000\n```\n\n### Behold Magic\n\nA fully functioning react table and form with searching sorting filtering, editing, adding, global search, download, and refresh.\n\n![SugarKubes Generated App](https://github.com/sugarkubes/generators/blob/master/table-component.png?raw=true)\n\n# Links\n\n[GraphQL is on localhost:7777/graphql](http://localhost:7777/graphql)\n\n[Swagger is on localhost:7777](http://localhost:7777)\n\n[APP is on localhost:3000](http://localhost:3000)\n\n[API is on localhost:7777](http://localhost:3000)\n\n# Documentation\n\n[API Documentation (generated back end)](https://github.com/sugarkubes/generators/wiki/API)\n\n\n[App Documentation (generated front end)](https://github.com/sugarkubes/generators/wiki/APP)\n\n## Experimental Embeddable Components\n\n**What if you could remotely update your components without having to push new code?**\n\nThats one question we're exploring with the experimental embeddable react components. There are of course cool ways to serve single pages as serverless functions but what's cooler would be a way for even non-technical people to update a database schema and a form or table in real time without writing any code.\n\n\n- Each component comes out in an embeddable format under */embed*\n- TBD - How to easily deploy these and use them.\n-\n\n\n## Updates\n\n- 8/5/19 support for mongo arrays in documents\n"
ErikWittern/swagger-snippet: >
  # OpenAPI Snippet

  **Generates code snippets from Open API (previously Swagger) documents.**


  This package takes as input an OpenAPI v2.0 or v3.0.x document. It translates
  the document into an [HTTP Archive 1.2 request
  object](http://www.softwareishard.com/blog/har-12-spec/#request). It uses the
  [HTTP Snippet](https://github.com/Mashape/httpsnippet) library to generate
  code snippets for every API endpoint (URL path + HTTP method) defined in the
  specification in various languages & tools (`cURL`, `Node`, `Python`, `Ruby`,
  `Java`, `Go`, `C#`...), or for selected endpoints.


  ## Installation


  ```bash

  npm i openapi-snippet

  ```


  ## Build OpenAPI Snippet (for use in browser)

  Clone this repository. Install required dependencies:


  ```bash

  npm i

  ```


  Build a minified version of OpenAPI Snippet (`openapisnippet.min.js`):


  ```bash

  npm run build

  ```


  ## Usage


  ### As a module


  ```javascript

  const OpenAPISnippet = require('openapi-snippet')


  // define input:

  const openApi = ... // Open API document

  const targets = ['node_unirest', 'c'] // array of targets for code snippets.
  See list below...


  try {
    // either, get snippets for ALL endpoints:
    const results = OpenAPISnippet.getSnippets(openApi, targets) // results is now array of snippets, see "Output" below.

    // ...or, get snippets for a single endpoint:
    const results2 = OpenAPISnippet.getEndpointSnippets(openApi, '/users/{user-id}/relationship', 'get', targets)
  } catch (err) {
    // do something with potential errors...
  }

  ```


  ### Within the browser


  Include the `openapisnippet.min.js` file created after building the the
  library (see above) in your HTML page:


  ```html

  <script type="text/javascript" src="path/to/openapisnippet.min.js"></script>

  ```


  Use OpenAPI Snippet, which now defines the global variable `OpenAPISnippet`.



  ## Output

  The output for every endpoint is an object, containing the `method`, `url`, a
  human-readable `description`, and the corresponding `resource` - all of these
  values stem from the OpenAPI document. In addition, within the `snippets`
  list, an object containing a code snippet for every chosen target is provided.
  As of version `0.4.0`, the snippets include exemplary payload data.


  If `getSnippets` is used, an array of the above described objects is returned.


  For example:


  ```js

  [
    // ...
    {
      "method": "GET",
      "url": "https://api.instagram.com/v1/users/{user-id}/relationship",
      "description": "Get information about a relationship to another user.",
      "resource": "relationship",
      "snippets": [
        {
          "id": "node",
          "title": "Node + Native",
          "content": "var http = require(\"https\");\n\nvar options = {..."
        }
      ]
    }
    // ...
  ]

  ```


  ## Targets

  Currently, OpenAPI Snippet supports the following targets (depending on the
  HTTP Snippet library):


  * `c_libcurl` (default)

  * `csharp_restsharp` (default)

  * `go_native` (default)

  * `java_okhttp`

  * `java_unirest` (default)

  * `javascript_jquery`

  * `javascript_xhr` (default)

  * `node_native` (default)

  * `node_request`

  * `node_unirest`

  * `objc_nsurlsession` (default)

  * `ocaml_cohttp` (default)

  * `php_curl` (default)

  * `php_http1`

  * `php_http2`

  * `python_python3` (default)

  * `python_requests`

  * `ruby_native` (default)

  * `shell_curl` (default)

  * `shell_httpie`

  * `shell_wget`

  * `swift_nsurlsession` (default)


  If only the language is provided (e.g., `c`), the default library will be
  selected.



  License: MIT
airtasker/spot: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  27C1:751C:D778E86:15AEC107:6614891E.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
42Crunch/vscode-openapi: >
  # OpenAPI Tools for Visual Studio Code


  This [Visual Studio Code](https://code.visualstudio.com/) (VS Code)
  [extension](https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi)
  adds rich support for the [OpenAPI
  Specification](https://github.com/OAI/OpenAPI-Specification) (OAS) (formerly
  known as the Swagger specification). The plugin supports code navigation,
  linting, SwaggerUI or ReDoc preview, IntelliSense, schema enforcement and
  generation, schema definition links, snippets as well as static and dynamic
  security analysis.


  The extension integrates with [42Crunch
  Audit](https://42crunch.com/free-user-faq/) and [42Crunch
  Scan](https://42crunch.com/free-user-faq/), so that you can check the quality
  and the security of your APIs directly in VS Code.


  If you are a 42Crunch customer or have an account of a 42Crunch platform, you
  can also directly access API collections and security reports through the
  integrated platform navigator.


  Both OAS v2 and v3.0.x are supported, in JSON or YAML format.


  ## Quick start


  After installing the plugin, open any JSON or YAML file that contains an
  OpenAPI definition. The plugin automatically detects that this is an OpenAPI
  file, and the **/API** button is shown in the left-hand panel.


  ![OpenAPI Explorer](./images/OpenAPI%20Explorer.PNG)


  We also encourage you to watch [this
  video](https://42crunch.com/tutorial-openapi-swagger-extension-vs-code/#Introducing-OpenAPI-Editor)
  that gives you a full tour of the editor and its different features.


  ## Editor features


  This extension makes it easier and faster to navigate your OpenAPI
  definitions, especially when they get longer.


  You can home in on elements in the OpenAPI explorer view, or jump directly to
  the target of a reference in the API. You can also add new elements to your
  API directly in the OpenAPI explorer directly where they are needed. Filling
  in the details is quicker with IntelliSense support for OpenAPI elements.


  ### Creating OpenAPI files


  1. Press **Ctrl+Shift+P** on Windows or Linux, or **Cmd+Shift+P** on a Mac.

  2. In the command prompt, start typing `new openapi`, and click the
  corresponding command to create either an OAS v2 or v3 template file.

  3. Use the OpenAPI explorer to populate the template with new paths and other
  elements as needed.

  4. Save the file to your disk to fully enable IntelliSense.


  ![Create new OpenAPI file from a
  template](./images/New%20OpenAPI%20file.gif?raw=true)


  ![](https://img.shields.io/badge/Learning%20More!-red) Watch this
  [video](https://42crunch.com/tutorial-openapi-swagger-extension-vs-code/#Navigating-OpenAPI-Explorer)
  on editor basics.


  ### Navigating an API definition


  1. Open an OpenAPI file.

  2. Click the OpenAPI button to switch to the OpenAPI explorer view.

  3. Expand the sections and elements in the file as needed, and click the ones
  you want to jump to in the editor.


  ![Navigation inside the OpenAPI file](./images/Navigation.gif?raw=true)


  ### Add new elements in the OpenAPI explorer


  1. In OpenAPI explorer pane, go to the section where you want to add a new
  element and right on the relevant node to open a context menu.

  2. Click the item you want to add from the dropdown list.


  ![Add new API path and verb](./images/Add%20paths%20and%20verbs.gif?raw=true)


  ### Use IntelliSense


  As you start typing OpenAPI elements or their values, the context-sensitive
  list of available options is displayed in the IntelliSense menu. In JSON
  OpenAPI files, just type double-quote (`"`) to show the menu, and type further
  to filter the list. In YAML OpenAPI files, start typing the property name.


  You can also use the corresponding VS Code hotkey (**Ctrl+Space** on Windows,
  **Cmd+Space** on Mac) to open the IntelliSense menu.


  ![IntelliSense for OpenAPI
  editing](https://github.com/42Crunch/vscode-openapi/blob/master/images/Intellisense.gif?raw=true)


  ### Jump to a reference


  Use Go to Definition to locate the targets of references easily. To jump to
  view the definition from a reference in your API, either **Ctrl+click** a
  reference, or right-click a reference and click **Go to Definition** in the
  shortcut menu.


  ![Go to definition](./images/Go%20to%20Definition.gif?raw=true)


  ### Sort entries in the navigation pane


  By default, entries in the OpenAPI Explorer pane are sorted alphabetically. If
  you want to instead have them sorted in the order they are in the OpenAPI
  file, change the corresponding setting:


  1. On the **File** menu, click **Preferences > Settings**.

  2. Expand the **Extensions** section and click **OpenAPI**.

  3. Clear the checkbox **Alphabetically sort contents of OpenAPI explorer
  outlines**.


  ![](./images/OutlineSettings.png)


  ### Preview OpenAPI documentation


  You can get a documentation-style preview of the API you are editing by
  clicking the Preview button <img src="./images/Preview_button.png" width=19 />
  at the top right:


  ![OpenAPI Preview Pane](./images/OASPreview.png)


  The extension supports two popular OpenAPI documentation generators:
  [SwaggerUI](https://swagger.io/tools/swagger-ui/) and
  [ReDoc](https://github.com/Redocly/redoc).


  To change the default OpenAPI Preview rendering engine:


  1. On the **File** menu, click **Preferences > Settings**.

  2. Expand the **Extensions** section and click **OpenAPI**.

  3. Pick the option of your choice from the **Default Preview Rendered**
  dropdown list.


  ![OpenAPI Preview Pane](./images/Change_OpenAPI_Preview_engine.png)


  ### Execute operations with "Try it"


  With "Try it", you can invoke operations defined in your OpenAPI directly from
  VS Code:


  - Click on "Try it" in the code lens which is displayed right below the HTTP
  verb (e.g. "get", "post") of your operation and in the examples section.

  - The payload data will be generated based on the request JSON Schema, or the
  first example available. You can edit this information before sending the
  request.


  ![TryIt view](./images/tryit.png)


  Try it comes with a number of limitations:


  - Sending files is not supported

  - It works best with text-based responses, such as JSON

  - Binary/image responses will be shown as text


  ### Generate JSON schemas based on the response content


  "Try it" can be used to generate JSON Schema based on the body of the
  response.


  - Select "Tools" tab in the TryIt response

  - Click "Generate schema" button.


  ![TryIt response tools](images/tryit-schema.png)


  ## Static API Security Testing


  You can use this OpenAPI extension to check the quality and security of your
  API definition as you work on it. This feature is powered by 42Crunch
  [Audit](https://docs.42crunch.com/latest/content/concepts/api_contract_security_audit.htm?utm_campaign=IDE&utm_medium=referral&utm_source=vscode).
  42Crunch Audit performs a static analysis of the API definition that includes
  more than 300 checks on best practices and potential vulnerabilities related
  to authentication, authorization as well as data constraints.


  ![](https://img.shields.io/badge/Learning%20More!-green) Watch this
  [video](https://42crunch.com/free-user-faq/#Free-API-Security-Testing-FAQs-00)
  to learn more about 42Crunch Audit.


  You can run the audit service in freemium or platform mode:


  - **Using our freemium centralized service**: this service is a fully featured
  version of the audit, but with usage limits. In this mode, OAS files are sent
  to the service, audited and a report is returned. This is a stateless service:
  **we do not keep the OpenAPI file, nor the report.**

  - New! **Using the 42Crunch CLI**: in this mode, audits are performed locally
  (on the user's machine). This is only available to <u>freemium</u> users for
  now. Support for local audit/scans using a platform API token will be
  available soon. In this mode, **OpenAPI files and reports are kept locally**.

  - **Using 42Crunch SaaS platform**: this requires an account on a 42Crunch
  platform, which is available to customers and to prospects evaluating our
  product. In this case, you need to supply your platform URL and an IDE token
  (which can be created from the platform home page). You can specify those
  settings by invoking `42Crunch: Update platform credentials` from the command
  palette.


  ![IDE-PlatformIntegration](./images/IDE-PlatformIntegration.png)


  ### Getting a Freemium Token


  To run Security Audit from VS Code, you need a token. The first time you try
  to audit or scan an API, you are asked to provide your email address or an API
  token from the platform.


  Once you supply the address, the extension requests the token to be sent to
  your mailbox. Paste the token you received in the prompt in VS Code, and you
  are all set.


  Watch this short
  [video](https://42crunch.com/free-user-faq/#Free-API-Security-Testing-FAQs-02)
  which takes you through those steps.


  ### Running an audit


  You can use OpenAPI extension to check the quality of your API as you work on
  it. You can run the audit directly from VS Code by clicking the **42C** button
  in the upper right corner. Alternatively, you can run an audit for an
  individual endpoint.


  ![](./images/StartAudit.png)


  ### Navigating the issues in the audit report


  After the audit finishes, you get the audit report directly in the VS Code
  view, side by side with your code. The report viewer provides handy ways to
  navigate the found issues, even if the report is quite long.


  #### Priority issues


  Look here for issues that require the most attention.


  - **Most Common issues**: this list contains issues that are occuring the
  most, and how many times they are repeated.

  - **Opportunities**: this list contains issues that, if fixed, will most
  contribute to raise the audit score.


  Those two lists will often overlap and in certain cases be identical, but this
  is totally normal.


  ![AuditIssuesList](./images/AuditIssuesList.png)


  #### Full issue list


  The full issue list contains all issues found. The list can be filtered in two
  ways:


  - **Using the security gate (SQG) toggle**: an SQG enforces enterprise
  compliance and hightlights issues that are offending the requirements
  established, such as a minimal score, issues severity or specific issues (e.g.
  an API key is used when only OAuth is allowed across the enterprise). When the
  toggle is on, only the issues affecting the SQG status are shown.


  ![](https://img.shields.io/badge/Note%20-blue) SQG results are not visible yet
  to all Freemium users.


  ![AuditIssuesList-Full](./images/AuditIssuesList-Full.png)


  - **Using the filtering options**: you can also use filtering options to
  drill-down into the list such as severity, category or even a specific issue
  type.


  #### Issues details


  For each issue, you have access to full information about the issue, why it is
  relevant and recommendations on how to address the issue.


  ![](https://img.shields.io/badge/Learning%20More!-green) Watch this
  [video](https://42crunch.com/free-user-faq/#Free-API-Security-Testing-FAQs-2)
  to learn more about audit and how to navigate issues.


  ### Fixing issues


  Many of the issues reported by 42Crunch Audit have fixes associated with them.
  These are code snippets that you can insert into the OpenAPI file and then
  customize with the appropriate value.


  1. Cick some of the error lines in your OpenAPI file to bring up the QuickFix
  blue icon on the left of the line.

  2. Click the Quickfix icon and select the fix to apply.

  3. Tweak the values in the inserted code snippet as you see fit.


  ![Quick Fixes in VSCode](./images/Quick_Fixes_in_VSCode.gif)


  ## (New!) Dynamic API Security testing


  42Crunch Audit performs a security analysis that does not require any live
  API, just the definition itself. 42Crunch Scan leverages the OpenAPI
  definition to:


  - Test the resilience and behavior of APIs by automatically generating
  security tests from the APIs' OpenAPI definition. Scan reproduces the typical
  behavior of a hacker by injecting bad payloads, bad tokens, and using invalid
  HTTP verbs and paths. This helps detect vulnerabilities early in the API life
  cycle, especially those associated with the [OWASP API Security Top
  10](https://apisecurity.io/owasp-api-security-top-10/owasp-api-security-top-10-project/).

  - Validate that the implementation of the API conforms to its established
  contract: Scan checks all responses against the OpenAPI definition and detects
  unexpected responses and data leaks.


  ![](https://img.shields.io/badge/Learning%20More!-Blue) Watch this
  [video](https://42crunch.com/free-user-faq/?utm_campaign=IDE&utm_medium=referral&utm_source=vscode#Free-API-Security-Testing-FAQs-4)
  to learn more about 42Crunch Scan.


  APIs which thoroughly enforce compliance to an established contract are far
  more resilient to all types of attacks.


  ![](https://img.shields.io/badge/Important-red) You must only use 42Crunch
  Scan against APIs that you own, not those of third parties.


  ### Launching 42Crunch Scan


  Scans are run at the operation level only. We recommend you use the 42Crunch
  API Security Testing Binary to run scans. The alternative is to run a docker
  image locally. 42Crunch customers can also leverage our [scand
  manager](https://github.com/42Crunch/scand-manager), by deploying an
  API-driven scan engine on Kubernetes.


  In order to run a scan, you will need :


  - **A credential** : most likely, your API is using some form of
  authentication, like an API Key or token. You need a valid credential to
  provide to the scan engine.


  - **The URL** when the API is deployed.

    ![](https://img.shields.io/badge/Warning-orange) We strongly recommend that you do <u>not</u> target a production system. While the tool does not try to inject malicious payloads, it is possible that the API implementation is not resilient enough to handle the tests and may crash or behave unexpectedly.

  When you first launch a scan, you are presented with the scan configuration
  viewer. The scan configuration is generated automatically from the OpenAPI
  file you chose to scan.


  - For each operation in the OpenAPI file, a request is created. You can test
  individual requests using the **Try** button top-right.

    ![](./images/ScantryIt.png)

  - Requests can be arranged into testing scenarios: a scenario combines one or
  multiple requests, for example you need to create a resource before you can
  view it. The editor allows you to extract data as variables from a request
  execution to inject it into the next step.

    Similarly to requests, you can test an individual scenario to ensure it is built correctly before starting a scan: the scan engine will execute the scenario and if successful, launch automatically dozens of tests using the data provided in the OpenAPI file. The scan will send bad verbs, bad data types, bad data formats as well as authentication tests.

    ![](/Volumes/MYDATA/Product/vscode-openapi/images/ScanScenarios.png)

  Once the scan has run, you are presented with a results page. The summary
  shows if the scan got a testing baseline by running the HappyPath test.
  Additional testing results are visible from the tests list. For each issue,
  you can easily reproduce the problem using a curl request.


  ![](./images/ScanReport.gif)


  ## Miscellaneous commands


  - You can load results of Security Audit from a file for a currently open
  OpenAPI file by running command `42Crunch: Load Security Audit report from
  file` from the command palette


  ## Network requirements


  To execute the 42Crunch Freemium services, you need access to the following
  URL: https://stateless.42crunch.com. You may need to ask your administrators
  to add a firewall rule to allow the connection.


  ## Known issues


  - For new files, IntelliSense does not work until you save the file. File
  extension must be `.json` or `.yaml`.

  - When running 42Crunch Scan on a host with incorrect clock, the scan can fail
  with the message `cannot send the scan report : rpc error: code =
  InvalidArgument desc = invalid input`, to resolve the issue make sure your
  clock is correctly set.


  ## Feedback


  Submit your bug reports at [GitHub project
  Issues](https://github.com/42Crunch/vscode-openapi/issues).


  And, needless to say, your reviews at [VS Code
  marketplace](https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi&ssr=false#review-details)
  mean the world to us!
mnf-group/openapimux: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3981561:58AFBB4:66148E85.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
leosussan/fastapi-gino-postgres: >
  # fastapi-gino-arq-uvicorn

  High-performance Async REST API, in Python. FastAPI + GINO + Arq + Uvicorn
  (powered by Redis & PostgreSQL).


  ## Get Started

  ### Run Locally

  _NOTE: You must have PostgreSQL & Redis running locally._


  1. Clone this Repository. `git clone
  https://github.com/leosussan/fastapi-gino-arq-uvicorn.git`

  2. Run `pipenv install --dev` from root. (Run `pip install pipenv` first, if
  necessary.)

  3. Make a copy of `.dist.env`, rename to `.env`. Fill in PostgreSQL, Redis
  connection vars.

  4. Generate DB Migrations: `alembic revision --autogenerate`. It will be
  applied when the application starts. You can trigger manually with `alembic
  upgrade head`.

  5. Run:
      - FastAPI Application:
          * _For Active Development (w/ auto-reload):_ Run locally with `pipenv run uvicorn app.main:app --reload `
          * _For Debugging (compatible w/ debuggers, no auto-reload):_ Configure debugger to run `python app/main.py`.
      - Background Task Worker:
          * _For Active Development:_ Run with `pipenv run arq app.worker.Worker --watch ./`

  ### Run Locally with Docker-Compose

  1. Clone this Repository. `git clone
  https://github.com/leosussan/fastapi-gino-arq-uvicorn.git`

  2. Generate a DB Migration: `alembic revision --autogenerate`.*

  3. Run locally using docker-compose. `docker-compose -f
  docker-compose.local.yml -f docker-compose.worker.yml -f docker-compose.yml up
  --build`.


  *`app/settings/prestart.sh` will run migrations for you before the app starts.


  ### Build Your Application

  * Create routes in `/app/routes`, import & add them to the `ROUTERS` constant
  in  `/app/main.py`

  * Create database models to `/app/models/orm`, add them to
  `/app/models/orm/migrations/env.py` for migrations

  * Create pydantic models in `/app/models/pydantic`

  * Store complex db queries in `/app/models/orm/queries`

  * Store complex tasks in `app/tasks`.

  * Add / edit globals to `/.env`, expose & import them from
  `/app/settings/globals.py`
      * Use any coroutine as a background function: store a reference in the `ARQ_BACKGROUND_FUNCTIONS` env.
      * Set `SENTRY_DSN` in your environment to enable Sentry.
  * Define code to run before launch (migrations, setup, etc) in
  `/app/settings/prestart.sh`


  ## Features

  ### Core Dependencies

  * **FastAPI:** touts performance on-par with NodeJS & Go + automatic Swagger +
  ReDoc generation. 

  * **GINO:** built on SQLAlchemy core. Lightweight, simple, asynchronous ORM
  for PostgreSQL.

  * **Arq:** Asyncio + Redis = fast, resource-light job queuing & RPC.

  * **Uvicorn:** Lightning-fast, asynchronous ASGI server.

  * **Optimized Dockerfile:** Optimized Dockerfile for ASGI applications, from
  https://github.com/tiangolo/uvicorn-gunicorn-docker.


  #### Additional Dependencies

  * **Pydantic:** Core to FastAPI. Define how data should be in pure, canonical
  python; validate it with pydantic. 

  * **Alembic:** Handles database migrations. Compatible with GINO.

  * **SQLAlchemy_Utils:** Provides essential handles & datatypes. Compatible
  with GINO.

  * **Sentry:** Open-source, cloud-hosted error + event monitoring.

  * **PostgreSQL:** Robust, fully-featured, scalable, open-source.

  * **Redis:** Fast, simple, broker for the Arq task queue.
Cornutum/tcases: >
  # Tcases: A Model-Based Test Case Generator #


  [![Maven](https://img.shields.io/badge/maven-4.0.5-green.svg)](https://search.maven.org/search?q=tcases-shell)

  [![Javadoc](https://img.shields.io/badge/javadoc-4.0.5-green.svg)](https://javadoc.io/doc/org.cornutum.tcases/tcases-shell)


  ## What's New? ##
    * The latest version ([Tcases 4.0.5](ReleaseNotes.md#405)) is now available at the Maven Central Repository.
      See [*How To Download Tcases*](HowToDownload.md) for download instructions.

    * Having trouble with Tcases? Check out [these tips](./Troubleshooting-FAQs.md).

    * Got a question? Need some guidance? Start a [discussion](https://github.com/Cornutum/tcases/discussions).

  ## What Does It Do? ##


  Tcases is a tool for designing tests. It doesn't matter what kind of system
  you are testing -- UI, command line,

  [REST-ful
  API](tcases-openapi/README.md#tcases-for-openapi-from-rest-ful-to-test-ful),
  or backend.  Nor does it matter

  what level of the system you are testing -- unit, subsystem, or full system.
  You can use Tcases to design your tests in any of

  these situations. With Tcases, you define the input space for your
  system-under-test and the level of coverage that you

  want. Then Tcases generates a minimal set of test cases that meets your
  requirements.


  Tcases is primarily a tool for black-box test design. For such tests, the
  concept of "coverage" is different from structural

  testing criteria such as line coverage, branch coverage, etc. Instead, Tcases
  is guided by coverage of the input space of your

  system.


  Tcases gives you a way to define the input space for your system in a form
  that is concise but comprehensive. Then Tcases allows

  you to control the number of test cases in your sample subset by specifying
  the level of coverage you want. You can start with a

  basic level of coverage, and Tcases will generate a small set of test cases
  that touches every significant element of the input

  space. Then you can improve your tests by selectively adding coverage in
  specific high-risk areas. For example, you can specify

  pairwise coverage or higher-order combinations of selected input variables.


  ## How Does It Work? ##


  First, you create a system input definition, a document that defines your
  system as a set of functions. For each system

  function, the system input definition defines the variables that characterize
  the function input space. If you are testing a Web

  service API, you can even [generate a system input definition
  automatically](tcases-openapi/README.md#tcases-for-openapi-from-rest-ful-to-test-ful)

  from an OpenAPI definition.


  Then, you can create a generator definition. That's another document that
  defines the coverage you want for each system

  function. The generator definition is optional. You can skip this step and
  still get a basic level of coverage.


  Finally, you run Tcases. Tcases is a Java program that you can run from the
  command line or using the

  [Tcases Maven
  Plugin](http://www.cornutum.org/tcases/docs/tcases-maven-plugin/). The command
  line version of Tcases comes with built-in

  support for running using a shell script or an ant target. Using your input
  definition and your generator definition, Tcases

  generates a system test definition. The system test definition is a document
  that lists, for each system function, a set of test

  cases that provides the specified level of coverage. Each test case defines a
  specific value for every function input

  variable. Tcases generates not only valid input values that define successful
  test cases but also invalid values for the tests

  cases that are needed to verify expected error handling.


  Of course, the system test definition is not something you can execute
  directly. (Unless it was

  [derived automatically from an OpenAPI
  definition](tcases-openapi/README.md#how-do-you-run-generated-api-test-cases)!)

  But it follows a well-defined schema, which means you can use a variety of
  transformation tools to convert it into a form that

  is suitable for testing your system. For example, Tcases comes with a built-in
  transformer that converts a system test

  definition into a Java source code template for a JUnit or TestNG test class.


  ## Get Started! ##

    * **The Lowdown**
      * [Tcases: The Complete Guide](./Tcases-Guide.md#tcases-the-complete-guide)
      * [Tcases for OpenAPI](tcases-openapi/README.md#tcases-for-openapi-from-rest-ful-to-test-ful): Testing a REST-ful API? Generate test cases directly from your OpenAPI v3 definition.
      * [The Tcases Maven Plugin](http://www.cornutum.org/tcases/docs/tcases-maven-plugin/)

    * **Helpful Guides**
      * [How To Download Using Maven](HowToDownload.md)
      * [How To Setup a Tcases Web Service](./Tcases-Web-Service.md)
      * [Using The Tcases API](./Using-Tcases-API.md)
      * [Troubleshooting FAQ](./Troubleshooting-FAQs.md#troubleshooting-faqs)
      * [Release Notes](ReleaseNotes.md)

    * **More Info**
      * [Model-Driven Testing Using Tcases](ModelDrivenTestingForAgileTeams.md)
      * Javadoc: [Tcases API](http://www.cornutum.org/tcases/docs/api/index.html)

  ## Contributors ##


  Thanks to the following people, who have contributed significant improvements
  to Tcases.

    * [Kerry Kimbrough](https://github.com/kerrykimbrough) (project founder)
    * [Juglar](https://github.com/juglar)
    * [Thibault Kruse](https://github.com/tkruse)
wrannaman/generators: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:2285741:371CEF7:66149516.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
fukamachi/apispec: >
  # apispec


  [![Build
  Status](https://travis-ci.org/fukamachi/apispec.svg?branch=master)](https://travis-ci.org/fukamachi/apispec)

  [![Coverage
  Status](https://coveralls.io/repos/fukamachi/apispec/badge.svg?branch=master)](https://coveralls.io/r/fukamachi/apispec)


  A Common Lisp library for handling Web API specifications. This allows to
  validate and parse HTTP request headers, parameters and bodies with OpenAPI3
  specification.


  ## Warning


  This software is still ALPHA quality. The APIs will be likely to change.


  ## Prerequisite


  * [libyaml](http://pyyaml.org/wiki/LibYAML) for loading OpenAPI spec files.


  ## Usage


  ### Loading specification file


  ```common-lisp

  (defvar *spec*
    (apispec:load-from-file #P"docs/api.yaml"))

  (apispec:spec-version *spec*)

  ;=> "3.0.2"

  ```


  ### Getting the operation


  ```common-lisp

  (defvar *router* (apispec:spec-router *spec*))


  (apispec:find-route *router* :GET "/users/12")

  ;=> #<APISPEC/CLASSES/OPERATION:OPERATION {1003DDB073}>

  ```


  ### Parsing and Validating HTTP requests


  ```common-lisp

  (import '(lack.request:request-query-parameters
            lack.request:request-body-parameters
            lack.request:request-cookies
            apispec:request-path-parameters))

  ;; Clack application

  (defvar *app*
    (lambda (env)
      (multiple-value-bind (operation path-parameters)
          (apispec:find-route (spec-router *spec*)
                              (getf env :request-method)
                              (getf env :path-info))
        ;; Getting Lack.Request
        (let ((request (apispec:validate-request operation env
                                                 :path-parameters path-parameters)))
          ;; Write the main application here.

          ;; Accessors for getting each parameters.
          (request-query-parameters request)  ;=> Query parameters (alist)
          (request-body-parameters request)   ;=> Body parameters (alist)
          (request-path-parameters request)   ;=> Path parameters (alist)
          (request-cookies)                   ;=> Cookie parameters (alist)

          ))))

  ;; Start the server

  (clack:clackup *app*)

  ```


  ### Validating and Encoding HTTP responses


  ```common-lisp

  (import 'lack.response:make-response)


  (apispec:validate-response operation
                             (make-response 200
                                            '(:content-type "application/json")
                                            '(("id" . 3)
                                              ("name" . "初音ミク")
                                              ("is_admin" . nil))))
  ;=> (200 (:CONTENT-TYPE "application/json")
  ("{\"id\":3,\"name\":\"初音ミク\",\"is_admin\":false}"))

  ```


  ### Custom Encoder for standard objects


  ```common-lisp

  (import 'lack.response:make-response)


  ;; Custom class

  (defclass user ()
    ((id :initarg :id)
     (name :initarg :name)
     (is-admin :initarg :is-admin)))

  ;; Define APISPEC:ENCODE-OBJECT for the class

  (defmethod apispec:encode-object ((user user))
    `(("id" . ,(slot-value user 'id))
      ("name" . ,(slot-value user 'name))
      ("is_admin" . ,(slot-value user 'is-admin))))

  (defvar *yukari*
    (make-instance 'user
                   :id 14
                   :name "結月ゆかり"
                   :is-admin nil))

  (apispec:validate-response operation
                             (make-response 200
                                            '(:content-type "application/json")
                                            *yukari*))
  ;=> (200 (:CONTENT-TYPE "application/json")
  ("{\"id\":14,\"name\":\"結月ゆかり\",\"is_admin\":false}"))

  ```


  ## Examples


  See [examples/](examples/).


  ## See Also


  * [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification)

  * [Lack](https://github.com/fukamachi/lack)


  ## Author


  * Eitaro Fukamachi (e.arrows@gmail.com)


  ## Copyright


  Copyright (c) 2019 Eitaro Fukamachi (e.arrows@gmail.com)


  ## License


  Licensed under the BSD 3-Clause License.
sphinx-contrib/openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:14372A:BC0B8C2:125211D4:66149224.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
VanMoof/gopenapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:A4E47:B6525FE:11A48073:6614891A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
playpauseandstop/rororo: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:7601:20EA0C4:350F361:66149086.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
wI2L/fizz: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BFBC66F:12A55591:661494D5.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
leosussan/fastapi-gino-arq-uvicorn: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2A61269:4083E5A:66148DE2.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
dgouyette/play-api-refiner: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:14372A:BAC98D5:12342DF8:66148B7B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
ErikWittern/openapi-snippet: >
  # OpenAPI Snippet

  **Generates code snippets from Open API (previously Swagger) documents.**


  This package takes as input an OpenAPI v2.0 or v3.0.x document. It translates
  the document into an [HTTP Archive 1.2 request
  object](http://www.softwareishard.com/blog/har-12-spec/#request). It uses the
  [HTTP Snippet](https://github.com/Mashape/httpsnippet) library to generate
  code snippets for every API endpoint (URL path + HTTP method) defined in the
  specification in various languages & tools (`cURL`, `Node`, `Python`, `Ruby`,
  `Java`, `Go`, `C#`...), or for selected endpoints.


  ## Installation


  ```bash

  npm i openapi-snippet

  ```


  ## Build OpenAPI Snippet (for use in browser)

  Clone this repository. Install required dependencies:


  ```bash

  npm i

  ```


  Build a minified version of OpenAPI Snippet (`openapisnippet.min.js`):


  ```bash

  npm run build

  ```


  ## Usage


  ### As a module


  ```javascript

  const OpenAPISnippet = require('openapi-snippet')


  // define input:

  const openApi = ... // Open API document

  const targets = ['node_unirest', 'c'] // array of targets for code snippets.
  See list below...


  try {
    // either, get snippets for ALL endpoints:
    const results = OpenAPISnippet.getSnippets(openApi, targets) // results is now array of snippets, see "Output" below.

    // ...or, get snippets for a single endpoint:
    const results2 = OpenAPISnippet.getEndpointSnippets(openApi, '/users/{user-id}/relationship', 'get', targets)
  } catch (err) {
    // do something with potential errors...
  }

  ```


  ### Within the browser


  Include the `openapisnippet.min.js` file created after building the the
  library (see above) in your HTML page:


  ```html

  <script type="text/javascript" src="path/to/openapisnippet.min.js"></script>

  ```


  Use OpenAPI Snippet, which now defines the global variable `OpenAPISnippet`.



  ## Output

  The output for every endpoint is an object, containing the `method`, `url`, a
  human-readable `description`, and the corresponding `resource` - all of these
  values stem from the OpenAPI document. In addition, within the `snippets`
  list, an object containing a code snippet for every chosen target is provided.
  As of version `0.4.0`, the snippets include exemplary payload data.


  If `getSnippets` is used, an array of the above described objects is returned.


  For example:


  ```js

  [
    // ...
    {
      "method": "GET",
      "url": "https://api.instagram.com/v1/users/{user-id}/relationship",
      "description": "Get information about a relationship to another user.",
      "resource": "relationship",
      "snippets": [
        {
          "id": "node",
          "mimeType": "application/json",  // Only set for methods with a request body
          "title": "Node + Native",
          "content": "var http = require(\"https\");\n\nvar options = {..."
        }
      ]
    }
    // ...
  ]

  ```


  ## Targets

  Currently, OpenAPI Snippet supports the following
  [targets](https://github.com/Kong/httpsnippet/tree/master/src/targets)
  (depending on the HTTP Snippet library):


  * `c_libcurl` (default)

  * `csharp_restsharp` (default)

  * `csharp_httpclient`

  * `go_native` (default)

  * `java_okhttp`

  * `java_unirest` (default)

  * `javascript_jquery`

  * `javascript_xhr` (default)

  * `node_native` (default)

  * `node_request`

  * `node_unirest`

  * `objc_nsurlsession` (default)

  * `ocaml_cohttp` (default)

  * `php_curl` (default)

  * `php_http1`

  * `php_http2`

  * `python_python3` (default)

  * `python_requests`

  * `ruby_native` (default)

  * `shell_curl` (default)

  * `shell_httpie`

  * `shell_wget`

  * `swift_nsurlsession` (default)


  If only the language is provided (e.g., `c`), the default library will be
  selected.



  License: MIT
openapi-contrib/openapi3-generator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:3564:2300C06:38250CC:66148F86.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
networknt/json-schema-validator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:14372A:BB7E386:1244E707:66148F44.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
networknt/light-codegen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280B:09A3:BE9B39B:128A2244:66148F45.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
sunrise-php/http-router: >
  # HTTP router for PHP 7.1+ based on PSR-7 and PSR-15 with support for
  annotations/attributes and OpenAPI (Swagger) Specification


  **psr router**, **router with annotations**, **router with attributes**, **php
  router**.


  [![Build
  Status](https://circleci.com/gh/sunrise-php/http-router.svg?style=shield)](https://circleci.com/gh/sunrise-php/http-router)

  [![Code
  Coverage](https://scrutinizer-ci.com/g/sunrise-php/http-router/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/sunrise-php/http-router/?branch=master)

  [![Scrutinizer Code
  Quality](https://scrutinizer-ci.com/g/sunrise-php/http-router/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/sunrise-php/http-router/?branch=master)

  [![Total
  Downloads](https://poser.pugx.org/sunrise/http-router/downloads?format=flat)](https://packagist.org/packages/sunrise/http-router)

  [![Latest Stable
  Version](https://poser.pugx.org/sunrise/http-router/v/stable?format=flat)](https://packagist.org/packages/sunrise/http-router)

  [![License](https://poser.pugx.org/sunrise/http-router/license?format=flat)](https://packagist.org/packages/sunrise/http-router)


  ---


  ## Installation


  ```bash

  composer require 'sunrise/http-router:^2.15'

  ```


  ## Support for OpenAPI (Swagger) Specification (optional)


  ```bash

  composer require 'sunrise/http-router-openapi:^2.0'

  ```


  More details can be found here:
  [sunrise/http-router-openapi](https://github.com/sunrise-php/http-router-openapi).


  ## QuickStart


  This example uses other sunrise packages, but you can use e.g.
  `zend/diactoros` or any other.


  ```bash

  composer require sunrise/http-message sunrise/http-server-request

  ```


  ```php

  use Sunrise\Http\Message\ResponseFactory;

  use Sunrise\Http\Router\RouteCollector;

  use Sunrise\Http\Router\Router;

  use Sunrise\Http\ServerRequest\ServerRequestFactory;


  use function Sunrise\Http\Router\emit;


  $collector = new RouteCollector();


  // PSR-15 request handler (optimal performance):

  $collector->get('home', '/', new HomeRequestHandler());


  // or you can use an anonymous function as your request handler:

  $collector->get('home', '/', function ($request) {
      return (new ResponseFactory)->createResponse(200);
  });


  // or you can use the name of a class that implements PSR-15:

  $collector->get('home', '/', HomeRequestHandler::class);


  // or you can use a class method name as your request handler:

  // (note that such a class mayn't implement PSR-15)

  $collector->get('home', '/', [HomeRequestHandler::class, 'index']);


  // most likely you will need to use PSR-11 container:

  // (note that only named classes will be pulled from such a container)

  $collector->setContainer($container);


  $router = new Router();

  $router->addRoute(...$collector->getCollection()->all());


  $request = ServerRequestFactory::fromGlobals();

  $response = $router->handle($request);


  emit($response);

  ```


  ---


  ## Examples of using


  Study
  [sunrise/awesome-skeleton](https://github.com/sunrise-php/awesome-skeleton) to
  understand how this can be used.


  #### Strategy for loading routes from configs


  > Please note that since version 2.10.0 class `ConfigLoader` must be used.


  ```php

  use Sunrise\Http\Router\Loader\ConfigLoader;

  use Sunrise\Http\Router\Router;


  $loader = new ConfigLoader();


  // set container if necessary...

  $loader->setContainer($container);


  // attach configs...

  $loader->attach('routes/api.php');

  $loader->attach('routes/admin.php');

  $loader->attach('routes/public.php');


  // or attach a directory...

  // [!] available from version 2.2

  $loader->attach('routes');


  // or attach an array...

  // [!] available from version 2.4

  $loader->attachArray([
      'routes/api.php',
      'routes/admin.php',
      'routes/public.php',
  ]);


  // install container if necessary...

  $loader->setContainer($container);


  $router = new Router();

  $router->load($loader);


  // if the router matching should be isolated for top middlewares...

  // for example for error handling...

  // [!] available from version 2.8

  $response = $router->run($request);


  // if the router is used as a request handler

  $response = $router->handle($request);


  // if the router is used as middleware

  $response = $router->process($request, $handler);

  ```


  ```php

  /** @var Sunrise\Http\Router\RouteCollector $this */


  $this->get('home', '/', new CallableRequestHandler(function ($request) {
      return (new ResponseFactory)->createJsonResponse(200);
  }));


  // or using a direct reference to a request handler...

  $this->get('home', '/', new App\Http\Controller\HomeController());

  ```


  > Please note that since version 2.10.0 you can refer to the request handler
  in different ways.


  ```php

  /** @var Sunrise\Http\Router\RouteCollector $this */


  $this->get('home', '/', function ($request) {
      return (new ResponseFactory)->createJsonResponse(200);
  });


  $this->get('home', '/', App\Http\Controller\HomeController::class, [
      App\Http\Middleware\FooMiddleware::class,
      App\Http\Middleware\BarMiddleware::class,
  ]);


  $this->get('home', '/', [App\Http\Controller\HomeController::class, 'index'],
  [
      App\Http\Middleware\FooMiddleware::class,
      App\Http\Middleware\BarMiddleware::class,
  ]);

  ```


  #### Strategy for loading routes from descriptors (annotations or attributes)


  Install the [doctrine/annotations](https://github.com/doctrine/annotations)
  package if you will be use annotations:


  ```bash

  composer require doctrine/annotations

  ```


  > Please note that since version 2.10.0 class `DescriptorLoader` must be used.


  > Please note that since version 2.10.0 you can bind the @Rote() annotation to
  a class methods.


  ```php

  use Doctrine\Common\Annotations\AnnotationRegistry;

  use Sunrise\Http\Router\Loader\DescriptorLoader;

  use Sunrise\Http\Router\Router;


  // necessary if you will use annotations (annotations isn't attributes)...

  AnnotationRegistry::registerLoader('class_exists');


  $loader = new DescriptorLoader();


  // set container if necessary...

  $loader->setContainer($container);


  // attach a directory with controllers...

  $loader->attach('src/Controller');


  // or attach an array

  // [!] available from version 2.4

  $loader->attachArray([
      'src/Controller',
      'src/Bundle/BundleName/Controller',
  ]);


  // or attach a class only

  // [!] available from 2.10 version.

  $loader->attach(App\Http\Controller\FooController::class);


  $router = new Router();

  $router->load($loader);


  // if the router matching should be isolated for top middlewares...

  // for example for error handling...

  // [!] available from version 2.8

  $response = $router->run($request);


  // if the router is used as a request handler

  $response = $router->handle($request);


  // if the router is used as middleware

  $response = $router->process($request, $handler);

  ```


  ```php

  use Sunrise\Http\Router\Annotation as Mapping;


  #[Mapping\Prefix('/api/v1')]

  #[Mapping\Middleware(SomeMiddleware::class)]

  class SomeController {

      #[Mapping\Route('foo', path: '/foo')]
      public function foo() {
          // will be available at: /api/v1/foo
      }

      #[Mapping\Route('bar', path: '/bar')]
      public function bar() {
          // will be available at: /api/v1/bar
      }
  }

  ```


  #### Without loading strategy


  ```php

  use App\Controller\HomeController;

  use Sunrise\Http\Router\RouteCollector;

  use Sunrise\Http\Router\Router;


  $collector = new RouteCollector();


  // set container if necessary...

  $collector->setContainer($container);


  $collector->get('home', '/', new HomeController());


  $router = new Router();

  $router->addRoute(...$collector->getCollection()->all());


  // if the router matching should be isolated for top middlewares...

  // for example for error handling...

  // [!] available from version 2.8

  $response = $router->run($request);


  // if the router is used as a request handler

  $response = $router->handle($request);


  // if the router is used as middleware

  $response = $router->process($request, $handler);

  ```


  #### Error handling example


  ```php

  use Sunrise\Http\Message\ResponseFactory;

  use Sunrise\Http\Router\Exception\MethodNotAllowedException;

  use Sunrise\Http\Router\Exception\RouteNotFoundException;

  use Sunrise\Http\Router\Middleware\CallableMiddleware;

  use Sunrise\Http\Router\RequestHandler\CallableRequestHandler;

  use Sunrise\Http\Router\RouteCollector;

  use Sunrise\Http\Router\Router;

  use Sunrise\Http\ServerRequest\ServerRequestFactory;


  use function Sunrise\Http\Router\emit;


  $collector = new RouteCollector();


  $collector->get('home', '/', new CallableRequestHandler(function ($request) {
      return (new ResponseFactory)->createJsonResponse(200);
  }));


  $router = new Router();

  $router->addRoute(...$collector->getCollection()->all());


  $router->addMiddleware(new CallableMiddleware(function ($request, $handler) {
      try {
          return $handler->handle($request);
      } catch (MethodNotAllowedException $e) {
          return (new ResponseFactory)->createResponse(405);
      } catch (RouteNotFoundException $e) {
          return (new ResponseFactory)->createResponse(404);
      } catch (Throwable $e) {
          return (new ResponseFactory)->createResponse(500);
      }
  }));


  emit($router->run(ServerRequestFactory::fromGlobals()));

  ```


  #### Work with PSR-11 container


  ##### Collector


  ```php

  $collector = new RouteCollector();


  /** @var \Psr\Container\ContainerInterface $container */


  // Pass DI container to the collector...

  $collector->setContainer($container);


  // Objects passed as strings will be initialized through the DI container...

  $route = $collector->get('home', '/', HomeController::class, [
      FooMiddleware::class,
      BarMiddleware::class,
  ]);

  ```


  ##### Config loader


  ```php

  $loader = new ConfigLoader();


  /** @var \Psr\Container\ContainerInterface $container */


  // Pass DI container to the loader...

  $loader->setContainer($container);


  // All found objects which has been passed as strings will be initialized
  through the DI container...

  $routes = $loader->load();

  ```


  ##### Descriptor loader


  ```php

  $loader = new DescriptorLoader();


  /** @var \Psr\Container\ContainerInterface $container */


  // Pass DI container to the loader...

  $loader->setContainer($container);


  // All found objects will be initialized through the DI container...

  $routes = $loader->load();

  ```


  #### Descriptors cache (PSR-16)


  ```php

  $loader = new DescriptorLoader();


  /** @var \Psr\SimpleCache\CacheInterface $cache */


  // Pass a cache to the loader...

  $loader->setCache($cache);

  ```


  #### Route Annotation Example


  ##### Minimal annotation view


  ```php

  /**
   * @Route(
   *   name="api_v1_entry_update",
   *   path="/api/v1/entry/{id<@uuid>}(/{optionalAttribute})",
   *   methods={"PATCH"},
   * )
   */
  final class EntryUpdateRequestHandler implements RequestHandlerInterface

  ```


  ##### Full annotation


  ```php

  /**
   * @Route(
   *   name="api_v1_entry_update",
   *   host="api.host",
   *   path="/api/v1/entry/{id<@uuid>}(/{optionalAttribute})",
   *   methods={"PATCH"},
   *   middlewares={
   *     "App\Middleware\CorsMiddleware",
   *     "App\Middleware\ApiAuthMiddleware",
   *   },
   *   attributes={
   *     "optionalAttribute": "defaultValue",
   *   },
   *   summary="Updates an entry by UUID",
   *   description="Here you can describe the method in more detail...",
   *   tags={"api", "entry"},
   *   priority=0,
   * )
   */
  final class EntryUpdateRequestHandler implements RequestHandlerInterface

  ```


  ##### One method only


  ```php

  /**
   * @Route(
   *   name="home",
   *   path="/",
   *   method="GET",
   * )
   */
  ```


  #### Route Attribute Example


  ##### Minimal attribute view


  ```php

  use Sunrise\Http\Router\Annotation\Route;


  #[Route(
      name: 'api_v1_entry_update',
      path: '/api/v1/entry/{id<@uuid>}(/{optionalAttribute})',
      methods: ['PATCH'],
  )]

  final class EntryUpdateRequestHandler implements RequestHandlerInterface

  ```


  ##### Full attribute


  ```php

  use Sunrise\Http\Router\Annotation\Route;


  #[Route(
      name: 'api_v1_entry_update',
      host: 'api.host',
      path: '/api/v1/entry/{id<@uuid>}(/{optionalAttribute})',
      methods: ['PATCH'],
      middlewares: [
          \App\Middleware\CorsMiddleware::class,
          \App\Middleware\ApiAuthMiddleware::class,
      ],
      attributes: [
          'optionalAttribute' => 'defaultValue',
      ],
      summary: 'Updates an entry by UUID',
      description: 'Here you can describe the method in more detail...',
      tags: ['api', 'entry'],
      priority: 0,
  )]

  final class EntryUpdateRequestHandler implements RequestHandlerInterface

  ```


  ##### Additional annotations


  ```php

  use Sunrise\Http\Router\Annotation\Host;


  #[Host('admin')]

  #[Prefix('/api/v1')]

  #[Postfix('.json')]

  #[Middleware(SomeMiddleware::class)]

  final class SomeController

  {
      #[Route('foo', '/foo')]
      public function foo(ServerRequestInterface $request) : ResponseInterface
      {
          // this action will be available at:
          // http://admin.host/api/v1/foo.json
          //
          // this can be handy to reduce code duplication...
      }
  }

  ```


  ---


  ## Useful to know


  ### JSON-payload decoding


  ```php

  use Sunrise\Http\Router\Middleware\JsonPayloadDecodingMiddleware;


  $router->addMiddleware(new JsonPayloadDecodingMiddleware());

  ```


  ### Get a route by name


  ```php

  // checks if a route is exists

  $router->hasRoute('foo');


  // gets a route by name

  $router->getRoute('foo');

  ```


  ### Get a current route


  #### Through Router


  > Available from version 2.12.


  ```php

  $router->getMatchedRoute();

  ```


  #### Through Request


  > Available from version 1.x, but wasn't documented before...


  ```php

  $request->getAttribute('@route');


  // or

  $request->getAttribute(\Sunrise\Http\Router\RouteInterface::ATTR_ROUTE);

  ```


  #### Through Event


  > Available from version 2.13.


  ```php

  $eventDispatcher->addListener(RouteEvent::NAME, function (RouteEvent $event) {
      $event->getRoute();
  });

  ```


  ### Generation a route URI


  ```php

  $uri = $router->generateUri('route.name', [
      'attribute' => 'value',
  ], true);

  ```


  ### Run a route


  ```php

  $response = $router->getRoute('route.name')->handle($request);

  ```


  ### Route grouping


  Example for annotations [here](#additional-annotations).


  ```php

  $collector->group(function ($collector) {
      $collector->group(function ($collector) {
          $collector->group(function ($collector) {
              $collector->get('api.entry.read', '/{id<\d+>}', ...)
                  ->addMiddleware(...); // add the middleware(s) to the route...
          })
          ->addPrefix('/entry') // add the prefix to the group...
          ->prependMiddleware(...); // add the middleware(s) to the group...
      }, [
          App\Http\Middleware\Bar::class, // resolvable middlewares...
      ])
      ->addPrefix('/v1') // add the prefix to the group...
      ->prependMiddleware(...); // add the middleware(s) to the group...
  }, [
      App\Http\Middleware\Foo::class, // resolvable middlewares...
  ])

  ->addPrefix('/api') // add the prefix to the group...

  ->prependMiddleware(...); // add the middleware(s) to the group...

  ```


  ### Route patterns


  ```php

  $collector->get('api.entry.read',
  '/api/v1/entry/{id<\d+>}(/{optional<\w+>})');

  ```


  ##### Global route patterns


  ```php

  // @uuid pattern

  $collector->get('api.entry.read', '/api/v1/entry/{id<@uuid>}');


  // @slug pattern

  $collector->get('api.entry.read', '/api/v1/entry/{slug<@slug>}');


  // Custom patterns (available from version 2.9.0):

  \Sunrise\Http\Router\Router::$patterns['@id'] = '[1-9][0-9]*';


  // Just use the custom pattern...

  $collector->get('api.entry.read', '/api/v1/entry/{id<@id>}');

  ```


  It is better to set patterns through the router:


  ```php

  // available since version 2.11.0

  $router->addPatterns([
      '@id' => '[1-9][0-9]*',
  ]);

  ```


  ...or through the router's builder:


  ```php

  // available since version 2.11.0

  $builder->setPatterns([
      '@id' => '[1-9][0-9]*',
  ]);

  ```


  ### Hosts (available from version 2.6.0)


  > Note: if you don't assign a host for a route, it will be available on any
  hosts!


  ```php

  // move the hosts table into the settings...

  $router->addHost('public.host', 'www.example.com', ...);

  $router->addHost('admin.host', 'secret.example.com', ...);

  $router->addHost('api.host', 'api.example.com', ...);


  // ...or:

  $router->addHosts([
      'public.host' => ['www.example.com', ...],
      ...
  ]);


  // the route will available only on the `secret.example.com` host...

  $route->setHost('admin.host');


  // routes in the group will available on the `secret.example.com` host...

  $collector->group(function ($collector) {
      // some code...
  })

  ->setHost('admin.host');

  ```


  You can resolve the hostname since version 2.14.0 as follows:


  ```php

  $router->addHost('admin', 'www1.admin.example.com', 'www2.admin.example.com');


  $router->resolveHostname('www1.admin.example.com'); // return "admin"

  $router->resolveHostname('www2.admin.example.com'); // return "admin"

  $router->resolveHostname('unknown'); // return null

  ```


  Also you can get all routes by hostname:


  ```php

  $router->getRoutesByHostname('www1.admin.example.com');

  ```


  ### Route Holder


  ```php

  $route->getHolder(); // return Reflector (class, method or function)

  ```


  ### The router builder


  ```php

  $router = (new RouterBuilder)
      ->setEventDispatcher(...) // null or use to symfony/event-dispatcher...
      ->setContainer(...) // null or PSR-11 container instance...
      ->setCache(...) // null or PSR-16 cache instance... (only for descriptor loader)
      ->setCacheKey(...) // null or string... (only for descriptor loader)
      ->useConfigLoader([]) // array with files or directory with files...
      ->useDescriptorLoader([]) // array with classes or directory with classes...
      ->setHosts([]) //
      ->setMiddlewares([]) // array with middlewares...
      ->setPatterns([]) // available since version 2.11.0
      ->build();
  ```


  ### CLI commands


  ```php

  use Sunrise\Http\Router\Command\RouteListCommand;


  new RouteListCommand($router);

  ```


  ### Events


  > Available from version 2.13


  ```bash

  composer require symfony/event-dispatcher

  ```


  ```php

  use Sunrise\Http\Router\Event\RouteEvent;

  use Symfony\Component\EventDispatcher\EventDispatcher;


  $eventDispatcher = new EventDispatcher();


  $eventDispatcher->addListener(RouteEvent::NAME, function (RouteEvent $event) {
      // gets the matched route:
      $event->getRoute();
      // gets the current request:
      $event->getRequest();
      // overrides the current request:
      $event->setRequest(ServerRequestInterface $request);
  });


  $router->setEventDispatcher($eventDispatcher);

  ```


  ---


  ## Test run


  ```bash

  composer test

  ```


  ## Useful links


  * https://www.php-fig.org/psr/psr-7/

  * https://www.php-fig.org/psr/psr-15/

  * https://github.com/sunrise-php/awesome-skeleton

  * https://github.com/middlewares
RuntimeTools/chai-openapi-response-validator: >
  # OpenAPI Validators


  [![Build
  Status](https://travis-ci.com/RuntimeTools/OpenAPIValidators.svg?branch=master)](https://travis-ci.com/RuntimeTools/OpenAPIValidators)

  ![dependencies](https://img.shields.io/david/RuntimeTools/OpenAPIValidators)

  ![style](https://img.shields.io/badge/code%20style-airbnb-ff5a5f.svg)

  [![codecov](https://codecov.io/gh/RuntimeTools/OpenAPIValidators/branch/master/graph/badge.svg)](https://codecov.io/gh/RuntimeTools/OpenAPIValidators)


  Chai and Jest support for asserting that HTTP responses satisfy an OpenAPI
  spec.


  ## Problem


  If your server's behaviour doesn't match your API documentation, then you need
  to correct your server, your documentation, or both. The sooner you know the
  better.


  ## Solution


  These plugin let you automatically test whether your server's behaviour and
  documentation match. They extend Chai and Jest to support the [OpenAPI
  standard](https://swagger.io/docs/specification/about/) for documenting REST
  APIs. In your JavaScript tests, you can simply assert
  `expect(responseObject).toSatisfyApiSpec()`



  ### [Chai OpenAPI Response
  Validator](https://github.com/RuntimeTools/OpenAPIValidators/tree/master/packages/chai-openapi-response-validator#readme):


  [![downloads](https://img.shields.io/npm/dm/chai-openapi-response-validator)](https://www.npmjs.com/package/chai-openapi-response-validator)

  [![npm](https://img.shields.io/npm/v/chai-openapi-response-validator.svg)](https://www.npmjs.com/package/chai-openapi-response-validator)



  ###
  [jest-openapi](https://github.com/RuntimeTools/OpenAPIValidators/tree/master/packages/jest-openapi#readme)


  [![downloads](https://img.shields.io/npm/dm/jest-openapi)](https://www.npmjs.com/package/jest-openapi)

  [![npm](https://img.shields.io/npm/v/jest-openapi.svg)](https://www.npmjs.com/package/jest-openapi)
ahx/openapi_first: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2817:342B:AF20A0B:10FFA7DD:6614891D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
pace/bricks: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:391EB99:586FCD9:66149066.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
kiwicom/schemathesis: >
  Schemathesis

  ============


  |Build| |Coverage| |Version| |Python versions| |Docs| |Chat| |License|


  Schemathesis is a tool for testing your web applications built with Open API /
  Swagger or GraphQL specifications.


  It reads the application schema and generates test cases which will ensure
  that your application is compliant with its schema.


  The application under test could be written in any language, the only thing
  you need is a valid API schema in a supported format.


  **Supported specification versions**:


  - Swagger 2.0

  - Open API 3.0.x

  - GraphQL June 2018


  More API specifications will be added in the future.


  Built with:


  - `hypothesis`_


  - `hypothesis_jsonschema`_


  - `hypothesis_graphql`_


  - `pytest`_


  Inspired by wonderful `swagger-conformance
  <https://github.com/olipratt/swagger-conformance>`_ project.


  **Docs**: https://schemathesis.readthedocs.io/en/stable/


  **Gitter**: https://gitter.im/kiwicom/schemathesis


  If you are looking for more information:


  - `An article
  <https://code.kiwi.com/schemathesis-property-based-testing-for-api-schemas-52811fd2b0a4>`_
  about Schemathesis by **@Stranger6667**

  - `A video <https://youtu.be/1lo7idI7uq8>`_ from FlaskCon 2020 by **@hultner**


  Installation

  ------------


  To install Schemathesis via ``pip`` run the following command:


  .. code:: bash

      pip install schemathesis

  Usage

  -----


  There are two basic ways to use Schemathesis:


  - `Command Line Interface
  <https://github.com/kiwicom/schemathesis#command-line-interface>`_

  - `Writing tests in Python <https://github.com/kiwicom/schemathesis#in-code>`_


  CLI is pretty simple to use and requires no coding, in-code approach gives
  more flexibility.


  Command Line Interface

  ~~~~~~~~~~~~~~~~~~~~~~


  The ``schemathesis`` command can be used to perform Schemathesis test cases:


  .. code:: bash

      schemathesis run https://example.com/api/swagger.json

  .. image::
  https://github.com/kiwicom/schemathesis/blob/master/img/schemathesis.gif


  If your application requires authorization then you can use ``--auth`` option
  for Basic Auth and ``--header`` to specify

  custom headers to be sent with each request.


  To filter your tests by endpoint name, HTTP method, Open API tags or
  operationId you could use ``-E``, ``-M``, ``-T``, ``-O`` options respectively.


  CLI supports passing options to ``hypothesis.settings``. All of them are
  prefixed with ``--hypothesis-``:


  .. code:: bash

      schemathesis run --hypothesis-max-examples=1000 https://example.com/api/swagger.json

  To speed up the testing process Schemathesis provides ``-w/--workers`` option
  for concurrent test execution:


  .. code:: bash

      schemathesis run -w 8 https://example.com/api/swagger.json

  In the example above all tests will be distributed among 8 worker threads.


  If you'd like to test your web app (Flask or AioHTTP or FastAPI for example)
  then there is ``--app`` option for you:


  .. code:: bash

      schemathesis run --app=importable.path:app /swagger.json

  You need to specify an importable path to the module where your app instance
  resides and a variable name after ``:`` that points

  to your app. **Note**, app factories are not supported. The schema location
  could be:


  - A full URL;

  - An existing filesystem path;

  - In-app endpoint with schema.


  This method is significantly faster for WSGI apps, since it doesn't involve
  network.


  For the full list of options, run:


  .. code:: bash

      schemathesis --help
      # Or
      schemathesis run --help

  Docker

  ~~~~~~


  Schemathesis CLI also available as a docker image


  .. code:: bash

      docker run kiwicom/schemathesis:stable run http://example.com/schema.json

  To run it against localhost server add ``--network=host`` parameter:


  .. code:: bash

      docker run --network="host" kiwicom/schemathesis:stable run http://127.0.0.1/schema.json

  Pre-run CLI hook

  ################


  Sometimes you need to execute custom code before the CLI run, for example
  setup an environment,

  register custom string format strategies or modify Schemathesis behavior in
  runtime you can use ``--pre-run`` hook:


  .. code:: bash

      schemathesis --pre-run importable.path.to.module run https://example.com/api/swagger.json

  **NOTE**. This option should be passed before the ``run`` part.


  The passed value will be processed as an importable Python path, where you can
  execute your code.

  An example - https://github.com/kiwicom/schemathesis#custom-string-strategies


  Registering custom checks for CLI

  #################################


  To add a new check for the Schemathesis CLI there is a special function


  .. code:: python

      import schemathesis

      @schemathesis.register_check
      def new_check(response, case):
          # some awesome assertions!
          pass

  The registered check should accept a ``response`` with ``requests.Response`` /
  ``schemathesis.utils.WSGIResponse`` type and

  ``case`` with ``schemathesis.models.Case`` type.


  After registration, your checks will be available in Schemathesis CLI and you
  can use them via ``-c`` command line option.


  .. code:: bash

      schemathesis --pre-run module.with.checks run -c new_check https://example.com/api/swagger.json

  Additionally, checks may return ``True`` to skip the check under certain
  conditions. For example, you may only want to run checks when the

  response code is ``200``.


  .. code:: python

      import schemathesis

      @schemathesis.register_check
      def conditional_check(response, case):
          if response.status_code == 200:
              # some awesome assertions!
          else:
              # check not relevant to this response, skip test
              return True

  In-code

  ~~~~~~~


  To examine your application with Schemathesis you need to:


  - Setup & run your application, so it is accessible via the network;

  - Write a couple of tests in Python;

  - Run the tests via ``pytest``.


  Suppose you have your application running on ``http://0.0.0.0:8080`` and its

  schema is available at ``http://0.0.0.0:8080/swagger.json``.


  A basic test, that will verify that any data, that fit into the schema will
  not cause any internal server error could

  look like this:


  .. code:: python

      # test_api.py
      import requests
      import schemathesis

      schema = schemathesis.from_uri("http://0.0.0.0:8080/swagger.json")

      @schema.parametrize()
      def test_no_server_errors(case):
          # `requests` will make an appropriate call under the hood
          response = case.call()  # use `call_wsgi` if you used `schemathesis.from_wsgi`
          # You could use built-in checks
          case.validate_response(response)
          # Or assert the response manually
          assert response.status_code < 500


  It consists of four main parts:


  1. Schema preparation; ``schemathesis`` package provides multiple ways to
  initialize the schema - ``from_path``, ``from_dict``, ``from_uri``,
  ``from_file`` and ``from_wsgi``.


  2. Test parametrization; ``@schema.parametrize()`` generates separate tests
  for all endpoint/method combination available in the schema.


  3. A network call to the running application; ``case.call`` does it.


  4. Verifying a property you'd like to test; In the example, we verify that any
  app response will not indicate a server-side error (HTTP codes 5xx).


  **NOTE**. Look for ``from_wsgi`` usage `below
  <https://github.com/kiwicom/schemathesis#wsgi>`_


  Run the tests:


  .. code:: bash

      pytest test_api.py

  **Other properties that could be tested**:


  - Any call will be processed in <50 ms - you can verify the app performance;

  - Any unauthorized access will end with 401 HTTP response code;


  Each test function should have the ``case`` fixture, that represents a single
  test case.


  Important ``Case`` attributes:


  - ``method`` - HTTP method

  - ``formatted_path`` - full endpoint path

  - ``headers`` - HTTP headers

  - ``query`` - query parameters

  - ``body`` - request body


  You can use them manually in network calls or can convert to a dictionary
  acceptable by ``requests.request``:


  .. code:: python

      import requests

      schema = schemathesis.from_uri("http://0.0.0.0:8080/swagger.json")

      @schema.parametrize()
      def test_no_server_errors(case):
          kwargs = case.as_requests_kwargs()
          response = requests.request(**kwargs)


  For each test, Schemathesis will generate a bunch of random inputs acceptable
  by the schema.

  This data could be used to verify that your application works in the way as
  described in the schema or that schema describes expected behavior.


  By default, there will be 100 test cases per endpoint/method combination.

  To limit the number of examples you could use ``hypothesis.settings``
  decorator on your test functions:


  .. code:: python

      from hypothesis import settings

      @schema.parametrize()
      @settings(max_examples=5)
      def test_something(client, case):
          ...

  To narrow down the scope of the schemathesis tests it is possible to filter by
  method or endpoint:


  .. code:: python

      @schema.parametrize(method="GET", endpoint="/pet")
      def test_no_server_errors(case):
          ...

  The acceptable values are regexps or list of regexps (matched with
  ``re.search``).


  WSGI applications support

  ~~~~~~~~~~~~~~~~~~~~~~~~~


  Schemathesis supports making calls to WSGI-compliant applications instead of
  real network calls, in this case

  the test execution will go much faster.


  .. code:: python

      app = Flask("test_app")

      @app.route("/schema.json")
      def schema():
          return {...}

      @app.route("/v1/users", methods=["GET"])
      def users():
          return jsonify([{"name": "Robin"}])

      schema = schemathesis.from_wsgi("/schema.json", app)

      @schema.parametrize()
      def test_no_server_errors(case):
          response = case.call_wsgi()
          assert response.status_code < 500

  Explicit examples

  ~~~~~~~~~~~~~~~~~


  If the schema contains parameters examples, then they will be additionally
  included in the generated cases.

  Schemathesis supports the use of both OpenAPI ``example`` and ``examples``
  (more information available in the `OpenAPI documentation
  <https://swagger.io/docs/specification/adding-examples/>`_).

  Note that ``examples`` were added in OpenAPI 3, but Schemathesis supports this
  feature for OpenAPI 2 using ``x-examples``.


  .. code:: yaml

      paths:
        get:
          parameters:
          - in: body
            name: body
            required: true
            schema: '#/definitions/Pet'

      definitions:
        Pet:
          additionalProperties: false
          example:
            name: Doggo
          properties:
            name:
              type: string
          required:
          - name
          type: object


  With this Swagger schema example, there will be a case with body ``{"name":
  "Doggo"}``.  Examples handled with

  ``example`` decorator from Hypothesis, more info about its behavior is
  `here`_.


  If you'd like to test only examples provided in the schema, you could utilize
  ``--hypothesis-phases=explicit`` CLI option:


  .. code:: bash

      $ schemathesis run --hypothesis-phases=explicit https://example.com/api/swagger.json

  Or add this decorator to your test if you use Schemathesis in your Python
  tests:


  .. code:: python

      from hypothesis import settings, Phase

      ...
      @schema.parametrize()
      @settings(phases=[Phase.explicit])
      def test_api(case):
          ...

  **NOTE**. Schemathesis supports examples in individual properties.

  See below:


  .. code:: yaml

      ...
      paths:
        /users:
          parameters:
            - in: query
              name: foo
              schema:
                type: object
                properties:
                  prop1:
                    type: string
                    example: prop1 example    # SUPPORTED!
          post:
            requestBody:
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      foo:
                        type: string
                        example: bar          # SUPPORTED!

  Direct strategies access

  ~~~~~~~~~~~~~~~~~~~~~~~~


  For convenience you can explore the schemas and strategies manually:


  .. code:: python

      >>> import schemathesis
      >>> schema = schemathesis.from_uri("http://0.0.0.0:8080/petstore.json")
      >>> endpoint = schema["/pet"]["POST"]
      >>> strategy = endpoint.as_strategy()
      >>> strategy.example()
      Case(
          path='/pet',
          method='POST',
          path_parameters={},
          headers={},
          cookies={},
          query={},
          body={
              'name': '\x15.\x13\U0008f42a',
              'photoUrls': ['\x08\U0009f29a', '\U000abfd6\U000427c4', '']
          },
          form_data={}
      )

  Schema instances implement ``Mapping`` protocol.


  **NOTE**. Paths are relative to the schema's base path (``host`` +
  ``basePath`` in Open API 2.0 and ``server.url`` in Open API 3.0):


  .. code:: python

      # your ``basePath`` is ``/api/v1``
      >>> schema["/pet"]["POST"]  # VALID
      >>> schema["/api/v1/pet"]["POST"]  # INVALID

  Lazy loading

  ~~~~~~~~~~~~


  If you have a schema that is not available when the tests are collected, for
  example it is build with tools

  like ``apispec`` and requires an application instance available, then you can
  parametrize the tests from a pytest fixture.


  .. code:: python

      # test_api.py
      import schemathesis

      schema = schemathesis.from_pytest_fixture("fixture_name")

      @schema.parametrize()
      def test_api(case):
          ...

  In this case the test body will be used as a sub-test via ``pytest-subtests``
  library.


  **NOTE**: the used fixture should return a valid schema that could be created
  via ``schemathesis.from_dict`` or other

  ``schemathesis.from_`` variations.


  Extending schemathesis

  ~~~~~~~~~~~~~~~~~~~~~~


  If you're looking for a way to extend ``schemathesis`` or reuse it in your own
  application, then ``runner`` module might be helpful for you.

  It can run tests against the given schema URI and will do some simple checks
  for you.


  .. code:: python

      from schemathesis import runner

      events = runner.prepare("http://127.0.0.1:8080/swagger.json")
      for event in events:
          # do something with event

  ``runner.prepare`` creates a generator that yields events of different kinds -
  ``BeforeExecution``, ``AfterExecution``, etc.

  They provide a lot of useful information about what happens during tests, but
  handling of these events is your responsibility.

  You can take some inspiration from Schemathesis `CLI implementation
  <https://github.com/kiwicom/schemathesis/blob/master/src/schemathesis/cli/__init__.py#L230>`_.

  See full description of events in the `source code
  <https://github.com/kiwicom/schemathesis/blob/master/src/schemathesis/runner/events.py>`_.


  If you want to use Schemathesis CLI with your custom checks, look at `this
  section
  <https://github.com/kiwicom/schemathesis/tree/dd/deprecate-execute#registering-custom-checks-for-cli>`_


  The built-in checks list includes the following:


  - Not a server error. Asserts that response's status code is less than 500;

  - Status code conformance. Asserts that response's status code is listed in
  the schema;

  - Content type conformance. Asserts that response's content type is listed in
  the schema;

  - Response schema conformance. Asserts that response's content conforms to the
  declared schema;


  You can provide your custom checks to the execute function, the check is a
  callable that accepts one argument of ``requests.Response`` type.


  .. code:: python

      from datetime import timedelta
      from schemathesis import runner, models

      def not_too_long(response, case: models.Case):
          assert response.elapsed < timedelta(milliseconds=300)

      events = runner.prepare("http://127.0.0.1:8080/swagger.json", checks=[not_too_long])
      for event in events:
          # do something with event

  Custom string strategies

  ########################


  Some string fields could use custom format and validators,

  e.g. ``card_number`` and Luhn algorithm validator.


  For such cases it is possible to register custom strategies:


  1. Create ``hypothesis.strategies.SearchStrategy`` object

  2. Optionally provide predicate function to filter values

  3. Register it via ``schemathesis.register_string_format``


  .. code-block:: python

      strategy = strategies.from_regex(r"\A4[0-9]{15}\Z").filter(luhn_validator)
      schemathesis.register_string_format("visa_cards", strategy)

  Unittest support

  ################


  Schemathesis supports Python's built-in ``unittest`` framework out of the box,

  you only need to specify strategies for ``hypothesis.given``:


  .. code-block:: python

      from unittest import TestCase
      from hypothesis import given
      import schemathesis

      schema = schemathesis.from_uri("http://0.0.0.0:8080/petstore.json")
      new_pet_strategy = schema["/v2/pet"]["POST"].as_strategy()

      class TestSchema(TestCase):

          @given(case=new_pet_strategy)
          def test_pets(self, case):
              response = case.call()
              assert response.status_code < 500

  Schema validation

  #################


  To avoid obscure and hard to debug errors during test runs Schemathesis
  validates input schemas for conformance with the relevant spec.

  If you'd like to disable this behavior use ``--validate-schema=false`` in CLI
  and ``validate_schema=False`` argument in loaders.


  Local development

  -----------------


  First, you need to prepare a virtual environment with `poetry`_.

  Install ``poetry`` (check out the `installation guide`_) and run this command
  inside the project root:


  .. code:: bash

      poetry install

  For simpler local development Schemathesis includes a ``aiohttp``-based server
  with the following endpoints in Swagger 2.0 schema:


  - ``/api/success`` - always returns ``{"success": true}``

  - ``/api/failure`` - always returns 500

  - ``/api/slow`` - always returns ``{"slow": true}`` after 250 ms delay

  - ``/api/unsatisfiable`` - parameters for this endpoint are impossible to
  generate

  - ``/api/invalid`` - invalid parameter definition. Uses ``int`` instead of
  ``integer``

  - ``/api/flaky`` - returns 1/1 ratio of 200/500 responses

  - ``/api/multipart`` - accepts multipart data

  - ``/api/teapot`` - returns 418 status code, that is not listed in the schema

  - ``/api/text`` - returns ``plain/text`` responses, which are not declared in
  the schema

  - ``/api/malformed_json`` - returns malformed JSON with ``application/json``
  content type header



  To start the server:


  .. code:: bash

      ./test_server.sh 8081

  It is possible to configure available endpoints via ``--endpoints`` option.

  The value is expected to be a comma separated string with endpoint names
  (``success``, ``failure``, ``slow``, etc):


  .. code:: bash

      ./test_server.sh 8081 --endpoints=success,slow

  Then you could use CLI against this server:


  .. code:: bash

      schemathesis run http://127.0.0.1:8081/schema.yaml
      ================================== Schemathesis test session starts =================================
      platform Linux -- Python 3.7.4, schemathesis-0.12.2, hypothesis-4.39.0, hypothesis_jsonschema-0.9.8
      rootdir: /
      hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/.hypothesis/examples')
      Schema location: http://127.0.0.1:8081/schema.yaml
      Base URL: http://127.0.0.1:8081
      Specification version: Swagger 2.0
      collected endpoints: 2

      GET /api/slow .                                                                               [ 50%]
      GET /api/success .                                                                            [100%]

      ============================================== SUMMARY ==============================================

      not_a_server_error            2 / 2 passed          PASSED

      ========================================= 2 passed in 0.29s =========================================


  Running tests

  ~~~~~~~~~~~~~


  You could run tests via ``tox``:


  .. code:: bash

      tox -p all -o

  or ``pytest`` in your current environment:


  .. code:: bash

      pytest test/ -n auto

  Contributing

  ------------


  Any contribution in development, testing or any other area is highly
  appreciated and useful to the project.


  Please, see the `CONTRIBUTING.rst`_ file for more details.


  Python support

  --------------


  Schemathesis supports Python 3.6, 3.7 and 3.8.


  License

  -------


  The code in this project is licensed under `MIT license`_.

  By contributing to ``schemathesis``, you agree that your contributions

  will be licensed under its MIT license.


  .. |Build| image::
  https://github.com/kiwicom/schemathesis/workflows/build/badge.svg
     :target: https://github.com/kiwicom/schemathesis/actions
  .. |Coverage| image::
  https://codecov.io/gh/kiwicom/schemathesis/branch/master/graph/badge.svg
     :target: https://codecov.io/gh/kiwicom/schemathesis/branch/master
     :alt: codecov.io status for master branch
  .. |Version| image:: https://img.shields.io/pypi/v/schemathesis.svg
     :target: https://pypi.org/project/schemathesis/
  .. |Python versions| image::
  https://img.shields.io/pypi/pyversions/schemathesis.svg
     :target: https://pypi.org/project/schemathesis/
  .. |License| image:: https://img.shields.io/pypi/l/schemathesis.svg
     :target: https://opensource.org/licenses/MIT
  .. |Chat| image:: https://img.shields.io/gitter/room/kiwicom/schemathesis.svg
     :target: https://gitter.im/kiwicom/schemathesis
     :alt: Gitter
  .. |Docs| image::
  https://readthedocs.org/projects/schemathesis/badge/?version=stable
     :target: https://schemathesis.readthedocs.io/en/stable/?badge=stable
     :alt: Documentation Status

  .. _hypothesis: https://hypothesis.works/

  .. _hypothesis_jsonschema: https://github.com/Zac-HD/hypothesis-jsonschema

  .. _hypothesis_graphql: https://github.com/Stranger6667/hypothesis-graphql

  .. _pytest: http://pytest.org/en/latest/

  .. _poetry: https://github.com/sdispater/poetry

  .. _installation guide: https://github.com/sdispater/poetry#installation

  .. _here:
  https://hypothesis.readthedocs.io/en/latest/reproducing.html#providing-explicit-examples

  .. _CONTRIBUTING.rst:
  https://github.com/kiwicom/schemathesis/blob/master/CONTRIBUTING.rst

  .. _MIT license: https://opensource.org/licenses/MIT
springdoc/springdoc-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280B:09A3:BF2E941:1297F516:66149225.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cxxxr/apispec: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:239A6E0:3907F4C:66148B39.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
openapi4j/openapi4j: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3A282CC:59A2AC6:66149065.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
namuan/http-rider: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B758C61:11CB7787:66148F43.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
p1c2u/openapi-core: >
  ************

  openapi-core

  ************


  .. image:: https://img.shields.io/pypi/v/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core
  .. image:: https://travis-ci.org/python-openapi/openapi-core.svg?branch=master
       :target: https://travis-ci.org/python-openapi/openapi-core
  .. image::
  https://img.shields.io/codecov/c/github/python-openapi/openapi-core/master.svg?style=flat
       :target: https://codecov.io/github/python-openapi/openapi-core?branch=master
  .. image:: https://img.shields.io/pypi/pyversions/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core
  .. image:: https://img.shields.io/pypi/format/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core
  .. image:: https://img.shields.io/pypi/status/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core

  About

  #####


  Openapi-core is a Python library that adds client-side and server-side support

  for the `OpenAPI v3.0
  <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md>`__

  and `OpenAPI v3.1
  <https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md>`__
  specification.



  Key features

  ############


  * **Validation** and **unmarshalling** of request and response data (including
  webhooks)

  * **Integration** with popular libraries (Requests, Werkzeug) and frameworks
  (Django, Falcon, Flask, Starlette)

  * Customization with media type **deserializers** and format **unmarshallers**

  * **Security** data providers (API keys, Cookie, Basic and Bearer HTTP
  authentications)



  Documentation

  #############


  Check documentation to see more details about the features. All documentation
  is in the "docs" directory and online at `openapi-core.readthedocs.io
  <https://openapi-core.readthedocs.io>`__



  Installation

  ############


  Recommended way (via pip):


  .. code-block:: console

     pip install openapi-core

  Alternatively you can download the code and install from the repository:


  .. code-block:: console

     pip install -e git+https://github.com/python-openapi/openapi-core.git#egg=openapi_core


  First steps

  ###########


  Firstly create your specification object.


  .. code-block:: python

     from openapi_core import Spec

     spec = Spec.from_file_path('openapi.json')

  Now you can use it to validate and unmarshal against requests and/or
  responses. 


  .. code-block:: python

     from openapi_core import unmarshal_request

     # raises error if request is invalid
     result = unmarshal_request(request, spec=spec)

  Retrieve validated and unmarshalled request data


  .. code-block:: python

     # get parameters
     path_params = result.parameters.path
     query_params = result.parameters.query
     cookies_params = result.parameters.cookies
     headers_params = result.parameters.headers
     # get body
     body = result.body
     # get security data
     security = result.security

  Request object should implement OpenAPI Request protocol. Check `Integrations
  <https://openapi-core.readthedocs.io/en/latest/integrations.html>`__ to find
  oficially supported implementations.


  For more details read about `Unmarshalling
  <https://openapi-core.readthedocs.io/en/latest/unmarshalling.html>`__ process.


  If you just want to validate your request/response data without unmarshalling,
  read about `Validation
  <https://openapi-core.readthedocs.io/en/latest/validation.html>`__ instead.



  Related projects

  ################

  * `openapi-spec-validator
  <https://github.com/python-openapi/openapi-spec-validator>`__
     Python library that validates OpenAPI Specs against the OpenAPI 2.0 (aka Swagger), OpenAPI 3.0 and OpenAPI 3.1 specification. The validator aims to check for full compliance with the Specification.
  * `openapi-schema-validator
  <https://github.com/python-openapi/openapi-schema-validator>`__
     Python library that validates schema against the OpenAPI Schema Specification v3.0 and OpenAPI Schema Specification v3.1.
  * `bottle-openapi-3 <https://github.com/cope-systems/bottle-openapi-3>`__
     OpenAPI 3.0 Support for the Bottle Web Framework
  * `pyramid_openapi3 <https://github.com/niteoweb/pyramid_openapi3>`__
     Pyramid addon for OpenAPI3 validation of requests and responses.
  * `tornado-openapi3 <https://github.com/correl/tornado-openapi3>`__
     Tornado OpenAPI 3 request and response validation library.


  License

  #######


  The project is under the terms of BSD 3-Clause License.
APIs-guru/aws2openapi: >
  # aws2openapi

  Amazon Web Services API description to OpenAPI 3.0 specification


  ## Work in progress - beta quality


  ### Handles all current (v2) AWS json and xml specifications


  Resultant OpenApi specifications pass
  [multiple](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.yaml)
  [validators](https://github.com/Mermade/oas-kit)


  ![screenshot](https://raw.githubusercontent.com/APIs-guru/aws2openapi/main/docs/screenshot.png)


  The results of this converter can be found
  [here](https://github.com/APIs-guru/openapi-directory/tree/master/APIs/amazonaws.com)


  ### TODO **help wanted**


  * ~~Fix input header parameter selectivity~~

  * ~~Process protocol:ec2~~

  * ~~Authentication~~ You will have to calculate HMAC headers manually

  * ~~pagination~~

  * ~~Examples~~

  * ~~Waiters~~ (as vendor extension)

  * Test against live endpoints

  * Verify output header mappings

  * Test path-with-fragment hack works

  * Test paths with hardcoded ?parameters work

  * Validate xml-handling keyword translations
meeshkan/meeshkan: >
  # HMT


  [![CircleCI](https://circleci.com/gh/meeshkan/hmt.svg?style=shield)](https://circleci.com/gh/meeshkan/hmt)

  [![PyPI](https://img.shields.io/pypi/dm/hmt.svg)](https://pypi.org/project/hmt/)

  [![Code style:
  black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://black.readthedocs.io/)

  [![License:
  MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)


  The HTTP Mocking Toolkit (HMT) is a tool that mocks HTTP APIs for use in
  sandboxes as well as for automated and exploratory testing. It uses a
  combination of API definitions, recorded traffic and code in order to make
  crafting mocks as enjoyable as possible.


  [Chat with us on Gitter](https://gitter.im/hmt/community) to let us know about
  questions, problems or ideas!


  ## What's in this document


  - [Installation](#installation)

  - [Getting started with HMT](#getting-started-with-hmt)
    - [Tutorial](#tutorial)
  - [Collect recordings of API traffic](#collect-recordings-of-api-traffic)

  - [Build a HMT spec from recordings](#build-a-hmt-spec-from-recordings)
    - [Building modes](#building-modes)
  - [Mock server traffic using a HMT
  spec](#mock-server-traffic-using-a-hmt-spec)

  - [Development](#development)
    - [Getting started](#getting-started)
    - [Tests](#tests)
    - [Type-checking](#type-checking)
    - [Automated builds](#automated-builds)
    - [Publishing HMT as a PyPi package](#publishing-hmt-as-a-pypi-package)
  - [Contributing](#contributing)
    - [Code of Conduct](#code-of-conduct)

  ## Installation

  Install via [pip](https://pip.pypa.io/en/stable/installing/) (requires
  **Python 3.6+**):


  ```bash

  pip install hmt

  ```


  macOS users can install HMT with [Homebrew](https://brew.sh/):


  ```sh

  brew tap meeshkan/tap

  brew install hmt

  ```


  Debian and Ubuntu users can install HMT with `apt`:


  ```sh

  echo "deb [trusted=yes] https://dl.bintray.com/meeshkan/apt all main" | tee -a
  /etc/apt/sources.list

  apt-get -qq update && apt-get install hmt

  ```



  ## Getting started with HMT


  The basic HMT flow is **collect, build and mock.**

  1. First, **collect** data from recorded server traffic and/or OpenAPI specs.

  1. Then, **build** a schema that unifies these various data sources.

  1. Finally, use this schema to create a **mock** server of an API.


  ### Tutorial


  The quickest way to get an overview of HMT is to complete our interactive
  tutorial. It walks you through the collect, build, and mock flow - while also
  covering the concepts necessary for development.


  _Note: This tutorial has been tested on Python 3.6, 3.7, and 3.8._


  After installing HMT, you can begin the tutorial by invoking from the command
  line:


  ```bash

  $ hmt tutorial

  ```


  Once you've run this, you should see:


  ```bash
      __              __ 
     / /_  ____ ___  / /_
    / __ \/ __ `__ \/ __/
   / / / / / / / / / /_
  /_/ /_/_/ /_/ /_/\__/



  The tutorial!!

  Press ENTER to continue...

  ```


  If not, it's probably our fault. Please let us know by [filing an issue on
  this repo](https://github.com/meeshkan/hmt/issues).


  ## Collect recordings of API traffic


  Let's look at how to build a HMT spec. First, you have to **collect**
  recordings of server traffic and/or OpenAPI server specs.


  To record API traffic, the HMT CLI provides a `record` mode that captures API
  traffic using a proxy.


  ```bash

  $ hmt record

  ```


  This command starts HMT as a reverse proxy on the default port of `8000` and
  creates two directories: `logs` and `specs`. 


  With [curl](https://curl.haxx.se/), for example, you can use HMT as a proxy
  like so:


  ```bash

  $ curl http://localhost:8000/http://api.example.com

  ```


  By default, the recording proxy treats the path as the target URL. It then
  writes a [`.jsonl`](https://jsonlines.org) file containing logs of all server
  traffic to the `logs` directory.  All logs are created in the
  [`http-types`](https://github.com/meeshkan/http-types) format. This is because
  HMT's `build` tool expects all recordings to be represented in a `.jsonl` file
  containing recordings represented in the `http-types` format.


  For more information about recording, including direct file writing and kafka
  streaming, see the [recording documentation](./docs/RECORD.md).


  ## Build a HMT spec from recordings


  Using the HMT CLI, you can **build** an OpenAPI schema from a single `.jsonl`
  file, in addition to any existing OpenAPI specs that describe how your service
  works.


  ```bash

  $ hmt build --input-file path/to/recordings.jsonl 

  ```


  _Note: The input file should be in [JSON Lines](http://jsonlines.org/) format
  and every line should be in [http-types](https://hmt.github.io/http-types/)
  JSON format. For an example input file, see
  [recordings.jsonl](./resources/recordings.jsonl)._


  Optionally, you can also specify an output directory using the `--out` flag
  followed by the path to this directory. By default, HMT will build the new
  OpenAPI specifications in the `specs` directory. 


  Use dash (`--input-file -`) to read from standard input:


  ```bash

  $ hmt build --input-file - < recordings.jsonl

  ```

  ### Building modes

  You can use a mode flag to indicate how the OpenAPI spec should be built, for
  example:


  ```bash

  hmt build --input-file path/to/recordings.jsonl --mode gen

  ```


  Supported modes are:

  * gen [default] - infer a schema from the recorded data

  * replay - replay the recorded data based on exact matching


  For more information about building, including mixing together the two modes
  and editing the created OpenAPI schema, see the [building
  documentation](./docs/BUILD.md).


  ## Mock server traffic using a HMT spec


  You can use an OpenAPI spec, such as the one created with `hmt build`, to
  create a **mock** server using HMT.


  ```bash

  $ hmt mock path/to/dir/

  ```


  _Note: You can specify a path to the directory your OpenAPI spec is in or a
  path to one specific file._


  For more information about mocking, including adding custom middleware and
  modifying the mocking schema JIT via an admin API, see the [mocking
  documentation](./docs/MOCK.md).


  ## Development


  Here are some useful tips for building and running HMT from source. 


  If you run into any issues, please [reach out to our team on
  Gitter](https://gitter.im/HMT/community).


  ### Getting started


  1. Clone this repository: `git clone https://github.com/meeshkan/hmt`

  1. Create a virtual environment: `python3 -m venv .venv && source
  .venv/bin/activate`

  1. Install dependencies: `pip install --upgrade -e '.[dev]'`

  1. Install [`pre-commit`](https://pre-commit.com/) hooks to automatically
  format code as a git hook: `pre-commit install`


  ### Tests


  Run all checks:


  ```bash

  $ python setup.py test

  ```


  #### `pytest`


  Run [tests/](https://github.com/meeshkan/hmt/tree/master/tests/) with
  `pytest`:


  ```bash

  pytest

  # or

  python setup.py test

  ```


  Configuration for `pytest` is found in
  [pytest.ini](https://github.com/meeshkan/hmt/tree/master/pytest.ini).


  #### Formatting


  Formatting is checked by the above mentioned `python setup.py test` command.


  To fix formatting:


  ```sh

  $ python setup.py format

  ```


  #### `flake8`


  Run style checks:


  ```bash

  $ flake8 .

  ```


  #### `pyright`


  You can run type-checking by installing
  [pyright](https://github.com/microsoft/pyright) globally:


  ```bash

  $ npm -i -g pyright

  ```


  And then running:


  ```bash

  $ pyright --lib

  $ # or

  $ python setup.py typecheck

  ```


  Using the [Pyright
  extension](https://marketplace.visualstudio.com/items?itemName=ms-pyright.pyright)
  is recommended for development in VS Code.


  ### Automated builds


  Configuration for CircleCI [build
  pipeline](https://app.circleci.com/github/HMT/hmt/pipelines) can be found in
  [.circleci/config.yml](https://github.com/meeshkan/hmt/tree/master/.circleci/config.yml).


  ### Publishing HMT as a PyPi package


  To publish HMT as a PyPi package, complete the following steps:


  1. Bump the version in
  [setup.py](https://github.com/meeshkan/hmt/tree/master/setup.py) if the
  version is the same as in the published
  [package](https://pypi.org/project/hmt/). Commit and push.

  1. Run `python setup.py test` to check that everything works

  1. To build and upload the package, run `python setup.py upload`. Insert PyPI
  credentials to upload the package to `PyPI`. The command will also run `git
  tag` to tag the commit as a release and push the tags to remote.


  > To see what the different commands do, see `Command` classes in
  [setup.py](https://github.com/meeshkan/hmt/tree/master/setup.py).


  ## Contributing


  Thanks for your interest in contributing! Please take a look at our
  [development guide](#development) for notes on how to develop the package
  locally.  A great way to start contributing is to [file an
  issue](https://github.com/meeshkan/hmt/issue) or [make a pull
  request](https://github.com/meeshkan/hmt/pulls).


  ### Code of Conduct


  Please note that this project is governed by the [HMT Community Code of
  Conduct](https://github.com/meeshkan/code-of-conduct). By participating, you
  agree to abide by its terms.
APIDevTools/swagger-cli: >
  Swagger/OpenAPI CLI

  ============================


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-cli.svg)](https://www.npmjs.com/package/@apidevtools/swagger-cli)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-cli.svg)](LICENSE)

  [![Buy us a
  tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-cli)



  > ⚠️ Swagger CLI has been deprecated, due to the maintenance burnden of trying
  to keep up with expectations of a huge userbase with little to no pull
  requests or support. [Redocly CLI](https://redocly.com/redocly-cli/) covers
  all of the same functionality, and has more advanced linting with custom
  rules, and we highly recommend using that instead. They have conveniently
  provided a [migration
  guide](https://redocly.com/docs/cli/guides/migrate-from-swagger-cli/) for
  existing Swagger CLI users. Read the review of [Redocly CLI from APIs You
  Won't Hate](https://apisyouwonthate.com/blog/redocly-cli/).


  Features

  --------------------------

  - Validate Swagger/OpenAPI files in **JSON or YAML** format

  - Supports multi-file API definitions via `$ref` pointers

  - Bundle multiple Swagger/OpenAPI files into one combined file




  Related Projects

  --------------------------

  - [Swagger Parser](https://github.com/APIDevTools/swagger-parser)

  - [Swagger Express
  Middleware](https://github.com/APIDevTools/swagger-express-middleware)




  Installation

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/):


  ```bash

  npm install -g @apidevtools/swagger-cli

  ```




  Usage

  --------------------------


  ```

  swagger-cli <command> [options] <file>


  Commands:
      validate                Validates an API definition in Swagger 2.0 or OpenAPI 3.0 format

      bundle                  Bundles a multi-file API definition into a single file

  Options:
      -h, --help              Show help for any command
      -v, --version           Output the CLI version number
      -d, --debug [filter]    Show debug output, optionally filtered (e.g. "*", "swagger:*", etc.)
  ```



  ### Validate an API


  The `swagger-cli validate` command will validate your Swagger/OpenAPI
  definition against the [Swagger 2.0
  schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json)
  or [OpenAPI 3.0
  Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.json). 
  It also performs additional validations against the
  [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md),
  which will catch some things that aren't covered by the schema, such as
  duplicate parameters, invalid MIME types, etc.


  The command will exit with a non-zero code if the API is invalid.


  ```

  swagger-cli validate [options] <file>


  Options:
      --no-schema             Do NOT validate against the Swagger/OpenAPI JSON schema

      --no-spec               Do NOT validate against the Swagger/OpenAPI specification
  ```


  #### Git pre-commit hook


  There is a useful Python tool called [pre-commit](https://pre-commit.com/)
  that can be used to execute a wide suite of pre-commit checks. The
  `swagger-cli validate` command can be integrated as part of a git pre-commit
  hook by adding the following configuration to the `repos` entry of an existing
  `.pre-commit-config.yaml` file.


  ```

  -   repo: https://github.com/APIDevTools/swagger-cli
      rev: v2.2.1
      hooks:
      - id: swagger-validation
        args: ["validate", "<path to root swagger>"]
  ```


  The intention is to point to single root swagger that references multiple
  swagger definitions. The above hook will execute the `swagger-cli validation`
  against the root swagger anytime that a file matching the pattern
  `.*swagger.*\.(json|yaml|yml)` is modified. Any failures in this validation
  will prevent the git commit from being processed.


  ### Combine Multiple Files


  The Swagger and OpenAPI specs allows you to split your API definition across
  multiple files using [`$ref`
  pointers](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#reference-object)
  to reference each file. You can use the `swagger-cli bundle` command to
  combine all of those referenced files into a single file, which is useful for
  distribution or interoperation with other tools.


  By default, the `swagger-cli bundle` command tries to keep the output file
  size as small as possible, by only embedding each referenced file _once_.  If
  the same file is referenced multiple times, then any subsequent references are
  simply modified to point to the _single_ inlined copy of the file.  If you
  want to produce a bundled file without _any_ `$ref` pointers, then add the
  `--dereference` option.  This will result in a larger file size, since
  multiple references to the same file will result in that file being embedded
  multiple times.


  If you don't specify the `--outfile` option, then the bundled API will be
  written to stdout, which means you can pipe it to other commands.


  The result of this method by default is written as JSON. It can be changed to
  YAML with the `--type` option, by passing the `yaml` value.


  ```

  swagger-cli bundle [options] <file>


  Options:
      -o, --outfile <file>        The output file

      -r, --dereference           Fully dereference all $ref pointers

      -f, --format <spaces>       Formats the output using the given number of spaces
                                  (the default is 2 spaces)

      -t, --type <filetype>       Defines the output file type. The valid values are: json, yaml
                                  (the default is JSON)

      -w, --wrap <column>         Set the line length for YAML strings
                                  (the default is no wrapping)
  ```




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [Open an
  issue](https://github.com/APIDevTools/swagger-cli/issues) on GitHub and
  [submit a pull request](https://github.com/APIDevTools/swagger-cli/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-cli.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`




  License

  --------------------------

  Swagger CLI is 100% free and open-source, under the [MIT license](LICENSE).
  Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in
  production, then we ask that you [**buy the world a
  tree**](https://plant.treeware.earth/APIDevTools/swagger-cli) to thank us for
  our work. By contributing to the Treeware forest you’ll be creating employment
  for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![Travis
  CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
APIDevTools/swagger-express-middleware: >
  Swagger Express Middleware

  ============================

  ### Swagger 2.0 middleware and mocks for Express.js


  > :warning: **No longer maintained**

  > This package has been abandoned for some time, and there are plenty of
  modern alternatives around which support OpenAPI v3.x listed on
  [OpenAPI.Tools](https://openapi.tools/) which you can use instead.


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-express-middleware.svg)](https://www.npmjs.com/package/@apidevtools/swagger-express-middleware)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-express-middleware.svg)](LICENSE)

  [![Buy us a
  tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-express-middleware)




  Features

  --------------------------

  - **Supports Swagger 2.0 specs in JSON or YAML** <br>

  Swagger Express Middleware uses
  [Swagger-Parser](https://github.com/APIDevTools/swagger-parser) to parse,
  validate, and dereference Swagger files.  You can even split your spec into
  multiple different files using `$ref` pointers.


  - **Thoroughly tested**<br>

  Over 1,000 unit tests and integration tests with 100% code coverage.  Tested
  on [**over 1,500 real-world APIs**](https://apis.guru/browse-apis/) from
  Google, Microsoft, Facebook, Spotify, etc.  All tests are run on Mac, Linux,
  and Windows using all LTS versions of Node.


  - [**Mock
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/mock.html)<br>

  **Fully-functional mock** implementations for every operation in your API,
  including data persistence, all with **zero code!**  This is a great way to
  test-drive your API as you write it, or for quick demos and POCs.  You can
  even extend the mock middleware with your own logic and data to fill in any
  gaps.


  - [**Metadata
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/metadata.html)<br>

  Annotates each request with all the relevant information from the Swagger
  definition.  The path, the operation, the parameters, the security
  requirements - they're all easily accessible at `req.swagger`.


  - [**Parse Request
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/parseRequest.html)<br>

  Parses incoming requests and converts everything into the correct data types,
  according to your Swagger API definition.


  - [**Validate Request
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/validateRequest.html)<br>

  Ensures that every request complies with your Swagger API definition, or
  returns the appropriate HTTP error codes if needed.  Of course, you can catch
  any validation errors and handle them however you want.


  - [**CORS
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/CORS.html)<br>

  Adds the appropriate CORS headers to each request and automatically responds
  to CORS preflight requests, all in compliance with your Swagger API
  definition.


  - [**Files
  middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/files.html)<br>

  Serves the Swagger API file(s) in JSON or YAML format so they can be used with
  front-end tools like [Swagger UI](http://www.swagger.io), [Swagger
  Editor](http://editor.swagger.io), and [Postman](http://getpostman.com).




  Installation and Use

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/).


  ```bash

  npm install @apidevtools/swagger-express-middleware

  ```

  Then use it in your [Node.js](http://nodejs.org/) script like this:


  ```javascript

  const express = require('express');

  const createMiddleware = require('@apidevtools/swagger-express-middleware');


  let app = express();


  createMiddleware('PetStore.yaml', app, function(err, middleware) {
      // Add all the Swagger Express Middleware, or just the ones you need.
      // NOTE: Some of these accept optional options (omitted here for brevity)
      app.use(
          middleware.metadata(),
          middleware.CORS(),
          middleware.files(),
          middleware.parseRequest(),
          middleware.validateRequest(),
          middleware.mock()
      );

      app.listen(8000, function() {
          console.log('The PetStore sample is now running at http://localhost:8000');
      });
  });

  ```




  Samples & Walkthroughs

  --------------------------

  Swagger Express Middleware comes two samples that use the [Swagger Pet Store
  API](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/PetStore.yaml).


  #### Sample 1

  This sample demonstrates the most simplistic usage of Swagger Express
  Middleware. It simply creates a new Express Application and adds all of the
  Swagger middleware without changing any options, and without adding any custom
  middleware.


  * [Source
  Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample1.js)

  *
  [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/running.html)



  #### Sample 2

  This sample demonstrates a few more advanced features of Swagger Express
  Middleware, such as setting a few options, initializing the mock data store,
  and adding custom middleware logic.


  * [Source
  Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample2.js)

  *
  [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/walkthrough2.html)




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [Open an
  issue](https://github.com/APIDevTools/swagger-express-middleware/issues) on
  GitHub and [submit a pull
  request](https://github.com/APIDevTools/swagger-express-middleware/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-express-middleware.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`


  4. **Run the sample app**<br>

  `npm start`




  License

  --------------------------

  Swagger Express Middleware is 100% free and open-source, under the [MIT
  license](LICENSE). Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in
  production, then we ask that you [**buy the world a
  tree**](https://plant.treeware.earth/APIDevTools/swagger-express-middleware)
  to thank us for our work. By contributing to the Treeware forest you’ll be
  creating employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![Travis
  CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
APIDevTools/swagger-parser: >
  Swagger 2.0 and OpenAPI 3.0 parser/validator

  ============================


  [![Build
  Status](https://github.com/APIDevTools/swagger-parser/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-parser/actions)

  [![Coverage
  Status](https://coveralls.io/repos/github/APIDevTools/swagger-parser/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-parser)

  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://apis.guru/browse-apis/)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-parser.svg)](https://www.npmjs.com/package/@apidevtools/swagger-parser)

  [![Dependencies](https://david-dm.org/APIDevTools/swagger-parser.svg)](https://david-dm.org/APIDevTools/swagger-parser)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-parser.svg)](LICENSE)

  [![Buy us a
  tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-parser)


  [![OS and Browser
  Compatibility](https://apitools.dev/img/badges/ci-badges-with-ie.svg)](https://github.com/APIDevTools/swagger-parser/actions)


  [![Online
  Demo](https://apitools.dev/swagger-parser/online/img/demo.svg)](https://apitools.dev/swagger-parser/online/)




  Features

  --------------------------

  - Parses Swagger specs in **JSON** or **YAML** format

  - Validates against the [Swagger 2.0
  schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json)
  or [OpenAPI 3.0
  Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.json)

  -
  [Resolves](https://apitools.dev/swagger-parser/docs/swagger-parser.html#resolveapi-options-callback)
  all `$ref` pointers, including external files and URLs

  - Can
  [bundle](https://apitools.dev/swagger-parser/docs/swagger-parser.html#bundleapi-options-callback)
  all your Swagger files into a single file that only has _internal_ `$ref`
  pointers

  - Can
  [dereference](https://apitools.dev/swagger-parser/docs/swagger-parser.html#dereferenceapi-options-callback)
  all `$ref` pointers, giving you a normal JavaScript object that's easy to work
  with

  - **[Tested](https://github.com/APIDevTools/swagger-parser/actions)** in
  Node.js and all modern web browsers on Mac, Windows, and Linux

  - Tested on **[over 1,500 real-world APIs](https://apis.guru/browse-apis/)**
  from Google, Microsoft, Facebook, Spotify, etc.

  - Supports [circular
  references](https://apitools.dev/swagger-parser/docs/#circular-refs), nested
  references, back-references, and cross-references

  - Maintains object reference equality &mdash; `$ref` pointers to the same
  value always resolve to the same object instance




  Related Projects

  --------------------------

  - [Swagger CLI](https://github.com/APIDevTools/swagger-cli)

  - [Swagger Express
  Middleware](https://github.com/APIDevTools/swagger-express-middleware)




  Example

  --------------------------


  ```javascript

  SwaggerParser.validate(myAPI, (err, api) => {
    if (err) {
      console.error(err);
    }
    else {
      console.log("API name: %s, Version: %s", api.info.title, api.info.version);
    }
  });

  ```


  Or use `async`/`await` or
  [Promise](http://javascriptplayground.com/blog/2015/02/promises/) syntax
  instead. The following example is the same as above:


  ```javascript

  try {
    let api = await SwaggerParser.validate(myAPI);
    console.log("API name: %s, Version: %s", api.info.title, api.info.version);
  }

  catch(err) {
    console.error(err);
  }

  ```


  For more detailed examples, please see the [API
  Documentation](https://apitools.dev/swagger-parser/docs/)




  Installation

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/):


  ```bash

  npm install @apidevtools/swagger-parser

  ```




  Usage

  --------------------------

  When using Swagger Parser in Node.js apps, you'll probably want to use
  **CommonJS** syntax:


  ```javascript

  const SwaggerParser = require("@apidevtools/swagger-parser");

  ```


  When using a transpiler such as [Babel](https://babeljs.io/) or
  [TypeScript](https://www.typescriptlang.org/), or a bundler such as
  [Webpack](https://webpack.js.org/) or [Rollup](https://rollupjs.org/), you can
  use **ECMAScript modules** syntax instead:


  ```javascript

  import * as SwaggerParser from '@apidevtools/swagger-parser';

  ```




  Browser support

  --------------------------

  Swagger Parser supports recent versions of every major web browser.  Older
  browsers may require [Babel](https://babeljs.io/) and/or
  [polyfills](https://babeljs.io/docs/en/next/babel-polyfill).


  To use Swagger Parser in a browser, you'll need to use a bundling tool such as
  [Webpack](https://webpack.js.org/), [Rollup](https://rollupjs.org/),
  [Parcel](https://parceljs.org/), or [Browserify](http://browserify.org/). Some
  bundlers may require a bit of configuration, such as setting `browser: true`
  in
  [rollup-plugin-resolve](https://github.com/rollup/rollup-plugin-node-resolve).




  API Documentation

  --------------------------

  Full API documentation is available [right
  here](https://apitools.dev/swagger-parser/docs/)




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [Open an
  issue](https://github.com/APIDevTools/swagger-parser/issues) on GitHub and
  [submit a pull request](https://github.com/APIDevTools/swagger-parser/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. __Clone this repo__<br>

  `git clone https://github.com/APIDevTools/swagger-parser.git`


  2. __Install dependencies__<br>

  `npm install`


  3. __Run the build script__<br>

  `npm run build`


  4. __Run the tests__<br>

  `npm test`


  5. __Check the code coverage__<br>

  `npm run coverage`


  License

  --------------------------

  Swagger Parser is 100% free and open-source, under the [MIT license](LICENSE).
  Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in
  production, then we ask that you [**buy the world a
  tree**](https://plant.treeware.earth/APIDevTools/swagger-parser) to thank us
  for our work. By contributing to the Treeware forest you’ll be creating
  employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![GitHub](https://apitools.dev/img/badges/github.svg)](https://github.com/open-source)

  [![NPM](https://apitools.dev/img/badges/npm.svg)](https://www.npmjs.com/)

  [![Coveralls](https://apitools.dev/img/badges/coveralls.svg)](https://coveralls.io)
Apicurio/apicurio-studio: >-
  ![Verify Build
  Workflow](https://github.com/Apicurio/apicurio-studio/workflows/Build%20%26%20Verify/badge.svg)

  [![Join the chat at
  https://apicurio.zulipchat.com/](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://apicurio.zulipchat.com/)


  ![Apicurio Studio](.assets/apicurio_studio_logo_default.svg)


  # The apicurio-studio project (Open Source API Design Studio)


  ## Summary


  This is the official Git repository for the Apicurio Studio project: 
  http://www.apicur.io/studio


  The Apicurio Studio project is a standalone API design studio that can be used
  to create

  new or edit existing API designs (using the OpenAPI or AsyncAPI
  specifications).


  ## Get the code


  The easiest way to get started with the code is to [create your own
  fork](http://help.github.com/forking/)

  of this repository, and then clone your fork:

  ```bash
    $ git clone git@github.com:<you>/apicurio-studio.git
    $ cd apicurio-studio
    $ git remote add upstream git://github.com/apicurio/apicurio-studio.git
  ```

  At any time, you can pull changes from the upstream and merge them onto your
  main:

  ```bash
    $ git checkout main               # switches to the 'main' branch
    $ git pull upstream main          # fetches all 'upstream' changes and merges 'upstream/main' onto your 'main' branch
    $ git push origin                   # pushes all the updates to your fork, which should be in-sync with 'upstream'
  ```

  The general idea is to keep your 'main' branch in-sync with the
  'upstream/main'.


  ## Building apicurio-studio


  ### Requirements

  - Maven 3.x

  - Java 11 or 17 (recommended)

  - Node.js and NPM



  ## Contribute fixes and features


  Apicurio Studio is open source, and we welcome anybody who wants to
  participate and contribute!


  If you want to fix a bug or make any changes, please [log an issue in
  GitHub](https://github.com/apicurio/apicurio-studio/issues) describing the bug
  or new feature. Then we highly recommend making the changes on a topic branch
  named with the GitHub issue number. For example, this command creates a branch
  for an issue with number 1234:


  ```bash
    $ git checkout -b apicurio-studio-1234
  ```


  After you're happy with your changes and a full build (with unit tests) runs
  successfully, commit your

  changes on your topic branch. Then it's time to check for and pull any recent
  changes that were made in

  the official repository:


  ```bash
    $ git checkout main               # switches to the 'main' branch
    $ git pull upstream main          # fetches all 'upstream' changes and merges 'upstream/main' onto your 'main' branch
    $ git checkout apicurio-studio-1234   # switches to your topic branch
    $ git rebase main                 # reapplies your changes on top of the latest in main
                                        # (i.e., the latest from main will be the new base for your changes)
  ```


  If the pull grabbed a lot of changes, you should rerun your build to make sure
  your changes are still good.

  You can then either [create patches](http://progit.org/book/ch5-2.html) (one
  file per commit, saved in `~/apicurio-studio-1234`) with


  ```bash
    $ git format-patch -M -o ~/apicurio-studio-1234 orgin/main
  ```


  and upload them to the JIRA issue, or you can push your topic branch and its
  changes into your public fork repository


  ```bash
    $ git push origin apicurio-studio-1234         # pushes your topic branch into your public fork of apicurio-studio
  ```


  and [generate a pull-request](http://help.github.com/pull-requests/) for your
  changes.


  We prefer pull-requests, because we can review the proposed changes, comment
  on them,

  discuss them with you, and likely merge the changes right into the official
  repository.


  Please try to create one commit per feature or fix, generally the easiest way
  to do this is via [git
  squash](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits).

  This makes reverting changes easier, and avoids needlessly polluting the
  repository history with checkpoint commits.


  ## Code Formatting


  When you are hacking on some apicurio-studio code, we'd really appreciate it
  if you followed the

  apicurio-studio coding standards.  If you're using Eclipse, you can find a
  code formatter config

  file here:


  ```

  .config/eclipse/apicurio-eclipse-formatter.xml

  ```


  You should be able to import that guy straight into Eclipse by going to

  *Window->Preferences :: Java/Code Style/Formatter*


  If you're using Intellij, you can find a code formatter config file here:


  ```

  .config/intellij/apicurio-intellij-formatter.xml

  ```
Azure/autorest: >
  # <img align="center" src="./docs/images/logo.png"> AutoRest


  The **AutoRest** tool generates client libraries for accessing RESTful web
  services. Input to _AutoRest_ is a spec that describes the REST API using the
  [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) format.


  [Release notes](./docs/releases)


  ## Packages


  | Name                                            |
  Changelog                       |
  Latest                                                       |
  Next                                                              |

  | ----------------------------------------------- |
  ------------------------------- |
  ------------------------------------------------------------ |
  ----------------------------------------------------------------- |

  | Core functionality                              |

  | [autorest][autorest_src]                        |
  [Changelog][autorest_chg]       |
  ![](https://img.shields.io/npm/v/autorest)                   |
  ![](https://img.shields.io/npm/v/autorest/next)                   |

  | [@autorest/core][core_src]                      |
  [Changelog][core_chg]           |
  ![](https://img.shields.io/npm/v/@autorest/core)             |
  ![](https://img.shields.io/npm/v/@autorest/core/next)             |

  | [@autorest/modelerfour][modelerfour_src]        |
  [Changelog][modelerfour_chg]    |
  ![](https://img.shields.io/npm/v/@autorest/modelerfour)      |
  ![](https://img.shields.io/npm/v/@autorest/modelerfour/next)      |

  | Language generators                             |

  | [@autorest/csharp][csharp_src]                  |
  [Changelog][csharp_chg]         |
  ![](https://img.shields.io/npm/v/@autorest/csharp)          
  |                                                                   |

  | [@autorest/go][go_src]                          |
  [Changelog][go_chg]             |
  ![](https://img.shields.io/npm/v/@autorest/go)              
  |                                                                   |

  | [@autorest/java][java_src]                      |
  [Changelog][java_chg]           |
  ![](https://img.shields.io/npm/v/@autorest/java)            
  |                                                                   |

  | [@autorest/powershell][powershell_src]          |
  [Changelog][powershell_chg]     |
  ![](https://img.shields.io/npm/v/@autorest/powershell)      
  |                                                                   |

  | [@autorest/python][python_src]                  |
  [Changelog][python_chg]         |
  ![](https://img.shields.io/npm/v/@autorest/python)          
  |                                                                   |

  | [@autorest/swift][swift_src]                    |
  [Changelog][swift_chg]          |
  ![](https://img.shields.io/npm/v/@autorest/swift)           
  |                                                                   |

  | [@autorest/typescript][typescript_src]          |
  [Changelog][typescript_chg]     |
  ![](https://img.shields.io/npm/v/@autorest/typescript)      
  |                                                                   |

  | Internal packages                               |

  | [@autorest/codemodel][codemodel_src]            |
  [Changelog][codemodel_chg]      |
  ![](https://img.shields.io/npm/v/@autorest/codemodel)        |
  ![](https://img.shields.io/npm/v/@autorest/codemodel/next)        |

  | [@autorest/common][common_src]                  |
  [Changelog][common_chg]         |
  ![](https://img.shields.io/npm/v/@autorest/common)           |
  ![](https://img.shields.io/npm/v/@autorest/common/next)           |

  | [@autorest/configuration][configuration_src]    |
  [Changelog][configuration_chg]  |
  ![](https://img.shields.io/npm/v/@autorest/configuration)    |
  ![](https://img.shields.io/npm/v/@autorest/configuration/next)    |

  | [@autorest/extension-base][extension_base_src]  |
  [Changelog][extension_base_chg] |
  ![](https://img.shields.io/npm/v/@autorest/extension-base)   |
  ![](https://img.shields.io/npm/v/@autorest/extension-base/next)   |

  | [@azure-tools/extension][extension_src]         |
  [Changelog][extension_chg]      |
  ![](https://img.shields.io/npm/v/@azure-tools/extension)     |
  ![](https://img.shields.io/npm/v/@azure-tools/extension/next)     |

  | [@azure-tools/codegen][codegen_src]             |
  [Changelog][codemodel_chg]      |
  ![](https://img.shields.io/npm/v/@azure-tools/codegen)       |
  ![](https://img.shields.io/npm/v/@azure-tools/codegen/next)       |

  | [@azure-tools/openapi][openapi_src]             |
  [Changelog][openapi_chg]        |
  ![](https://img.shields.io/npm/v/@azure-tools/openapi)       |
  ![](https://img.shields.io/npm/v/@azure-tools/openapi/next)       |

  | [@azure-tools/deduplication][deduplication_src] |
  [Changelog][deduplication_chg]  |
  ![](https://img.shields.io/npm/v/@azure-tools/deduplication) |
  ![](https://img.shields.io/npm/v/@azure-tools/deduplication/next) |

  | [@azure-tools/datastore][datastore_src]         |
  [Changelog][datastore_chg]      |
  ![](https://img.shields.io/npm/v/@azure-tools/datastore)     |
  ![](https://img.shields.io/npm/v/@azure-tools/datastore/next)     |

  | [@azure-tools/oai2-to-oai3][oai2-to-oai3_src]   |
  [Changelog][oai2-to-oai3_chg]   |
  ![](https://img.shields.io/npm/v/@azure-tools/oai2-to-oai3)  |
  ![](https://img.shields.io/npm/v/@azure-tools/oai2-to-oai3/next)  |

  | [@azure-tools/jsonschema][jsonschema_src]       |
  [Changelog][jsonschema_chg]     |
  ![](https://img.shields.io/npm/v/@azure-tools/jsonschema)    |
  ![](https://img.shields.io/npm/v/@azure-tools/jsonschema/next)    |


  [autorest_src]: packages/apps/autorest

  [core_src]: packages/extensions/core

  [modelerfour_src]: packages/extensions/modelerfour

  [csharp_src]: https://github.com/Azure/autorest.csharp

  [python_src]: https://github.com/Azure/autorest.python

  [go_src]: https://github.com/Azure/autorest.go

  [java_src]: https://github.com/Azure/autorest.java

  [swift_src]: https://github.com/Azure/autorest.swift

  [typescript_src]: https://github.com/Azure/autorest.typescript

  [powershell_src]: https://github.com/Azure/autorest.powershell

  [codemodel_src]: packages/libs/codemodel

  [common_src]: packages/libs/common

  [configuration_src]: packages/libs/configuration

  [extension_base_src]: packages/libs/extension-base

  [oai2-to-oai3_src]: packages/libs/oai2-to-oai3_src

  [extension_src]: packages/libs/extension

  [codegen_src]: packages/libs/codegen

  [openapi_src]: packages/libs/openapi

  [deduplication_src]: packages/libs/deduplication

  [datastore_src]: packages/libs/datastore

  [jsonschema_src]: packages/libs/oai2-to-oai3

  [autorest_chg]: packages/apps/autorest/CHANGELOG.md

  [core_chg]: packages/extensions/core/CHANGELOG.md

  [modelerfour_chg]: packages/extensions/modelerfour/CHANGELOG.md

  [csharp_chg]: https://github.com/Azure/autorest.csharp

  [python_chg]:
  https://github.com/Azure/autorest.python/blob/main/packages/autorest.python/ChangeLog.md

  [go_chg]: https://github.com/Azure/autorest.go

  [java_chg]: https://github.com/Azure/autorest.java/releases

  [swift_chg]: https://github.com/Azure/autorest.swift

  [typescript_chg]: https://github.com/Azure/autorest.typescript

  [powershell_chg]: https://github.com/Azure/autorest.powershell/releases

  [codemodel_chg]: packages/libs/codemodel/CHANGELOG.md

  [common_chg]: packages/libs/common/CHANGELOG.md

  [configuration_chg]: packages/libs/configuration/CHANGELOG.md

  [extension_base_chg]: packages/libs/extension-base/CHANGELOG.md

  [extension_chg]: packages/libs/extension/CHANGELOG.md

  [codegen_chg]: packages/libs/codegen/CHANGELOG.md

  [openapi_chg]: packages/libs/openapi/CHANGELOG.md

  [deduplication_chg]: packages/libs/deduplication/CHANGELOG.md

  [datastore_chg]: packages/libs/datastore/CHANGELOG.md

  [oai2-to-oai3_chg]: packages/libs/oai2-to-oai3/CHANGELOG.md

  [jsonschema_chg]: packages/libs/jsonschema/CHANGELOG.md


  ## Support Policy


  AutoRest is an open source tool -- if you need assistance, first check the
  documentation. If you find a bug or need some help, feel free to submit an
  [issue](https://github.com/Azure/autorest/issues)


  ## Getting Started using AutoRest ![image](./docs/images/normal.png)


  View our [docs readme][docs_readme] as a starting point to find both general
  information and language-generator specific information


  ## Contributing


  ### Contributing guide


  Check our [internal developer docs](./docs/developer/readme.md) to learn about
  our development process, how to propose bugfixes and improvements, and how to
  build and test your changes to Autorest.


  ### Code of Conduct


  This project has adopted the [Microsoft Open Source Code of
  Conduct](https://opensource.microsoft.com/codeofconduct/). For more
  information see the [Code of Conduct
  FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact
  [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional
  questions or comments.


  <!--LINKS-->


  [docs_readme]: docs/readme.md
CacheControl/hippie-swagger: >
  ![hippie-swagger](http://i.imgur.com/icjd94P.png)


  _"The confident hippie"_


  [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)

  [![Build
  Status](https://github.com/cachecontrol/hippie-swagger/workflows/Node.js%20CI/badge.svg?branch=master)](https://github.com/cachecontrol/hippie-swagger/workflows/Node.js%20CI/badge.svg?branch=master)

  [![npm
  version](https://badge.fury.io/js/hippie-swagger.svg)](https://badge.fury.io/js/hippie-swagger)


  ## Synopsis


  ```hippie-swagger``` is a tool for testing RESTful APIs.  In addition to
  validating api behavior, it will fail tests when swagger documentation is
  missing or inaccurate.


  As the test suite runs, any request or response details *not* matching the
  swagger file will throw an appropriate exception, failing the spec.  This
  ensures the swagger definition accurately describes application behavior,
  keeping documentation in sync with reality.


  ```hippie-swagger``` uses [hippie](https://github.com/vesln/hippie) under the
  hood, an excellent API testing tool.


  ## Features


  * All [hippie](https://github.com/vesln/hippie) features included

  * All aspects of swagger file validated; parameters, request/response body,
  paths, etc.

  * Checks for extra parameters, paths, headers, etc not mentioned in the
  swagger file

  * Ensures swagger file accurately describes API behavior

  * Accurate, human readable assertion messages


  ## Installation


  ```

  npm install hippie-swagger --save-dev

  ```


  ## Basic Usage


  ```js

  var hippie = require('hippie-swagger'),
      swagger = require('./my-dereferenced-swagger-file'); // see example for how to dereference swagger

  hippie(app, swagger)

  .get('/users/{username}')

  .pathParams({
    username: 'cachecontrol'
  })

  .expectStatus(200)

  .expectValue('user.first', 'John')

  .expectHeader('cache-control', 'no-cache')

  .end(function(err, res, body) {
    if (err) throw err;
  });

  ```


  ## Usage

  * See [hippie](https://github.com/vesln/hippie) documentation for a
  description of the base api

  * When specifying a url(.get, .post, .patch, .url, etc), use the [swagger
  path](http://swagger.io/specification/#pathsObject)

  * Provide any path variables using [pathParams](#pathparams)


  These aside, use hippie as you normally would; see the
  [example](example/index.js).


  ## Methods


  ### #constructor (Object app, Object swagger, Object [options])


  Test an HTTP app (like express) directly


  ```js

  hippie(app, swagger, options)

  .get('/projects')

  .end(fn);

  ```


  ### #constructor (Object swagger, Object [options])


  Test a remote HTTP app using a fully qualified url


  ```js

  hippie(swagger, options)

  .get('http://localhost:3000/projects')

  .end(fn);

  ```


  ### #pathParams(Object hash)


  Replaces variables contained in the swagger path.


  ```js

  hippie(app, swagger)

  .get('/projects/{projectId}/tasks/{taskId}')

  .pathParams({
    projectId: 123,
    taskId: 99
  })

  .end(fn);

  ```


  ## Options


  To customize behavior, an ```options``` hash may be passed to the
  constructor.  Typically, ```options``` only need to be specified in situations
  where the test covers responses to improper requests (e.g. validating the
  application returns a 422 when a required parameter is not provided).


  ```js

  var options = {
    validateResponseSchema: true,
    validateParameterSchema: true,
    errorOnExtraParameters: true,
    errorOnExtraHeaderParameters: false
  };

  hippie(app, swagger, options)

  ```


  ```validateResponseSchema``` - Validate the server's response against the
  swagger json-schema definition (default: ```true```)


  ```validateParameterSchema``` - Validate the request parameters against the
  swagger json-schema definition (default: ```true```)


  ```validateRequiredParameters``` - Validate that required parameters were
  provided  (default: ```true```)


  ```errorOnExtraParameters``` - Throw an error if a parameter is missing from
  the swagger file  (default: ```true```)


  ```errorOnExtraHeaderParameters``` - Throw an error if a request header is
  missing from the swagger file.  By default this is turned off, because it
  results in every request needing to specify the "Content-Type" and "Accept"
  headers, which quickly becomes verbose. (default: ```false```)



  ## Example

  See the [example](example/index.js) folder


  ## Validations


  When hippie-swagger detects it is interacting with the app in ways not
  specified in the swagger file, it will throw an error and fail the test.  The
  idea is to use hippie's core features to write API tests as per usual, and
  hippie-swagger will only interject if the swagger contract is violated.


  Below are list of some of the validations that hippie-swagger checks for:


  ### Paths

  ```js

  hippie(app, swagger)

  .get('/pathNotMentionedInSwagger')

  .end(fn);

  // path does not exist in swagger file; throws:

  //    Swagger spec does not define path: pathNotMentionedInSwagger

  ```


  ### Parameter format

  ```js

  hippie(app, swagger)

  .get('/users/{userId}')

  .pathParams({
    userId: 'string-value',
  })

  .end(fn);

  // userId provided as a string, but swagger specifies it as an integer;
  throws:

  //    Invalid format for parameter {userId}

  ```


  ### Required Parameters

  ```js

  hippie(app, swagger)

  .get('/users/{username}')

  .end(fn);

  // "username" is marked 'required' in swagger file; throws:

  //    Missing required parameter in path: username

  ```


  ### Extraneous Parameters

  ```js

  hippie(app, swagger)

  .get('/users')

  .qs({ page: 2, limit: 30 })

  .end(fn);

  // "page" missing from swagger file; throws:

  //    Error: query parameter not mentioned in swagger spec: "page", available
  params: limit

  ```


  ### Response format

  ```js

  hippie(app, swagger)

  .get('/users')

  .end(fn);

  // body failed to validate against swagger file's "response" schema; throws:

  //    Response from /users failed validation: [failure description]

  ```


  ### Method validation

  ```js

  hippie(app, swagger)

  .post('/users')

  .end(fn);

  // "post" method not mentioned in swagger file; throws:

  //    Swagger spec does not define method: "post" in path /users

  ```


  ### Post body format

  ```js

  hippie(app, swagger)

  .post('/users')

  .send({"bogus":"post-body"})

  .end(fn);


  // post body fails to validate against swagger file's "body" parameter;
  throws:

  //    Invalid format for parameter {body}, received: {"bogus":"post-body"}

  ```


  ### Form Url-Encoded Parameters

  ```js

  hippie(app, swagger)

  .form()

  .post('/users')

  .send({})

  .end(fn);


  // "username" is {required: true, in: formData} in swagger; throws:

  //    Missing required parameter in formData: username

  ```


  ### Multipart Forms

  ```js

  hippie(app, swagger)

  .header('Content-Type','multipart/form-data')

  .send()

  .post('/users/upload')

  .end(fn);


  // "fileUpload" is {required: true, in: formData, type: file} in swagger;
  throws:

  //    Missing required parameter in formData: fileUpload

  ```


  ## Troubleshooting


  The most common mistake is forgetting to dereference the swagger file:


  ```js

  "'Error: cant resolve reference ...'

  ```


  Dereferencing can be accomplished using
  [swagger-parser](https://github.com/BigstickCarpet/swagger-parser/blob/master/docs/swagger-parser.md#dereferenceapi-options-callback). 
  The [example](example/index.js) gives a demonstration.


  ## Contributing


  To run the `hippie-swagger` tests:


  ```

  npm test

  ```


  ## License

  [ISC](./LICENSE)
SabzCity/libgo: "# libgo   \n[![GoDoc](https://pkg.go.dev/badge/github.com/GeniusesGroup/libgo)](https://pkg.go.dev/github.com/GeniusesGroup/libgo)\n[![Go Report](https://goreportcard.com/badge/github.com/GeniusesGroup/libgo)](https://goreportcard.com/report/github.com/GeniusesGroup/libgo)\n\nAn **application** developing **framework** provide ZeroOps(zero operations), edge computing, ... that let you develope both server and client applications in Go without need to think more about any fundamental requirements, Just develope business services and user interfaces (now just graphical interface - gui), build apps as OS images or OS applications and easily just run first server node and let it distributes by many factors with inside logics not need external decision makers (automating software deployment) like Kubernetes(K8s).\n\nIn other word, `libgo` abbreviation of `Go language library` is a repository wrapper to store all implementation of GeniusesGroup and others protocols and algorithms to make a digital software more easily in better performance.\nYou can use all packages exported APIs, go generator mechanism or by [library CLI](#CLI) to access some useful APIs from command line easily.\n\n## Goals\n- Provide complete framework to develope any purpose distributed application with **low||no code**.\n- No(minimum) dependency on any other repositories.\n- Compile an application as **Unikernel** instead of regular OSs binaries.\n- Develope high available and distributed software without any admin in any infrastructure layers (DevOps culture goal).\n- Let service developers act Lean and Agile in their organization.\n- [Reinvent the wheel](https://en.wikipedia.org/wiki/Reinventing_the_wheel)\n\n## Not Goals\n- \n\n## Installation\n- Make project directory and suggest use your internet domain name for it.\n- initialize project version control. If you use git run `git init` or `git clone ${repository path}`.\n- init go project by `git init` and `go mod init`\n- add `libgo` to your project dependency\n- install `libgo` with `lang_eng` or your desire language\n- initialize the project with desire domain e.g. `google.com`\n- build your organization app by `libgo build` or by `go build` with desire tags and target OS and hardwares.\n- run your desire version from /bin/ directory. Strongly suggest run app by systemd on linux or other app manager on other OS.\n\nor easily run the following command under your project, just replace your domain name.\n```\nmkdir {domain}\ngit init\ngo mod init\ngo get -u github.com/GeniusesGroup/libgo\ngo install github.com/GeniusesGroup/libgo -tags \"lang_eng\"\nlibgo app init -d={domain}\nlibgo build\n```\n\n## Commands (CLA)\nlibgo has a the command-line client for the some generator APIs implement in [modules](./modules/). It provides simple access to all APIs functions to make an application, a GUI app, ....\n\nYou can get list of all commands and their helps with `libgo help`. We just list some of important commands here that you can run them from within a Go module or any where in your project directory:\n- **Initialize a project:** `libgo app init -d=[internet-domain]`\n- **Add new domain module:** `libgo domain new -n=[domain-name]`\n\n## Build tags\n- **dev_mode**: first check and change `AppMode_Dev` const in protocol package to desire behavior\n- **tcp_listener**:\n\n### Developing hints\n- Complete manifest in main package of service.\n- Add other data to main package if needed.\n- Implement protocols logic by autogenerate some codes not write them manually.\n- Don't think about network when you develope a business service logic. Use `st protocol.Stream` as stream data not network stream and don't remove it even don't need it from `Process` method arguments.\n\n## Protocols\nYou can find protocol descriptions in its directory as now [protocol](./protocol/), [society](./society/), [ISO](./iso/)    \nRead more about each protocol or library in its [RFC](https://github.com/GeniusesGroup/RFCs)\nAs [suggest here](https://github.com/golang/go/issues/48087) to comply with the standards we add [protocol](./protocol) package and all other libgo packages implement this package. You can implement these protocols in your own way if our packages can't satisfied you or your requirements.   \nA standard is a formalized protocol accepted by most of the parties that implement it. A protocol is not a set of rules. A protocol is the thing those rules describe the rules of. This is why programs implement a protocol and comply with a standard.\n\n### Industry Protocols\n- Insurance     >> ACCORD\n- Health Care   >> HL7\n- Retail        >> GS1\n- HR            >> HRXML\n\n## GIT\nGit is not the best version control mechanism for a software project, but it is the most use one.\n\n### Some useful commands\n- Make project version control by ```git init```\n- Clone exiting repo by ```git clone ${repository path}```.\n- Add libgo to project as submodule by ```git submodule add -b master https://github.com/GeniusesGroup/libgo```\n- Clone existing project with just latest commits not all one ```git clone ${repository path} --recursive --shallow-submodules```\n- Change libgo version by ```git checkout tag/${tag}``` or update by ```git submodule update -f --init --remote --checkout --recursive``` if needed.\n\n## Go\n### Some useful commands\n- go build -race\n- go tool compile -S {{file-name}}.go > {{file-name}}_C.S\n- go tool objdump {{file-name}}.o > {{file-name}}_O.S\n- go build -gcflags=-m {{file-name}}.go\n- go run -gcflags='-m -m' {{file-name}}.go\n- go build -ldflags \"-X version=0.1\"\n\n### build tags\nSome functionality in files that have build tags `//go:build tag_name` or `// +build tag_name` in the first line just build when you provided in build time like `go build -tags \"dev_mode tcp_listener\"`. Build tag declarations must be at the very top of a .go files. Nothing, not even comments, can be above build tags. We prefer `go:build` over `+build` because as [describe in the proposal](https://go.googlesource.com/proposal/+/master/design/draft-gobuild.md#transition) but below chart is how to declare in `+build` style.\n\n| Build Tag Syntax\t            | Build Tag Sample\t                        | Boolean Statement     |\n| :---:                         | :---:                                     | :---:                 |\n| Space-separated elements\t    | // +build pro enterprise\t                | pro OR enterprise     |\n| Comma-separated elements      | // +build pro,enterprise\t                | pro AND enterprise    |\n| New line separated elements   | // +build pro<br />// +build enterprise   | pro AND enterprise    |\n| Exclamation point elements    | // +build !pro\t                        | NOT pro               |\n\n## Contribute Rules\n- Write benchmarks and tests codes in different files as `{{file-name}}_test.go` and `{{file-name}}_bench_test.go`\n\n## Enterprise\nContact us by [this](mailto:ict@geniuses.group) or [this](mailto:omidhekayati@gmail.com) if you need enterprise support for developing high available and distributed software. See features available in enterprise package:\n- Develope exclusive features in very short time\n- Bug fixing quickly\n- \n\n## Good Idea, Bad implementation!\n- [SQLc](sqlc.dev)\n- [EntGo](https://entgo.io/)\n- [go-zero](https://github.com/zeromicro/go-zero) e.g. (microservice system), (fully compatible with net/http), (middlewares are supported), ...\nor [really relativetime?? Why not monotonic time??](https://github.com/zeromicro/go-zero/blob/master/core/timex/relativetime.go)\n\n## Related Projects\n- [Clive is an operating system designed to work in distributed and cloud computing environments.](https://github.com/fjballest/clive)\n\n## Abbreviations & Definitions\n- **UI**: (any) User Interface\n    - **GUI**: Graphic User Interface\n    - **VUI**: Voice User Interface\n    - **CLI**: Command Line Interface\n    - **CLA**: Command Line Arguments\n- **Modules**: a kind of collection of packages\n- **Packages**: a kind of collection of files\n- **dp**: domain protocol\n- **init**: initialize call just after an object allocate.\n- **reinit**: re-initialize call when allocated object want to reuse immediately or pass to a pool to reuse later. It will prevent memory leak by remove any references in the object.\n- **deinit**: de-initialize call just before an object want to de-allocated (GC).\n- **open**:\n- **reset**:\n- **close**:\n"
Swagger2Markup/swagger2markup: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD5C245:126C14AF:661488F8.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Swagger2Markup/swagger2markup-gradle-plugin: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B6237B3:11AE4C43:661488F9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
aress31/swurg: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  27C1:D3E08:3969F3B:58EE64F:661489BC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
frankiesardo/route-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:2134D7F:3523E16:66148CBC.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
gedaiu/swaggerize: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280D:1D1670:220DDF4:369E91A:66148CBE.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
grpc-ecosystem/grpc-gateway: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2800:0B6D:228F005:376D011:66148CC1.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
microsoft/OpenAPI.NET: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2808:307920:3A5A201:5A577E6:66148E64.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
microsoft/OpenAPI.NET.OData: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280A:38313E:3866DA2:572A336:66148E65.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
rswag/rswag: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2806:79BE:B49A5F3:116C81BB:66149006.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
LucyBot-Inc/api-spec-converter: >
  # api-spec-converter

  > This project is looking for a new maintainer! Let us know if you're
  interested in taking it over.


  [![Share on Twitter][twitter-image]][twitter-link]


  [![Chat on gitter][gitter-image]][gitter-link]

  [![NPM version][npm-image]][npm-link]

  [![Build status][travis-image]][travis-link]


  [![Dependency status][deps-image]][deps-link]

  [![devDependency status][devdeps-image]][devdeps-link]


  Convert between API description formats such as [Swagger](http://swagger.io/)
  and [RAML](http://raml.org/)


  **Currently only supports conversion to OpenAPI(fka Swagger) 2.0 format, and
  from OpenAPI 2.0 to OpenAPI 3.0.x**


  You can also use the online version at
  https://lucybot-inc.github.io/api-spec-converter/.


  ## Installation


  ### Command Line

  > Problems? See [issue
  #132](https://github.com/LucyBot-Inc/api-spec-converter/issues/132)

  ```bash

  npm install -g api-spec-converter

  ```


  ### NodeJS/Browser

  ```bash

  npm install --save api-spec-converter

  ```


  ## Usage


  ### Command Line

  ```bash

  $ api-spec-converter -h

    Usage: api-spec-converter [options] <URL|filename>

    Convert API descriptions between popular formats.

    Supported formats:
      * swagger_1
      * swagger_2
      * openapi_3
      * api_blueprint
      * io_docs
      * google
      * raml
      * wadl

    Options:

      -h, --help              output usage information
      -V, --version           output the version number
      -f, --from <format>     Specifies format to convert
      -t, --to <format>       Specifies output format
      -s, --syntax [syntax]   Specifies output data syntax: json or yaml. Defaults to json
      -o, --order [sortOrder] Specifies top fields ordering: openapi or alpha. Defaults to openapi
      -c, --check             Check if result is valid spec
      -d, --dummy             Fill missing required fields with dummy data
  ```


  Example:

  ```bash

  $ api-spec-converter --from=swagger_1 --to=swagger_2 --syntax=yaml
  --order=alpha
  https://raw.githubusercontent.com/LucyBot-Inc/api-spec-converter/master/test/input/swagger_1/petstore/pet.json
  > swagger.json

  ```


  ### NodeJS


  ### Options

  * `from` - source format (see formats below)

  * `to` - desired format (see formats below)

  * `source` - Filename, URL, or JS object for the source

  ### Simple example:

  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  }, function(err, converted) {
    console.log(converted.stringify());
    // For yaml and/or OpenApi field order output replace above line
    // with an options object like below
    //   var  options = {syntax: 'yaml', order: 'openapi'}
    //   console.log(converted.stringify(options));
  })

  ```

  ### Callback vs Promises

  This library has full support for both callback and promises.

  All async functions return promises but also will execute callback if
  provided.


  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })

  .then(function(converted) {
    console.log(converted.stringify());
  });

  ```

  ### Advanced features:

  ```js

  var Converter = require('api-spec-converter');

  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })
    .then(function(converted) {
      // [Optional] Fill missing fields with dummy values
      converted.fillMissing();

      // [Optional] Validate converted spec
      return converted.validate()
        .then(function (result) {
          if (result.errors)
            return console.error(JSON.stringify(errors, null, 2));
          if (result.warnings)
            return console.error(JSON.stringify(warnings, null, 2));

          fs.writeFileSync('swagger2.json', converted.stringify());
        });
    });
  ```


  ### Browser

  ```js

  <script
  src="node_modules/api-spec-converter/dist/api-spec-converter.js"></script>

  APISpecConverter.convert(...)

  ```


  ## Supported Formats


  * [Swagger
  1.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/1.2.md)
  (swagger_1)

  * [OpenAPI(fka Swagger)
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  (swagger_2)

  * [OpenAPI
  3.0.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  (openapi_3)

  * [I/O Docs](https://github.com/mashery/iodocs) (io_docs)

  * [API
  Blueprint](https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md)
  (api_blueprint)

  * [Google API
  Discovery](https://developers.google.com/discovery/v1/reference/apis) (google)

  * [RAML](http://raml.org/spec.html) (raml)

  * [WADL](http://www.w3.org/Submission/wadl/) (wadl)



  ## Conversion Table


  |from:            
  |swagger_1|swagger_2|openapi_3|io_docs|api_blueprint|google|raml|wadl|

  -------------------|:-------:|:-------:|:-----:|:-----:|:-----------:|:----:|:--:|:--:|

  |to swagger_1      |  n/a    |         |       |       |             |     
  |    |    |

  |to swagger_2      | :white_check_mark: |    n/a  | :white_check_mark:  |
  :white_check_mark: | :white_check_mark: | :white_check_mark: |
  :white_check_mark: | :white_check_mark: |

  |to openapi_3      |   :eight_spoked_asterisk:     | :white_check_mark: | 
  n/a  |   :eight_spoked_asterisk:  | :eight_spoked_asterisk: | 
  :eight_spoked_asterisk:   | :eight_spoked_asterisk:  |
  :eight_spoked_asterisk:  |

  |to io_docs        |         |         |       |  n/a  |             |     
  |    |    |

  |to api_blueprint  |         |         |       |       |    n/a      |     
  |    |    |

  |to google         |         |         |       |       |             |  n/a
  |    |    |

  |to raml           |         |         |       |       |             |      |
  n/a|    |

  |to wadl           |         |         |       |       |             |     
  |    | n/a|


  #### Key

  * :white_check_mark: - direct conversion

  * :eight_spoked_asterisk: - conversion via swagger_2


  ## Contributing

  Contributions are welcome and encouraged.


  ### Testing

  Please add a test case if you're adding features or fixing bugs. To run the
  tests:


  ```bash

  npm test

  ```


  In case you need to override the expected outputs, due to a justified and
  verified change, run this:

  ```bash

  WRITE_GOLDEN=true npm test

  ```

  ### Releases

  ```

  npm run browserify

  git commit -a -m "Build browser distribution"

  npm version minor # or major/patch

  npm publish

  git push --follow-tags

  ```


  [twitter-image]:
  https://img.shields.io/twitter/url/http/lucybot.github.io/api-spec-converter.svg?style=social

  [twitter-link]:
  https://twitter.com/intent/tweet?text=Convert+between+API+description+formats+such+as+Swagger+and+RAML:&url=http%3A%2F%2Flucybot.github.io%2Fapi-spec-converter

  [gitter-image]:
  https://img.shields.io/gitter/room/lucybot/api-spec-converter.svg

  [gitter-link]: https://gitter.im/lucybot/api-spec-converter

  [npm-image]: https://img.shields.io/npm/v/api-spec-converter.svg

  [npm-link]: https://npmjs.org/package/api-spec-converter

  [travis-image]:
  https://img.shields.io/travis/LucyBot-Inc/api-spec-converter.svg

  [travis-link]: https://travis-ci.org/LucyBot-Inc/api-spec-converter

  [deps-image]: https://img.shields.io/david/lucybot/api-spec-converter.svg

  [deps-link]: https://david-dm.org/lucybot/api-spec-converter

  [devdeps-image]:
  https://img.shields.io/david/dev/lucybot/api-spec-converter.svg

  [devdeps-link]:
  https://david-dm.org/lucybot/api-spec-converter#info=devDependencies
flasgger/flasgger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:1E8470:37A2759:5647A64:66148BDF.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
inaka/cowboy_swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2804:14C4:B4C95D1:117C980D:66148D01.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
kogosoftwarellc/open-api: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280A:38313E:3807E42:569F692:66148D44.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
krakenjs/hapi-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BE483A3:128258B6:66148DA3.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mitraman/rapido-web: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280C:17B462:29DD50C:3FA626E:66148E66.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
pyopenapi/pyswagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2809:836C:23961FD:39121FA:66149087.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
trailsjs/sails-swagger: >
  # sails-swagger


  [![NPM version][npm-image]][npm-url]

  [![Build status][ci-image]][ci-url]

  [![Dependency Status][daviddm-image]][daviddm-url]

  [![Code Climate][codeclimate-image]][codeclimate-url]



  [swagger.io](http://swagger.io/) (v2.0) hook for Sails. The application's
  models, controllers, and routes are aggregated and transformed into a Swagger
  Document. Supports the Swagger 2.0 specification.


  ## Install


  ```sh

  $ npm install sails-swagger --save

  ```


  ## Configuration

  ```js

  // config/swagger.js

  module.exports.swagger = {
    /**
     * require() the package.json file for your Sails app.
     */
    pkg: require('../package'),
    ui: {
      url: 'http://swagger.balderdash.io'
    }
  };

  ```


  ## Usage

  After installing and configuring swagger, you can find the docs output on the
  [/swagger/doc](http://localhost:1337/swagger/doc) route.


  You may also specify additional swagger endpoints by specifying the swagger
  spec in config/routes.js


  ```

  /**
   * Route Mappings
   * @file config/routes.js
   * (sails.config.routes)
   *
   * Your routes map URLs to views and controllers.
   */

  module.exports.routes = {

      /***************************************************************************
       *                                                                          *
       * Make the view located at `views/homepage.ejs` (or `views/homepage.jade`, *
       * etc. depending on your default view engine) your home page.              *
       *                                                                          *
       * (Alternatively, remove this and add an `index.html` file in your         *
       * `assets` directory)                                                      *
       *                                                                          *
       ***************************************************************************/

      '/': {
          view: 'homepage'
      },

      /***************************************************************************
       *                                                                          *
       * Custom routes here...                                                    *
       *                                                                          *
       * If a request to a URL doesn't match any of the custom routes above, it   *
       * is matched against Sails route blueprints. See `config/blueprints.js`    *
       * for configuration options and examples.                                  *
       *                                                                          *
       ***************************************************************************/
      'get /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['GET', 'POST'],
              summary: ' Get Groups ',
              description: 'Get Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'List of Groups',
                      schema: 'Group', // api/model/Group.js,
                      type: 'array'
                  }
              },
              parameters: []

          }
      },
      'put /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['PUT', 'POST'],
              summary: 'Update Groups ',
              description: 'Update Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'Updated Group',
                      schema: 'Group' // api/model/Group.js
                  }
              },
              parameters: [
                  'Group' // api/model/Group.js
              ]

          }
      }
  };



  ```


  ## License

  MIT


  ## Maintained By

  [<img src='http://i.imgur.com/Y03Jgmf.png' height='64px'>](http://langa.io)


  [sails-version-image]: https://goo.gl/gTUV5x

  [sails-url]: http://sailsjs.org

  [npm-image]: https://img.shields.io/npm/v/sails-swagger.svg?style=flat

  [npm-url]: https://npmjs.org/package/sails-swagger

  [ci-image]:
  https://img.shields.io/travis/langateam/sails-swagger/master.svg?style=flat

  [ci-url]: https://travis-ci.org/langateam/sails-swagger

  [daviddm-image]:
  http://img.shields.io/david/langateam/sails-swagger.svg?style=flat

  [daviddm-url]: https://david-dm.org/langateam/sails-swagger

  [codeclimate-image]:
  https://img.shields.io/codeclimate/github/langateam/sails-swagger.svg?style=flat

  [codeclimate-url]: https://codeclimate.com/github/langateam/sails-swagger
zalando-stups/play-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BFEA270:12A9A31B:661495B7.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
zalando-stups/swagger1st: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B89ADC1:11E9A7EF:661495B7.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
tfranzel/drf-spectacular: >
  ===============

  drf-spectacular

  ===============


  |build-status| |codecov| |docs| |pypi-version| |pypi-dl|


  Sane and flexible `OpenAPI`_ (`3.0.3`_ & `3.1`_) schema generation for `Django
  REST framework`_.


  This project has 3 goals:
      1. Extract as much schema information from DRF as possible.
      2. Provide flexibility to make the schema usable in the real world (not only toy examples).
      3. Generate a schema that works well with the most popular client generators.

  The code is a heavily modified fork of the

  `DRF OpenAPI generator
  <https://github.com/encode/django-rest-framework/blob/master/rest_framework/schemas/openapi.py/>`_,

  which is/was lacking all of the below listed features.


  Features
      - Serializers modelled as components. (arbitrary nesting and recursion supported)
      - `@extend_schema <https://drf-spectacular.readthedocs.io/en/latest/drf_spectacular.html#drf_spectacular.utils.extend_schema>`_ decorator for customization of APIView, Viewsets, function-based views, and ``@action``
          - additional parameters
          - request/response serializer override (with status codes)
          - polymorphic responses either manually with ``PolymorphicProxySerializer`` helper or via ``rest_polymorphic``'s PolymorphicSerializer)
          - ... and more customization options
      - Authentication support (DRF natives included, easily extendable)
      - Custom serializer class support (easily extendable)
      - ``SerializerMethodField()`` type via type hinting or ``@extend_schema_field``
      - i18n support
      - Tags extraction
      - Request/response/parameter examples
      - Description extraction from ``docstrings``
      - Vendor specification extensions (``x-*``) in info, operations, parameters, components, and security schemes
      - Sane fallbacks
      - Sane ``operation_id`` naming (based on path)
      - Schema serving with ``SpectacularAPIView`` (Redoc and Swagger-UI views are also available)
      - Optional input/output serializer component split
      - Callback operations
      - OpenAPI 3.1 support (via setting ``OAS_VERSION``)
      - Included support for:
          - `django-polymorphic <https://github.com/django-polymorphic/django-polymorphic>`_ / `django-rest-polymorphic <https://github.com/apirobot/django-rest-polymorphic>`_
          - `SimpleJWT <https://github.com/jazzband/djangorestframework-simplejwt>`_
          - `DjangoOAuthToolkit <https://github.com/jazzband/django-oauth-toolkit>`_
          - `djangorestframework-jwt <https://github.com/jpadilla/django-rest-framework-jwt>`_ (tested fork `drf-jwt <https://github.com/Styria-Digital/django-rest-framework-jwt>`_)
          - `dj-rest-auth <https://github.com/iMerica/dj-rest-auth>`_ (maintained fork of `django-rest-auth <https://github.com/Tivix/django-rest-auth>`_)
          - `djangorestframework-camel-case <https://github.com/vbabiy/djangorestframework-camel-case>`_ (via postprocessing hook ``camelize_serializer_fields``)
          - `django-filter <https://github.com/carltongibson/django-filter>`_
          - `drf-nested-routers <https://github.com/alanjds/drf-nested-routers>`_
          - `djangorestframework-recursive <https://github.com/heywbj/django-rest-framework-recursive>`_
          - `djangorestframework-dataclasses <https://github.com/oxan/djangorestframework-dataclasses>`_
          - `django-rest-framework-gis <https://github.com/openwisp/django-rest-framework-gis>`_
          - `Pydantic (>=2.0) <https://github.com/pydantic/pydantic>`_


  For more information visit the `documentation
  <https://drf-spectacular.readthedocs.io/>`_.


  License

  -------


  Provided by `T. Franzel <https://github.com/tfranzel>`_. `Licensed under
  3-Clause BSD
  <https://github.com/tfranzel/drf-spectacular/blob/master/LICENSE>`_.


  Requirements

  ------------


  -  Python >= 3.7

  -  Django (2.2, 3.2, 4.0, 4.1, 4.2, 5.0)

  -  Django REST Framework (3.10.3, 3.11, 3.12, 3.13, 3.14, 3.15)


  Installation

  ------------


  Install using ``pip``\ ...


  .. code:: bash

      $ pip install drf-spectacular

  then add drf-spectacular to installed apps in ``settings.py``


  .. code:: python

      INSTALLED_APPS = [
          # ALL YOUR APPS
          'drf_spectacular',
      ]


  and finally register our spectacular AutoSchema with DRF.


  .. code:: python

      REST_FRAMEWORK = {
          # YOUR SETTINGS
          'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
      }

  drf-spectacular ships with sane `default settings
  <https://drf-spectacular.readthedocs.io/en/latest/settings.html>`_

  that should work reasonably well out of the box. It is not necessary to

  specify any settings, but we recommend to specify at least some metadata.


  .. code:: python

      SPECTACULAR_SETTINGS = {
          'TITLE': 'Your Project API',
          'DESCRIPTION': 'Your project description',
          'VERSION': '1.0.0',
          'SERVE_INCLUDE_SCHEMA': False,
          # OTHER SETTINGS
      }

  .. _self-contained-ui-installation:


  Self-contained UI installation

  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


  Certain environments have no direct access to the internet and as such are
  unable

  to retrieve Swagger UI or Redoc from CDNs. `drf-spectacular-sidecar`_ provides

  these static files as a separate optional package. Usage is as follows:


  .. code:: bash

      $ pip install drf-spectacular[sidecar]

  .. code:: python

      INSTALLED_APPS = [
          # ALL YOUR APPS
          'drf_spectacular',
          'drf_spectacular_sidecar',  # required for Django collectstatic discovery
      ]
      SPECTACULAR_SETTINGS = {
          'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
          'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
          'REDOC_DIST': 'SIDECAR',
          # OTHER SETTINGS
      }


  Release management

  ^^^^^^^^^^^^^^^^^^


  *drf-spectacular* deliberately stays below version *1.x.x* to signal that
  every

  new version may potentially break you. For production we strongly recommend
  pinning the

  version and inspecting a schema diff on update.


  With that said, we aim to be extremely defensive w.r.t. breaking API changes.
  However,

  we also acknowledge the fact that even slight schema changes may break your
  toolchain,

  as any existing bug may somehow also be used as a feature.


  We define version increments with the following semantics. *y-stream*
  increments may contain

  potentially breaking changes to both API and schema. *z-stream* increments
  will never break the

  API and may only contain schema changes that should have a low chance of
  breaking you.



  Take it for a spin

  ------------------


  Generate your schema with the CLI:


  .. code:: bash

      $ ./manage.py spectacular --color --file schema.yml
      $ docker run -p 80:8080 -e SWAGGER_JSON=/schema.yml -v ${PWD}/schema.yml:/schema.yml swaggerapi/swagger-ui

  If you also want to validate your schema add the ``--validate`` flag. Or serve
  your schema directly

  from your API. We also provide convenience wrappers for ``swagger-ui`` or
  ``redoc``.


  .. code:: python

      from drf_spectacular.views import SpectacularAPIView, SpectacularRedocView, SpectacularSwaggerView
      urlpatterns = [
          # YOUR PATTERNS
          path('api/schema/', SpectacularAPIView.as_view(), name='schema'),
          # Optional UI:
          path('api/schema/swagger-ui/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),
          path('api/schema/redoc/', SpectacularRedocView.as_view(url_name='schema'), name='redoc'),
      ]

  Usage

  -----


  *drf-spectacular* works pretty well out of the box. You might also want to set
  some metadata for your API.

  Just create a ``SPECTACULAR_SETTINGS`` dictionary in your ``settings.py`` and
  override the defaults.

  Have a look at the `available settings
  <https://drf-spectacular.readthedocs.io/en/latest/settings.html>`_.


  The toy examples do not cover your cases? No problem, you can heavily
  customize how your schema will be rendered.


  Customization by using ``@extend_schema``

  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


  Most customization cases should be covered by the ``extend_schema`` decorator.
  We usually get

  pretty far with specifying ``OpenApiParameter`` and splitting request/response
  serializers, but

  the sky is the limit.


  .. code:: python

      from drf_spectacular.utils import extend_schema, OpenApiParameter, OpenApiExample
      from drf_spectacular.types import OpenApiTypes

      class AlbumViewset(viewset.ModelViewset):
          serializer_class = AlbumSerializer

          @extend_schema(
              request=AlbumCreationSerializer,
              responses={201: AlbumSerializer},
          )
          def create(self, request):
              # your non-standard behaviour
              return super().create(request)

          @extend_schema(
              # extra parameters added to the schema
              parameters=[
                  OpenApiParameter(name='artist', description='Filter by artist', required=False, type=str),
                  OpenApiParameter(
                      name='release',
                      type=OpenApiTypes.DATE,
                      location=OpenApiParameter.QUERY,
                      description='Filter by release date',
                      examples=[
                          OpenApiExample(
                              'Example 1',
                              summary='short optional summary',
                              description='longer description',
                              value='1993-08-23'
                          ),
                          ...
                      ],
                  ),
              ],
              # override default docstring extraction
              description='More descriptive text',
              # provide Authentication class that deviates from the views default
              auth=None,
              # change the auto-generated operation name
              operation_id=None,
              # or even completely override what AutoSchema would generate. Provide raw Open API spec as Dict.
              operation=None,
              # attach request/response examples to the operation.
              examples=[
                  OpenApiExample(
                      'Example 1',
                      description='longer description',
                      value=...
                  ),
                  ...
              ],
          )
          def list(self, request):
              # your non-standard behaviour
              return super().list(request)

          @extend_schema(
              request=AlbumLikeSerializer,
              responses={204: None},
              methods=["POST"]
          )
          @extend_schema(description='Override a specific method', methods=["GET"])
          @action(detail=True, methods=['post', 'get'])
          def set_password(self, request, pk=None):
              # your action behaviour
              ...

  More customization

  ^^^^^^^^^^^^^^^^^^


  Still not satisfied? You want more! We still got you covered.

  Visit `customization
  <https://drf-spectacular.readthedocs.io/en/latest/customization.html>`_ for
  more information.



  Testing

  -------


  Install testing requirements.


  .. code:: bash

      $ pip install -r requirements.txt

  Run with runtests.


  .. code:: bash

      $ ./runtests.py

  You can also use the excellent `tox`_ testing tool to run the tests

  against all supported versions of Python and Django. Install tox

  globally, and then simply run:


  .. code:: bash

      $ tox

  .. _Django REST framework: https://www.django-rest-framework.org/

  .. _OpenAPI: https://swagger.io/

  .. _3.0.3: https://spec.openapis.org/oas/v3.0.3

  .. _3.1: https://spec.openapis.org/oas/v3.1.0

  .. _tox: https://tox.wiki/

  .. _drf-spectacular-sidecar:
  https://github.com/tfranzel/drf-spectacular-sidecar


  .. |build-status| image::
  https://github.com/tfranzel/drf-spectacular/actions/workflows/ci.yml/badge.svg
     :target: https://github.com/tfranzel/drf-spectacular/actions/workflows/ci.yml
  .. |pypi-version| image:: https://img.shields.io/pypi/v/drf-spectacular.svg
     :target: https://pypi.org/project/drf-spectacular/
  .. |codecov| image::
  https://codecov.io/gh/tfranzel/drf-spectacular/branch/master/graph/badge.svg
     :target: https://codecov.io/gh/tfranzel/drf-spectacular
  .. |docs| image:: https://readthedocs.org/projects/drf-spectacular/badge/
     :target: https://drf-spectacular.readthedocs.io/
  .. |pypi-dl| image:: https://img.shields.io/pypi/dm/drf-spectacular
     :target: https://pypi.org/project/drf-spectacular/
madkote/fastapi-plugins: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:396A874:588E64A:66148E41.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
RuntimeTools/OpenAPIValidators: "# OpenAPI Validators\n\n[![Build Status](https://travis-ci.com/openapi-library/OpenAPIValidators.svg?branch=master)](https://travis-ci.com/openapi-library/OpenAPIValidators)\n![dependencies](https://img.shields.io/david/openapi-library/OpenAPIValidators)\n![style](https://img.shields.io/badge/code%20style-airbnb-ff5a5f.svg)\n[![codecov](https://codecov.io/gh/openapi-library/OpenAPIValidators/branch/master/graph/badge.svg)](https://codecov.io/gh/openapi-library/OpenAPIValidators)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/openapi-library/OpenAPIValidators/blob/master/CONTRIBUTING.md)\n\nUse Jest or Chai to assert that HTTP responses satisfy an OpenAPI spec.\n\n## Problem \U0001F615\n\nIf your server's behaviour doesn't match your API documentation, then you need to correct your server, your documentation, or both. The sooner you know the better.\n\n## Solution \U0001F604\n\nThese test plugins let you automatically test whether your server's behaviour and documentation match. They extend Jest and Chai to support the [OpenAPI standard](https://swagger.io/docs/specification/about/) for documenting REST APIs. In your JavaScript tests, you can simply assert `expect(responseObject).toSatisfyApiSpec()`\n\n### [jest-openapi](https://github.com/openapi-library/OpenAPIValidators/tree/master/packages/jest-openapi#readme)\n\n[![downloads](https://img.shields.io/npm/dm/jest-openapi)](https://www.npmjs.com/package/jest-openapi)\n[![npm](https://img.shields.io/npm/v/jest-openapi.svg)](https://www.npmjs.com/package/jest-openapi)\n\n### [Chai OpenAPI Response Validator](https://github.com/openapi-library/OpenAPIValidators/tree/master/packages/chai-openapi-response-validator#readme)\n\n[![downloads](https://img.shields.io/npm/dm/chai-openapi-response-validator)](https://www.npmjs.com/package/chai-openapi-response-validator)\n[![npm](https://img.shields.io/npm/v/chai-openapi-response-validator.svg)](https://www.npmjs.com/package/chai-openapi-response-validator)\n\n## Contributors ✨\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/rwalle61\"><img src=\"https://avatars1.githubusercontent.com/u/18170169?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Richard Waller</b></sub></a><br /><a href=\"#maintenance-rwalle61\" title=\"Maintenance\">\U0001F6A7</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=rwalle61\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=rwalle61\" title=\"Documentation\">\U0001F4D6</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/pulls?q=is%3Apr+reviewed-by%3Arwalle61\" title=\"Reviewed Pull Requests\">\U0001F440</a></td>\n    <td align=\"center\"><a href=\"https://github.com/JonnySpruce\"><img src=\"https://avatars3.githubusercontent.com/u/30812276?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jonny Spruce</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=JonnySpruce\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=JonnySpruce\" title=\"Documentation\">\U0001F4D6</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/pulls?q=is%3Apr+reviewed-by%3AJonnySpruce\" title=\"Reviewed Pull Requests\">\U0001F440</a></td>\n    <td align=\"center\"><a href=\"https://github.com/AlexDobeck\"><img src=\"https://avatars2.githubusercontent.com/u/10519388?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alex Dobeck</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=AlexDobeck\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3AAlexDobeck\" title=\"Bug reports\">\U0001F41B</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BenGu3\"><img src=\"https://avatars2.githubusercontent.com/u/7105857?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ben Guthrie</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=BenGu3\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3ABenGu3\" title=\"Bug reports\">\U0001F41B</a></td>\n    <td align=\"center\"><a href=\"https://martijnvegter.com/\"><img src=\"https://avatars3.githubusercontent.com/u/25134477?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Martijn Vegter</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=mvegter\" title=\"Code\">\U0001F4BB</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ludeknovy\"><img src=\"https://avatars1.githubusercontent.com/u/13610612?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ludek</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=ludeknovy\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3Aludeknovy\" title=\"Bug reports\">\U0001F41B</a></td>\n    <td align=\"center\"><a href=\"https://github.com/tgiardina\"><img src=\"https://avatars1.githubusercontent.com/u/37459104?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tommy Giardina</b></sub></a><br /><a href=\"https://github.com/openapi-library/OpenAPIValidators/commits?author=tgiardina\" title=\"Code\">\U0001F4BB</a> <a href=\"https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3Atgiardina\" title=\"Bug reports\">\U0001F41B</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n"
meeshkan/hmt: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280A:38313E:385BB43:5719E57:66148E43.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
theoomoregbee/sails-hook-swagger-generator: >
  # Swagger Generator Sails Hook

  [![Travis](https://img.shields.io/travis/theoomoregbee/sails-hook-swagger-generator.svg)](https://travis-ci.org/theoomoregbee/sails-hook-swagger-generator)

  [![npm](https://img.shields.io/npm/v/sails-hook-swagger-generator.svg)](https://www.npmjs.com/package/sails-hook-swagger-generator)

  [![npm](https://img.shields.io/npm/l/sails-hook-swagger-generator.svg)]()

  [![npm](https://img.shields.io/npm/dt/sails-hook-swagger-generator.svg)](https://www.npmjs.com/package/sails-hook-swagger-generator)

  [![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)



  This helps to create swagger documentation json which is based entirely on
  Swagger/OpenAPI specification (see [here](https://swagger.io/specification/)).

  The hook produces specification based upon OAS 3.0.


  ![](screenshot/swagger-doc.gif)



  ## Installation

  ```sh

  $ npm install sails-hook-swagger-generator --save

  ```



  ## Demo

  Copy the content of [generatedSwagger](test/fixtures/generatedSwagger.json)
  and paste it in [Swagger Online Editor](https://editor.swagger.io/).



  ## Usage

  Simply by lifting your sails app `sails lift`, after lifting or starting the
  app,there should be `swagger.json` within **./swagger** folder.


  > make sure ./swagger folder is already existing.


  Check the **./swagger/swagger.json** for generated swagger documentation json,
  then head to [Swagger Editor](https://editor.swagger.io/).


  ## Generated Output


  By default, the Swagger Generator Sails Hook generates:

  1. Full automatic documentation for all Sails Blueprint routes;

  1. Documentation for all Sails
     [actions2](https://sailsjs.com/documentation/concepts/actions-and-controllers#?actions-2)
     actions with routes configured in `config/routes.js`; and
  1. Listing of all routes configured in `config/routes.js` (full details cannot
  be inferred
     for custom routes without additional information being provided - see below).
  1. Creation of default tags for paths based upon Sails Model and Controller
  `globalId`'s.


  ## Use with [Swagger UI](https://github.com/swagger-api/swagger-ui)


  See
  [#28](https://github.com/theoomoregbee/sails-hook-swagger-generator/issues/28)


  ## Adding/Customising Generated Output


  Documentation detail and customisation of most aspects of the generated
  Swagger can be achieved by adding:

  1. Top-level configuration to `config/swaggergenerator.js`. This provides
  direct JSON
     used as the template for the output Swagger/OpenAPI.
  1. Objects with the key `swagger` to custom route configuration, controller
  files, action
     functions, model definitions and model attribute definitions. The `swagger` element must be of type
     [SwaggerActionAttribute](./lib/interfaces.ts#L55) for actions (based on OpenApi.Operation)
     or [SwaggerModelSchemaAttribute](./lib/interfaces.ts#L66) for model schemas (based on OpenApi.UpdatedSchema).
  1. JSDoc ([swagger-jsdoc](https://github.com/Surnet/swagger-jsdoc)) `@swagger`
  comments
     to controller/action files and model files.

  Top-level Swagger/OpenAPI definitions for `tags` and `components` may be added
  in all `swagger` objects

  above and in all JSDoc `@swagger` documentation comments. This enables the
  definition of top-level elements.


  See below for details.


  ## Configurations


  It comes with some default settings which can be overridden by creating
  `config/swaggergenerator.js`:

  ```javascript

  module.exports['swagger-generator'] = {
      disabled: false,
      swaggerJsonPath: './swagger/swagger.json',
      swagger: {
          openapi: '3.0.0',
          info: {
              title: 'Swagger Json',
              description: 'This is a generated swagger json for your sails project',
              termsOfService: 'http://example.com/terms',
              contact: {name: 'Theophilus Omoregbee', url: 'http://github.com/theo4u', email: 'theo4u@ymail.com'},
              license: {name: 'Apache 2.0', url: 'http://www.apache.org/licenses/LICENSE-2.0.html'},
              version: '1.0.0'
          },
          servers: [
              { url: 'http://localhost:1337/' }
          ],
          externalDocs: {url: 'https://theoomoregbee.github.io/'}
      },
      defaults: {
          responses: {
              '200': { description: 'The requested resource' },
              '404': { description: 'Resource not found' },
              '500': { description: 'Internal server error' }
          }
      },
      excludeDeprecatedPutBlueprintRoutes: true,
      includeRoute: function(routeInfo) { return true; },
      updateBlueprintActionTemplates: function(blueprintActionTemplates) { ... },
      postProcess: function(specifications) { ... }
  };

  ```


  Notes on the use of configuration:


  * `disabled` attribute is used to disable the module (e.g you may want to
  disable it on production).

  * `swaggerJsonPath` where to generate the `swagger.json` file to; defaults to
  `sails.config.appPath + '/swagger/swagger.json'`
     and output file will not be written if empty/null/undefined (see `postProcess` below for alternate save mechanism).
  * `swagger` object is template for the Swagger/OpenAPI output. It defaults to
  the minimal content above.
     Check Swagger/OpenAPI specification for more, in case you want to extend it.
     Generally, this hook provides sensible defaults for as much as possible but you may
     override them in this location or in any of the mechanisms explained below.
  * `defaults` object should contain the `responses` element; defaults to the
  above if not specified.

  * `excludeDeprecatedPutBlueprintRoutes` should
    [deprecated](https://sailsjs.com/documentation/reference/blueprint-api/update#?notes) `PUT` blueprint
    routes be excluded from generated Swagger output; defaults to `true`.
  * `includeRoute` function used to filter routes to be included in generated
  Swagger output; see advanced section below.

  * `updateBlueprintActionTemplates` allows customisation of the templates used
  to generate Swagger for blueprints; see advanced section below.

  * `postProcess` allows an alternate mechanism for saving and/or modification
  of the generated Swagger output before it is written to
     the output file; see advanced section below.


  ## Custom Route Configuration


  Documentation detail and customisation of most aspects of the generated
  Swagger for

  [custom
  routes](https://sailsjs.com/documentation/concepts/routes/custom-routes) may
  be achieved by:


  1. Adding an object with the key `swagger` (must be of type
  [SwaggerActionAttribute](./lib/interfaces.ts#L55) for actions, based on
  OpenApi.Operation) to individual route configurations in `config/routes.js`.

  1. Adding an object with the key `swagger` (must be of type
  [SwaggerControllerAttribute](./lib/interfaces.ts#L76)) to the exports of a
  controller file, standalone action file or actions2 file.

  1. Adding an object with the key `swagger` (must be of type
  [SwaggerModelAttribute](./lib/interfaces.ts#L87)) to the exports of a model
  file.

  1. Adding JSDoc `@swagger` comments to Sails
    [model files](https://sailsjs.com/documentation/concepts/models-and-orm/models),
    [controller files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?controllers),
    [standalone action files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?standalone-actions) or
    [actions2 files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?actions-2); specifically:
      - JSDoc `@swagger` documentation under the `/{actionName}` path for the route (controllers/actions), or
      - JSDoc `@swagger` documentation under the `/{blueprintAction}` path for the route (models), or
      - JSDoc `@swagger` documentation under `tags` and `components` paths for adding to the top-level Swagger/OpenAPI definitions.


  ### Custom Route Configuration in `config/routes.js`


  If you want to add extra configuration to a route, it can be done via the
  `config/routes.js`, since Sails uses different [route
  targets](https://sailsjs.com/documentation/concepts/routes/custom-routes#?route-target),
  we can leverage the route object target to extend/override our swagger
  configuration by adding an object with a key `swagger`.


  For example, in `config/routes.js`:

  ```javascript

  {
    'post /user/login': {
      controller: 'UserController',
      action: 'login',
      swagger: {
        summary: 'Authentication',
        description: 'This is for authentication of any user',
        tags: [ 'Tag Name' ],
        requestBody: {
          content: {
            'application/json': {
              schema: {
                properties: {
                  email: { type: 'string' },
                  password: { type: 'string', format: 'password' }
                },
                required: [ 'email', 'password' ],
              }
            }
          }
        },
        parameters: [{
          in: 'query',
          name: 'firstName',
          required: true,
          schema: { type: 'string' },
          description: 'This is a custom required parameter'
        }],
        responses: {
          '200': {
            description: 'The requested resource',
              content: {
                'application/json': {
                  schema: {
                    type: 'array',
                    items: { '$ref': '#/components/schemas/someDataType' },
                  },
                },
              },
          },
          '404': { description: 'Resource not found' },
          '500': { description: 'Internal server error' }
        }
      }
    }
  }

  ```


  ### Custom Route Configuration in Controller or Action files


  Documentation detail and customisation of most aspects of the generated
  Swagger may be added to

  [controller
  files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?controllers),

  [standalone action
  files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?standalone-actions)
  or

  [actions2
  files](https://sailsjs.com/documentation/concepts/actions-and-controllers#?actions-2)
  as follows:


  1. Adding an object with the key `swagger` added to a controller file action
  function.

  1. Adding an object with the key `swagger` to the exports of a controller
  file, standalone
     action file or actions2 file:
     - For controller files, actions are referenced by adding objects keyed on `swagger.actions.{actionName}`
       name. See [UserController.js](./api/controllers/UserController.js);
     - For standalone action or actions2 files, placing content in the
       `swagger.actions.{actionFileName|actions2FileName}` object. See
       [actions2.js](./api/controllers/subdir/actions2.js)
       ***Note**: `actionFileName|actions2FileName` must correspond to the filename*;
     - For all controller/action files, adding per-action documentation to be
       applied to **all** actions using the key `swagger.actions.allActions`
       e.g. use this to apply common tags to all actions for a controller.
     - Adding documentation under `tags` and `components` elements for adding to the
       top-level Swagger/OpenAPI definitions. See example in either
       [UserController.js](./api/controllers/UserController.js)
       or [actions2.js](./api/controllers/subdir/actions2.js).
  1. Adding JSDoc `@swagger` comments to controller file, standalone action file
  or actions2 file:
     - JSDoc `@swagger` documentation under the `/{actionName}` path for the controller file actions,
     - JSDoc `@swagger` documentation under the `/{actionFileName|actions2FileName}` path for standalone action or actions2 files,
     - JSDoc `@swagger` documentation under the `/allActions` path to be applied to **all** actions for the controller, or
     - JSDoc `@swagger` documentation under `tags` and `components` paths for adding to the top-level Swagger/OpenAPI definitions.

  An `exclude` property, set to `true`, may be added to any `swagger` element or
  `@swagger` JSDoc

  action documentation to exclude that action from the generated Swagger. See
  example in

  [NomodelController.js](api/controllers/NomodelController.js).


  The Swagger definition for each action is merged in the order above to form
  the final

  definition, with `config/routes.js` taking highest precendence and **earlier**
  definitions

  above taking precedence over later.


  #### For actions2 files:

  1. Inputs are parsed to generate parameter documentation.

  2. Exits are parsed to generate response documentation.

  3. Both may be customised/overridden by specifying parameters and/or responses
  in the `swagger` object
     in actions2 file.
  4. Inputs may also add an object with the key `meta.swagger` to document the
  attributes
     Swagger/OpenAPI **schema** associated with the input value. See example in
     [actions2.js](./api/controllers/subdir/actions2.js).
  5. Inputs may be excluded from the generated Swagger by setting
  `meta.swagger.exclude` to `true`.

  6. Inputs may specify *where* the input should be included within the
  generated Swagger using the key
     `meta.swagger.in`. The values `query`/`header`/`path`/`cookie` may be used to produce Swagger operation
     parameters and the value `body` may be used to produce `requestBody` schema properties
     (valid for PUT/POST/PATCH operations only).

  For example, for a route configured as:

  ```javascript

  module.exports.routes = {
      '/api/v1/auth/tokens': 'AuthController.tokens',
  };

  ```


  The `tokens` action might be documented in a Controller
  `api/controllers/AuthController.js` as follows:

  ```javascript

  function tokens(req, res) {
      ...
  }


  module.exports = {
      tokens: tokens,
      swagger: {
        actions: {
          tokens: {
              tags: [ 'Auth' ],
              description: 'Route description...'
          }
        }
        tags: [
               {
                  name: 'Auth',
                  description: 'Module description ...',
               }
          ],
        components: {
          ...
        }
      }
  };

  ```


  Or, alternately using JSDoc:

  ```javascript

  /**
   * @swagger
   *
   * /tokens:
   *   description: Route description...
   *   tags:
   *     - Auth
   * tags:
   *   - name: Auth
   *     description: Module description...
   */
  function tokens(req, res) {
      ...
  }


  module.exports = {
      tokens: tokens
  };

  ```


  ## Blueprint Route Configuration


  Documentation detail and customisation of most aspects of the generated
  Swagger for

  [blueprint
  routes](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes)
  may be achieved by:


  1. Adding an object with the key `swagger` to individual models e.g.
  `api/models/modelName.js`:
     - Adding documentation to the model's Swagger **schema** using the key `swagger.modelSchema`
       e.g. use this to apply detailed documentation via the `description` field;
     - In additon to the model's schema, the key `swagger.modelSchema` may be used to specify
       tag names (as a `string[]`) to be assigned all blueprint actions for the model.
       This is a *non-standard* convenience function i.e. in Swagger/OpenAPI you need to
       explicitly add tags to **each/every** OpenAPI.Operation;
     - Adding per-action documentation by adding objects keyed on
       `swagger.actions.{blueprintAction}` name;
     - Adding action documentation to **all** actions using the key `swagger.actions.allActions`
       e.g. use this to apply common `externalDocs` to all blueprint actions for the model; or
     - Adding documentation under `swagger.tags` and `swagger.components` elements for adding to the top-level Swagger/OpenAPI definitions.
  1. Adding documentation-specific fields to model attributes (supports
  `description`, `moreInfoUrl` and `example`).
     Note that applicable Sails [attributes](https://sailsjs.com/documentation/concepts/models-and-orm/attributes),
     [automigrations](https://sailsjs.com/documentation/concepts/models-and-orm/attributes#?automigrations) and
     [validations](https://sailsjs.com/documentation/concepts/models-and-orm/validations) are also parsed.
  1. Adding an object with the key `meta.swagger` to individual model attributes
  to document
     the attributes Swagger/OpenAPI **schema**. See example in [Pet.js](./api/models/Pet.js).
  1. Adding JSDoc `@swagger` comments to model files:
     - JSDoc `@swagger` documentation under the `/{globalId}` to add documentation to
       the model's Swagger **schema** (or tags as noted above),
     - JSDoc `@swagger` documentation under the `/{blueprintAction}` to add per-action
       documentation for the
       [model blueprint actions](https://sailsjs.com/documentation/concepts/blueprints/blueprint-actions),
     - JSDoc `@swagger` documentation under the `/allActions` path to be applied to **all**
       blueprint actions for the model, or
     - JSDoc `@swagger` documentation under `tags` and `components` paths for adding to the
       top-level Swagger/OpenAPI definitions.

  An `exclude` property, set to `true`, may be added to any `swagger` element of
  `@swagger` JSDoc

  action documentation to exclude the model *completely* (exclude the
  **schema**) or a specific

  blueprint action from the generated Swagger. See example in
  [OldPet.js](api/models/OldPet.js).


  Individual model attributes may be excluded from the generated Swagger by
  setting

  `meta.swagger.exclude` to `true`. See example in [Pet.js](api/models/Pet.js).


  OpenAPI 3 specifies the ***Any Type*** by the absence of the `type` property
  in a schema;

  this may be achieved by setting a model attribute's `meta.swagger.type` value
  to `null`.

  See example in [User.js](api/models/User.js).


  The Swagger definition for each action is merged in the order above to form
  the final

  definition, with `config/routes.js` taking highest precendence and **earlier**
  definitions

  above taking precedence over later.


  For example, in a model `api/models/User.js`:


  ```javascript

  /**
   * @swagger
   *
   * /User:
   *   tags:
   *     - Tag Name
   * /findone:
   *   externalDocs:
   *     url: https://docs.com/here
   */
  module.exports = {
    attributes: {
      uid: {
        type: 'string',
        example: '012345',
        description: 'A unique identifier',
      }
    },
    swagger: {
      actions: {
        create: { ... },
      },
      modelSchema: { ... },
      tags: [...]
      components: {...}
    }
  };

  ```


  Note that following parameters are added to the `components/parameters` if
  they are not

  provided in `config/swaggergenerator.js` (expressed as OpenAPI references):


  ```javascript

  [
    { $ref: '#/components/parameters/WhereQueryParam' },
    { $ref: '#/components/parameters/LimitQueryParam' },
    { $ref: '#/components/parameters/SkipQueryParam' },
    { $ref: '#/components/parameters/SortQueryParam' },
    { $ref: '#/components/parameters/SelectQueryParam' },
    { $ref: '#/components/parameters/PopulateQueryParam' },
  ]

  ```


  Note that when generating Swagger/OpenAPI documentation for blueprint routes,
  the hook also

  generates:


  1. Schemas for **models**, which may be referenced using the form `{ $ref:
  '#/components/schemas/modelName' }`.

  2. Parameters for model **primary keys**, which may be referenced using the
  form `{ $ref: '#/components/parameters/ModelPKParam-modelName' }`.


  These may be re-used (referenced) if/as applicable within custom route
  documentation.



  ## Handling Top-Level Swagger Defintions (Tags and Components)


  You are able to add to the top-level Swagger/OpenAPI definitions for `tags`
  and `components` in all `swagger` objects

  detailed above and in all JSDoc `@swagger` documention comments.


  All `swagger` objects may contain the elements `tags` and `components`(*except
  the ones specified in `config.routes.js*) e.g.


  ```javascript

  {
    tags: [
      {
        name: 'Test Module',
        description: 'Module description ...',
        externalDocs: { url: 'https://docs.com/test' }
      }
    ],
    components: {
      schemas: {
        test: { ... }
      }
    }
  }

  ```


  Similarly, JSDoc `@swagger` tags may define `tags` and `components`:


  ```javascript

  /**
   * @swagger
   *
   * tags:
   *   - name: Test Module
   *     description: |
   *       Module description
   *       (continued).
   *
   *       Another paragraph.
   *
   *     externalDocs:
   *       url: https://docs.com/test
   *       description: Refer to these docs
   *
   * components:
   *   schemas:
   *     test:
   *       ...
   */
  ```


  ### Tags Handling


  Tags are added to the top-level Swagger/OpenAPI definitions as follows:

  1. If a tags with the specified name **does not** exist, it is added.

  1. Where a tag with the specified name **does** exist, elements _of that tag_
  that do not exist are added
     e.g. `description` and `externalDocs` elements.

  Note that a final *clean-up* phase is run after processing, which performs the
  following:

  1. Removal of unreferenced tags; and

  2. Creation of tags referenced but are not defined.


  ### Component Element Handling


  Elements of components are added to the top-level Swagger/OpenAPI definitions
  as follows:

  1. Elements of the component definition reference (schemas, parameters, etc)
  are added where
     they **do not exist**.
  1. Existing elements are **not** overwritten or merged.


  For example, the element `components.schemas.pet` will be added as part of a
  merge process,

  but the contents of multiple definitions of `pet` **will not** be merged.


  The following elements (from the OpenAPI 3 specification) are handled:

  ```javascript

  let componentDefinitionReference = {
      // Reusable schemas (data models)
      schemas: {},
      // Reusable path, query, header and cookie parameters
      parameters: {},
      // Security scheme definitions (see Authentication)
      securitySchemes: {},
      // Reusable request bodies
      requestBodies: {},
      // Reusable responses, such as 401 Unauthorized or 400 Bad Request
      responses: {},
      // Reusable response headers
      headers: {},
      // Reusable examples
      examples: {},
      // Reusable links
      links: {},
      // Reusable callbacks
      callbacks: {},
  };

  ```



  ## Advanced Filtering/Processing of Generated Swagger


  Three mechanisms are provided to enable advancing filtering of the Swagger
  generation process:

  1. An `includeRoute()` function used to filter routes to be included in
  generated Swagger output.

  1. An `updateBlueprintActionTemplates()` function allows customisation of the
  templates used to generate Swagger for blueprints.

  1. A `postProcess()` function allows an alternate mechanism for saving and/or
  modification of the generated Swagger output before it is written to the
  output file.


  Each is configured in `config/swaggergenerator.js`.


  ### Route Information


  This hook parses all routes, custom and blueprint, before commencing the
  generation of the Swagger output.

  Each route is described by a `SwaggerRouteInfo` object

  (see defintion [here](./lib/interfaces.ts#L184)):


  ```typescript

  export interface SwaggerRouteInfo {
    middlewareType: MiddlewareType; //< one of action|blueprint

    verb: HTTPMethodVerb; //< one of all|get|post|put|patch|delete
    path: string; //< full Sails URL as per sails.getUrlFor() including prefix
    variables: string[]; //< list of ALL variables extracted from path e.g. `/pet/:id` --> `id`
    optionalVariables: string[]; //< list of optional variables from path e.g. `/pet/:id?`

    action: string; //< either blueprint action (e.g. 'find') or action identity (e.g. 'subdir/reporting/run')
    actionType: ActionType; //< one of blueprint|shortcutBlueprint|controller|standalone|actions2|function
    actions2Machine?: Sails.Actions2Machine; //< for actionType === 'actions2', details of the action2 machine

    model?: SwaggerSailsModel; //< reference to Sails Model (blueprints only)
    associationAliases?: string[]; //< association attribute names (relevant blueprint routes only)

    defaultTagName?: string; //< default tag name for route, if any, based on Sails Model or Controller

    swagger?: SwaggerActionAttribute; //< per-route Swagger (OpenApi Operation)
  }

  ```


  Other interfaces for models, `swagger` elements etc may be found in
  [interfaces.ts](./lib/interfaces.ts).



  ### Route Filtering


  The `includeRoute(routeInfo): boolean` function may be used to select which
  routes are included in the generated Swagger output.


  For example:

  ```javascript

  module.exports['swagger-generator'] = {
    includeRoute: (routeInfo) => {
      let c = routeInfo.controller;
      if(!c) return true;
      if(c.toLowerCase().startsWith('user')) return true;
      return false;
    }
  }

  ```


  ### Customising Blueprint Action Templates


  The templates used for generating Swagger for each Sails blueprint action
  route may be

  customised / modified / added to using the `updateBlueprintActionTemplates`
  config option

  e.g. to support custom blueprint actions/routes.


  For example:

  ```javascript

  module.exports['swagger-generator'] = {
    updateBlueprintActionTemplates: function(blueprintActionTemplates) {
      blueprintActionTemplates.search = { ... };
      return blueprintActionTemplates;
    }
  }

  ```


  The `blueprintActionTemplates` object contains keys of the blueprint **action
  names**

  and values as per the following example (refer to the

  [source code](lib/type-formatter.js#L70) for the default templates):


  ```javascript

  let blueprintActionTemplates = {
    findone: {
      summary: 'Get {globalId} (find one)',
      description: 'Look up the **{globalId}** record with the specified ID.',
      externalDocs: {
        url: 'https://sailsjs.com/documentation/reference/blueprint-api/find-one',
        description: 'See https://sailsjs.com/documentation/reference/blueprint-api/find-one'
      },
      parameters: [
        'primaryKeyPathParameter', // special case; filtered and substituted during generation phase
        { $ref: '#/components/parameters/LimitQueryParam' },
      ],
      resultDescription: 'Responds with a single **{globalId}** record as a JSON dictionary',
      notFoundDescription: 'Response denoting **{globalId}** record with specified ID **NOT** found',
      // if functions, each called with (blueprintActionTemplate, routeInfo, pathEntry)
      modifiers: ['addSelectQueryParam', exampleModifierFunctionRef],
    },
    ...
  };

  ```


  Note that:

  1. For summary and description strings the value `{globalId}` is replaced with
  the applicable Sails model value.

  1. Parameters values are Swagger definitions, with the exception of the
  *special* string value
     `primaryKeyPathParameter`, which may be used to include a reference to a model's primary key.
  1. Modifiers are used to apply custom changes to the generated Swagger, noting
  that:
     - String values are predefined in `generatePaths()` (refer to the [source code](lib/generators.js#L246));
       valid  modifiers are:
       - `addPopulateQueryParam`
       - `addSelectQueryParam`
       - `addOmitQueryParam`
       - `addModelBodyParam`
       - `addModelBodyParamUpdate`
       - `addResultOfArrayOfModels`
       - `addAssociationPathParam`
       - `addAssociationFKPathParam`
       - `addAssociationResultOfArray`
       - `addResultOfModel`
       - `addResultNotFound`
       - `addResultValidationError`
       - `addFksBodyParam`
       - `addShortCutBlueprintRouteNote`
     - Functions are called as `func(blueprintActionTemplate, routeInfo, pathEntry, tags, components)`
       where
       - `blueprintActionTemplate` the blueprint action template (see above) to which the modifier relates
       - `routeInfo` the route information object (see above) for which the Swagger is being generated
       - `pathEntry` the generated Swagger path entry to be modified
       - `tags` the generated Swagger **tag** definitions to be modified/extended
       - `components` the generated Swagger **component** definitions to be modified/extended

  ### Post-processing Generated Swagger Output


  The final generated Swagger output may be post-processed before it is written
  to

  the output file using a post-processing function specified as the
  `postProcess` config option.


  For situations where saving the generated swagger documentation JSON to a file
  is

  not desired/appropriate, the `postProcess` config option may be used to
  specify

  an alternate save mechanism.


  Note that if `swaggerJsonPath` config option is empty/null/undefined the
  output file will not be written.


  For example:

  ```javascript

  module.exports['swagger-generator'] = {
    postProcess: function(specifications) {
      let sch = specifications.components.schemas;
      Object.keys(sch).map(k => {
        sch[k].description = sck[k].description.toUpperCase();
      });
    }
  }

  ```



  ## Testing


  * Clone this repository


  * Install all development dependencies


  ```sh
   npm install
  ```

  * Then run test


  ```sh

  npm test

  ```


  ## Contribute


  Fork this repo and push in your ideas.

  Do not forget to add a bit of test(s) of what value you adding.

  * stick to conventional commit message
  [here](https://conventionalcommits.org/) or read more [angular
  commit](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit)
  pattern

  * While developing, you can run the below command to start nodemon watch too
  run linting and testing on `.ts` changes


  ```sh

  npm run dev

  ```


  ## Changelog


  See the different releases
  [here](https://github.com/theo4u/sails-hook-swagger-generator/releases)


  ## License


  MIT License (MIT)
ccouzens/keycloak-openapi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BD95D7D:12718BDC:66148A1D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
muonsoft/openapi-mock: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:39B80BC:58FFBD3:66148F23.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mockoon/mockoon: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:39A103A:58DE03C:66148EE3.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
canvural/php-openapi-faker: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  27C1:751C:D7C925D:15B778C5:661489FD.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
jimschubert/intellij-openapi-generator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:424B:B6EAA75:11C12885:66148D02.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
rithvikvibhu/GHLocalApi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2804:14C4:B55A98C:118A1E92:66149006.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
abersheeran/index.py: >-
  {"message":"API rate limit exceeded for 20.171.133.141. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more
  details.)","documentation_url":"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting"}
stoplightio/studio: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BF4AD48:129A9C5B:661492B4.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
hummingbird-me/api-docs: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BE286C4:127F5D15:66148D01.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
unchase/Unchase.OpenAPI.Connectedservice: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:2C87CEF:439D267:66149456.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
OpenAPITools/openapi-diff: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:27DEDD:A8DB74C:10740EC5:661487B9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
danielgtaylor/restish: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:7601:2026321:33EAC51:66148B3A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
schemathesis/schemathesis: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280B:1042E2:38D9E02:57887B6:661490A9.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
BRIKEV/express-jsdoc-swagger: "![npm](https://img.shields.io/npm/v/express-jsdoc-swagger)\n![Node.js Package](https://github.com/BRIKEV/express-jsdoc-swagger/workflows/Build/badge.svg)\n[![Known Vulnerabilities](https://snyk.io/test/github/BRIKEV/express-jsdoc-swagger/badge.svg)](https://snyk.io/test/github/BRIKEV/express-jsdoc-swagger)\n[![Maintainability](https://api.codeclimate.com/v1/badges/6d5565df0c9c10e75b59/maintainability)](https://codeclimate.com/github/BRIKEV/express-jsdoc-swagger/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/6d5565df0c9c10e75b59/test_coverage)](https://codeclimate.com/github/BRIKEV/express-jsdoc-swagger/test_coverage)\n![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)\n![npm](https://img.shields.io/npm/dm/express-jsdoc-swagger)\n\n# express-jsdoc-swagger\n\nWith this library, you can document your express endpoints using swagger [OpenAPI 3 Specification](https://swagger.io/specification/) without writing YAML or JSON. You can write comments similar to `jsdoc` on each endpoint, and the dependecy is going to create the swagger UI.\n\n## Table of Contents\n\n1. [Prerequisites](#Prerequisites)\n2. [Installation](#Installation)\n3. [Basic Usage](#Basic-Usage)\n4. [Basic Examples](#Basic-Examples)\n\t- [Advanced examples](https://github.com/BRIKEV/express-jsdoc-swagger/tree/master/examples)\n\t- [Official docs](https://brikev.github.io/express-jsdoc-swagger-docs/#/)\n5. [Validator](#Validator)\n6. [VSCode extension](https://marketplace.visualstudio.com/items?itemName=brikev.express-jsdoc-swagger-snippets)\n\n## Prerequisites\n\nThis library assumes you are using:\n\n1. [NodeJS](https://nodejs.org)\n2. [Express.js](http://www.expressjs.com)\n\n## Installation\n\n```\nnpm i express-jsdoc-swagger\n```\n\n## Basic Usage\n\n```javascript\n// index.js file\nconst express = require('express');\nconst expressJSDocSwagger = require('express-jsdoc-swagger');\n\nconst options = {\n  info: {\n    version: '1.0.0',\n    title: 'Albums store',\n    license: {\n      name: 'MIT',\n    },\n  },\n  security: {\n    BasicAuth: {\n      type: 'http',\n      scheme: 'basic',\n    },\n  },\n  // Base directory which we use to locate your JSDOC files\n  baseDir: __dirname,\n  // Glob pattern to find your jsdoc files (multiple patterns can be added in an array)\n  filesPattern: './**/*.js',\n  // URL where SwaggerUI will be rendered\n  swaggerUIPath: '/api-docs',\n  // Expose OpenAPI UI\n  exposeSwaggerUI: true,\n  // Expose Open API JSON Docs documentation in `apiDocsPath` path.\n  exposeApiDocs: false,\n  // Open API JSON Docs endpoint.\n  apiDocsPath: '/v3/api-docs',\n  // Set non-required fields as nullable by default\n  notRequiredAsNullable: false,\n  // You can customize your UI options.\n  // you can extend swagger-ui-express config. You can checkout an example of this\n  // in the `example/configuration/swaggerOptions.js`\n  swaggerUiOptions: {},\n  // multiple option in case you want more that one instance\n  multiple: true,\n};\n\nconst app = express();\nconst PORT = 3000;\n\nexpressJSDocSwagger(app)(options);\n\n/**\n * GET /api/v1\n * @summary This is the summary of the endpoint\n * @return {object} 200 - success response\n */\napp.get('/api/v1', (req, res) => res.json({\n  success: true,\n}));\n\napp.listen(PORT, () => console.log(`Example app listening at http://localhost:${PORT}`));\n```\n\n## Basic Examples\n\n1. Basic configuration options.\n\n```javascript\nconst options = {\n  info: {\n    version: '1.0.0',\n    title: 'Albums store',\n    license: {\n      name: 'MIT',\n    },\n  },\n  security: {\n    BasicAuth: {\n      type: 'http',\n      scheme: 'basic',\n    },\n  },\n  baseDir: __dirname,\n  // Glob pattern to find your jsdoc files (multiple patterns can be added in an array)\n  filesPattern: './**/*.js',\n};\n```\n\n2. Components definition\n\n```javascript\n/**\n * A song type\n * @typedef {object} Song\n * @property {string} title.required - The title\n * @property {string} artist - The artist\n * @property {number} year - The year - double\n */\n```\n\n3. Endpoint which returns a `Songs` model array in the response.\n\n```javascript\n/**\n * GET /api/v1/albums\n * @summary This is the summary of the endpoint\n * @tags album\n * @return {array<Song>} 200 - success response - application/json\n */\napp.get('/api/v1/albums', (req, res) => (\n  res.json([{\n    title: 'abum 1',\n  }])\n));\n```\n\n3. Endpoint PUT with body and path params which returns a `Songs` model array in the response.\n\n```javascript\n/**\n * PUT /api/v1/albums/{id}\n * @summary Update album\n * @tags album\n * @param {string} name.path - name param description\n * @param {Song} request.body.required - songs info\n * @return {array<Song>} 200 - success response - application/json\n */\napp.put('/api/v1/albums/:id', (req, res) => (\n  res.json([{\n    title: 'abum 1',\n  }])\n));\n```\n\n4. Basic endpoint definition with tags, params and basic authentication\n\n```javascript\n/**\n * GET /api/v1/album\n * @summary This is the summary of the endpoint\n * @security BasicAuth\n * @tags album\n * @param {string} name.query.required - name param description\n * @return {object} 200 - success response - application/json\n * @return {object} 400 - Bad request response\n */\napp.get('/api/v1/album', (req, res) => (\n  res.json({\n    title: 'abum 1',\n  })\n));\n```\n\n5. Basic endpoint definition with code example for response body\n\n```javascript\n/**\n * GET /api/v1/albums\n * @summary This is the summary of the endpoint\n * @tags album\n * @return {array<Song>} 200 - success response - application/json\n * @example response - 200 - success response example\n * [\n *   {\n *     \"title\": \"Bury the light\",\n *     \"artist\": \"Casey Edwards ft. Victor Borba\",\n *     \"year\": 2020\n *   }\n * ]\n */\napp.get('/api/v1/albums', (req, res) => (\n  res.json([{\n    title: 'track 1',\n  }])\n));\n```\n\nYou can find more examples [here](https://github.com/BRIKEV/express-jsdoc-swagger/tree/master/examples), or visit our [documentation](https://brikev.github.io/express-jsdoc-swagger-docs/#/).\n\n\n## Validator\n\nWe developed a new package works as a validator of your API endpoints and the documentation you create with this package. This package is [express-oas-validator](https://github.com/BRIKEV/express-oas-validator).\n\n**Example**\n\nInstall using the node package registry:\n\n```\nnpm install --save express-oas-validator\n```\n\nWe have to wait until we have the full swagger schema to initiate the validator.\n\n```js\n// validator.js\nconst { init } = require('express-oas-validator');\n\nconst validators = instance => new Promise((resolve, reject) => {\n  instance.on('finish', (swaggerDef) => {\n    const { validateRequest, validateResponse } = init(swaggerDef);\n    resolve({ validateRequest, validateResponse });\n  });\n\n  instance.on('error', (error) => {\n    reject(error);\n  });\n});\n\nmodule.exports = validators;\n\n```\n\nYou can check out this also in our [example folder](https://github.com/BRIKEV/express-jsdoc-swagger/tree/master/examples/validator).\n\n```js\n// index.js\nconst express = require('express');\nconst expressJSDocSwagger = require('express-jsdoc-swagger');\nconst validator = require('./validator');\n\nconst options = {\n  info: {\n    version: '1.0.0',\n    title: 'Albums store',\n    license: {\n      name: 'MIT',\n    },\n  },\n  filesPattern: './**.js',\n  baseDir: __dirname,\n};\n\nconst app = express();\nconst instance = expressJSDocSwagger(app)(options);\n\nconst serverApp = async () => {\n  const { validateRequest, validateResponse } = await validator(instance);\n  app.use(express.urlencoded({ extended: true }));\n  app.use(express.json());\n  /**\n   * A song\n   * @typedef {object} Song\n   * @property {string} title.required - The title\n   * @property {string} artist - The artist\n   * @property {integer} year - The year\n   */\n\n  /**\n   * POST /api/v1/songs\n   * @param {Song} request.body.required - song info\n   * @return {object} 200 - song response\n   */\n  app.post('/api/v1/songs', validateRequest(), (req, res) => res.send('You save a song!'));\n\n  /**\n   * POST /api/v1/name\n   * @param {string} request.body.required - name body description\n   * @return {object} 200 - song response\n   */\n  app.post('/api/v1/name', (req, res, next) => {\n    try {\n      // Validate response\n      validateResponse('Error string', req);\n      return res.send('Hello World!');\n    } catch (error) {\n      return next(error);\n    }\n  });\n\n  /**\n   * GET /api/v1/authors\n   * @summary This is the summary or description of the endpoint\n   * @param {string} name.query.required - name param description - enum:type1,type2\n   * @param {array<string>} license.query - name param description\n   * @return {object} 200 - success response - application/json\n   */\n  app.get('/api/v1/authors', validateRequest({ headers: false }), (req, res) => (\n    res.json([{\n      title: 'album 1',\n    }])\n  ));\n\n  // eslint-disable-next-line no-unused-vars\n  app.use((err, req, res, next) => {\n    res.status(err.status).json(err);\n  });\n\n  return app;\n};\n\nconst PORT = process.env.PORT || 4000;\n\nserverApp()\n  .then(app => \n    app.listen(PORT, () =>\n      console.log(`Listening PORT: ${PORT}`)\n    ))\n  .catch((err) => {\n    console.error(err);\n    process.exit(1);\n  });\n```\n\nYou can visit our [documentation](https://brikev.github.io/express-jsdoc-swagger-docs/#/validator).\n\n## Contributors ✨\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/bri06\"><img src=\"https://avatars0.githubusercontent.com/u/24435223?v=4?s=100\" width=\"100px;\" alt=\"Briam Martinez Escobar\"/><br /><sub><b>Briam Martinez Escobar</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=bri06\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/kjmesc\"><img src=\"https://avatars2.githubusercontent.com/u/12685053?v=4?s=100\" width=\"100px;\" alt=\"Kevin Julián Martínez Escobar\"/><br /><sub><b>Kevin Julián Martínez Escobar</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=kevinccbsg\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hoonga\"><img src=\"https://avatars3.githubusercontent.com/u/10708927?v=4?s=100\" width=\"100px;\" alt=\"Heung-yeon Oh\"/><br /><sub><b>Heung-yeon Oh</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=hoonga\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/LonelyPrincess\"><img src=\"https://avatars1.githubusercontent.com/u/17673317?v=4?s=100\" width=\"100px;\" alt=\"Sara Hernández\"/><br /><sub><b>Sara Hernández</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=LonelyPrincess\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://servatj.me\"><img src=\"https://avatars0.githubusercontent.com/u/3521485?v=4?s=100\" width=\"100px;\" alt=\"Josep Servat\"/><br /><sub><b>Josep Servat</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=servatj\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/thuydx55\"><img src=\"https://avatars2.githubusercontent.com/u/1469984?v=4?s=100\" width=\"100px;\" alt=\"Nick Dong\"/><br /><sub><b>Nick Dong</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=thuydx55\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Stosiu\"><img src=\"https://avatars1.githubusercontent.com/u/10252063?v=4?s=100\" width=\"100px;\" alt=\"Aleksander Stós\"/><br /><sub><b>Aleksander Stós</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=Stosiu\" title=\"Code\">\U0001F4BB</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kdankert\"><img src=\"https://avatars0.githubusercontent.com/u/46489624?v=4?s=100\" width=\"100px;\" alt=\"Kjell Dankert\"/><br /><sub><b>Kjell Dankert</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=kdankert\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/juliendu11\"><img src=\"https://avatars0.githubusercontent.com/u/18739442?v=4?s=100\" width=\"100px;\" alt=\"juliendu11\"/><br /><sub><b>juliendu11</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=juliendu11\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://me.io\"><img src=\"https://avatars.githubusercontent.com/u/45731?v=4?s=100\" width=\"100px;\" alt=\"Mohamed Meabed\"/><br /><sub><b>Mohamed Meabed</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=meabed\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ofarukaydin\"><img src=\"https://avatars.githubusercontent.com/u/32788963?v=4?s=100\" width=\"100px;\" alt=\"Faruk Aydın\"/><br /><sub><b>Faruk Aydın</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=ofarukaydin\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dahlmo\"><img src=\"https://avatars.githubusercontent.com/u/23076026?v=4?s=100\" width=\"100px;\" alt=\"Dahlmo\"/><br /><sub><b>Dahlmo</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=dahlmo\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gandazgul\"><img src=\"https://avatars.githubusercontent.com/u/108850?v=4?s=100\" width=\"100px;\" alt=\"Carlos Ravelo\"/><br /><sub><b>Carlos Ravelo</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=gandazgul\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/paulish\"><img src=\"https://avatars.githubusercontent.com/u/1762032?v=4?s=100\" width=\"100px;\" alt=\"Paul Ishenin\"/><br /><sub><b>Paul Ishenin</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=paulish\" title=\"Code\">\U0001F4BB</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/sbingner\"><img src=\"https://avatars.githubusercontent.com/u/354533?v=4?s=100\" width=\"100px;\" alt=\"Sam Bingner\"/><br /><sub><b>Sam Bingner</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=sbingner\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/users/5059657/alexander-staroselsky\"><img src=\"https://avatars.githubusercontent.com/u/34102969?v=4?s=100\" width=\"100px;\" alt=\"Alexander Staroselsky\"/><br /><sub><b>Alexander Staroselsky</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=alexstaroselsky\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://joelabrahamsson.com\"><img src=\"https://avatars.githubusercontent.com/u/218986?v=4?s=100\" width=\"100px;\" alt=\"Joel Abrahamsson\"/><br /><sub><b>Joel Abrahamsson</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=joelabrahamsson\" title=\"Code\">\U0001F4BB</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MakakWasTaken\"><img src=\"https://avatars.githubusercontent.com/u/11789635?v=4?s=100\" width=\"100px;\" alt=\"Markus Moltke\"/><br /><sub><b>Markus Moltke</b></sub></a><br /><a href=\"https://github.com/BRIKEV/express-jsdoc-swagger/commits?author=MakakWasTaken\" title=\"Code\">\U0001F4BB</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n"
domaindrivendev/Swashbuckle.WebApi: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280F:293BF1:B2BF641:114CC691:66148B7D.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
contiamo/restful-react: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:2395097:38FFD23:66148B19.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cellular/oazapfts: "# \U0001F37B oazapfts!\n\n[![CI](https://github.com/cellular/oazapfts/actions/workflows/ci.yml/badge.svg)](https://github.com/cellular/oazapfts/actions/workflows/ci.yml)\n\nGenerate TypeScript clients to tap into OpenAPI servers.\n\n![](https://avatars.githubusercontent.com/u/119607625?s=200&v=4)\n\n## Features\n\n- **AST-based**:\n  Unlike other code generators `oazapfts` does not use templates to generate code but uses TypeScript's built-in API to generate and pretty-print an abstract syntax tree.\n- **Fast**: The CLI does not use any of the common Java-based tooling, so the code generation is super fast.\n- **Single file**: All functions and types are co-located in one single self-contained file.\n- **Tree-shakeable**: Individually exported functions allow you to bundle only the ones you actually use.\n- **Human friendly signatures**: The generated API methods don't leak any HTTP-specific implementation details. For example, all optional parameters are grouped together in one object, no matter whether they end up in the headers, path or query-string.\n\n## Installation\n\n```\nnpm install oazapfts\n```\n\n> **Note**\n> With version 3.0.0 oazapfts has become a runtime dependency and the generated code does no longer include all the fetch logic.\n\n## Usage\n\n```\noazapfts <spec> [filename]\n\nOptions:\n--exclude, -e tag to exclude\n--include, -i tag to include\n--optimistic\n--useEnumType\n```\n\nWhere `<spec>` is the URL or local path of an OpenAPI or Swagger spec (in either json or yml) and `<filename>` is the location of the `.ts` file to be generated. If the filename is omitted, the code is written to stdout.\n\n### Options\n\n- `--optimistic` generare a client in [optimistic mode](#optimistic-mode)\n\n- `--useEnumType` generate enums instead of union types\n\n## Consuming the generated API\n\nFor each operation defined in the spec the generated API will export a function with a name matching the `operationId`. If no ID is specified, a reasonable name is generated from the HTTP verb and the path.\n\n```ts\nimport * as api from \"./my-generated-api.ts\";\nconst res = api.getPetById(1);\n```\n\n> **Note**\n> If your API is large, and you want to take advantage of tree-shaking to exclude unused code, use individual named imports instead:\n\n```ts\nimport { getPetById } from \"./my-generated-api.ts\";\n```\n\n## Fetch options\n\nThe **last argument** of each function is an optional [`RequestOpts`](https://github.com/oazapfts/oazapfts/blob/27b296c6fc28fec4869f1b7e1a4a5585ebbd5ee9/src/runtime/index.ts#L5) object that can be used to pass options to the `fetch` call, for example to pass additional `headers` or an `AbortSignal` to cancel the request later on.\n\n```ts\nconst res = getPetById(1, {\n  credentials: \"include\",\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n});\n```\n\nYou can also use this to override the default `baseUrl` or to provide a custom `fetch` implementation.\n\n> **Note**\n> Instead of passing custom options to each function call, consider [overwriting the global defaults](#overriding-the-defaults).\n\n## Optimistic vs. explicit responses\n\nOazapfts supports two different modes to handle results,\nan [explicit](#explicit-mode) mode (the default) and an [optimistic](#optimistic-mode) mode, that makes the response handling less verbose.\n\n## Explicit mode\n\nBy default, each function returns an `ApiResponse` object that exposes the `status` code, response `headers` and the `data`.\n\n> **Note**\n> This mode is best suited for APIs that return different types for different response codes or APIs where you need to access not only the response body, but also the response headers. If your API is simple, and you don't need this flexibility, consider using the [optimistic mode](#optimistic-mode) instead.\n\nIn explicit mode, each function returns a Promise for an `ApiResponse` which is an object with a `status` and a `data` property, holding the HTTP status code and the properly typed data from the response body.\n\nSince an operation can return different types depending on the status code, the actual return type is a _union_ of all possible responses, discriminated by their status.\n\nConsider the following code generated from the `petstore.json` example:\n\n```ts\n/**\n * Find pet by ID\n */\nexport function getPetById(petId: number, opts?: Oazapfts.RequestOpts) {\n  return oazapfts.fetchJson<\n    | {\n        status: 200;\n        data: Pet;\n      }\n    | {\n        status: 400;\n        data: string;\n      }\n    | {\n        status: 404;\n      }\n  >(`/pet/${encodeURIComponent(petId)}`, {\n    ...opts,\n  });\n}\n```\n\nIn this case, the `data` property is typed as `Pet|string`. We can use a type guard to narrow down the type to `Pet`:\n\n```ts\nconst res = await api.getPetById(1);\nif (res.status === 200) {\n  const pet = res.data;\n  // pet is properly typed as Pet\n}\nif (res.status === 404) {\n  const message = res.data;\n  // message is a string\n} else {\n  // handle the error\n}\n```\n\nThe above code can be simplified by using the `handle` helper:\n\n```ts\nimport { handle } from \"oazapfts\";\n\nawait handle(api.getPetById(1), {\n  200(pet) {\n    // pet is properly typed as Pet\n  },\n  404(message) {\n    // message is as string\n  },\n});\n```\n\nThe helper will throw an `HttpError` error for any unhandled status code, unless you add a `default` handler:\n\n```ts\nawait handle(api.getPetById(1), {\n  200(pet) {\n    // ...\n  },\n  default(status, data) {\n    // handle error\n  },\n});\n```\n\n## Optimistic mode\n\nYou can opt into the _optimistic mode_ by using the `--optimistic` command line argument.\n\nIn this mode, each function will return a Promise for the happy path, i.e. the type specified for the first `2xx` response.\n\nLooking back at our Pet Store example from above, consuming the response is now much easier and less verbose:\n\n```ts\nconst pet = await api.getPetById(1);\n// pet is now typed as Pet!\n```\n\nIn case of a response other than `200` the promise will be rejected with a `HttpError`.\n\n## Mixing both modes\n\nSometimes you might want to use the optimistic mode for some of your API calls, but need the full `ApiResponse` for others.\n\nIn that case, you can use the `ok`-helper function to selectively apply optimistic response handling:\n\n```ts\nimport { ok } from \"oazapfts\";\n\nconst pet = await ok(api.getPetById(1));\n```\n\n## Overriding the defaults\n\nThe generated file exports a `defaults` constant that can be used to override the `basePath`, provide a custom `fetch` implementation or to send additional `headers` with each request. Basically, you can set a default for any [fetch option](https://developer.mozilla.org/en-US/docs/Web/API/fetch#options) you want.\n\n```ts\nimport * as api from \"./api.ts\";\nimport nodeFetch from \"node-fetch\";\n\n// Override the spec's basePath\napi.defaults.basePath = \"https://example.com/api\";\n\n// Send this header with each request\napi.defaults.headers = {\n  access_token: \"secret\",\n};\n\n// Include credentials in CORS requests, too\napi.defaults.credentials = \"include\";\n\n// Use this instead of the global fetch\napi.defaults.fetch = nodeFetch;\n```\n\n## Alternatives and integrations\n\nIf this library doesn't fit your needs, take a look at [openapi-typescript-codegen](https://github.com/ferdikoomen/openapi-typescript-codegen) which follows a similar philosophy but creates many individual files instead of one single self-contained file.\n\nIf your frontend uses React, take a look at [react-api-query](https://www.npmjs.com/package/react-api-query) which makes it easy to use an oazapfts client with React hooks in a convenient and type-safe way.\n\n## About the name\n\nThe name comes from a combination of syllables **oa** (OpenAPI) and **ts** (TypeScript) and is [pronounced \U0001F5E3](https://www.youtube.com/watch?v=chvb-K95rBE) like the Bavarian _O'zapt'is!_ (it's tapped), the famous words that mark the beginning of the Oktoberfest.\n\n# License\n\nMIT\n"
openapi-library/OpenAPIValidators: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3A1DC37:59939C2:66149046.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
google/gnostic: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  27C3:2BA3:22F6531:385ED61:66148CC0.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
tyrchen/quenya: >
  # Quenya


  __Disclaimer: Quenya is under active development and is at its early stage.
  Please DO NOT use it in prod environment. Use with cautions.__


  Quenya is a framework to build high-quality REST API applications based on
  extended [OpenAPI
  spec](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md).
  For the Quenya extension, see [here](docs/quenya_extension.md). With the OAPI
  spec, Quenya can generate high-quality code for many parts of the API
  pipeline:


  - Preprocessors:
    - [x] request validator: validate the request params
    - [ ] auth handler: process authentication for the API endpoints
    - [ ] access controller: process authorization for the API endpoints
  - API handlers:
    - [x] fake API handler to generate a fake response for mocking purpose
    - [ ] gRPC handler to act as a proxy between your client and your gRPC server (require extended OpenAPI grammar)
  - Postprocessors:
    - [x] response validator to validate the response body and headers (for dev/testing purpose)

  Quenya will also generate property testing, it will use `Plug.Test` and
  `StreamData` to build tests. Requests (url, query, request headers and request
  body) will be generated and then sent to generated `Router`, then it will use
  the response schema to validate the result. Currently the testing only covers
  happy path.


  Quenya will also provide a set of modules, plugs, test helpers to help you
  build REST APIs easily.


  ## How to use Quenya


  ### Install CLI


  First of all, install Quenya CLI:


  ```bash

  $ mix archive.install hex quenya_installer

  Resolving Hex dependencies...

  Dependency resolution completed:

  New:
    quenya_installer 0.3.0
  * Getting quenya_installer (Hex package)


  20:22:15.605 [info]  erl_tar: removed leading '/' from member names


  All dependencies are up to date

  Compiling 5 files (.ex)

  Generated quenya_installer app

  Generated archive "quenya_installer-0.3.0.ez" with MIX_ENV=prod

  Are you sure you want to install "quenya_installer-0.3.0.ez"? [Yn]

  * creating /Users/tchen/.mix/archives/quenya_installer-0.3.0

  ```


  ### Generate APP from an existing OAPI spec


  Once you finished installing quenya CLI, you can build a API app with quenya:


  ```bash

  $ cd /tmp

  $ curl
  https://raw.githubusercontent.com/tyrchen/quenya/master/parser/test/fixture/petstore.yml
  > petstore.yml

  $ mix quenya.new petstore.yml petstore

  * creating petstore/config/config.exs

  * creating petstore/config/dev.exs

  * creating petstore/config/prod.exs

  * creating petstore/config/staging.exs

  * creating petstore/config/test.exs

  * creating petstore/lib/petstore/application.ex

  * creating petstore/lib/petstore.ex

  * creating petstore/mix.exs

  * creating petstore/README.md

  * creating petstore/.formatter.exs

  * creating petstore/.gitignore

  * creating petstore/test/test_helper.exs


  Fetch and install dependencies? [Yn]

  * running mix deps.get

  * running mix deps.compile


  We are almost there! The following steps are missing:

      $ cd petstore

  You can run your app inside IEx (Interactive Elixir) as:

      $ iex -S mix


  ```


  This will create a new elixir app, copy your spec file (or spec folder) to
  `priv/spec/main.yml`, and generate API code based on the spec.


  ### Running the app


  Now you can run the app:


  ```bash

  $ cd petstore/

  $ mix compile.quenya # this command will generate/regenerate code on /gen and
  /test/gen folders

  $ iex -S mix

  Erlang/OTP 23 [erts-11.1.3] [source] [64-bit] [smp:16:16] [ds:16:16:10]
  [async-threads:1] [hipe] [dtrace]


  Compiling 44 files (.ex)

  Generated petstore app

  Interactive Elixir (1.11.2) - press Ctrl+C to exit (type h() ENTER for help)

  ```


  Just run a few commands without writing even a single line of code, you have
  an API app ready to use. Try open `http://localhost:4000/swagger`. You will
  see an API playground with standard Swagger UI:


  ![](docs/images/swagger.jpg)


  It's great but nothing special. Now, try to invoke one of the APIs, say `GET
  /pet/findByStatus`:


  ![](docs/images/swagger_call.jpg)


  Amazing! Don't believe what you saw? Try with this command:


  ```bash

  curl -X POST "http://localhost:4000/pet" -H  "accept: application/json" -H 
  "Content-Type: application/json" -d "{\"name\":\"doggie\",\"photoUrls\":[\"bad
  url\"]}" -i

  HTTP/1.1 400 Bad Request

  cache-control: max-age=0, private, must-revalidate

  content-length: 33

  date: Mon, 30 Nov 2020 04:45:37 GMT

  server: Cowboy


  Expected to be a valid image_uri.

  ```


  According to [petstore.yml](test/fixture/petstore.yml), request body must be a
  Pet type, and `name` / `photoUrls` are required. `photoUrls` shall be an array
  of string, with format as `image_url` (an extended format by quenya). Quenya
  will validate requests by its schema so here we need a valid url. Let's
  correct this:


  ```bash

  $ curl -X POST "http://localhost:4000/pet" -H  "accept: application/json" -H 
  "Content-Type: application/json" -d
  "{\"name\":\"doggie\",\"photoUrls\":[\"https://source.unsplash.com/random\"]}"
  -i

  HTTP/1.1 200 OK

  cache-control: max-age=0, private, must-revalidate

  content-length: 376

  content-type: application/json; charset=utf-8

  date: Mon, 30 Nov 2020 04:51:03 GMT

  server: Cowboy


  {"category":{"id":683,"name":"Dtlir6vgkz6UeAwK5q4._9--A.--._V_mjp.K--3T.0-e_.7-_qfRmfu"},"id":928,"name":"758Yhl_jx_Rt_fi5fz_JtE_k__JY2J__Tt9Y1","photoUrls":["https://source.unsplash.com/random/400x400","https://source.unsplash.com/random/400x400"],"status":"sold","tags":[{"id":480,"name":"iusto"},{"id":64,"name":"error"},{"id":658,"name":"modi"},{"id":313,"name":"nihil"}]}

  ```


  ### Running the tests


  Quenya generates property tests for all your API endpoints based on OAPI spec,
  so before coding your own API handler into the repo, you'd like to be more
  test-driven, try `mix test` now:


  ```bash

  $ mix test

  Compiling 42 files (.ex)

  Generated petstore app

  ....................


  Finished in 2.7 seconds

  20 properties, 2 failures

  ```


  Note these tests covers all success cases. In future, we will try to cover all
  failed cases in Quenya.


  ### How much code Quenya generated for you?


  If you have `tokei` installed, you can have a basic idea on how much code
  Quenya generated for you:


  ```bash

  $ tokei gen test

  -------------------------------------------------------------------------------
   Language            Files        Lines         Code     Comments       Blanks
  -------------------------------------------------------------------------------
   Elixir                 83         8152         7060            0         1092
  -------------------------------------------------------------------------------
   Total                  83         8152         7060            0         1092
  -------------------------------------------------------------------------------

  ```


  That's 8k LoC for the petstore spec. The more APIs you defined, the more
  Quenya will do for you. Once we have most of the parts of Quenya built, this
  number will be much bigger.


  ### What's under the hood?


  Now you have a basic feeling on what's going on. By default, Quenya will
  generate an API router based on API spec, with a convenient swagger UI. For
  each route defined in the spec, Quenya will generate a Plug for it. And a Plug
  is a pipeline which will execute in this order:


  - preprocessors: any Plug to be executed before the actual route handler.
  Here, RequestValidator Plug will help to validate request params against the
  schema.

  - handlers: handlers for the route. This is what you shall put your actual API
  logic, but for mocking purpose, Quenya generates a fake handler which meets
  the response schema. In future, Quenya will support gRPC handler which will be
  very useful if what you need is a grpc proxy (think
  [grpc-gateway](https://github.com/grpc-ecosystem/grpc-gateway)).

  - postprocessors: any Plug to be executed before sending the response. Quenya
  can generate a ResponseValidator if you need it. It's good for dev/staging
  purpose. By default it won't generate it.


  Quenya consists of 3 parts:


  1. quenya_installer: help with Quenya project generation (the CLI you just
  used).

  2. quenya_builder: a code generator to generate API implementation based on
  extended OpenAPI v3 spec. Every time you run `mix compile`, Quenya will
  rebuild the spec to code (need improvement here).

  3. quenya: a library consist of utility functions, tests and a playground to
  play with API or API stub.


  ## What's the generated code?


  If you look at the `gen` folder in the newly generated app, you'll find all
  your routes and routers are organized by `operationId`:


  ```bash

  $ tree -L 1

  .

  ├── Petstore.Gen.ApiRouter.ex

  ├── Petstore.Gen.Router.ex

  ├── addPet

  ├── createUser

  ├── createUsersWithArrayInput

  ├── createUsersWithListInput

  ├── deleteOrder

  ├── deletePet

  ├── deleteUser

  ├── findPetsByStatus

  ├── findPetsByTags

  ├── getInventory

  ├── getOrderById

  ├── getPetById

  ├── getUserByName

  ├── loginUser

  ├── logoutUser

  ├── placeOrder

  ├── updatePet

  ├── updatePetWithForm

  ├── updateUser

  └── uploadFile


  20 directories, 2 files

  ```


  The main router will serve swagger and forward the path (extracted from the
  spec) to the API router:


  ```elixir

  defmodule Petstore.Gen.Router do
    @moduledoc false
    use Plug.Router
    use Plug.ErrorHandler
    require Logger
    alias Quenya.Plug.SwaggerPlug
    plug Plug.Logger, log: :info
    plug Plug.Static, at: "/public", from: {:quenya, "priv/swagger"}

    plug :match
    plug Plug.Parsers, parsers: [:json], pass: ["application/json"], json_decoder: Jason
    plug :dispatch

    def handle_errors(conn, %{kind: _kind, reason: %{message: msg}, stack: _stack}) do
      Plug.Conn.send_resp(conn, conn.status, msg)
    end

    def handle_errors(conn, %{kind: kind, reason: reason, stack: stack}) do
      Logger.warn(
        "Internal error:\n kind: #{inspect(kind)}\n reason: #{inspect(reason)}\n stack: #{
          inspect(stack)
        }"
      )

      Plug.Conn.send_resp(conn, conn.status, "Internal server error")
    end

    get("/swagger/main.json", to: SwaggerPlug, init_opts: [app: :petstore])
    get("/swagger", to: SwaggerPlug, init_opts: [spec: "/swagger/main.json"])
    forward "/", to: Petstore.Gen.ApiRouter, init_opts: []
  end

  ```


  The API router contains code for all routes, for example:


  ```elixir

  put("/user/:username",
      to: RoutePlug,
      init_opts: [
        preprocessors: [Petstore.Gen.UpdateUser.RequestValidator],
        postprocessors: [],
        handlers: [Petstore.Gen.UpdateUser.FakeHandler]
      ]
    )
  ```


  When a `PUT /user/:username` request kicks in, it will be handled by
  `Quenya.Plug.RoutePlug`, and it will run `preprocessors`, `handlers` and
  `postprocessors` in the right order.


  ## Why Quenya?


  I've given a topic [Building next-gen APIs](docs/building-next-gen-apis.pdf)
  in 10/2020. The original idea is: why don't I build a code generator to
  generate API code that we don't need to write repeatedly? I always hold this
  tenet that everything could be generated should be generated.


  Building a high-quality HTTP API app is non-trivial. Good APIs have these
  traits:


  For API users:


  - Easy to learn and intuitive to use (the app provides full-fledged and good
  quality docs / playground)

  - Hard to misuse (API is type-safety and provides proper error responses)

  - Powerful enough to drive business requirements (flexible, performant)

  - Easy to evolve as the products grow

  - Opinionated (don't make me think)


  For developers:


  - Easy to read and maintain existing code

  - Easy to write new APIs / extend existing APIs

  - Easy to generate code based on API spec (client SDKs, test cases, and even
  server implementation)


  API implementation is just a small part of the API lifecycle, we need API
  design, mocking, testing, simulating, documentation, deployment, etc.


  ![](docs/images/api.png)


  Quenya tries to help you start with the API spec, iterate it without writing
  the code, while at the same time various teams can play with the mocking
  server based on the spec to nail down what is actually needed. We believe this
  is the best approach to improve productivity.


  ## Why not GraphQL or other solutions?


  See the above slides and you'll see why.
cyprieng/swagger-parser: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:2533:20F714C:34C6AE3:66148B39.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
fralken/sbt-swagger-codegen: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:23DCEF7:396C206:66148CBB.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
cdwv/oas3-api-snippet-enricher: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:3564:222EA56:36E7EBD:66148A7C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
unrelentingtech/octohipster: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BFAFEF7:12A42A63:66149496.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
dgarcia360/openapi-boilerplate: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:A4E47:B6C4769:11AF2E49:66148B7B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
mockoon/cli: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:30D32C:3996643:58CE6F1:66148EC4.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
RonnyPfannschmidt/prance: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:A4E47:B6339FC:11A19C89:66148879.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
ethereum/eth2.0-APIs: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2803:D7694:29B4976:3F88C4D:66148BDE.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
getsling/flask-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2811:2A67FA:21FE62B:36B98F5:66148CBE.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
stoplightio/elements: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2800:12B36F:B936DF7:11FAAF57:66149256.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
Himenon/openapi-typescript-code-generator: >
  # @himenon/openapi-typescript-code-generator


  [日本語](./docs/ja/README-ja.md)


  This library provides TypeScript type definitions and extracted parameters
  from OpenAPI v3.0.x compliant specifications.

  TypeScript AST is used to generate the code, which is accurately converted to
  TypeScript code.

  Since the parameters extracted from OpenAPI can be used freely, it can be used
  for automatic generation of API Client and Server Side code, load balancer
  configuration files, etc.


  ## Playground


  - [Playground](https://openapi-typescript-code-generator.netlify.app/)


  ## Installation


  ```bash

  npm  i   -D @himenon/openapi-typescript-code-generator

  # or

  pnpm i   -D @himenon/openapi-typescript-code-generator

  # or

  yarn add -D @himenon/openapi-typescript-code-generator

  ```


  ## DEMO


  - [Short
  DEMO](https://github.com/Himenon/openapi-typescript-code-generator-demo-project)

  - [DEMO: github/rest-api-client code
  generate](https://github.com/Himenon/github-rest-api-client/tree/master/source)
    - https://github.com/github/rest-api-description

  ## Usage


  The example shown here can be cloned from the [DEMO
  repository](https://github.com/Himenon/openapi-typescript-code-generator-demo-project)
  to see how it works.


  ### Generate typedef-only code


  ```ts

  import * as fs from "fs";


  import { CodeGenerator } from "@himenon/openapi-typescript-code-generator";


  const main = () => {
    const codeGenerator = new CodeGenerator("your/openapi/spec.yml");
    const code = codeGenerator.generateTypeDefinition();
    fs.writeFileSync("client.ts", code, { encoding: "utf-8" });
  };


  main();

  ```


  ### Generate code containing the API Client


  ```ts

  import * as fs from "fs";


  import { CodeGenerator } from "@himenon/openapi-typescript-code-generator";

  import * as Templates from
  "@himenon/openapi-typescript-code-generator/dist/templates";

  import type * as Types from
  "@himenon/openapi-typescript-code-generator/dist/types";


  const main = () => {
    const codeGenerator = new CodeGenerator("your/openapi/spec.yml");

    const apiClientGeneratorTemplate: Types.CodeGenerator.CustomGenerator<Templates.FunctionalApiClient.Option> = {
      generator: Templates.FunctionalApiClient.generator,
      option: {},
    };

    const code = codeGenerator.generateTypeDefinition([
      codeGenerator.getAdditionalTypeDefinitionCustomCodeGenerator(),
      apiClientGeneratorTemplate,
    ]);

    fs.writeFileSync("client.ts", code, { encoding: "utf-8" });
  };


  main();

  ```


  ### The variation of template code


  This library provides three types of templates


  ```ts

  import * as Templates from
  "@himenon/openapi-typescript-code-generator/dist/templates";


  Templates.ClassApiClient.generator;

  Templates.FunctionalApiClient.generator;

  Templates.CurryingFunctionalApiClient.generator;

  ```


  #### `Templates.ClassApiClient.generator`


  We provide a class-based API client. Please inject the API client dependency
  and use it instead of `constructor`.


  ```ts

  export interface RequestArgs {
    httpMethod: HttpMethod;
    url: string;
    headers: ObjectLike | any;
    requestBody?: ObjectLike | any;
    requestBodyEncoding?: Record<string, Encoding>;
    queryParameters?: QueryParameters | undefined;
  }


  export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(requestArgs: RequestArgs, options?: RequestOption) => Promise<T>;
  }


  export class Client<RequestOption> {
    private baseUrl: string;
    constructor(
      private apiClient: ApiClient<RequestOption>,
      baseUrl: string,
    ) {
      this.baseUrl = baseUrl.replace(/\/$/, "");
    }

    public async createPublisherV2<RequestContentType extends RequestContentType$createPublisherV2>(
      params: Params$createPublisherV2<RequestContentType>,
      option?: RequestOption,
    ): Promise<Response$createPublisherV2$Status$200["application/json"]> {
      const url = this.baseUrl + `/create/v2/publisher/{id}`;
      const headers = {
        "Content-Type": params.headers["Content-Type"],
        Accept: "application/json",
      };
      const requestEncodings = {
        "application/x-www-form-urlencoded": {
          color: {
            style: "form",
            explode: false,
          },
        },
        "application/json": {
          color: {
            style: "form",
            explode: false,
          },
        },
      };
      return this.apiClient.request(
        {
          httpMethod: "POST",
          url,
          headers,
          requestBody: params.requestBody,
          requestBodyEncoding: requestEncodings[params.headers["Content-Type"]],
        },
        option,
      );
    }
  }

  ```


  #### `Templates.FunctionalApiClient.generator`


  We also provide a function-based API client that replaces the class-based API
  client with `createClient`. Please inject the API client dependency and use
  it.


  ```ts

  export interface RequestArgs {
    httpMethod: HttpMethod;
    url: string;
    headers: ObjectLike | any;
    requestBody?: ObjectLike | any;
    requestBodyEncoding?: Record<string, Encoding>;
    queryParameters?: QueryParameters | undefined;
  }


  export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(requestArgs: RequestArgs, options?: RequestOption) => Promise<T>;
  }


  export const createClient = <RequestOption>(apiClient:
  ApiClient<RequestOption>, baseUrl: string) => {
    const _baseUrl = baseUrl.replace(/\/$/, "");
    return {
      createPublisherV2: <RequestContentType extends RequestContentType$createPublisherV2>(
        params: Params$createPublisherV2<RequestContentType>,
        option?: RequestOption,
      ): Promise<Response$createPublisherV2$Status$200["application/json"]> => {
        const url = _baseUrl + `/create/v2/publisher/{id}`;
        const headers = {
          "Content-Type": params.headers["Content-Type"],
          Accept: "application/json",
        };
        const requestEncodings = {
          "application/x-www-form-urlencoded": {
            color: {
              style: "form",
              explode: false,
            },
          },
          "application/json": {
            color: {
              style: "form",
              explode: false,
            },
          },
        };
        return apiClient.request(
          {
            httpMethod: "POST",
            url,
            headers,
            requestBody: params.requestBody,
            requestBodyEncoding: requestEncodings[params.headers["Content-Type"]],
          },
          option,
        );
      },
    };
  };

  ```


  #### `Templates.CurryingFunctionalApiClient.generator`


  **Tree shaking support**


  We also provide a curried function-based API client that requires injection of
  API client for each `operationId`. The first function argument demands
  `ApiClient` while the second function argument demands `RequestArgs`. The
  `ApiClient` interface is different from the others, as it requires `uri` as an
  argument.


  This is designed for use cases that utilize **tree shaking**.


  ```ts

  export interface RequestArgs {
    httpMethod: HttpMethod;
    uri: string; // <------------------ Note that the uri
    headers: ObjectLike | any;
    requestBody?: ObjectLike | any;
    requestBodyEncoding?: Record<string, Encoding>;
    queryParameters?: QueryParameters | undefined;
  }

  export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(requestArgs: RequestArgs, options?: RequestOption) => Promise<T>;
  }

  export const createPublisherV2 =
    <RequestOption>(apiClient: ApiClient<RequestOption>) =>
    <RequestContentType extends RequestContentType$createPublisherV2>(
      params: Params$createPublisherV2<RequestContentType>,
      option?: RequestOption,
    ): Promise<Response$createPublisherV2$Status$200["application/json"]> => {
      const uri = `/create/v2/publisher/{id}`;
      const headers = {
        "Content-Type": params.headers["Content-Type"],
        Accept: "application/json",
      };
      const requestEncodings = {
        "application/x-www-form-urlencoded": {
          color: {
            style: "form",
            explode: false,
          },
        },
        "application/json": {
          color: {
            style: "form",
            explode: false,
          },
        },
      };
      return apiClient.request(
        {
          httpMethod: "POST",
          uri,
          headers,
          requestBody: params.requestBody,
          requestBodyEncoding: requestEncodings[params.headers["Content-Type"]],
        },
        option,
      );
    };
  ```


  ### Split the type definition file and the API Client implementation


  ```ts

  import * as fs from "fs";


  import { CodeGenerator } from "@himenon/openapi-typescript-code-generator";

  import * as Templates from
  "@himenon/openapi-typescript-code-generator/dist/templates";

  import type * as Types from
  "@himenon/openapi-typescript-code-generator/dist/types";


  const main = () => {
    const codeGenerator = new CodeGenerator("your/openapi/spec.yml");

    const apiClientGeneratorTemplate: Types.CodeGenerator.CustomGenerator<Templates.FunctionalApiClient.Option> = {
      generator: Templates.FunctionalApiClient.generator,
      option: {},
    };

    const typeDefCode = codeGenerator.generateTypeDefinition();
    const apiClientCode = codeGenerator.generateCode([
      {
        generator: () => {
          return [`import { Schemas, Responses } from "./types";`];
        },
      },
      codeGenerator.getAdditionalTypeDefinitionCustomCodeGenerator(),
      apiClientGeneratorTemplate,
    ]);

    fs.writeFileSync("types.ts", typeDefCode, { encoding: "utf-8" });
    fs.writeFileSync("apiClient.ts", apiClientCode, { encoding: "utf-8" });
  };


  main();

  ```


  ## Create a Code Template


  The examples in this section can be used in the following ways


  ```ts

  import * as fs from "fs";


  import { CodeGenerator } from "@himenon/openapi-typescript-code-generator";

  import type * as Types from
  "@himenon/openapi-typescript-code-generator/dist/types";


  /** Write the definition of the Code Template here. */

  const customGenerator: Types.CodeGenerator.CustomGenerator<{}> = {
    /** .... */
  };


  const codeGenerator = new CodeGenerator("your/openapi/spec.yml");


  const code = codeGenerator.generateCode([customGenerator]);


  fs.writeFileSync("output/file/name", code, { encoding: "utf-8" });

  ```


  ### Define a text-based code template


  A self-defined code generator can return an array of `string`.


  ```ts

  import * as Types from
  "@himenon/openapi-typescript-code-generator/dist/types";


  interface Option {
    showLog?: boolean;
  }


  const generator: Types.CodeGenerator.GenerateFunction<Option> = (payload:
  Types.CodeGenerator.Params[], option): string[] => {
    if (option && option.showLog) {
      console.log("show log message");
    }
    return ["Hello world"];
  };


  const customGenerator: Types.CodeGenerator.CustomGenerator<Option> = {
    generator: generator,
    option: {},
  };

  ```


  ### Define using the information extracted from OpenAPI Schema


  The self-defined code generator can accept parameters extracted from OpenAPI
  Schema.

  See Type definitions for available parameters.


  ```ts

  import * as Types from
  "@himenon/openapi-typescript-code-generator/dist/types";


  interface Option {}


  const generator: Types.CodeGenerator.GenerateFunction<Option> = (payload:
  Types.CodeGenerator.Params[], option): string[] => {
    return payload.map(params => {
      return `function ${params.operationId}() { console.log("${params.comment}") }`;
    });
  };


  const customGenerator: Types.CodeGenerator.CustomGenerator<Option> = {
    generator: generator,
    option: {},
  };

  ```


  ### Define any Data Types Format


  Convert a Data Type with the following `format` to any type definition.


  ```yaml

  components:
    schemas:
      Binary:
        type: string
        format: binary
      IntOrString:
        type: string
        format: int-or-string
      AandB:
        type: string
        format: A-and-B
  ```


  The option to convert the Data Type Format to an arbitrary type definition is
  defined as follows.


  ```ts

  import { CodeGenerator, Option } from
  "@himenon/openapi-typescript-code-generator";

  const option: Option = {
    convertOption: {
      formatConversions: [
        {
          selector: {
            format: "binary",
          },
          output: {
            type: ["Blob"],
          },
        },
        {
          selector: {
            format: "int-or-string",
          },
          output: {
            type: ["number", "string"],
          },
        },
        {
          selector: {
            format: "A-and-B",
          },
          output: {
            type: ["A", "B"],
            multiType: "allOf",
          },
        },
      ],
    },
  };

  const codeGenerator = new CodeGenerator(inputFilename, option);

  ```


  The typedef generated by this will look like this


  ```ts

  export namespace Schemas {
    export type Binary = Blob;
    export type IntOrString = number | string;
    export type AandB = A & B;
  }

  ```


  ### Define a code template with TypeScript AST


  You can extend your code using the API of TypeScript AST.

  You can directly use the API of TypeScript AST or use the wrapper API of
  TypeScript AST provided by this library.


  ```ts

  import * as Types from
  "@himenon/openapi-typescript-code-generator/dist/types";

  import { TsGenerator } from
  "@himenon/openapi-typescript-code-generator/dist/api";


  interface Option {}


  const factory = TsGenerator.Factory.create();


  const generator: Types.CodeGenerator.GenerateFunction<Option> = (
    payload: Types.CodeGenerator.Params[],
    option,
  ): Types.CodeGenerator.IntermediateCode[] => {
    return payload.map(params => {
      return factory.InterfaceDeclaration.create({
        export: true,
        name: params.functionName,
        members: [],
      });
    });
  };


  const customGenerator: Types.CodeGenerator.CustomGenerator<Option> = {
    generator: generator,
    option: {},
  };

  ```


  ## API


  ### CodeGenerator


  ```ts

  import { CodeGenerator } from "@himenon/openapi-typescript-code-generator";

  ```


  #### validateOpenApiSchema


  Performs validation of the input OpenAPI Schema.


  #### generateTypeDefinition


  Generates code that converts OpenAPI Schema to TypeScript type definitions.


  #### generateCode


  You can specify several of your own code generators, and the generators can
  use parameters extracted from OpenAPI Schema.

  It internally performs the conversion of an array of `string` or
  `ts.Statement` as a string.


  For example, creating a generator in units of file divisions increases the
  reusability of the generator.


  #### getCodeGeneratorParamsArray


  It provides parameters extracted from OpenAPI Schema.


  #### getAdditionalTypeDefinitionCustomCodeGenerator


  This is a type definition file for `Templates.FunctionalApiClient`. The reason
  it is not included in `generateTypeDefinition` is that you may not use the
  type definition generated by this function depending on your usage.


  ※ The reason it is not included in `generateTypeDefinition` is that you may
  not use the type definitions generated by this function depending on your
  application.


  ### TsGenerator


  ```ts

  import { TsGenerator } from
  "@himenon/openapi-typescript-code-generator/dist/api";

  ```


  This is a wrapper API for the TypeScript AST used internally.

  It is subject to change without notice.


  ### OpenApiTools


  ```ts

  import { OpenApiTools } from
  "@himenon/openapi-typescript-code-generator/dist/api";

  ```


  #### Parser


  - `OpenApiTools.Parser`


  This is the API for parsing OpenAPI Schema.

  It is subject to change without notice.


  ## Restrictions


  ### Directory Restrictions for Remote Reference


  There is a limitation on the directory structure supported.

  To simplify implementation when converting directory structures to TypeScript
  namespaces, Remote References using `$ref` should only be defined in the
  following directory structures.

  If you want to extend it, please fork this repository and do it yourself.


  ```

  spec.yml // entry file

  components/
    headers/
    parameters/
    pathItems/
    requestBodies/
    responses/
    schemas/
    paths/
  ```


  ### HTTP communication restrictions for Remote Reference


  `$ref: http://....` Currently not supported. We hope to support it in the
  future.


  ## Contributions


  First of all, thank you for your interest.

  When converting from the API specification to TypeScript code, resolving
  reference relationships can be particularly challenging, and there may not be
  enough test cases.

  Adding test cases is a very powerful support for stabilizing the behavior, so
  please report any bugs you find that are behaving strangely.

  Also, the basic design concepts of this repository can be found below. If you
  want to make changes that do not follow these concepts, please fork and extend
  them.

  If your changes are in line with the design concept, please submit a pull
  request or issue!


  ## Design Concept


  - Be typedef first.

  - Typedefs should not contain any entities (file size should be 0 when
  typedefs are converted to `.js`)

  - The directory structure should be mapped to the typedef structure.

  - No dependency on any API client library.

  - Can be extended by TypeScript AST.

  - Conform to the OpenAPI specification.

  - It should be a single file to maintain portability.


  ## Development


  ```bash

  git clone https://github.com/Himenon/openapi-typescript-code-generator.git

  cd openapi-typescript-code-generator

  pnpm i

  #### your change

  pnpm build

  pnpm run test:code:gen

  pnpm run update:snapshot # if you changed

  pnpm run test

  ```


  ## Useful development tools


  TypeScript AST


  - https://ts-ast-viewer.com


  ## LICENCE


  [@himenon/openapi-typescript-code-generator](https://github.com/Himenon/typescript-codegen),
  MIT


  ### Reference implementation


  Validation Design


  - Copyright (c) 2018 Kogo Software LLC -
  [https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-schema-validator#readme](openapi-schema-validator)
subeeshcbabu-zz/swagmock: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2805:27DEDD:AAC99CE:10A26BD6:661492B5.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
hapi-swagger/hapi-swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  27C6:9D75:22C213F:37C0B3E:66148CC2.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
phpowermove/swagger: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:1D415E:24637E5:3A384A5:66148FC6.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
oazapfts/oazapfts: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BEC8755:128E647A:66149026.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
GeniusesGroup/libgo: >
  # libgo   

  [![GoDoc](https://pkg.go.dev/badge/github.com/GeniusesGroup/libgo)](https://pkg.go.dev/github.com/GeniusesGroup/libgo)

  [![Go
  Report](https://goreportcard.com/badge/github.com/GeniusesGroup/libgo)](https://goreportcard.com/report/github.com/GeniusesGroup/libgo)


  An **application** developing **framework** provide ZeroOps(zero operations),
  edge computing, ... that let you develope both server and client applications
  in Go without need to think more about any fundamental requirements, Just
  develope business services and user interfaces (now just graphical interface -
  gui), build apps as OS images or OS applications and easily just run first
  server node and let it distributes by many factors with inside logics not need
  external decision makers (automating software deployment) like
  Kubernetes(K8s).


  In other word, `libgo` abbreviation of `Go language library` is a repository
  wrapper to store all implementation of GeniusesGroup and others protocols and
  algorithms to make a digital software more easily in better performance.

  You can use all packages exported APIs, go generator mechanism or by [library
  commands](#commands-cla) to access some useful APIs from command line easily.


  ## Goals

  - Provide complete framework to develope any purpose distributed application
  with **low||no code**.

  - No(minimum) dependency on any other repositories.

  - Compile an application as **Unikernel** instead of regular OSs binaries.

  - Develope high available and distributed software without any admin in any
  infrastructure layers (DevOps culture goal).

  - Let service developers act Lean and Agile in their organization.

  - [Reinvent the wheel](https://en.wikipedia.org/wiki/Reinventing_the_wheel)


  ## Not Goals

  - 


  ## Installation

  - Make project directory and suggest use your internet domain name for it.

  - initialize project version control. If you use git run `git init` or `git
  clone ${repository path}`.

  - init go project by `go mod init`

  - add `libgo` to your project dependency

  - install `libgo` with `lang_eng` or your desire language

  - initialize the project with desire domain e.g. `google.com`

  - Complete manifest in main package.

  - Add other data to main package if needed.

  - Implement protocols logic by autogenerate some codes not write them
  manually.

  - build your organization app with desire tags and target OS and hardwares.

  - run your desire version from /bin/ directory. Strongly suggest run app by
  systemd on linux or other app manager on other OS.


  or easily run the following command under your project, just replace your
  domain name.

  ```

  mkdir {domain}

  git init

  go mod init

  go get -u github.com/GeniusesGroup/libgo

  go install github.com/GeniusesGroup/libgo -tags "lang_eng"

  libgo app init -d={domain}

  libgo app build

  ```


  ## Commands (CLA)

  libgo has a the command-line client for the some generator APIs implement in
  [modules](./modules/). It provides simple access to all APIs functions to make
  an application, a GUI app, ....


  You can get list of all commands and their helps with `libgo help`. We just
  list some of important commands here that you can run them from within a Go
  module or any where in your project directory:

  - **Initialize a project:** `libgo app init -idn=[internet-domain-name]`

  - **Add new domain module:** `libgo mod new -dn=[domain-name]`

  - **Build the apps(os images):** `libgo app build`

  - **Run the app(os image):** `libgo app run`


  ## Build tags

  - **dev_mode**: first check and change `AppMode_Dev` const in protocol package
  to desire behavior

  - **tcp_listener**:


  ## Enterprise

  Contact us by [this](mailto:ict@geniuses.group) or
  [this](mailto:omidhekayati@gmail.com) if you need enterprise support for
  developing high available and distributed software. See features available in
  enterprise package:

  - Develope exclusive features in very short time

  - Bug fixing quickly

  - 


  ## Related Projects

  - [Clive is an operating system designed to work in distributed and cloud
  computing environments.](https://github.com/fjballest/clive)

  - [SQLc](sqlc.dev)

  - [EntGo](https://entgo.io/)

  - [go-zero](https://github.com/zeromicro/go-zero) e.g. (microservice system),
  (fully compatible with net/http), (middlewares are supported), ...

  or [really relativetime?? Why not monotonic
  time??](https://github.com/zeromicro/go-zero/blob/master/core/timex/relativetime.go)



  ## Code style

  [Read more here](./BEST-PRACTICE.md)
rapi-doc/RapiDoc: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:7601:20D4534:34EF8E2:66148FE7.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
python-openapi/openapi-core: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280B:1D25BE:233A80A:3901C8D:66149087.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
python-openapi/openapi-spec-validator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280D:1D1670:22A1CDF:377A990:66149087.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
spec-first/connexion: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2807:A4E47:B80E2DA:11CE1291:66149224.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
GeniusesGroup/memar-go: >
  # Memar - Golang version   

  [![GoDoc](https://pkg.go.dev/badge/github.com/GeniusesGroup/memar-go)](https://pkg.go.dev/github.com/GeniusesGroup/memar-go)

  [![Go
  Report](https://goreportcard.com/badge/github.com/GeniusesGroup/memar-go)](https://goreportcard.com/report/github.com/GeniusesGroup/memar-go)


  `Memar` as a `Go language library` is a repository wrapper to store all
  implementation of [Memar](https://github.com/GeniusesGroup/memar) and others
  protocols and algorithms to make a digital software more easily in better
  performance.

  You can use all packages exported APIs, go generator mechanism or by [library
  commands](#commands-cla) to access some useful APIs from command line easily.


  If you want to get insight about memar, You MUST start reading interfaces in
  [protocol package](./protocol/).


  ## Installation

  - Make project directory and suggest use your internet domain name for it.

  - initialize project version control. If you use git run `git init` or `git
  clone ${repository path}`.

  - init go project by `go mod init`

  - add `memar` to your project dependency

  - install `memar` with `lang_eng` or your desire language

  - initialize the project with desire domain e.g. `google.com`

  - Complete manifest in main package.

  - Add other data to main package if needed.

  - Implement protocols logic by autogenerate some codes not write them
  manually.

  - build your organization app with desire tags and target OS and hardwares.

  - run your desire version from /bin/ directory. Strongly suggest run app by
  systemd on linux or other app manager on other OS.


  or easily run the following command under your project, just replace your
  domain name.

  ```

  mkdir {domain}

  git init

  go mod init

  go get -u github.com/GeniusesGroup/memar-go

  go install github.com/GeniusesGroup/memar-go -tags "lang_eng"

  memar app init -d={domain}

  memar app build

  ```


  ## Commands (CLA)

  memar has a the command-line client for the some generator APIs implement in
  [modules](./modules/). It provides simple access to all APIs functions to make
  an application, a GUI app, ....


  You can get list of all commands and their helps with `memar help`. We just
  list some of important commands here that you can run them from within a Go
  module or any where in your project directory:

  - **Initialize a project:** `memar app init -idn=[internet-domain-name]`

  - **Add new domain module:** `memar mod new -dn=[domain-name]`

  - **Build the apps(os images):** `memar app build`

  - **Run the app(os image):** `memar app run`


  ## Build tags

  - **dev_mode**: first check and change `AppMode_Dev` const in protocol package
  to desire behavior

  - **tcp_listener**:


  ## Code style

  [Read more here](./BEST-PRACTICE.md)


  ## Contribution Guide

  - [Referencing issues](https://go.dev/doc/contribute#ref_issues)
oas-tools/oas-tools: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BEA21F1:128AC991:66148F66.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
abersheeran/kui: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2811:342B:AF206C2:10FFA2D5:6614891C.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
oas-tools/oas-generator: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2817:342B:B04898A:111BAE95:66148F47.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
data-fair/data-fair: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  280B:1D25BE:225AB44:37AB59A:66148B3B.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
data-fair/openapi-viewer: >-
  {"message":"API rate limit exceeded for 20.172.24.211. (But here's the good
  news: Authenticated requests get a higher rate limit. Check out the
  documentation for more details.) If you reach out to GitHub Support for help,
  please include the request ID
  2801:09A3:BDD58A4:1277958F:66148B5A.","documentation_url":"https://docs.github.com/rest/overview/rate-limits-for-the-rest-api"}
